{ *********************************************************** }
{ }
{ CodeGear Delphi Runtime Library }
{ }
{ Copyright(c) 2012-2014 Embarcadero Technologies, Inc. }
{ }
{ *********************************************************** }

//
// Delphi-Objective-C Bridge
// Interfaces for Cocoa framework Accelerate
//

unit iOSapi.Accelerate;

interface

uses
  Macapi.CoreFoundation,
  Macapi.CoreServices,
  Macapi.Dispatch,
  Macapi.Mach,
  Macapi.ObjCRuntime,
  Macapi.ObjectiveC,
  iOSapi.CocoaTypes,
  iOSapi.CoreGraphics,
  iOSapi.CoreVideo,
  iOSapi.Foundation;

const
  kFFTDirection_Forward = +1;
  kFFTDirection_Inverse = -1;
  kFFTRadix2 = 0;
  kFFTRadix3 = 1;
  kFFTRadix5 = 2;
  vDSP_HALF_WINDOW = 1;
  vDSP_HANN_DENORM = 0;
  vDSP_HANN_NORM = 2;
  vDSP_DFT_FORWARD = +1;
  vDSP_DFT_INVERSE = -1;
  vDSP_DFT_Interleaved_ComplextoComplex = 0;
  vDSP_DFT_Interleaved_RealtoComplex = 1;
  vDSP_DCT_II = 2;
  vDSP_DCT_III = 3;
  vDSP_DCT_IV = 4;
  FFT_FORWARD = kFFTDirection_Forward;
  FFT_INVERSE = kFFTDirection_Inverse;
  FFT_RADIX2 = kFFTRadix2;
  FFT_RADIX3 = kFFTRadix3;
  FFT_RADIX5 = kFFTRadix5;
  CblasRowMajor = 101;
  CblasColMajor = 102;
  CblasNoTrans = 111;
  CblasTrans = 112;
  CblasConjTrans = 113;
  AtlasConj = 114;
  CblasUpper = 121;
  CblasLower = 122;
  CblasNonUnit = 131;
  CblasUnit = 132;
  CblasLeft = 141;
  CblasRight = 142;
  SPARSE_SUCCESS = 0;
  SPARSE_ILLEGAL_PARAMETER = -1000;
  SPARSE_CANNOT_SET_PROPERTY = -1001;
  SPARSE_SYSTEM_ERROR = -1002;
  SPARSE_UPPER_TRIANGULAR = 1;
  SPARSE_LOWER_TRIANGULAR = 2;
  SPARSE_UPPER_SYMMETRIC = 4;
  SPARSE_LOWER_SYMMETRIC = 8;
  SPARSE_NORM_ONE = 171;
  SPARSE_NORM_TWO = 173;
  SPARSE_NORM_INF = 175;
  SPARSE_NORM_R1 = 179;
  SparseOrdinary = 0;
  SparseTriangular = 1;
  SparseUnitTriangular = 2;
  SparseSymmetric = 3;
  SparseUpperTriangle = 0;
  SparseLowerTriangle = 1;
  SparseStatusOK = 0;
  SparseFactorizationFailed = -1;
  SparseMatrixIsSingular = -2;
  SparseInternalError = -3;
  SparseParameterError = -4;
  SparseStatusReleased = -2147483647;
  SparseFactorizationCholesky = 0;
  SparseFactorizationLDLT = 1;
  SparseFactorizationLDLTUnpivoted = 2;
  SparseFactorizationLDLTSBK = 3;
  SparseFactorizationLDLTTPP = 4;
  SparseFactorizationQR = 40;
  SparseFactorizationCholeskyAtA = 41;
  SparseDefaultControl = 0;
  SparseOrderDefault = 0;
  SparseOrderUser = 1;
  SparseOrderAMD = 2;
  SparseOrderMetis = 3;
  SparseOrderCOLAMD = 4;
  SparseScalingDefault = 0;
  SparseScalingUser = 1;
  SparseScalingEquilibriationInf = 2;
  SparseSubfactorInvalid = 0;
  SparseSubfactorP = 1;
  SparseSubfactorS = 2;
  SparseSubfactorL = 3;
  SparseSubfactorD = 4;
  SparseSubfactorPLPS = 5;
  SparseSubfactorQ = 6;
  SparseSubfactorR = 7;
  SparseSubfactorRP = 8;
  SparsePreconditionerNone = 0;
  SparsePreconditionerUser = 1;
  SparsePreconditionerDiagonal = 2;
  SparsePreconditionerDiagScaling = 3;
  SparseIterativeConverged = 0;
  SparseIterativeMaxIterations = 1;
  SparseIterativeParameterError = -1;
  SparseIterativeIllConditioned = -2;
  SparseIterativeInternalError = -99;
  SparseVariantDQGMRES = 0;
  SparseVariantGMRES = 1;
  SparseVariantFGMRES = 2;
  SparseLSMRCTDefault = 0;
  SparseLSMRCTFongSaunders = 1;
  _SparseMethodCG = 0;
  _SparseMethodGMRES = 1;
  _SparseMethodLSMR = 2;
  QUADRATURE_SUCCESS = 0;
  QUADRATURE_ERROR = -1;
  QUADRATURE_INVALID_ARG_ERROR = -2;
  QUADRATURE_ALLOC_ERROR = -3;
  QUADRATURE_INTERNAL_ERROR = -99;
  QUADRATURE_INTEGRATE_MAX_EVAL_ERROR = -101;
  QUADRATURE_INTEGRATE_BAD_BEHAVIOUR_ERROR = -102;
  QUADRATURE_INTEGRATE_QNG = 0;
  QUADRATURE_INTEGRATE_QAG = 1;
  QUADRATURE_INTEGRATE_QAGS = 2;
  BNNSDataTypeFloatBit = 65536;
  BNNSDataTypeFloat16 = BNNSDataTypeFloatBit or 16;
  BNNSDataTypeFloat32 = BNNSDataTypeFloatBit or 32;
  BNNSDataTypeBFloat16 = BNNSDataTypeFloatBit or 32768 or 16;
  BNNSDataTypeIntBit = 131072;
  BNNSDataTypeInt1 = BNNSDataTypeIntBit or 1;
  BNNSDataTypeInt2 = BNNSDataTypeIntBit or 2;
  BNNSDataTypeInt4 = BNNSDataTypeIntBit or 4;
  BNNSDataTypeInt8 = BNNSDataTypeIntBit or 8;
  BNNSDataTypeInt16 = BNNSDataTypeIntBit or 16;
  BNNSDataTypeInt32 = BNNSDataTypeIntBit or 32;
  BNNSDataTypeInt64 = BNNSDataTypeIntBit or 64;
  BNNSDataTypeUIntBit = 262144;
  BNNSDataTypeUInt1 = BNNSDataTypeUIntBit or 1;
  BNNSDataTypeUInt2 = BNNSDataTypeUIntBit or 2;
  BNNSDataTypeUInt4 = BNNSDataTypeUIntBit or 4;
  BNNSDataTypeUInt8 = BNNSDataTypeUIntBit or 8;
  BNNSDataTypeUInt16 = BNNSDataTypeUIntBit or 16;
  BNNSDataTypeUInt32 = BNNSDataTypeUIntBit or 32;
  BNNSDataTypeUInt64 = BNNSDataTypeUIntBit or 64;
  BNNSDataTypeIndexedBit = 524288;
  BNNSDataTypeIndexed1 = BNNSDataTypeIndexedBit or 1;
  BNNSDataTypeIndexed2 = BNNSDataTypeIndexedBit or 2;
  BNNSDataTypeIndexed4 = BNNSDataTypeIndexedBit or 4;
  BNNSDataTypeIndexed8 = BNNSDataTypeIndexedBit or 8;
  BNNSDataTypeMiscellaneousBit = 1048576;
  BNNSDataTypeBoolean = BNNSDataTypeMiscellaneousBit or 8;
  BNNSPoolingFunctionMax = 0;
  BNNSPoolingFunctionAverageCountIncludePadding = 1;
  BNNSPoolingFunctionAverageCountExcludePadding = 2;
  BNNSPoolingFunctionUnMax = 3;
  BNNSPoolingFunctionL2Norm = 4;
  BNNSPoolingFunctionAverage = BNNSPoolingFunctionAverageCountIncludePadding;
  BNNSActivationFunctionIdentity = 0;
  BNNSActivationFunctionRectifiedLinear = 1;
  BNNSActivationFunctionLeakyRectifiedLinear = 2;
  BNNSActivationFunctionSigmoid = 3;
  BNNSActivationFunctionTanh = 4;
  BNNSActivationFunctionScaledTanh = 5;
  BNNSActivationFunctionAbs = 6;
  BNNSActivationFunctionLinear = 7;
  BNNSActivationFunctionClamp = 8;
  BNNSActivationFunctionIntegerLinearSaturate = 9;
  BNNSActivationFunctionIntegerLinearSaturatePerChannel = 10;
  BNNSActivationFunctionSoftmax = 11;
  BNNSActivationFunctionGELUApproximation = 12;
  BNNSActivationFunctionGumbel = 13;
  BNNSActivationFunctionGumbelMax = 14;
  BNNSActivationFunctionHardSigmoid = 15;
  BNNSActivationFunctionSoftplus = 16;
  BNNSActivationFunctionSoftsign = 17;
  BNNSActivationFunctionELU = 18;
  BNNSActivationFunctionClampedLeakyRectifiedLinear = 19;
  BNNSActivationFunctionLinearWithBias = 20;
  BNNSActivationFunctionLogSoftmax = 21;
  BNNSActivationFunctionLogSigmoid = 22;
  BNNSActivationFunctionSELU = 23;
  BNNSActivationFunctionCELU = 24;
  BNNSActivationFunctionHardShrink = 25;
  BNNSActivationFunctionSoftShrink = 26;
  BNNSActivationFunctionTanhShrink = 27;
  BNNSActivationFunctionThreshold = 28;
  BNNSActivationFunctionPReLUPerChannel = 29;
  BNNSActivationFunctionGELUApproximation2 = 30;
  BNNSActivationFunctionHardSwish = BNNSActivationFunctionGELUApproximation2;
  BNNSActivationFunctionSiLU = 31;
  BNNSActivationFunctionReLU6 = 32;
  BNNSActivationFunctionErf = 33;
  BNNSActivationFunctionGELU = 34;
  BNNSActivationFunctionGELUApproximationSigmoid = 35;
  BNNSFlagsUseClientPtr = 1;
  BNNSLossFunctionSoftmaxCrossEntropy = 1;
  BNNSLossFunctionSigmoidCrossEntropy = 2;
  BNNSLossFunctionMeanSquareError = 3;
  BNNSLossFunctionHuber = 4;
  BNNSLossFunctionYolo = 5;
  BNNSLossFunctionLog = 6;
  BNNSLossFunctionCosineDistance = 7;
  BNNSLossFunctionHinge = 8;
  BNNSLossFunctionMeanAbsoluteError = 9;
  BNNSLossFunctionCategoricalCrossEntropy = 10;
  BNNSLossReductionNone = 0;
  BNNSLossReductionSum = 1;
  BNNSLossReductionWeightedMean = 2;
  BNNSLossReductionMean = 3;
  BNNSLossReductionNonZeroWeightMean = 4;
  BNNSArithmeticAdd = 0;
  BNNSArithmeticSubtract = 1;
  BNNSArithmeticMultiply = 2;
  BNNSArithmeticDivide = 3;
  BNNSArithmeticSquareRoot = 4;
  BNNSArithmeticReciprocalSquareRoot = 5;
  BNNSArithmeticCeil = 6;
  BNNSArithmeticFloor = 7;
  BNNSArithmeticRound = 8;
  BNNSArithmeticSin = 9;
  BNNSArithmeticCos = 10;
  BNNSArithmeticTan = 11;
  BNNSArithmeticAsin = 12;
  BNNSArithmeticAcos = 13;
  BNNSArithmeticAtan = 14;
  BNNSArithmeticSinh = 15;
  BNNSArithmeticCosh = 16;
  BNNSArithmeticTanh = 17;
  BNNSArithmeticAsinh = 18;
  BNNSArithmeticAcosh = 19;
  BNNSArithmeticAtanh = 20;
  BNNSArithmeticPow = 21;
  BNNSArithmeticExp = 22;
  BNNSArithmeticExp2 = 23;
  BNNSArithmeticLog = 24;
  BNNSArithmeticLog2 = 25;
  BNNSArithmeticMultiplyNoNaN = 26;
  BNNSArithmeticDivideNoNaN = 27;
  BNNSArithmeticMultiplyAdd = 28;
  BNNSArithmeticMinimum = 29;
  BNNSArithmeticMaximum = 30;
  BNNSArithmeticSelect = 31;
  BNNSArithmeticAbs = 32;
  BNNSArithmeticSign = 33;
  BNNSArithmeticNegate = 34;
  BNNSArithmeticReciprocal = 35;
  BNNSArithmeticSquare = 36;
  BNNSArithmeticFloorDivide = 37;
  BNNSArithmeticTruncDivide = 38;
  BNNSArithmeticTruncRemainder = 39;
  BNNSArithmeticErf = 40;
  BNNSConstant = 0;
  BNNSSample = 1;
  BNNSParameter = 2;
  BNNSOptimizerFunctionSGDMomentum = 1;
  BNNSOptimizerFunctionAdam = 2;
  BNNSOptimizerFunctionRMSProp = 3;
  BNNSOptimizerFunctionAdamW = 4;
  BNNSOptimizerFunctionAdamAMSGrad = 5;
  BNNSOptimizerFunctionAdamWAMSGrad = 6;
  BNNSOptimizerFunctionSGDMomentumWithClipping = 7;
  BNNSOptimizerFunctionAdamWithClipping = 8;
  BNNSOptimizerFunctionRMSPropWithClipping = 9;
  BNNSOptimizerFunctionAdamWWithClipping = 10;
  BNNSOptimizerFunctionAdamAMSGradWithClipping = 11;
  BNNSOptimizerFunctionAdamWAMSGradWithClipping = 12;
  BNNSOptimizerRegularizationNone = 0;
  BNNSOptimizerRegularizationL1 = 1;
  BNNSOptimizerRegularizationL2 = 2;
  BNNSSGDMomentumVariant0 = 0;
  BNNSSGDMomentumVariant1 = 1;
  BNNSSGDMomentumVariant2 = 2;
  BNNSOptimizerClippingNone = 0;
  BNNSOptimizerClippingByValue = 1;
  BNNSOptimizerClippingByNorm = 2;
  BNNSOptimizerClippingByGlobalNorm = 3;
  BNNSL2Norm = 1;
  BNNSConvolution = 0;
  BNNSFullyConnected = 1;
  BNNSBatchNorm = 2;
  BNNSInstanceNorm = 3;
  BNNSLayerNorm = 4;
  BNNSGroupNorm = 5;
  BNNSTransposedConvolution = 6;
  BNNSQuantization = 7;
  BNNSArithmetic = 8;
  BNNSReduceFunctionMax = 0;
  BNNSReduceFunctionMin = 1;
  BNNSReduceFunctionArgMax = 2;
  BNNSReduceFunctionArgMin = 3;
  BNNSReduceFunctionMean = 4;
  BNNSReduceFunctionMeanNonZero = 5;
  BNNSReduceFunctionSum = 6;
  BNNSReduceFunctionSumSquare = 7;
  BNNSReduceFunctionSumLog = 8;
  BNNSReduceFunctionL1Norm = 9;
  BNNSReduceFunctionLogicalOr = 10;
  BNNSReduceFunctionLogicalAnd = 11;
  BNNSReduceFunctionL2Norm = 12;
  BNNSReduceFunctionLogSumExp = 13;
  BNNSReduceFunctionProduct = 14;
  BNNSReduceFunctionNone = 15;
  BNNSReduceFunctionLogSum = 16;
  BNNSReduceFunctionAny = BNNSReduceFunctionLogicalOr;
  BNNSReduceFunctionAll = BNNSReduceFunctionLogicalAnd;
  BNNSLayerFlagsLSTMBidirectional = 1;
  BNNSLayerFlagsLSTMDefaultActivations = 2;
  BNNSDataLayoutVector = 65536;
  BNNSDataLayout1DLastMajor = 98304;
  BNNSDataLayout1DFirstMajor = 98305;
  BNNSDataLayoutRowMajorMatrix = 131072;
  BNNSDataLayoutColumnMajorMatrix = 131073;
  BNNSDataLayout2DLastMajor = 163840;
  BNNSDataLayout2DFirstMajor = 163841;
  BNNSDataLayoutFullyConnectedSparse = 135169;
  BNNSDataLayoutImageCHW = 196608;
  BNNSDataLayoutSNE = 196609;
  BNNSDataLayoutNSE = 196610;
  BNNSDataLayoutMHA_DHK = 196611;
  BNNSDataLayout3DLastMajor = 229376;
  BNNSDataLayout3DFirstMajor = 229377;
  BNNSDataLayoutConvolutionWeightsOIHW = 262144;
  BNNSDataLayoutConvolutionWeightsOIHrWr = 262145;
  BNNSDataLayoutConvolutionWeightsIOHrWr = 262146;
  BNNSDataLayoutConvolutionWeightsOIHW_Pack32 = 262160;
  BNNSDataLayout4DLastMajor = 294912;
  BNNSDataLayout4DFirstMajor = 294913;
  BNNSDataLayout5DLastMajor = 360448;
  BNNSDataLayout5DFirstMajor = 360449;
  BNNSDataLayout6DLastMajor = 425984;
  BNNSDataLayout6DFirstMajor = 425985;
  BNNSDataLayout7DLastMajor = 491520;
  BNNSDataLayout7DFirstMajor = 491521;
  BNNSDataLayout8DLastMajor = 557056;
  BNNSDataLayout8DFirstMajor = 557057;
  BNNSInterpolationMethodNearest = 0;
  BNNSInterpolationMethodLinear = 1;
  BNNSLinearSamplingDefault = 0;
  BNNSLinearSamplingAlignCorners = 1;
  BNNSLinearSamplingUnalignCorners = 2;
  BNNSLinearSamplingStrictAlignCorners = 3;
  BNNSLinearSamplingOffsetCorners = 4;
  BNNSCornersHeightFirst = 0;
  BNNSCornersWidthFirst = 1;
  BNNSCenterSizeHeightFirst = 2;
  BNNSCenterSizeWidthFirst = 3;
  BNNSPaddingModeConstant = 0;
  BNNSPaddingModeReflect = 1;
  BNNSPaddingModeSymmetric = 2;
  BNNSRelationalOperatorEqual = 0;
  BNNSRelationalOperatorLess = 1;
  BNNSRelationalOperatorLessEqual = 2;
  BNNSRelationalOperatorGreater = 3;
  BNNSRelationalOperatorGreaterEqual = 4;
  BNNSRelationalOperatorNotEqual = 5;
  BNNSRelationalOperatorLogicalAND = 6;
  BNNSRelationalOperatorLogicalOR = 7;
  BNNSRelationalOperatorLogicalNOT = 8;
  BNNSRelationalOperatorLogicalNAND = 9;
  BNNSRelationalOperatorLogicalNOR = 10;
  BNNSRelationalOperatorLogicalXOR = 11;
  BNNSPointerSpecifierAlpha = 0;
  BNNSPointerSpecifierBeta = 1;
  BNNSNDArrayFlagBackpropSet = 0;
  BNNSNDArrayFlagBackpropAccumulate = 1;
  BNNSEmbeddingFlagScaleGradientByFrequency = 1;
  BNNSQuantizerFunctionQuantize = 0;
  BNNSQuantizerFunctionDequantize = 1;
  BNNSRandomGeneratorMethodAES_CTR = 0;
  BNNSSparsityTypeUnstructured = 0;
  BNNSTargetSystemGeneric = 0;
  BNNSShuffleTypePixelShuffleNCHW = 0;
  BNNSShuffleTypePixelUnshuffleNCHW = 1;
  BNNSShuffleTypeDepthToSpaceNCHW = 2;
  BNNSShuffleTypeSpaceToDepthNCHW = 3;
  kvImageInterpolationNearest = 0;
  kvImageInterpolationLinear = 1;
  kvImageNoError = 0;
  kvImageRoiLargerThanInputBuffer = -21766;
  kvImageInvalidKernelSize = -21767;
  kvImageInvalidEdgeStyle = -21768;
  kvImageInvalidOffset_X = -21769;
  kvImageInvalidOffset_Y = -21770;
  kvImageMemoryAllocationError = -21771;
  kvImageNullPointerArgument = -21772;
  kvImageInvalidParameter = -21773;
  kvImageBufferSizeMismatch = -21774;
  kvImageUnknownFlagsBit = -21775;
  kvImageInternalError = -21776;
  kvImageInvalidRowBytes = -21777;
  kvImageInvalidImageFormat = -21778;
  kvImageColorSyncIsAbsent = -21779;
  kvImageOutOfPlaceOperationRequired = -21780;
  kvImageInvalidImageObject = -21781;
  kvImageInvalidCVImageFormat = -21782;
  kvImageUnsupportedConversion = -21783;
  kvImageCoreVideoIsAbsent = -21784;
  kvImageNoFlags = 0;
  kvImageLeaveAlphaUnchanged = 1;
  kvImageCopyInPlace = 2;
  kvImageBackgroundColorFill = 4;
  kvImageEdgeExtend = 8;
  kvImageDoNotTile = 16;
  kvImageHighQualityResampling = 32;
  kvImageTruncateKernel = 64;
  kvImageGetTempBufferSize = 128;
  kvImagePrintDiagnosticsToConsole = 256;
  kvImageNoAllocate = 512;
  kvImageHDRContent = 1024;
  kvImageDoNotClamp = 2048;
  kvImageUseFP16Accumulator = 4096;
  kvImageARGB8888 = 0;
  kvImageARGB16U = 1;
  kvImageARGB16Q12 = 2;
  kvImage422CbYpCrYp8 = 0;
  kvImage422YpCbYpCr8 = 1;
  kvImage422CbYpCrYp8_AA8 = 2;
  kvImage420Yp8_Cb8_Cr8 = 3;
  kvImage420Yp8_CbCr8 = 4;
  kvImage444AYpCbCr8 = 5;
  kvImage444CrYpCb8 = 6;
  kvImage444CbYpCrA8 = 7;
  kvImage444CrYpCb10 = 8;
  kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10 = 9;
  kvImage422CbYpCrYp16 = 13;
  kvImage444AYpCbCr16 = 14;
  kvImageConvert_DitherNone = 0;
  kvImageConvert_DitherOrdered = 1;
  kvImageConvert_DitherOrderedReproducible = 2;
  kvImageConvert_DitherFloydSteinberg = 3;
  kvImageConvert_DitherAtkinson = 4;
  kvImageConvert_OrderedGaussianBlue = 0;
  kvImageConvert_OrderedUniformBlue = (1 shl 28);
  kvImageConvert_OrderedNoiseShapeMask = (15 shl 28);
  kRotate0DegreesClockwise = 0;
  kRotate90DegreesClockwise = 3;
  kRotate180DegreesClockwise = 2;
  kRotate270DegreesClockwise = 1;
  kRotate0DegreesCounterClockwise = 0;
  kRotate90DegreesCounterClockwise = 1;
  kRotate180DegreesCounterClockwise = 2;
  kRotate270DegreesCounterClockwise = 3;
  kvImage_PNG_FILTER_VALUE_NONE = 0;
  kvImage_PNG_FILTER_VALUE_SUB = 1;
  kvImage_PNG_FILTER_VALUE_UP = 2;
  kvImage_PNG_FILTER_VALUE_AVG = 3;
  kvImage_PNG_FILTER_VALUE_PAETH = 4;
  kvImageGamma_UseGammaValue = 0;
  kvImageGamma_UseGammaValue_half_precision = 1;
  kvImageGamma_5_over_9_half_precision = 2;
  kvImageGamma_9_over_5_half_precision = 3;
  kvImageGamma_5_over_11_half_precision = 4;
  kvImageGamma_11_over_5_half_precision = 5;
  kvImageGamma_sRGB_forward_half_precision = 6;
  kvImageGamma_sRGB_reverse_half_precision = 7;
  kvImageGamma_11_over_9_half_precision = 8;
  kvImageGamma_9_over_11_half_precision = 9;
  kvImageGamma_BT709_forward_half_precision = 10;
  kvImageGamma_BT709_reverse_half_precision = 11;
  kvImageMDTableHint_16Q12 = 1;
  kvImageMDTableHint_Float = 2;
  kvImageNoInterpolation = 0;
  kvImageFullInterpolation = 1;
  kvImageHalfInterpolation = 2;
  kvImageBufferTypeCode_EndOfList = 0;
  kvImageBufferTypeCode_ColorSpaceChannel1 = 1;
  kvImageBufferTypeCode_ColorSpaceChannel2 = 2;
  kvImageBufferTypeCode_ColorSpaceChannel3 = 3;
  kvImageBufferTypeCode_ColorSpaceChannel4 = 4;
  kvImageBufferTypeCode_ColorSpaceChannel5 = 5;
  kvImageBufferTypeCode_ColorSpaceChannel6 = 6;
  kvImageBufferTypeCode_ColorSpaceChannel7 = 7;
  kvImageBufferTypeCode_ColorSpaceChannel8 = 8;
  kvImageBufferTypeCode_ColorSpaceChannel9 = 9;
  kvImageBufferTypeCode_ColorSpaceChannel10 = 10;
  kvImageBufferTypeCode_ColorSpaceChannel11 = 11;
  kvImageBufferTypeCode_ColorSpaceChannel12 = 12;
  kvImageBufferTypeCode_ColorSpaceChannel13 = 13;
  kvImageBufferTypeCode_ColorSpaceChannel14 = 14;
  kvImageBufferTypeCode_ColorSpaceChannel15 = 15;
  kvImageBufferTypeCode_ColorSpaceChannel16 = 16;
  kvImageBufferTypeCode_Alpha = 17;
  kvImageBufferTypeCode_Indexed = 18;
  kvImageBufferTypeCode_CVPixelBuffer_YCbCr = 19;
  kvImageBufferTypeCode_Luminance = 20;
  kvImageBufferTypeCode_Chroma = 21;
  kvImageBufferTypeCode_Cb = 22;
  kvImageBufferTypeCode_Cr = 23;
  kvImageBufferTypeCode_CGFormat = 24;
  kvImageBufferTypeCode_Chunky = 25;
  kvImageBufferTypeCode_UniqueFormatCount = 26;
  kvImageBufferTypeCode_Monochrome = kvImageBufferTypeCode_ColorSpaceChannel1;
  kvImageBufferTypeCode_RGB_Red = kvImageBufferTypeCode_ColorSpaceChannel1;
  kvImageBufferTypeCode_RGB_Green = kvImageBufferTypeCode_ColorSpaceChannel2;
  kvImageBufferTypeCode_RGB_Blue = kvImageBufferTypeCode_ColorSpaceChannel3;
  kvImageBufferTypeCode_CMYK_Cyan = kvImageBufferTypeCode_ColorSpaceChannel1;
  kvImageBufferTypeCode_CMYK_Magenta = kvImageBufferTypeCode_ColorSpaceChannel2;
  kvImageBufferTypeCode_CMYK_Yellow = kvImageBufferTypeCode_ColorSpaceChannel3;
  kvImageBufferTypeCode_CMYK_Black = kvImageBufferTypeCode_ColorSpaceChannel4;
  kvImageBufferTypeCode_XYZ_X = kvImageBufferTypeCode_ColorSpaceChannel1;
  kvImageBufferTypeCode_XYZ_Y = kvImageBufferTypeCode_ColorSpaceChannel2;
  kvImageBufferTypeCode_XYZ_Z = kvImageBufferTypeCode_ColorSpaceChannel3;
  kvImageBufferTypeCode_LAB_L = kvImageBufferTypeCode_ColorSpaceChannel1;
  kvImageBufferTypeCode_LAB_A = kvImageBufferTypeCode_ColorSpaceChannel2;
  kvImageBufferTypeCode_LAB_B = kvImageBufferTypeCode_ColorSpaceChannel3;
  kvImageCVImageFormat_NoError = 0;
  kvImageCVImageFormat_ConversionMatrix = -21600;
  kvImageCVImageFormat_ChromaSiting = -21601;
  kvImageCVImageFormat_ColorSpace = -21602;
  kvImageCVImageFormat_VideoChannelDescription = -21603;
  kvImageCVImageFormat_AlphaIsOneHint = -21604;
  kvImageMatrixType_None = 0;
  kvImageMatrixType_ARGBToYpCbCrMatrix = 1;

type
  // ===== Framework typedefs =====
{$M+}
  vUInt8 = array [0 .. 15] of Byte { Type::Vector };
  PvUInt8 = ^vUInt8;
  vSInt8 = array [0 .. 15] of Byte { Type::Vector };
  PvSInt8 = ^vSInt8;
  vUInt16 = array [0 .. 15] of Byte { Type::Vector };
  PvUInt16 = ^vUInt16;
  vSInt16 = array [0 .. 15] of Byte { Type::Vector };
  PvSInt16 = ^vSInt16;
  vUInt32 = array [0 .. 15] of Byte { Type::Vector };
  PvUInt32 = ^vUInt32;
  vSInt32 = array [0 .. 15] of Byte { Type::Vector };
  PvSInt32 = ^vSInt32;
  vSInt64 = array [0 .. 15] of Byte { Type::Vector };
  PvSInt64 = ^vSInt64;
  vUInt64 = array [0 .. 15] of Byte { Type::Vector };
  PvUInt64 = ^vUInt64;
  vFloat = array [0 .. 15] of Byte { Type::Vector };
  PvFloat = ^vFloat;
  vDouble = array [0 .. 15] of Byte { Type::Vector };
  PvDouble = ^vDouble;
  vBool32 = array [0 .. 15] of Byte { Type::Vector };
  PvBool32 = ^vBool32;

  vU128 = record
    case Integer of
      0:
        (v: vUInt32);
      1:
        (v1: vUInt32;
        );
      2:
        (LSW: LongWord;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvU128 = ^vU128;

  vS128 = record
    case Integer of
      0:
        (v: vUInt32);
      1:
        (v1: vUInt32;
        );
      2:
        (LSW: Int32;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvS128 = ^vS128;

  vU256 = record
    case Integer of
      0:
        (v: array [0 .. 1] of vUInt32);
      1:
        (v2: vUInt32;
          v1: vUInt32;
        );
      2:
        (LSW: LongWord;
          d7: LongWord;
          d6: LongWord;
          d5: LongWord;
          d4: LongWord;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvU256 = ^vU256;

  vS256 = record
    case Integer of
      0:
        (v: array [0 .. 1] of vUInt32);
      1:
        (v2: vUInt32;
          v1: vUInt32;
        );
      2:
        (LSW: Int32;
          d7: LongWord;
          d6: LongWord;
          d5: LongWord;
          d4: LongWord;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvS256 = ^vS256;

  vU512 = record
    case Integer of
      0:
        (v: array [0 .. 3] of vUInt32);
      1:
        (v4: vUInt32;
          v3: vUInt32;
          v2: vUInt32;
          v1: vUInt32;
        );
      2:
        (LSW: LongWord;
          d15: LongWord;
          d14: LongWord;
          d13: LongWord;
          d12: LongWord;
          d11: LongWord;
          d10: LongWord;
          d9: LongWord;
          d8: LongWord;
          d7: LongWord;
          d6: LongWord;
          d5: LongWord;
          d4: LongWord;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvU512 = ^vU512;

  vS512 = record
    case Integer of
      0:
        (v: array [0 .. 3] of vUInt32);
      1:
        (v4: vUInt32;
          v3: vUInt32;
          v2: vUInt32;
          v1: vUInt32;
        );
      2:
        (LSW: Int32;
          d15: LongWord;
          d14: LongWord;
          d13: LongWord;
          d12: LongWord;
          d11: LongWord;
          d10: LongWord;
          d9: LongWord;
          d8: LongWord;
          d7: LongWord;
          d6: LongWord;
          d5: LongWord;
          d4: LongWord;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvS512 = ^vS512;

  vU1024 = record
    case Integer of
      0:
        (v: array [0 .. 7] of vUInt32);
      1:
        (v8: vUInt32;
          v7: vUInt32;
          v6: vUInt32;
          v5: vUInt32;
          v4: vUInt32;
          v3: vUInt32;
          v2: vUInt32;
          v1: vUInt32;
        );
      2:
        (LSW: LongWord;
          d31: LongWord;
          d30: LongWord;
          d29: LongWord;
          d28: LongWord;
          d27: LongWord;
          d26: LongWord;
          d25: LongWord;
          d24: LongWord;
          d23: LongWord;
          d22: LongWord;
          d21: LongWord;
          d20: LongWord;
          d19: LongWord;
          d18: LongWord;
          d17: LongWord;
          d16: LongWord;
          d15: LongWord;
          d14: LongWord;
          d13: LongWord;
          d12: LongWord;
          d11: LongWord;
          d10: LongWord;
          d9: LongWord;
          d8: LongWord;
          d7: LongWord;
          d6: LongWord;
          d5: LongWord;
          d4: LongWord;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvU1024 = ^vU1024;

  vS1024 = record
    case Integer of
      0:
        (v: array [0 .. 7] of vUInt32);
      1:
        (v8: vUInt32;
          v7: vUInt32;
          v6: vUInt32;
          v5: vUInt32;
          v4: vUInt32;
          v3: vUInt32;
          v2: vUInt32;
          v1: vUInt32;
        );
      2:
        (LSW: Int32;
          d31: LongWord;
          d30: LongWord;
          d29: LongWord;
          d28: LongWord;
          d27: LongWord;
          d26: LongWord;
          d25: LongWord;
          d24: LongWord;
          d23: LongWord;
          d22: LongWord;
          d21: LongWord;
          d20: LongWord;
          d19: LongWord;
          d18: LongWord;
          d17: LongWord;
          d16: LongWord;
          d15: LongWord;
          d14: LongWord;
          d13: LongWord;
          d12: LongWord;
          d11: LongWord;
          d10: LongWord;
          d9: LongWord;
          d8: LongWord;
          d7: LongWord;
          d6: LongWord;
          d5: LongWord;
          d4: LongWord;
          d3: LongWord;
          d2: LongWord;
          MSW: LongWord;
        );
  end;

  PvS1024 = ^vS1024;

  vDSP_Length = LongWord;
  PvDSP_Length = ^vDSP_Length;

  vDSP_Stride = LongInt;
  PvDSP_Stride = ^vDSP_Stride;

  DSPComplex = record
    real: Single;
    imag: Single;
  end;

  PDSPComplex = ^DSPComplex;

  DSPDoubleComplex = record
    real: Double;
    imag: Double;
  end;

  PDSPDoubleComplex = ^DSPDoubleComplex;

  DSPSplitComplex = record
    realp: PSingle;
    imagp: PSingle;
  end;

  PDSPSplitComplex = ^DSPSplitComplex;

  DSPDoubleSplitComplex = record
    realp: PDouble;
    imagp: PDouble;
  end;

  PDSPDoubleSplitComplex = ^DSPDoubleSplitComplex;

  FFTDirection = Integer;
  PFFTDirection = ^FFTDirection;

  FFTRadix = Integer;
  PFFTRadix = ^FFTRadix;

  vDSP_uint24 = record
    bytes: array [0 .. 2] of Byte;
  end;

  PvDSP_uint24 = ^vDSP_uint24;

  vDSP_int24 = record
    bytes: array [0 .. 2] of Byte;
  end;

  PvDSP_int24 = ^vDSP_int24;

  FFTSetup = Pointer;
  PFFTSetup = ^FFTSetup;
  FFTSetupD = Pointer;
  PFFTSetupD = ^FFTSetupD;
  vDSP_biquad_Setup = Pointer;
  PvDSP_biquad_Setup = ^vDSP_biquad_Setup;
  vDSP_biquad_SetupD = Pointer;
  PvDSP_biquad_SetupD = ^vDSP_biquad_SetupD;
  vDSP_biquadm_Setup = Pointer;
  PvDSP_biquadm_Setup = ^vDSP_biquadm_Setup;
  vDSP_biquadm_SetupD = Pointer;
  PvDSP_biquadm_SetupD = ^vDSP_biquadm_SetupD;
  vDSP_DFT_Setup = Pointer;
  PvDSP_DFT_Setup = ^vDSP_DFT_Setup;
  vDSP_DFT_SetupD = Pointer;
  PvDSP_DFT_SetupD = ^vDSP_DFT_SetupD;
  vDSP_DFT_Direction = Integer;
  vDSP_DFT_Interleaved_Setup = Pointer;
  PvDSP_DFT_Interleaved_Setup = ^vDSP_DFT_Interleaved_Setup;
  vDSP_DFT_Interleaved_SetupD = Pointer;
  PvDSP_DFT_Interleaved_SetupD = ^vDSP_DFT_Interleaved_SetupD;
  vDSP_DFT_RealtoComplex = Integer;
  vDSP_DCT_Type = Integer;

  COMPLEX = DSPComplex;

  COMPLEX_SPLIT = DSPSplitComplex;

  DOUBLE_COMPLEX = DSPDoubleComplex;

  DOUBLE_COMPLEX_SPLIT = DSPDoubleSplitComplex;

  BLASParamErrorProc = procedure(param1: MarshaledAString;
    param2: MarshaledAString; param3: PInteger; param4: PInteger); cdecl;
  PBLASParamErrorProc = ^BLASParamErrorProc;
  __CLPK_integer = LongInt;
  P__CLPK_integer = ^__CLPK_integer;

  __CLPK_logical = LongInt;
  P__CLPK_logical = ^__CLPK_logical;

  __CLPK_real = Single;
  P__CLPK_real = ^__CLPK_real;

  __CLPK_doublereal = Double;
  P__CLPK_doublereal = ^__CLPK_doublereal;

  __CLPK_L_fp = function(): __CLPK_logical; cdecl;
  P__CLPK_L_fp = ^__CLPK_L_fp;
  __CLPK_ftnlen = LongInt;
  P__CLPK_ftnlen = ^__CLPK_ftnlen;

  __CLPK_complex = record
    r: __CLPK_real;
    i: __CLPK_real;
  end;

  P__CLPK_complex = ^__CLPK_complex;

  __CLPK_doublecomplex = record
    r: __CLPK_doublereal;
    i: __CLPK_doublereal;
  end;

  P__CLPK_doublecomplex = ^__CLPK_doublecomplex;

  la_attribute_t = LongWord;
  Pla_attribute_t = ^la_attribute_t;

  la_status_t = LongInt;
  Pla_status_t = ^la_status_t;

  la_scalar_type_t = Cardinal;
  Pla_scalar_type_t = ^la_scalar_type_t;

  la_count_t = LongWord;
  Pla_count_t = ^la_count_t;

  la_index_t = LongInt;
  Pla_index_t = ^la_index_t;

  la_deallocator_t = procedure(param1: Pointer); cdecl;
  Pla_deallocator_t = ^la_deallocator_t;
  la_object_t = Pointer;
  Pla_object_t = ^la_object_t;
  la_hint_t = LongWord;
  Pla_hint_t = ^la_hint_t;

  la_norm_t = LongWord;
  Pla_norm_t = ^la_norm_t;

  sparse_matrix_float = Pointer;
  Psparse_matrix_float = ^sparse_matrix_float;
  sparse_matrix_double = Pointer;
  Psparse_matrix_double = ^sparse_matrix_double;
  sparse_dimension = UInt64;
  Psparse_dimension = ^sparse_dimension;
  sparse_stride = Int64;
  Psparse_stride = ^sparse_stride;
  sparse_index = Int64;
  Psparse_index = ^sparse_index;
  sparse_status = Integer;
  sparse_matrix_property = Cardinal;
  sparse_norm = Cardinal;
  SparseKind_t = Cardinal;
  SparseTriangle_t = Byte;

  SparseAttributes_t = record
    transpose: Integer;
    triangle: SparseTriangle_t;
    kind: SparseKind_t;
    _reserved: Cardinal;
    _allocatedBySparse: Integer;
  end;

  PSparseAttributes_t = ^SparseAttributes_t;

  SparseMatrixStructure = record
    rowCount: Integer;
    columnCount: Integer;
    columnStarts: PLongInt;
    rowIndices: PInteger;
    attributes: SparseAttributes_t;
    blockSize: Byte;
  end;

  PSparseMatrixStructure = ^SparseMatrixStructure;

  SparseMatrix_Double = record
    structure: SparseMatrixStructure;
    data: PDouble;
  end;

  PSparseMatrix_Double = ^SparseMatrix_Double;

  SparseMatrix_Float = record
    structure: SparseMatrixStructure;
    data: PSingle;
  end;

  PSparseMatrix_Float = ^SparseMatrix_Float;

  DenseVector_Double = record
    count: Integer;
    data: PDouble;
  end;

  PDenseVector_Double = ^DenseVector_Double;

  DenseVector_Float = record
    count: Integer;
    data: PSingle;
  end;

  PDenseVector_Float = ^DenseVector_Float;

  DenseMatrix_Double = record
    rowCount: Integer;
    columnCount: Integer;
    columnStride: Integer;
    attributes: SparseAttributes_t;
    data: PDouble;
  end;

  PDenseMatrix_Double = ^DenseMatrix_Double;

  DenseMatrix_Float = record
    rowCount: Integer;
    columnCount: Integer;
    columnStride: Integer;
    attributes: SparseAttributes_t;
    data: PSingle;
  end;

  PDenseMatrix_Float = ^DenseMatrix_Float;

  SparseStatus_t = Integer;
  SparseFactorization_t = Byte;
  SparseControl_t = LongWord;
  SparseOrder_t = Byte;
  SparseScaling_t = Byte;
  __darwin_size_t = LongWord;
  P__darwin_size_t = ^__darwin_size_t;

  TAccelerateMalloc = function(param1: LongWord): Pointer; cdecl;
  TAccelerateFree = procedure(param1: Pointer); cdecl;
  TAccelerateReportError = procedure(param1: MarshaledAString); cdecl;

  SparseSymbolicFactorOptions = record
    control: SparseControl_t;
    orderMethod: SparseOrder_t;
    order: PInteger;
    ignoreRowsAndColumns: PInteger;
    malloc: TAccelerateMalloc;
    free: TAccelerateFree;
    reportError: TAccelerateReportError;
  end;

  PSparseSymbolicFactorOptions = ^SparseSymbolicFactorOptions;

  SparseNumericFactorOptions = record
    control: SparseControl_t;
    scalingMethod: SparseScaling_t;
    scaling: Pointer;
    pivotTolerance: Double;
    zeroTolerance: Double;
  end;

  PSparseNumericFactorOptions = ^SparseNumericFactorOptions;

  SparseOpaqueSymbolicFactorization = record
    status: SparseStatus_t;
    rowCount: Integer;
    columnCount: Integer;
    attributes: SparseAttributes_t;
    blockSize: Byte;
    &type: SparseFactorization_t;
    factorization: Pointer;
    workspaceSize_Float: LongWord;
    workspaceSize_Double: LongWord;
    factorSize_Float: LongWord;
    factorSize_Double: LongWord;
  end;

  PSparseOpaqueSymbolicFactorization = ^SparseOpaqueSymbolicFactorization;

  SparseOpaqueFactorization_Double = record
    status: SparseStatus_t;
    attributes: SparseAttributes_t;
    symbolicFactorization: SparseOpaqueSymbolicFactorization;
    userFactorStorage: Integer;
    numericFactorization: Pointer;
    solveWorkspaceRequiredStatic: LongWord;
    solveWorkspaceRequiredPerRHS: LongWord;
  end;

  PSparseOpaqueFactorization_Double = ^SparseOpaqueFactorization_Double;

  SparseOpaqueFactorization_Float = record
    status: SparseStatus_t;
    attributes: SparseAttributes_t;
    symbolicFactorization: SparseOpaqueSymbolicFactorization;
    userFactorStorage: Integer;
    numericFactorization: Pointer;
    solveWorkspaceRequiredStatic: LongWord;
    solveWorkspaceRequiredPerRHS: LongWord;
  end;

  PSparseOpaqueFactorization_Float = ^SparseOpaqueFactorization_Float;

  SparseSubfactor_t = Byte;

  SparseOpaqueSubfactor_Double = record
    attributes: SparseAttributes_t;
    contents: SparseSubfactor_t;
    factor: SparseOpaqueFactorization_Double;
    workspaceRequiredStatic: LongWord;
    workspaceRequiredPerRHS: LongWord;
  end;

  PSparseOpaqueSubfactor_Double = ^SparseOpaqueSubfactor_Double;

  SparseOpaqueSubfactor_Float = record
    attributes: SparseAttributes_t;
    contents: SparseSubfactor_t;
    factor: SparseOpaqueFactorization_Float;
    workspaceRequiredStatic: LongWord;
    workspaceRequiredPerRHS: LongWord;
  end;

  PSparseOpaqueSubfactor_Float = ^SparseOpaqueSubfactor_Float;

  SparsePreconditioner_t = Integer;
  TAccelerateApply = procedure(param1: Pointer; param2: Cardinal;
    param3: DenseMatrix_Double; param4: DenseMatrix_Double); cdecl;

  SparseOpaquePreconditioner_Double = record
    &type: SparsePreconditioner_t;
    mem: Pointer;
    apply: TAccelerateApply;
  end;

  PSparseOpaquePreconditioner_Double = ^SparseOpaquePreconditioner_Double;

  TAccelerateApply1 = procedure(param1: Pointer; param2: Cardinal;
    param3: DenseMatrix_Float; param4: DenseMatrix_Float); cdecl;

  SparseOpaquePreconditioner_Float = record
    &type: SparsePreconditioner_t;
    mem: Pointer;
    apply: TAccelerateApply1;
  end;

  PSparseOpaquePreconditioner_Float = ^SparseOpaquePreconditioner_Float;

  SparseIterativeStatus_t = Integer;

  SparseCGOptions = record
    reportError: TAccelerateReportError;
    maxIterations: Integer;
    atol: Double;
    rtol: Double;
    reportStatus: TAccelerateReportError;
  end;

  PSparseCGOptions = ^SparseCGOptions;

  SparseGMRESVariant_t = Byte;

  SparseGMRESOptions = record
    reportError: TAccelerateReportError;
    variant: SparseGMRESVariant_t;
    nvec: Integer;
    maxIterations: Integer;
    atol: Double;
    rtol: Double;
    reportStatus: TAccelerateReportError;
  end;

  PSparseGMRESOptions = ^SparseGMRESOptions;

  SparseLSMRConvergenceTest_t = Integer;

  SparseLSMROptions = record
    reportError: TAccelerateReportError;
    lambda: Double;
    nvec: Integer;
    convergenceTest: SparseLSMRConvergenceTest_t;
    atol: Double;
    rtol: Double;
    btol: Double;
    conditionLimit: Double;
    maxIterations: Integer;
    reportStatus: TAccelerateReportError;
  end;

  PSparseLSMROptions = ^SparseLSMROptions;

  SparseIterativeMethod = record
    method: Integer;
    case Integer of
      0:
        (_SparseIterativeMethodBaseOptions = record reportError
          : TAccelerateReportError;
        end;
          P_SparseIterativeMethodBaseOptions = ^
          _SparseIterativeMethodBaseOptions;
        );
      1:
        (cg: SparseCGOptions);
      2:
        (gmres: SparseGMRESOptions);
      3:
        (lsmr: SparseLSMROptions);
      4:
        (padding: array [0 .. 255] of Byte);

  end;

  PSparseIterativeMethod = ^SparseIterativeMethod;

  TAccelerateApplyOperator = procedure(param1: Integer; param2: Cardinal;
    param3: DenseMatrix_Double; param4: DenseMatrix_Double) of object;
  TAccelerateApplyOperator1 = procedure(param1: Integer; param2: Cardinal;
    param3: DenseMatrix_Float; param4: DenseMatrix_Float) of object;
  TAccelerateApplyOperator2 = procedure(param1: Integer; param2: Cardinal;
    param3: DenseVector_Double; param4: DenseVector_Double) of object;
  TAccelerateApplyOperator3 = procedure(param1: Integer; param2: Cardinal;
    param3: DenseVector_Float; param4: DenseVector_Float) of object;
  _SparseIterativeMethod_t = Integer;
  quadrature_status = Integer;
  quadrature_function_array = procedure(param1: Pointer; param2: LongWord;
    param3: PDouble; param4: PDouble); cdecl;
  Pquadrature_function_array = ^quadrature_function_array;
  quadrature_integrator = Cardinal;

  quadrature_integrate_function = record
    fun: quadrature_function_array;
    fun_arg: Pointer;
  end;

  Pquadrature_integrate_function = ^quadrature_integrate_function;

  quadrature_integrate_options = record
    integrator: quadrature_integrator;
    abs_tolerance: Double;
    rel_tolerance: Double;
    qag_points_per_interval: LongWord;
    max_intervals: LongWord;
  end;

  Pquadrature_integrate_options = ^quadrature_integrate_options;

  BNNSDataType = LongWord;
  BNNSPoolingFunction = LongWord;
  BNNSActivationFunction = LongWord;
  BNNSFlags = LongWord;
  BNNSLossFunction = LongWord;
  BNNSLossReductionFunction = LongWord;
  BNNSArithmeticFunction = LongWord;
  BNNSDescriptorType = LongWord;
  BNNSOptimizerFunction = LongWord;
  BNNSOptimizerRegularizationFunction = LongWord;
  BNNSOptimizerSGDMomentumVariant = LongWord;
  BNNSOptimizerClippingFunction = LongWord;
  BNNSNormType = LongWord;
  BNNSFilterType = LongWord;
  BNNSReduceFunction = LongWord;
  BNNSLayerFlags = LongWord;
  BNNSDataLayout = LongWord;
  BNNSInterpolationMethod = LongWord;
  BNNSLinearSamplingMode = LongWord;
  BNNSBoxCoordinateMode = LongWord;
  BNNSPaddingMode = LongWord;
  BNNSRelationalOperator = LongWord;
  BNNSPointerSpecifier = LongWord;
  BNNSNDArrayFlags = LongWord;
  BNNSEmbeddingFlags = LongWord;
  BNNSQuantizerFunction = LongWord;
  BNNSRandomGeneratorMethod = LongWord;
  BNNSSparsityType = LongWord;
  BNNSTargetSystem = LongWord;
  BNNSShuffleType = LongWord;
  BNNSAlloc = function(param1: Pointer; param2: LongWord; param3: LongWord)
    : Integer; cdecl;
  PBNNSAlloc = ^BNNSAlloc;
  BNNSFree = procedure(param1: Pointer); cdecl;
  PBNNSFree = ^BNNSFree;

  BNNSActivation = record
    &function: BNNSActivationFunction;
    alpha: Single;
    beta: Single;
    iscale: Int32;
    ioffset: Int32;
    ishift: Int32;
    iscale_per_channel: PLongInt;
    ioffset_per_channel: PLongInt;
    ishift_per_channel: PLongInt;
  end;

  PBNNSActivation = ^BNNSActivation;

  BNNSNDArrayDescriptor = record
    flags: BNNSNDArrayFlags;
    layout: BNNSDataLayout;
    size: array [0 .. 7] of LongWord;
    stride: array [0 .. 7] of LongWord;
    data: Pointer;
    data_type: BNNSDataType;
    table_data: Pointer;
    table_data_type: BNNSDataType;
    data_scale: Single;
    data_bias: Single;
  end;

  PBNNSNDArrayDescriptor = ^BNNSNDArrayDescriptor;

  BNNSLSTMGateDescriptor = record
    iw_desc: array [0 .. 1] of BNNSNDArrayDescriptor;
    hw_desc: BNNSNDArrayDescriptor;
    cw_desc: BNNSNDArrayDescriptor;
    b_desc: BNNSNDArrayDescriptor;
    activation: BNNSActivation;
  end;

  PBNNSLSTMGateDescriptor = ^BNNSLSTMGateDescriptor;

  BNNSLSTMDataDescriptor = record
    data_desc: BNNSNDArrayDescriptor;
    hidden_desc: BNNSNDArrayDescriptor;
    cell_state_desc: BNNSNDArrayDescriptor;
  end;

  PBNNSLSTMDataDescriptor = ^BNNSLSTMDataDescriptor;

  BNNSArithmeticUnary = record
    &in: BNNSNDArrayDescriptor;
    in_type: BNNSDescriptorType;
    out : BNNSNDArrayDescriptor;
    out_type: BNNSDescriptorType;
  end;

  PBNNSArithmeticUnary = ^BNNSArithmeticUnary;

  BNNSArithmeticBinary = record
    in1: BNNSNDArrayDescriptor;
    in1_type: BNNSDescriptorType;
    in2: BNNSNDArrayDescriptor;
    in2_type: BNNSDescriptorType;
    out : BNNSNDArrayDescriptor;
    out_type: BNNSDescriptorType;
  end;

  PBNNSArithmeticBinary = ^BNNSArithmeticBinary;

  BNNSArithmeticTernary = record
    in1: BNNSNDArrayDescriptor;
    in1_type: BNNSDescriptorType;
    in2: BNNSNDArrayDescriptor;
    in2_type: BNNSDescriptorType;
    in3: BNNSNDArrayDescriptor;
    in3_type: BNNSDescriptorType;
    out : BNNSNDArrayDescriptor;
    out_type: BNNSDescriptorType;
  end;

  PBNNSArithmeticTernary = ^BNNSArithmeticTernary;

  BNNSMHAProjectionParameters = record
    target_desc: BNNSNDArrayDescriptor;
    weights: BNNSNDArrayDescriptor;
    bias: BNNSNDArrayDescriptor;
  end;

  PBNNSMHAProjectionParameters = ^BNNSMHAProjectionParameters;

  BNNSLayerParametersConvolution = record
    i_desc: BNNSNDArrayDescriptor;
    w_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    bias: BNNSNDArrayDescriptor;
    activation: BNNSActivation;
    x_stride: LongWord;
    y_stride: LongWord;
    x_dilation_stride: LongWord;
    y_dilation_stride: LongWord;
    x_padding: LongWord;
    y_padding: LongWord;
    groups: LongWord;
    pad: array [0 .. 3] of LongWord;
  end;

  PBNNSLayerParametersConvolution = ^BNNSLayerParametersConvolution;

  BNNSLayerParametersFullyConnected = record
    i_desc: BNNSNDArrayDescriptor;
    w_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    bias: BNNSNDArrayDescriptor;
    activation: BNNSActivation;
  end;

  PBNNSLayerParametersFullyConnected = ^BNNSLayerParametersFullyConnected;

  BNNSLayerParametersPooling = record
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    bias: BNNSNDArrayDescriptor;
    activation: BNNSActivation;
    pooling_function: BNNSPoolingFunction;
    k_width: LongWord;
    k_height: LongWord;
    x_stride: LongWord;
    y_stride: LongWord;
    x_dilation_stride: LongWord;
    y_dilation_stride: LongWord;
    x_padding: LongWord;
    y_padding: LongWord;
    pad: array [0 .. 3] of LongWord;
  end;

  PBNNSLayerParametersPooling = ^BNNSLayerParametersPooling;

  BNNSLayerParametersActivation = record
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    activation: BNNSActivation;
    axis_flags: LongWord;
  end;

  PBNNSLayerParametersActivation = ^BNNSLayerParametersActivation;

  BNNSLayerParametersLossBase = record
    &function: BNNSLossFunction;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    reduction: BNNSLossReductionFunction;
  end;

  PBNNSLayerParametersLossBase = ^BNNSLayerParametersLossBase;

  BNNSLayerParametersLossSoftmaxCrossEntropy = record
    &function: BNNSLossFunction;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    reduction: BNNSLossReductionFunction;
    label_smooth: Single;
  end;

  PBNNSLayerParametersLossSoftmaxCrossEntropy = ^
    BNNSLayerParametersLossSoftmaxCrossEntropy;

  BNNSLayerParametersLossSigmoidCrossEntropy = record
    &function: BNNSLossFunction;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    reduction: BNNSLossReductionFunction;
    label_smooth: Single;
  end;

  PBNNSLayerParametersLossSigmoidCrossEntropy = ^
    BNNSLayerParametersLossSigmoidCrossEntropy;

  BNNSLayerParametersLossHuber = record
    &function: BNNSLossFunction;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    reduction: BNNSLossReductionFunction;
    huber_delta: Single;
  end;

  PBNNSLayerParametersLossHuber = ^BNNSLayerParametersLossHuber;

  BNNSLayerParametersLossYolo = record
    &function: BNNSLossFunction;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    reduction: BNNSLossReductionFunction;
    huber_delta: Single;
    number_of_grid_columns: LongWord;
    number_of_grid_rows: LongWord;
    number_of_anchor_boxes: LongWord;
    anchor_box_size: LongWord;
    rescore: Integer;
    scale_xy: Single;
    scale_wh: Single;
    scale_object: Single;
    scale_no_object: Single;
    scale_classification: Single;
    object_minimum_iou: Single;
    no_object_maximum_iou: Single;
    anchors_data: PSingle;
  end;

  PBNNSLayerParametersLossYolo = ^BNNSLayerParametersLossYolo;

  BNNSOptimizerSGDMomentumFields = record
    learning_rate: Single;
    momentum: Single;
    gradient_scale: Single;
    regularization_scale: Single;
    clip_gradients: Integer;
    clip_gradients_min: Single;
    clip_gradients_max: Single;
    nesterov: Integer;
    regularization_func: BNNSOptimizerRegularizationFunction;
    sgd_momentum_variant: BNNSOptimizerSGDMomentumVariant;
  end;

  PBNNSOptimizerSGDMomentumFields = ^BNNSOptimizerSGDMomentumFields;

  BNNSOptimizerSGDMomentumWithClippingFields = record
    learning_rate: Single;
    momentum: Single;
    gradient_scale: Single;
    regularization_scale: Single;
    nesterov: Integer;
    regularization_func: BNNSOptimizerRegularizationFunction;
    sgd_momentum_variant: BNNSOptimizerSGDMomentumVariant;
    clipping_func: BNNSOptimizerClippingFunction;
    clip_gradients_min: Single;
    clip_gradients_max: Single;
    clip_gradients_max_norm: Single;
    clip_gradients_use_norm: Single;
  end;

  PBNNSOptimizerSGDMomentumWithClippingFields = ^
    BNNSOptimizerSGDMomentumWithClippingFields;

  BNNSOptimizerAdamFields = record
    learning_rate: Single;
    beta1: Single;
    beta2: Single;
    time_step: Single;
    epsilon: Single;
    gradient_scale: Single;
    regularization_scale: Single;
    clip_gradients: Integer;
    clip_gradients_min: Single;
    clip_gradients_max: Single;
    regularization_func: BNNSOptimizerRegularizationFunction;
  end;

  PBNNSOptimizerAdamFields = ^BNNSOptimizerAdamFields;

  BNNSOptimizerAdamWithClippingFields = record
    learning_rate: Single;
    beta1: Single;
    beta2: Single;
    time_step: Single;
    epsilon: Single;
    gradient_scale: Single;
    regularization_scale: Single;
    regularization_func: BNNSOptimizerRegularizationFunction;
    clipping_func: BNNSOptimizerClippingFunction;
    clip_gradients_min: Single;
    clip_gradients_max: Single;
    clip_gradients_max_norm: Single;
    clip_gradients_use_norm: Single;
  end;

  PBNNSOptimizerAdamWithClippingFields = ^BNNSOptimizerAdamWithClippingFields;

  BNNSOptimizerRMSPropFields = record
    learning_rate: Single;
    alpha: Single;
    epsilon: Single;
    centered: Integer;
    momentum: Single;
    gradient_scale: Single;
    regularization_scale: Single;
    clip_gradients: Integer;
    clip_gradients_min: Single;
    clip_gradients_max: Single;
    regularization_func: BNNSOptimizerRegularizationFunction;
  end;

  PBNNSOptimizerRMSPropFields = ^BNNSOptimizerRMSPropFields;

  BNNSOptimizerRMSPropWithClippingFields = record
    learning_rate: Single;
    alpha: Single;
    epsilon: Single;
    centered: Integer;
    momentum: Single;
    gradient_scale: Single;
    regularization_scale: Single;
    regularization_func: BNNSOptimizerRegularizationFunction;
    clipping_func: BNNSOptimizerClippingFunction;
    clip_gradients_min: Single;
    clip_gradients_max: Single;
    clip_gradients_max_norm: Single;
    clip_gradients_use_norm: Single;
  end;

  PBNNSOptimizerRMSPropWithClippingFields = ^
    BNNSOptimizerRMSPropWithClippingFields;

  BNNSLayerParametersNormalization = record
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    beta_desc: BNNSNDArrayDescriptor;
    gamma_desc: BNNSNDArrayDescriptor;
    moving_mean_desc: BNNSNDArrayDescriptor;
    moving_variance_desc: BNNSNDArrayDescriptor;
    momentum: Single;
    epsilon: Single;
    activation: BNNSActivation;
    num_groups: LongWord;
    normalization_axis: LongWord;
  end;

  PBNNSLayerParametersNormalization = ^BNNSLayerParametersNormalization;

  BNNSLayerParametersDropout = record
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    rate: Single;
    seed: LongWord;
    control: Byte;
  end;

  PBNNSLayerParametersDropout = ^BNNSLayerParametersDropout;

  BNNSLayerParametersLSTM = record
    input_size: LongWord;
    hidden_size: LongWord;
    batch_size: LongWord;
    num_layers: LongWord;
    seq_len: LongWord;
    dropout: Single;
    lstm_flags: LongWord;
    sequence_descriptor: BNNSNDArrayDescriptor;
    input_descriptor: BNNSLSTMDataDescriptor;
    output_descriptor: BNNSLSTMDataDescriptor;
    input_gate: BNNSLSTMGateDescriptor;
    forget_gate: BNNSLSTMGateDescriptor;
    candidate_gate: BNNSLSTMGateDescriptor;
    output_gate: BNNSLSTMGateDescriptor;
    hidden_activation: BNNSActivation;
  end;

  PBNNSLayerParametersLSTM = ^BNNSLayerParametersLSTM;

  BNNSLayerParametersArithmetic = record
    arithmetic_function: BNNSArithmeticFunction;
    arithmetic_function_fields: Pointer;
    activation: BNNSActivation;
  end;

  PBNNSLayerParametersArithmetic = ^BNNSLayerParametersArithmetic;

  BNNSLayerParametersPermute = record
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    permutation: array [0 .. 7] of LongWord;
  end;

  PBNNSLayerParametersPermute = ^BNNSLayerParametersPermute;

  BNNSLayerParametersTensorContraction = record
    operation: MarshaledAString;
    alpha: Single;
    beta: Single;
    iA_desc: BNNSNDArrayDescriptor;
    iB_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
  end;

  PBNNSLayerParametersTensorContraction = ^BNNSLayerParametersTensorContraction;

  BNNSLayerParametersGram = record
    alpha: Single;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
  end;

  PBNNSLayerParametersGram = ^BNNSLayerParametersGram;

  BNNSLayerParametersResize = record
    method: BNNSInterpolationMethod;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    align_corners: Integer;
  end;

  PBNNSLayerParametersResize = ^BNNSLayerParametersResize;

  BNNSLayerParametersCropResize = record
    normalized_coordinates: Integer;
    spatial_scale: Single;
    extrapolation_value: Single;
    sampling_mode: BNNSLinearSamplingMode;
    box_coordinate_mode: BNNSBoxCoordinateMode;
    method: BNNSInterpolationMethod;
  end;

  PBNNSLayerParametersCropResize = ^BNNSLayerParametersCropResize;

  BNNSLayerParametersBroadcastMatMul = record
    alpha: Single;
    beta: Single;
    transA: Integer;
    transB: Integer;
    quadratic: Integer;
    a_is_weights: Integer;
    b_is_weights: Integer;
    iA_desc: BNNSNDArrayDescriptor;
    iB_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
  end;

  PBNNSLayerParametersBroadcastMatMul = ^BNNSLayerParametersBroadcastMatMul;

  BNNSLayerParametersMultiheadAttention = record
    query: BNNSMHAProjectionParameters;
    key: BNNSMHAProjectionParameters;
    value: BNNSMHAProjectionParameters;
    add_zero_attn: Integer;
    key_attn_bias: BNNSNDArrayDescriptor;
    value_attn_bias: BNNSNDArrayDescriptor;
    output: BNNSMHAProjectionParameters;
    dropout: Single;
    seed: LongWord;
  end;

  PBNNSLayerParametersMultiheadAttention = ^
    BNNSLayerParametersMultiheadAttention;

  BNNSLayerParametersReduction = record
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    w_desc: BNNSNDArrayDescriptor;
    reduce_func: BNNSReduceFunction;
    epsilon: Single;
  end;

  PBNNSLayerParametersReduction = ^BNNSLayerParametersReduction;

  BNNSLayerParametersPadding = record
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    padding_size: array [0 .. 7] of array [0 .. 1] of LongWord;
    padding_mode: BNNSPaddingMode;
    padding_value: LongWord;
  end;

  PBNNSLayerParametersPadding = ^BNNSLayerParametersPadding;

  BNNSLayerParametersEmbedding = record
    flags: BNNSEmbeddingFlags;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    dictionary: BNNSNDArrayDescriptor;
    padding_idx: LongWord;
    max_norm: Single;
    norm_type: Single;
  end;

  PBNNSLayerParametersEmbedding = ^BNNSLayerParametersEmbedding;

  BNNSLayerParametersQuantization = record
    axis_mask: LongWord;
    &function: BNNSQuantizerFunction;
    i_desc: BNNSNDArrayDescriptor;
    o_desc: BNNSNDArrayDescriptor;
    scale: BNNSNDArrayDescriptor;
    bias: BNNSNDArrayDescriptor;
  end;

  PBNNSLayerParametersQuantization = ^BNNSLayerParametersQuantization;

  BNNSSparsityParameters = record
    flags: UInt64;
    sparsity_ratio: array [0 .. 1] of LongWord;
    sparsity_type: BNNSSparsityType;
    target_system: BNNSTargetSystem;
  end;

  PBNNSSparsityParameters = ^BNNSSparsityParameters;

  BNNSImageStackDescriptor = record
    width: LongWord;
    height: LongWord;
    channels: LongWord;
    row_stride: LongWord;
    image_stride: LongWord;
    data_type: BNNSDataType;
    data_scale: Single;
    data_bias: Single;
  end;

  PBNNSImageStackDescriptor = ^BNNSImageStackDescriptor;

  BNNSVectorDescriptor = record
    size: LongWord;
    data_type: BNNSDataType;
    data_scale: Single;
    data_bias: Single;
  end;

  PBNNSVectorDescriptor = ^BNNSVectorDescriptor;

  BNNSLayerData = record
    data: Pointer;
    data_type: BNNSDataType;
    data_scale: Single;
    data_bias: Single;
    data_table: PSingle;
  end;

  PBNNSLayerData = ^BNNSLayerData;

  BNNSConvolutionLayerParameters = record
    x_stride: LongWord;
    y_stride: LongWord;
    x_padding: LongWord;
    y_padding: LongWord;
    k_width: LongWord;
    k_height: LongWord;
    in_channels: LongWord;
    out_channels: LongWord;
    weights: BNNSLayerData;
    bias: BNNSLayerData;
    activation: BNNSActivation;
  end;

  PBNNSConvolutionLayerParameters = ^BNNSConvolutionLayerParameters;

  BNNSFullyConnectedLayerParameters = record
    in_size: LongWord;
    out_size: LongWord;
    weights: BNNSLayerData;
    bias: BNNSLayerData;
    activation: BNNSActivation;
  end;

  PBNNSFullyConnectedLayerParameters = ^BNNSFullyConnectedLayerParameters;

  BNNSPoolingLayerParameters = record
    x_stride: LongWord;
    y_stride: LongWord;
    x_padding: LongWord;
    y_padding: LongWord;
    k_width: LongWord;
    k_height: LongWord;
    in_channels: LongWord;
    out_channels: LongWord;
    pooling_function: BNNSPoolingFunction;
    bias: BNNSLayerData;
    activation: BNNSActivation;
  end;

  PBNNSPoolingLayerParameters = ^BNNSPoolingLayerParameters;

  BNNSFilterParameters = record
    flags: LongWord;
    n_threads: LongWord;
    alloc_memory: BNNSAlloc;
    free_memory: BNNSFree;
  end;

  PBNNSFilterParameters = ^BNNSFilterParameters;

  BNNSFilter = Pointer;
  PBNNSFilter = ^BNNSFilter;
  __darwin_ssize_t = LongInt;
  P__darwin_ssize_t = ^__darwin_ssize_t;

  BNNSRandomGenerator = Pointer;
  PBNNSRandomGenerator = ^BNNSRandomGenerator;
  __float_complex_t = Pointer { <Type::Complex> from float };
  P__float_complex_t = ^__float_complex_t;
  __double_complex_t = Pointer { <Type::Complex> from double };
  P__double_complex_t = ^__double_complex_t;
  vImagePixelCount = LongWord;
  PvImagePixelCount = ^vImagePixelCount;

  vImage_Buffer = record
    data: Pointer;
    height: vImagePixelCount;
    width: vImagePixelCount;
    rowBytes: LongWord;
  end;

  PvImage_Buffer = ^vImage_Buffer;

  vImage_AffineTransform = record
    a: Single;
    b: Single;
    c: Single;
    d: Single;
    tx: Single;
    ty: Single;
  end;

  PvImage_AffineTransform = ^vImage_AffineTransform;

  vImage_AffineTransform_Double = record
    a: Double;
    b: Double;
    c: Double;
    d: Double;
    tx: Double;
    ty: Double;
  end;

  PvImage_AffineTransform_Double = ^vImage_AffineTransform_Double;

  vImage_CGAffineTransform = vImage_AffineTransform;

  vImage_PerpsectiveTransform = record
    a: Single;
    b: Single;
    c: Single;
    d: Single;
    tx: Single;
    ty: Single;
    vx: Single;
    vy: Single;
    v: Single;
  end;

  PvImage_PerpsectiveTransform = ^vImage_PerpsectiveTransform;

  vImage_WarpInterpolation = Int32;
  PvImage_WarpInterpolation = ^vImage_WarpInterpolation;
  Pixel_8 = Byte;
  PPixel_8 = ^Pixel_8;
  Pixel_F = Single;
  PPixel_F = ^Pixel_F;

  Pixel_88 = array [0 .. 1] of Byte;
  PPixel_88 = ^Pixel_88;
  Pixel_8888 = array [0 .. 3] of Byte;
  PPixel_8888 = ^Pixel_8888;
  Pixel_FFFF = array [0 .. 3] of Single;
  PPixel_FFFF = ^Pixel_FFFF;
  Pixel_16U = Word;
  PPixel_16U = ^Pixel_16U;
  Pixel_16S = Int16;
  PPixel_16S = ^Pixel_16S;
  Pixel_16Q12 = Int16;
  PPixel_16Q12 = ^Pixel_16Q12;
  Pixel_16U16U = array [0 .. 1] of Word;
  PPixel_16U16U = ^Pixel_16U16U;
  Pixel_16S16S = array [0 .. 1] of Int16;
  PPixel_16S16S = ^Pixel_16S16S;
  Pixel_32U = LongWord;
  PPixel_32U = ^Pixel_32U;
  Pixel_ARGB_16U = array [0 .. 3] of Word;
  PPixel_ARGB_16U = ^Pixel_ARGB_16U;
  Pixel_ARGB_16S = array [0 .. 3] of Int16;
  PPixel_ARGB_16S = ^Pixel_ARGB_16S;
  Pixel_16F = Word;
  PPixel_16F = ^Pixel_16F;
  Pixel_16F16F = array [0 .. 1] of Word;
  PPixel_16F16F = ^Pixel_16F16F;
  Pixel_ARGB_16F = array [0 .. 3] of Word;
  PPixel_ARGB_16F = ^Pixel_ARGB_16F;
  Pixel_FF = array [0 .. 1] of Single;
  PPixel_FF = ^Pixel_FF;
  ResamplingFilter = Pointer;
  PResamplingFilter = ^ResamplingFilter;
  GammaFunction = Pointer;
  PGammaFunction = ^GammaFunction;
  vImage_Error = Integer;
  PvImage_Error = ^vImage_Error;
  vImage_Flags = LongWord;
  PvImage_Flags = ^vImage_Flags;
  vImageConverterRef = Pointer;
  PvImageConverterRef = ^vImageConverterRef;
  vImageCVImageFormatRef = Pointer;
  PvImageCVImageFormatRef = ^vImageCVImageFormatRef;
  vImageConstCVImageFormatRef = Pointer;
  PvImageConstCVImageFormatRef = ^vImageConstCVImageFormatRef;
  vImageARGBType = Cardinal;
  vImageYpCbCrType = Cardinal;

  vImage_YpCbCrToARGBMatrix = record
    Yp: Single;
    Cr_R: Single;
    Cr_G: Single;
    Cb_G: Single;
    Cb_B: Single;
  end;

  PvImage_YpCbCrToARGBMatrix = ^vImage_YpCbCrToARGBMatrix;

  vImage_YpCbCrToARGB = record
    opaque: array [0 .. 127] of Byte;
  end;

  PvImage_YpCbCrToARGB = ^vImage_YpCbCrToARGB;

  vImage_ARGBToYpCbCrMatrix = record
    R_Yp: Single;
    G_Yp: Single;
    B_Yp: Single;
    R_Cb: Single;
    G_Cb: Single;
    B_Cb_R_Cr: Single;
    G_Cr: Single;
    B_Cr: Single;
  end;

  PvImage_ARGBToYpCbCrMatrix = ^vImage_ARGBToYpCbCrMatrix;

  vImage_ARGBToYpCbCr = record
    opaque: array [0 .. 127] of Byte;
  end;

  PvImage_ARGBToYpCbCr = ^vImage_ARGBToYpCbCr;

  vImage_YpCbCrPixelRange = record
    Yp_bias: Int32;
    CbCr_bias: Int32;
    YpRangeMax: Int32;
    CbCrRangeMax: Int32;
    YpMax: Int32;
    YpMin: Int32;
    CbCrMax: Int32;
    CbCrMin: Int32;
  end;

  PvImage_YpCbCrPixelRange = ^vImage_YpCbCrPixelRange;

  TAccelerateKernelFunc = procedure(param1: PSingle; param2: PSingle;
    param3: LongWord; param4: Pointer); cdecl;
  vImage_MultidimensionalTable = Pointer;
  PvImage_MultidimensionalTable = ^vImage_MultidimensionalTable;
  vImageMDTableUsageHint = Cardinal;
  vImage_InterpolationMethod = Cardinal;
  CGColorSpaceRef = Pointer;
  PCGColorSpaceRef = ^CGColorSpaceRef;
  CGBitmapInfo = LongWord;
  CGColorRenderingIntent = Int32;

  vImage_CGImageFormat = record
    bitsPerComponent: LongWord;
    bitsPerPixel: LongWord;
    colorSpace: CGColorSpaceRef;
    bitmapInfo: CGBitmapInfo;
    version: LongWord;
    decode: PCGFloat;
    renderingIntent: CGColorRenderingIntent;
  end;

  PvImage_CGImageFormat = ^vImage_CGImageFormat;

  CGFloat = Single;
  PCGFloat = ^CGFloat;

  CGSize = record
    width: CGFloat;
    height: CGFloat;
  end;

  PCGSize = ^CGSize;

  Boolean = Byte;
  PBoolean = ^Boolean;

  CGImageRef = Pointer;
  PCGImageRef = ^CGImageRef;
  TAccelerateCallback = procedure(param1: Pointer; param2: Pointer); cdecl;
  CFTypeRef = Pointer;
  PCFTypeRef = ^CFTypeRef;
  CGColorConversionInfoRef = Pointer;
  PCGColorConversionInfoRef = ^CGColorConversionInfoRef;
  vImageBufferTypeCode = LongWord;
  PvImageBufferTypeCode = ^vImageBufferTypeCode;
  CVBufferRef = Pointer;
  PCVBufferRef = ^CVBufferRef;
  CVImageBufferRef = CVBufferRef;
  PCVImageBufferRef = ^CVImageBufferRef;
  CVPixelBufferRef = CVImageBufferRef;
  PCVPixelBufferRef = ^CVPixelBufferRef;
  CFStringRef = Pointer;
  PCFStringRef = ^CFStringRef;
  vImageCVImageFormatError = Integer;
  PvImageCVImageFormatError = ^vImageCVImageFormatError;

  vImageChannelDescription = record
    min: CGFloat;
    zero: CGFloat;
    full: CGFloat;
    max: CGFloat;
  end;

  PvImageChannelDescription = ^vImageChannelDescription;

  vImageMatrixType = LongWord;
  PvImageMatrixType = ^vImageMatrixType;
  TAccelerateUserDataReleaseCallback = procedure(param1: vImageCVImageFormatRef;
    param2: Pointer); cdecl;

  vImageTransferFunction = record
    c0: CGFloat;
    c1: CGFloat;
    c2: CGFloat;
    c3: CGFloat;
    gamma: CGFloat;
    cutoff: CGFloat;
    c4: CGFloat;
    c5: CGFloat;
  end;

  PvImageTransferFunction = ^vImageTransferFunction;

  vImageRGBPrimaries = record
    red_x: Single;
    green_x: Single;
    blue_x: Single;
    white_x: Single;
    red_y: Single;
    green_y: Single;
    blue_y: Single;
    white_y: Single;
  end;

  PvImageRGBPrimaries = ^vImageRGBPrimaries;

  vImageWhitePoint = record
    white_x: Single;
    white_y: Single;
  end;

  PvImageWhitePoint = ^vImageWhitePoint;

  // ===== Exported string consts =====

function kvImage_YpCbCrToARGBMatrix_ITU_R_601_4: Pointer;
function kvImage_YpCbCrToARGBMatrix_ITU_R_709_2: Pointer;
function kvImage_ARGBToYpCbCrMatrix_ITU_R_601_4: Pointer;
function kvImage_ARGBToYpCbCrMatrix_ITU_R_709_2: Pointer;
function kvImageDecodeArray_16Q12Format: Pointer;


// ===== External functions =====

const
  libAccelerate = '/System/Library/Frameworks/Accelerate.framework/Accelerate';
function vU8Divide(vN: vUInt8; vD: vUInt8; vRemainder: PvUInt8): vUInt8; cdecl;
  external libAccelerate name _PU + 'vU8Divide';
function vS8Divide(vN: vSInt8; vD: vSInt8; vRemainder: PvSInt8): vSInt8; cdecl;
  external libAccelerate name _PU + 'vS8Divide';
function vU16Divide(vN: vUInt16; vD: vUInt16; vRemainder: PvUInt16): vUInt16;
  cdecl; external libAccelerate name _PU + 'vU16Divide';
function vS16Divide(vN: vSInt16; vD: vSInt16; vRemainder: PvSInt16): vSInt16;
  cdecl; external libAccelerate name _PU + 'vS16Divide';
function vU32Divide(vN: vUInt32; vD: vUInt32; vRemainder: PvUInt32): vUInt32;
  cdecl; external libAccelerate name _PU + 'vU32Divide';
function vS32Divide(vN: vSInt32; vD: vSInt32; vRemainder: PvSInt32): vSInt32;
  cdecl; external libAccelerate name _PU + 'vS32Divide';
function vU64Divide(vN: vUInt32; vD: vUInt32; vRemainder: PvUInt32): vUInt32;
  cdecl; external libAccelerate name _PU + 'vU64Divide';
function vS64Divide(vN: vSInt32; vD: vSInt32; vRemainder: PvSInt32): vSInt32;
  cdecl; external libAccelerate name _PU + 'vS64Divide';
function vU128Divide(vN: vUInt32; vD: vUInt32; vRemainder: PvUInt32): vUInt32;
  cdecl; external libAccelerate name _PU + 'vU128Divide';
function vS128Divide(vN: vSInt32; vD: vSInt32; vRemainder: PvSInt32): vSInt32;
  cdecl; external libAccelerate name _PU + 'vS128Divide';
function vU8HalfMultiply(vA: vUInt8; vB: vUInt8): vUInt8; cdecl;
  external libAccelerate name _PU + 'vU8HalfMultiply';
function vS8HalfMultiply(vA: vSInt8; vB: vSInt8): vSInt8; cdecl;
  external libAccelerate name _PU + 'vS8HalfMultiply';
function vU16HalfMultiply(vA: vUInt16; vB: vUInt16): vUInt16; cdecl;
  external libAccelerate name _PU + 'vU16HalfMultiply';
function vS16HalfMultiply(vA: vSInt16; vB: vSInt16): vSInt16; cdecl;
  external libAccelerate name _PU + 'vS16HalfMultiply';
function vU32HalfMultiply(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU32HalfMultiply';
function vS32HalfMultiply(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS32HalfMultiply';
function vU32FullMulEven(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU32FullMulEven';
function vU32FullMulOdd(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU32FullMulOdd';
function vS32FullMulEven(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS32FullMulEven';
function vS32FullMulOdd(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS32FullMulOdd';
function vU64FullMulEven(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64FullMulEven';
function vU64FullMulOdd(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64FullMulOdd';
function vU64HalfMultiply(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64HalfMultiply';
function vS64HalfMultiply(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64HalfMultiply';
function vS64FullMulEven(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64FullMulEven';
function vS64FullMulOdd(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64FullMulOdd';
function vU128HalfMultiply(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU128HalfMultiply';
function vS128HalfMultiply(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS128HalfMultiply';
function vU64Sub(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64Sub';
function vU64SubS(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64SubS';
function vU128Sub(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU128Sub';
function vU128SubS(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU128SubS';
function vS64Sub(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64Sub';
function vS128Sub(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS128Sub';
function vS64SubS(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64SubS';
function vS128SubS(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS128SubS';
function vU64Add(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64Add';
function vU64AddS(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64AddS';
function vU128Add(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU128Add';
function vU128AddS(vA: vUInt32; vB: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU128AddS';
function vS64Add(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64Add';
function vS64AddS(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64AddS';
function vS128Add(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS128Add';
function vS128AddS(vA: vSInt32; vB: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS128AddS';
function vU64Neg(vA: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU64Neg';
function vS64Neg(vA: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS64Neg';
function vU128Neg(vA: vUInt32): vUInt32; cdecl;
  external libAccelerate name _PU + 'vU128Neg';
function vS128Neg(vA: vSInt32): vSInt32; cdecl;
  external libAccelerate name _PU + 'vS128Neg';
function vLL64Shift(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vLL64Shift';
function vA64Shift(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vA64Shift';
function vLR64Shift(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vLR64Shift';
function vLL64Shift2(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vLL64Shift2';
function vA64Shift2(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vA64Shift2';
function vLR64Shift2(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vLR64Shift2';
function vLL128Shift(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vLL128Shift';
function vLR128Shift(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vLR128Shift';
function vA128Shift(vA: vUInt32; vShiftFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vA128Shift';
function vL64Rotate(vA: vUInt32; vRotateFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vL64Rotate';
function vR64Rotate(vA: vUInt32; vRotateFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vR64Rotate';
function vL64Rotate2(vA: vUInt32; vRotateFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vL64Rotate2';
function vR64Rotate2(vA: vUInt32; vRotateFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vR64Rotate2';
function vL128Rotate(vA: vUInt32; vRotateFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vL128Rotate';
function vR128Rotate(vA: vUInt32; vRotateFactor: vUInt8): vUInt32; cdecl;
  external libAccelerate name _PU + 'vR128Rotate';
procedure vU256Divide(numerator: PvU256; divisor: PvU256; result: PvU256;
  remainder: PvU256); cdecl; external libAccelerate name _PU + 'vU256Divide';
procedure vS256Divide(numerator: PvS256; divisor: PvS256; result: PvS256;
  remainder: PvS256); cdecl; external libAccelerate name _PU + 'vS256Divide';
procedure vU512Divide(numerator: PvU512; divisor: PvU512; result: PvU512;
  remainder: PvU512); cdecl; external libAccelerate name _PU + 'vU512Divide';
procedure vS512Divide(numerator: PvS512; divisor: PvS512; result: PvS512;
  remainder: PvS512); cdecl; external libAccelerate name _PU + 'vS512Divide';
procedure vU1024Divide(numerator: PvU1024; divisor: PvU1024; result: PvU1024;
  remainder: PvU1024); cdecl; external libAccelerate name _PU + 'vU1024Divide';
procedure vS1024Divide(numerator: PvS1024; divisor: PvS1024; result: PvS1024;
  remainder: PvS1024); cdecl; external libAccelerate name _PU + 'vS1024Divide';
procedure vU128FullMultiply(a: PvU128; b: PvU128; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vU128FullMultiply';
procedure vS128FullMultiply(a: PvS128; b: PvS128; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vS128FullMultiply';
procedure vU256FullMultiply(a: PvU256; b: PvU256; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vU256FullMultiply';
procedure vS256FullMultiply(a: PvS256; b: PvS256; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vS256FullMultiply';
procedure vU512FullMultiply(a: PvU512; b: PvU512; result: PvU1024); cdecl;
  external libAccelerate name _PU + 'vU512FullMultiply';
procedure vS512FullMultiply(a: PvS512; b: PvS512; result: PvS1024); cdecl;
  external libAccelerate name _PU + 'vS512FullMultiply';
procedure vU256HalfMultiply(a: PvU256; b: PvU256; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vU256HalfMultiply';
procedure vS256HalfMultiply(a: PvS256; b: PvS256; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vS256HalfMultiply';
procedure vU512HalfMultiply(a: PvU512; b: PvU512; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vU512HalfMultiply';
procedure vS512HalfMultiply(a: PvS512; b: PvS512; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vS512HalfMultiply';
procedure vU1024HalfMultiply(a: PvU1024; b: PvU1024; result: PvU1024); cdecl;
  external libAccelerate name _PU + 'vU1024HalfMultiply';
procedure vS1024HalfMultiply(a: PvS1024; b: PvS1024; result: PvS1024); cdecl;
  external libAccelerate name _PU + 'vS1024HalfMultiply';
procedure vU256Sub(a: PvU256; b: PvU256; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vU256Sub';
procedure vS256Sub(a: PvS256; b: PvS256; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vS256Sub';
procedure vU256SubS(a: PvU256; b: PvU256; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vU256SubS';
procedure vS256SubS(a: PvS256; b: PvS256; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vS256SubS';
procedure vU512Sub(a: PvU512; b: PvU512; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vU512Sub';
procedure vS512Sub(a: PvS512; b: PvS512; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vS512Sub';
procedure vU512SubS(a: PvU512; b: PvU512; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vU512SubS';
procedure vS512SubS(a: PvS512; b: PvS512; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vS512SubS';
procedure vU1024Sub(a: PvU1024; b: PvU1024; result: PvU1024); cdecl;
  external libAccelerate name _PU + 'vU1024Sub';
procedure vS1024Sub(a: PvS1024; b: PvS1024; result: PvS1024); cdecl;
  external libAccelerate name _PU + 'vS1024Sub';
procedure vU1024SubS(a: PvU1024; b: PvU1024; result: PvU1024); cdecl;
  external libAccelerate name _PU + 'vU1024SubS';
procedure vS1024SubS(a: PvS1024; b: PvS1024; result: PvS1024); cdecl;
  external libAccelerate name _PU + 'vS1024SubS';
procedure vU256Neg(a: PvU256; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vU256Neg';
procedure vS256Neg(a: PvS256; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vS256Neg';
procedure vU512Neg(a: PvU512; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vU512Neg';
procedure vS512Neg(a: PvS512; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vS512Neg';
procedure vU1024Neg(a: PvU1024; result: PvU1024); cdecl;
  external libAccelerate name _PU + 'vU1024Neg';
procedure vS1024Neg(a: PvS1024; result: PvS1024); cdecl;
  external libAccelerate name _PU + 'vS1024Neg';
procedure vU256Add(a: PvU256; b: PvU256; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vU256Add';
procedure vS256Add(a: PvS256; b: PvS256; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vS256Add';
procedure vU256AddS(a: PvU256; b: PvU256; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vU256AddS';
procedure vS256AddS(a: PvS256; b: PvS256; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vS256AddS';
procedure vU512Add(a: PvU512; b: PvU512; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vU512Add';
procedure vS512Add(a: PvS512; b: PvS512; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vS512Add';
procedure vU512AddS(a: PvU512; b: PvU512; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vU512AddS';
procedure vS512AddS(a: PvS512; b: PvS512; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vS512AddS';
procedure vU1024Add(a: PvU1024; b: PvU1024; result: PvU1024); cdecl;
  external libAccelerate name _PU + 'vU1024Add';
procedure vS1024Add(a: PvS1024; b: PvS1024; result: PvS1024); cdecl;
  external libAccelerate name _PU + 'vS1024Add';
procedure vU1024AddS(a: PvU1024; b: PvU1024; result: PvU1024); cdecl;
  external libAccelerate name _PU + 'vU1024AddS';
procedure vS1024AddS(a: PvS1024; b: PvS1024; result: PvS1024); cdecl;
  external libAccelerate name _PU + 'vS1024AddS';
procedure vU256Mod(numerator: PvU256; divisor: PvU256; remainder: PvU256);
  cdecl; external libAccelerate name _PU + 'vU256Mod';
procedure vS256Mod(numerator: PvS256; divisor: PvS256; remainder: PvS256);
  cdecl; external libAccelerate name _PU + 'vS256Mod';
procedure vU512Mod(numerator: PvU512; divisor: PvU512; remainder: PvU512);
  cdecl; external libAccelerate name _PU + 'vU512Mod';
procedure vS512Mod(numerator: PvS512; divisor: PvS512; remainder: PvS512);
  cdecl; external libAccelerate name _PU + 'vS512Mod';
procedure vU1024Mod(numerator: PvU1024; divisor: PvU1024; remainder: PvU1024);
  cdecl; external libAccelerate name _PU + 'vU1024Mod';
procedure vS1024Mod(numerator: PvS1024; divisor: PvS1024; remainder: PvS1024);
  cdecl; external libAccelerate name _PU + 'vS1024Mod';
procedure vLL256Shift(a: PvU256; shiftAmount: LongWord; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vLL256Shift';
procedure vLL512Shift(a: PvU512; shiftAmount: LongWord; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vLL512Shift';
procedure vLL1024Shift(a: PvU1024; shiftAmount: LongWord; result: PvU1024);
  cdecl; external libAccelerate name _PU + 'vLL1024Shift';
procedure vLR256Shift(a: PvU256; shiftAmount: LongWord; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vLR256Shift';
procedure vLR512Shift(a: PvU512; shiftAmount: LongWord; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vLR512Shift';
procedure vLR1024Shift(a: PvU1024; shiftAmount: LongWord; result: PvU1024);
  cdecl; external libAccelerate name _PU + 'vLR1024Shift';
procedure vA256Shift(a: PvS256; shiftAmount: LongWord; result: PvS256); cdecl;
  external libAccelerate name _PU + 'vA256Shift';
procedure vA512Shift(a: PvS512; shiftAmount: LongWord; result: PvS512); cdecl;
  external libAccelerate name _PU + 'vA512Shift';
procedure vA1024Shift(a: PvS1024; shiftAmount: LongWord; result: PvS1024);
  cdecl; external libAccelerate name _PU + 'vA1024Shift';
procedure vL256Rotate(a: PvU256; rotateAmount: LongWord; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vL256Rotate';
procedure vL512Rotate(a: PvU512; rotateAmount: LongWord; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vL512Rotate';
procedure vL1024Rotate(a: PvU1024; rotateAmount: LongWord; result: PvU1024);
  cdecl; external libAccelerate name _PU + 'vL1024Rotate';
procedure vR256Rotate(a: PvU256; rotateAmount: LongWord; result: PvU256); cdecl;
  external libAccelerate name _PU + 'vR256Rotate';
procedure vR512Rotate(a: PvU512; rotateAmount: LongWord; result: PvU512); cdecl;
  external libAccelerate name _PU + 'vR512Rotate';
procedure vR1024Rotate(a: PvU1024; rotateAmount: LongWord; result: PvU1024);
  cdecl; external libAccelerate name _PU + 'vR1024Rotate';
function vIsamax(count: Int32; x: PvFloat): Int32; cdecl;
  external libAccelerate name _PU + 'vIsamax';
function vIsamin(count: Int32; x: PvFloat): Int32; cdecl;
  external libAccelerate name _PU + 'vIsamin';
function vIsmax(count: Int32; x: PvFloat): Int32; cdecl;
  external libAccelerate name _PU + 'vIsmax';
function vIsmin(count: Int32; x: PvFloat): Int32; cdecl;
  external libAccelerate name _PU + 'vIsmin';
function vSasum(count: Int32; x: PvFloat): Single; cdecl;
  external libAccelerate name _PU + 'vSasum';
function vSsum(count: Int32; x: PvFloat): Single; cdecl;
  external libAccelerate name _PU + 'vSsum';
procedure vSaxpy(n: Int32; alpha: Single; x: PvFloat; y: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSaxpy';
procedure vScopy(n: Int32; x: PvFloat; y: PvFloat); cdecl;
  external libAccelerate name _PU + 'vScopy';
function vSdot(n: Int32; x: PvFloat; y: PvFloat): Single; cdecl;
  external libAccelerate name _PU + 'vSdot';
procedure vSnaxpy(n: Int32; m: Int32; a: PvFloat; x: PvFloat; y: PvFloat);
  cdecl; external libAccelerate name _PU + 'vSnaxpy';
procedure vSndot(n: Int32; m: Int32; s: PSingle; isw: Int32; x: PvFloat;
  y: PvFloat); cdecl; external libAccelerate name _PU + 'vSndot';
function vSnrm2(count: Int32; x: PvFloat): Single; cdecl;
  external libAccelerate name _PU + 'vSnrm2';
function vSnorm2(count: Int32; x: PvFloat): Single; cdecl;
  external libAccelerate name _PU + 'vSnorm2';
procedure vSrot(n: Int32; x: PvFloat; y: PvFloat; c: Single; s: Single); cdecl;
  external libAccelerate name _PU + 'vSrot';
procedure vSscal(n: Int32; alpha: Single; x: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSscal';
procedure vSswap(n: Int32; x: PvFloat; y: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSswap';
procedure vSyax(n: Int32; alpha: Single; x: PvFloat; y: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSyax';
procedure vSzaxpy(n: Int32; alpha: Single; x: PvFloat; y: PvFloat; z: PvFloat);
  cdecl; external libAccelerate name _PU + 'vSzaxpy';
procedure vSgemv(forma: Byte; m: Int32; n: Int32; alpha: Single; a: PvFloat;
  x: PvFloat; beta: Single; y: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSgemv';
procedure vSgemx(m: Int32; n: Int32; alpha: Single; a: PvFloat; x: PvFloat;
  y: PvFloat); cdecl; external libAccelerate name _PU + 'vSgemx';
procedure vSgemtx(m: Int32; n: Int32; alpha: Single; a: PvFloat; x: PvFloat;
  y: PvFloat); cdecl; external libAccelerate name _PU + 'vSgemtx';
procedure vSgeadd(height: Int32; width: Int32; a: PvFloat; forma: Byte;
  b: PvFloat; formb: Byte; c: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSgeadd';
procedure vSgesub(height: Int32; width: Int32; a: PvFloat; forma: Byte;
  b: PvFloat; formb: Byte; c: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSgesub';
procedure vSgemul(l: Int32; m: Int32; n: Int32; a: PvFloat; forma: Byte;
  b: PvFloat; formb: Byte; matrix: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSgemul';
procedure vSgemm(l: Int32; m: Int32; n: Int32; a: PvFloat; forma: Byte;
  b: PvFloat; formb: Byte; c: PvFloat; alpha: Single; beta: Single;
  matrix: PvFloat); cdecl; external libAccelerate name _PU + 'vSgemm';
procedure vSgetmi(size: Int32; x: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSgetmi';
procedure vSgetmo(height: Int32; width: Int32; x: PvFloat; y: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSgetmo';
procedure vSgevv(l: Int32; n: Int32; a: PvFloat; b: PvFloat; m: PvFloat); cdecl;
  external libAccelerate name _PU + 'vSgevv';
function vceilf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vceilf';
function vfloorf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vfloorf';
function vtruncf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vtruncf';
function vnintf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vnintf';
function vintf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vintf';
function vexpf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vexpf';
function vexp2f(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vexp2f';
function vexpm1f(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vexpm1f';
function vlogf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vlogf';
function vlog2f(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vlog2f';
function vlog10f(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vlog10f';
function vlog1pf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vlog1pf';
function vlogbf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vlogbf';
function vscalbf(param1: vFloat; param2: vSInt32): vFloat; cdecl;
  external libAccelerate name _PU + 'vscalbf';
function vpowf(param1: vFloat; param2: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vpowf';
function vipowf(param1: vFloat; param2: vSInt32): vFloat; cdecl;
  external libAccelerate name _PU + 'vipowf';
function vsinf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vsinf';
function vcosf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vcosf';
function vsincosf(param1: vFloat; param2: PvFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vsincosf';
function vtanf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vtanf';
function vsinpif(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vsinpif';
function vcospif(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vcospif';
function vtanpif(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vtanpif';
function vasinf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vasinf';
function vacosf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vacosf';
function vatanf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vatanf';
function vatan2f(param1: vFloat; param2: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vatan2f';
function vsinhf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vsinhf';
function vcoshf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vcoshf';
function vtanhf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vtanhf';
function vasinhf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vasinhf';
function vacoshf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vacoshf';
function vatanhf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vatanhf';
function vrecf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vrecf';
function vsqrtf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vsqrtf';
function vrsqrtf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vrsqrtf';
function vdivf(param1: vFloat; param2: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vdivf';
function vfmodf(param1: vFloat; param2: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vfmodf';
function vremainderf(param1: vFloat; param2: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vremainderf';
function vremquof(param1: vFloat; param2: vFloat; param3: PvUInt32): vFloat;
  cdecl; external libAccelerate name _PU + 'vremquof';
function vfabsf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vfabsf';
function vcopysignf(param1: vFloat; param2: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vcopysignf';
function vsignbitf(param1: vFloat): vUInt32; cdecl;
  external libAccelerate name _PU + 'vsignbitf';
function vnextafterf(param1: vFloat; param2: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vnextafterf';
function vclassifyf(param1: vFloat): vUInt32; cdecl;
  external libAccelerate name _PU + 'vclassifyf';
function vfabf(param1: vFloat): vFloat; cdecl;
  external libAccelerate name _PU + 'vfabf';
function vtablelookup(param1: vSInt32; param2: PLongWord): vUInt32; cdecl;
  external libAccelerate name _PU + 'vtablelookup';
function vDSP_create_fftsetup(__Log2n: vDSP_Length; __Radix: FFTRadix)
  : FFTSetup; cdecl; external libAccelerate name _PU + 'vDSP_create_fftsetup';
procedure vDSP_destroy_fftsetup(__setup: FFTSetup); cdecl;
  external libAccelerate name _PU + 'vDSP_destroy_fftsetup';
function vDSP_create_fftsetupD(__Log2n: vDSP_Length; __Radix: FFTRadix)
  : FFTSetupD; cdecl; external libAccelerate name _PU + 'vDSP_create_fftsetupD';
procedure vDSP_destroy_fftsetupD(__setup: FFTSetupD); cdecl;
  external libAccelerate name _PU + 'vDSP_destroy_fftsetupD';
function vDSP_biquad_CreateSetup(__Coefficients: PDouble; __M: vDSP_Length)
  : vDSP_biquad_Setup; cdecl;
  external libAccelerate name _PU + 'vDSP_biquad_CreateSetup';
function vDSP_biquad_CreateSetupD(__Coefficients: PDouble; __M: vDSP_Length)
  : vDSP_biquad_SetupD; cdecl;
  external libAccelerate name _PU + 'vDSP_biquad_CreateSetupD';
procedure vDSP_biquad_SetCoefficientsDouble(__setup: vDSP_biquad_Setup;
  __coeffs: PDouble; __start_sec: vDSP_Length; __nsec: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquad_SetCoefficientsDouble';
procedure vDSP_biquad_SetCoefficientsSingle(__setup: vDSP_biquad_Setup;
  __coeffs: PSingle; __start_sec: vDSP_Length; __nsec: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquad_SetCoefficientsSingle';
procedure vDSP_biquad_DestroySetup(__setup: vDSP_biquad_Setup); cdecl;
  external libAccelerate name _PU + 'vDSP_biquad_DestroySetup';
procedure vDSP_biquad_DestroySetupD(__setup: vDSP_biquad_SetupD); cdecl;
  external libAccelerate name _PU + 'vDSP_biquad_DestroySetupD';
function vDSP_biquadm_CreateSetup(__coeffs: PDouble; __M: vDSP_Length;
  __N: vDSP_Length): vDSP_biquadm_Setup; cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_CreateSetup';
function vDSP_biquadm_CreateSetupD(__coeffs: PDouble; __M: vDSP_Length;
  __N: vDSP_Length): vDSP_biquadm_SetupD; cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_CreateSetupD';
procedure vDSP_biquadm_DestroySetup(__setup: vDSP_biquadm_Setup); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_DestroySetup';
procedure vDSP_biquadm_DestroySetupD(__setup: vDSP_biquadm_SetupD); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_DestroySetupD';
procedure vDSP_biquadm_CopyState(__dest: vDSP_biquadm_Setup; __src: Pointer);
  cdecl; external libAccelerate name _PU + 'vDSP_biquadm_CopyState';
procedure vDSP_biquadm_CopyStateD(__dest: vDSP_biquadm_SetupD; __src: Pointer);
  cdecl; external libAccelerate name _PU + 'vDSP_biquadm_CopyStateD';
procedure vDSP_biquadm_ResetState(__setup: vDSP_biquadm_Setup); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_ResetState';
procedure vDSP_biquadm_ResetStateD(__setup: vDSP_biquadm_SetupD); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_ResetStateD';
procedure vDSP_biquadm_SetCoefficientsDouble(__setup: vDSP_biquadm_Setup;
  __coeffs: PDouble; __start_sec: vDSP_Length; __start_chn: vDSP_Length;
  __nsec: vDSP_Length; __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetCoefficientsDouble';
procedure vDSP_biquadm_SetCoefficientsDoubleD(__setup: vDSP_biquadm_SetupD;
  __coeffs: PDouble; __start_sec: vDSP_Length; __start_chn: vDSP_Length;
  __nsec: vDSP_Length; __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetCoefficientsDoubleD';
procedure vDSP_biquadm_SetTargetsDouble(__setup: vDSP_biquadm_Setup;
  __targets: PDouble; __interp_rate: Single; __interp_threshold: Single;
  __start_sec: vDSP_Length; __start_chn: vDSP_Length; __nsec: vDSP_Length;
  __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetTargetsDouble';
procedure vDSP_biquadm_SetTargetsDoubleD(__setup: vDSP_biquadm_SetupD;
  __targets: PDouble; __interp_rate: Double; __interp_threshold: Double;
  __start_sec: vDSP_Length; __start_chn: vDSP_Length; __nsec: vDSP_Length;
  __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetTargetsDoubleD';
procedure vDSP_biquadm_SetCoefficientsSingle(__setup: vDSP_biquadm_Setup;
  __coeffs: PSingle; __start_sec: vDSP_Length; __start_chn: vDSP_Length;
  __nsec: vDSP_Length; __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetCoefficientsSingle';
procedure vDSP_biquadm_SetCoefficientsSingleD(__setup: vDSP_biquadm_SetupD;
  __coeffs: PSingle; __start_sec: vDSP_Length; __start_chn: vDSP_Length;
  __nsec: vDSP_Length; __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetCoefficientsSingleD';
procedure vDSP_biquadm_SetTargetsSingle(__setup: vDSP_biquadm_Setup;
  __targets: PSingle; __interp_rate: Single; __interp_threshold: Single;
  __start_sec: vDSP_Length; __start_chn: vDSP_Length; __nsec: vDSP_Length;
  __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetTargetsSingle';
procedure vDSP_biquadm_SetTargetsSingleD(__setup: vDSP_biquadm_SetupD;
  __targets: PSingle; __interp_rate: Double; __interp_threshold: Double;
  __start_sec: vDSP_Length; __start_chn: vDSP_Length; __nsec: vDSP_Length;
  __nchn: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetTargetsSingleD';
procedure vDSP_biquadm_SetActiveFilters(__setup: vDSP_biquadm_Setup;
  __filter_states: PInteger); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetActiveFilters';
procedure vDSP_biquadm_SetActiveFiltersD(__setup: vDSP_biquadm_SetupD;
  __filter_states: PInteger); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm_SetActiveFiltersD';
procedure vDSP_ctoz(__C: PDSPComplex; __IC: vDSP_Stride; __Z: PDSPSplitComplex;
  __IZ: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_ctoz';
procedure vDSP_ctozD(__C: PDSPDoubleComplex; __IC: vDSP_Stride;
  __Z: PDSPDoubleSplitComplex; __IZ: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_ctozD';
procedure vDSP_ztoc(__Z: PDSPSplitComplex; __IZ: vDSP_Stride; __C: PDSPComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_ztoc';
procedure vDSP_ztocD(__Z: PDSPDoubleSplitComplex; __IZ: vDSP_Stride;
  __C: PDSPDoubleComplex; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_ztocD';
procedure vDSP_fft_zip(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zip';
procedure vDSP_fft_zipD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zipD';
procedure vDSP_fft_zipt(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __Buffer: PDSPSplitComplex; __Log2n: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zipt';
procedure vDSP_fft_ziptD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex; __Log2n: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_ziptD';
procedure vDSP_fft_zop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zop';
procedure vDSP_fft_zopt(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __Buffer: PDSPSplitComplex; __Log2n: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft_zopt';
procedure vDSP_fft_zopD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zopD';
procedure vDSP_fft_zoptD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __Buffer: PDSPDoubleSplitComplex; __Log2n: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zoptD';
procedure vDSP_fft_zrip(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zrip';
procedure vDSP_fft_zripD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zripD';
procedure vDSP_fft_zript(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __Buffer: PDSPSplitComplex; __Log2n: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zript';
procedure vDSP_fft_zriptD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex; __Log2n: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zriptD';
procedure vDSP_fft_zrop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zrop';
procedure vDSP_fft_zropD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zropD';
procedure vDSP_fft_zropt(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __Buffer: PDSPSplitComplex; __Log2n: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft_zropt';
procedure vDSP_fft_zroptD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __Buffer: PDSPDoubleSplitComplex; __Log2n: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft_zroptD';
procedure vDSP_fft2d_zip(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zip';
procedure vDSP_fft2d_zipD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zipD';
procedure vDSP_fft2d_zipt(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC1: vDSP_Stride; __IC0: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft2d_zipt';
procedure vDSP_fft2d_ziptD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft2d_ziptD';
procedure vDSP_fft2d_zop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zop';
procedure vDSP_fft2d_zopD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zopD';
procedure vDSP_fft2d_zopt(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft2d_zopt';
procedure vDSP_fft2d_zoptD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft2d_zoptD';
procedure vDSP_fft2d_zrip(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zrip';
procedure vDSP_fft2d_zripD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __flag: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zripD';
procedure vDSP_fft2d_zript(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft2d_zript';
procedure vDSP_fft2d_zriptD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __flag: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zriptD';
procedure vDSP_fft2d_zrop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zrop';
procedure vDSP_fft2d_zropt(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft2d_zropt';
procedure vDSP_fft2d_zropD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Log2N0: vDSP_Length;
  __Log2N1: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft2d_zropD';
procedure vDSP_fft2d_zroptD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA0: vDSP_Stride; __IA1: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC0: vDSP_Stride; __IC1: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2N0: vDSP_Length; __Log2N1: vDSP_Length; __Direction: FFTDirection);
  cdecl; external libAccelerate name _PU + 'vDSP_fft2d_zroptD';
procedure vDSP_fftm_zip(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zip';
procedure vDSP_fftm_zipD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zipD';
procedure vDSP_fftm_zipt(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zipt';
procedure vDSP_fftm_ziptD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_ziptD';
procedure vDSP_fftm_zop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zop';
procedure vDSP_fftm_zopD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zopD';
procedure vDSP_fftm_zopt(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zopt';
procedure vDSP_fftm_zoptD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zoptD';
procedure vDSP_fftm_zrip(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zrip';
procedure vDSP_fftm_zripD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zripD';
procedure vDSP_fftm_zript(__setup: FFTSetup; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zript';
procedure vDSP_fftm_zriptD(__setup: FFTSetupD; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IM: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zriptD';
procedure vDSP_fftm_zrop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zrop';
procedure vDSP_fftm_zropt(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Buffer: PDSPSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zropt';
procedure vDSP_fftm_zropD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Log2n: vDSP_Length; __M: vDSP_Length;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zropD';
procedure vDSP_fftm_zroptD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __IMA: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __IMC: vDSP_Stride; __Buffer: PDSPDoubleSplitComplex;
  __Log2n: vDSP_Length; __M: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fftm_zroptD';
procedure vDSP_fft3_zop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft3_zop';
procedure vDSP_fft3_zopD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft3_zopD';
procedure vDSP_fft5_zop(__setup: FFTSetup; __A: PDSPSplitComplex;
  __IA: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft5_zop';
procedure vDSP_fft5_zopD(__setup: FFTSetupD; __A: PDSPDoubleSplitComplex;
  __IA: vDSP_Stride; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __Log2n: vDSP_Length; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_fft5_zopD';
procedure vDSP_biquad(__setup: Pointer; __Delay: PSingle; __X: PSingle;
  __IX: vDSP_Stride; __Y: PSingle; __IY: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquad';
procedure vDSP_biquadD(__setup: Pointer; __Delay: PDouble; __X: PDouble;
  __IX: vDSP_Stride; __Y: PDouble; __IY: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadD';
procedure vDSP_biquadm(__setup: vDSP_biquadm_Setup; __X: PSingle;
  __IX: vDSP_Stride; __Y: PSingle; __IY: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadm';
procedure vDSP_biquadmD(__setup: vDSP_biquadm_SetupD; __X: PDouble;
  __IX: vDSP_Stride; __Y: PDouble; __IY: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_biquadmD';
procedure vDSP_conv(__A: PSingle; __IA: vDSP_Stride; __F: PSingle;
  __IF: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length;
  __P: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_conv';
procedure vDSP_convD(__A: PDouble; __IA: vDSP_Stride; __F: PDouble;
  __IF: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length;
  __P: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_convD';
procedure vDSP_zconv(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __F: PDSPSplitComplex; __IF: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zconv';
procedure vDSP_zconvD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __F: PDSPDoubleSplitComplex; __IF: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zconvD';
procedure vDSP_f3x3(__A: PSingle; __NR: vDSP_Length; __NC: vDSP_Length;
  __F: PSingle; __C: PSingle); cdecl;
  external libAccelerate name _PU + 'vDSP_f3x3';
procedure vDSP_f3x3D(__A: PDouble; __NR: vDSP_Length; __NC: vDSP_Length;
  __F: PDouble; __C: PDouble); cdecl;
  external libAccelerate name _PU + 'vDSP_f3x3D';
procedure vDSP_f5x5(__A: PSingle; __NR: vDSP_Length; __NC: vDSP_Length;
  __F: PSingle; __C: PSingle); cdecl;
  external libAccelerate name _PU + 'vDSP_f5x5';
procedure vDSP_f5x5D(__A: PDouble; __NR: vDSP_Length; __NC: vDSP_Length;
  __F: PDouble; __C: PDouble); cdecl;
  external libAccelerate name _PU + 'vDSP_f5x5D';
procedure vDSP_imgfir(__A: PSingle; __NR: vDSP_Length; __NC: vDSP_Length;
  __F: PSingle; __C: PSingle; __P: vDSP_Length; __Q: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_imgfir';
procedure vDSP_imgfirD(__A: PDouble; __NR: vDSP_Length; __NC: vDSP_Length;
  __F: PDouble; __C: PDouble; __P: vDSP_Length; __Q: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_imgfirD';
procedure vDSP_mtrans(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __M: vDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_mtrans';
procedure vDSP_mtransD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __M: vDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_mtransD';
procedure vDSP_mmul(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __M: vDSP_Length;
  __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_mmul';
procedure vDSP_mmulD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __M: vDSP_Length;
  __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_mmulD';
procedure vDSP_zmma(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __D: PDSPSplitComplex; __ID: vDSP_Stride; __M: vDSP_Length;
  __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zmma';
procedure vDSP_zmmaD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __D: PDSPDoubleSplitComplex; __ID: vDSP_Stride;
  __M: vDSP_Length; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zmmaD';
procedure vDSP_zmms(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __D: PDSPSplitComplex; __ID: vDSP_Stride; __M: vDSP_Length;
  __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zmms';
procedure vDSP_zmmsD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __D: PDSPDoubleSplitComplex; __ID: vDSP_Stride;
  __M: vDSP_Length; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zmmsD';
procedure vDSP_zvmmaa(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __D: PDSPSplitComplex; __ID: vDSP_Stride;
  __E: PDSPSplitComplex; __IE: vDSP_Stride; __F: PDSPSplitComplex;
  __IF: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmmaa';
procedure vDSP_zvmmaaD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __D: PDSPDoubleSplitComplex; __ID: vDSP_Stride;
  __E: PDSPDoubleSplitComplex; __IE: vDSP_Stride; __F: PDSPDoubleSplitComplex;
  __IF: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmmaaD';
procedure vDSP_zmsm(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __D: PDSPSplitComplex; __ID: vDSP_Stride; __M: vDSP_Length;
  __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zmsm';
procedure vDSP_zmsmD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __D: PDSPDoubleSplitComplex; __ID: vDSP_Stride;
  __M: vDSP_Length; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zmsmD';
procedure vDSP_zmmul(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __M: vDSP_Length; __N: vDSP_Length; __P: vDSP_Length);
  cdecl; external libAccelerate name _PU + 'vDSP_zmmul';
procedure vDSP_zmmulD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __M: vDSP_Length; __N: vDSP_Length; __P: vDSP_Length);
  cdecl; external libAccelerate name _PU + 'vDSP_zmmulD';
procedure vDSP_vadd(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vadd';
procedure vDSP_vaddD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vaddD';
procedure vDSP_vaddi(__A: PInteger; __IA: vDSP_Stride; __B: PInteger;
  __IB: vDSP_Stride; __C: PInteger; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vaddi';
procedure vDSP_zvadd(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvadd';
procedure vDSP_zvaddD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvaddD';
procedure vDSP_zrvadd(__A: PDSPSplitComplex; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zrvadd';
procedure vDSP_zrvaddD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDouble; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zrvaddD';
procedure vDSP_vsub(__B: PSingle; __IB: vDSP_Stride; __A: PSingle;
  __IA: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsub';
procedure vDSP_vsubD(__B: PDouble; __IB: vDSP_Stride; __A: PDouble;
  __IA: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsubD';
procedure vDSP_zvsub(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvsub';
procedure vDSP_zvsubD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvsubD';
procedure vDSP_vmul(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmul';
procedure vDSP_vmulD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmulD';
procedure vDSP_zrvmul(__A: PDSPSplitComplex; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zrvmul';
procedure vDSP_zrvmulD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDouble; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zrvmulD';
procedure vDSP_vdiv(__B: PSingle; __IB: vDSP_Stride; __A: PSingle;
  __IA: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vdiv';
procedure vDSP_vdivD(__B: PDouble; __IB: vDSP_Stride; __A: PDouble;
  __IA: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vdivD';
procedure vDSP_vdivi(__B: PInteger; __IB: vDSP_Stride; __A: PInteger;
  __IA: vDSP_Stride; __C: PInteger; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vdivi';
procedure vDSP_zvdiv(__B: PDSPSplitComplex; __IB: vDSP_Stride;
  __A: PDSPSplitComplex; __IA: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvdiv';
procedure vDSP_zvdivD(__B: PDSPDoubleSplitComplex; __IB: vDSP_Stride;
  __A: PDSPDoubleSplitComplex; __IA: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvdivD';
procedure vDSP_zrvdiv(__A: PDSPSplitComplex; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zrvdiv';
procedure vDSP_zrvdivD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDouble; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zrvdivD';
procedure vDSP_vsmul(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmul';
procedure vDSP_vsmulD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmulD';
procedure vDSP_vsq(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsq';
procedure vDSP_vsqD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsqD';
procedure vDSP_vssq(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vssq';
procedure vDSP_vssqD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vssqD';
procedure vDSP_distancesq(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_distancesq';
procedure vDSP_distancesqD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_distancesqD';
procedure vDSP_dotpr(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotpr';
procedure vDSP_dotprD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotprD';
procedure vDSP_zdotpr(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zdotpr';
procedure vDSP_zdotprD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zdotprD';
procedure vDSP_zrdotpr(__A: PDSPSplitComplex; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PDSPSplitComplex; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zrdotpr';
procedure vDSP_zrdotprD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDouble; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zrdotprD';
procedure vDSP_vam(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vam';
procedure vDSP_vamD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __IDD: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vamD';
procedure vDSP_vma(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vma';
procedure vDSP_vmaD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmaD';
procedure vDSP_zvma(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __D: PDSPSplitComplex; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zvma';
procedure vDSP_zvmaD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __D: PDSPDoubleSplitComplex; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zvmaD';
procedure vDSP_zvmul(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length; __Conjugate: Integer); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmul';
procedure vDSP_zvmulD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length; __Conjugate: Integer); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmulD';
procedure vDSP_zidotpr(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zidotpr';
procedure vDSP_zidotprD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zidotprD';
procedure vDSP_zvcma(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __D: PDSPSplitComplex; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zvcma';
procedure vDSP_zvcmaD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __D: PDSPDoubleSplitComplex; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zvcmaD';
procedure vDSP_zrvsub(__A: PDSPSplitComplex; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zrvsub';
procedure vDSP_zrvsubD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDouble; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zrvsubD';
procedure vDSP_vdpsp(__A: PDouble; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vdpsp';
procedure vDSP_vspdp(__A: PSingle; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vspdp';
procedure vDSP_vabs(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vabs';
procedure vDSP_vabsD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vabsD';
procedure vDSP_vabsi(__A: PInteger; __IA: vDSP_Stride; __C: PInteger;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vabsi';
procedure vDSP_zvabs(__A: PDSPSplitComplex; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvabs';
procedure vDSP_zvabsD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvabsD';
procedure vDSP_veqvi(__A: PInteger; __IA: vDSP_Stride; __B: PInteger;
  __IB: vDSP_Stride; __C: PInteger; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_veqvi';
procedure vDSP_vfill(__A: PSingle; __C: PSingle; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vfill';
procedure vDSP_vfillD(__A: PDouble; __C: PDouble; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vfillD';
procedure vDSP_vfilli(__A: PInteger; __C: PInteger; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vfilli';
procedure vDSP_zvfill(__A: PDSPSplitComplex; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvfill';
procedure vDSP_zvfillD(__A: PDSPDoubleSplitComplex; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvfillD';
procedure vDSP_vsadd(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsadd';
procedure vDSP_vsaddD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsaddD';
procedure vDSP_vsaddi(__A: PInteger; __IA: vDSP_Stride; __B: PInteger;
  __C: PInteger; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsaddi';
procedure vDSP_vsdiv(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsdiv';
procedure vDSP_vsdivD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsdivD';
procedure vDSP_vsdivi(__A: PInteger; __IA: vDSP_Stride; __B: PInteger;
  __C: PInteger; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsdivi';
procedure vDSP_zaspec(__A: PDSPSplitComplex; __C: PSingle; __N: vDSP_Length);
  cdecl; external libAccelerate name _PU + 'vDSP_zaspec';
procedure vDSP_zaspecD(__A: PDSPDoubleSplitComplex; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zaspecD';
procedure vDSP_blkman_window(__C: PSingle; __N: vDSP_Length; __flag: Integer);
  cdecl; external libAccelerate name _PU + 'vDSP_blkman_window';
procedure vDSP_blkman_windowD(__C: PDouble; __N: vDSP_Length; __flag: Integer);
  cdecl; external libAccelerate name _PU + 'vDSP_blkman_windowD';
procedure vDSP_zcoher(__A: PSingle; __B: PSingle; __C: PDSPSplitComplex;
  __D: PSingle; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zcoher';
procedure vDSP_zcoherD(__A: PDouble; __B: PDouble; __C: PDSPDoubleSplitComplex;
  __D: PDouble; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zcoherD';
procedure vDSP_desamp(__A: PSingle; __DF: vDSP_Stride; __F: PSingle;
  __C: PSingle; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_desamp';
procedure vDSP_desampD(__A: PDouble; __DF: vDSP_Stride; __F: PDouble;
  __C: PDouble; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_desampD';
procedure vDSP_zrdesamp(__A: PDSPSplitComplex; __DF: vDSP_Stride; __F: PSingle;
  __C: PDSPSplitComplex; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zrdesamp';
procedure vDSP_zrdesampD(__A: PDSPDoubleSplitComplex; __DF: vDSP_Stride;
  __F: PDouble; __C: PDSPDoubleSplitComplex; __N: vDSP_Length;
  __P: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zrdesampD';
procedure vDSP_ztrans(__A: PSingle; __B: PDSPSplitComplex;
  __C: PDSPSplitComplex; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_ztrans';
procedure vDSP_ztransD(__A: PDouble; __B: PDSPDoubleSplitComplex;
  __C: PDSPDoubleSplitComplex; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_ztransD';
procedure vDSP_zcspec(__A: PDSPSplitComplex; __B: PDSPSplitComplex;
  __C: PDSPSplitComplex; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zcspec';
procedure vDSP_zcspecD(__A: PDSPDoubleSplitComplex; __B: PDSPDoubleSplitComplex;
  __C: PDSPDoubleSplitComplex; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zcspecD';
procedure vDSP_zvcmul(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __IB: vDSP_Stride; __C: PDSPSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvcmul';
procedure vDSP_zvcmulD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __IB: vDSP_Stride; __C: PDSPDoubleSplitComplex;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvcmulD';
procedure vDSP_zvconj(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __C: PDSPSplitComplex; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvconj';
procedure vDSP_zvconjD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvconjD';
procedure vDSP_zvzsml(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zvzsml';
procedure vDSP_zvzsmlD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zvzsmlD';
procedure vDSP_zvmags(__A: PDSPSplitComplex; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmags';
procedure vDSP_zvmagsD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmagsD';
procedure vDSP_zvmgsa(__A: PDSPSplitComplex; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmgsa';
procedure vDSP_zvmgsaD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDouble; __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_zvmgsaD';
procedure vDSP_zvmov(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __C: PDSPSplitComplex; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmov';
procedure vDSP_zvmovD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvmovD';
procedure vDSP_zvneg(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __C: PDSPSplitComplex; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvneg';
procedure vDSP_zvnegD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvnegD';
procedure vDSP_zvphas(__A: PDSPSplitComplex; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvphas';
procedure vDSP_zvphasD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvphasD';
procedure vDSP_zvsma(__A: PDSPSplitComplex; __IA: vDSP_Stride;
  __B: PDSPSplitComplex; __C: PDSPSplitComplex; __IC: vDSP_Stride;
  __D: PDSPSplitComplex; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvsma';
procedure vDSP_zvsmaD(__A: PDSPDoubleSplitComplex; __IA: vDSP_Stride;
  __B: PDSPDoubleSplitComplex; __C: PDSPDoubleSplitComplex; __IC: vDSP_Stride;
  __D: PDSPDoubleSplitComplex; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_zvsmaD';
procedure vDSP_deq22(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_deq22';
procedure vDSP_deq22D(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_deq22D';
procedure vDSP_hamm_window(__C: PSingle; __N: vDSP_Length; __flag: Integer);
  cdecl; external libAccelerate name _PU + 'vDSP_hamm_window';
procedure vDSP_hamm_windowD(__C: PDouble; __N: vDSP_Length; __flag: Integer);
  cdecl; external libAccelerate name _PU + 'vDSP_hamm_windowD';
procedure vDSP_hann_window(__C: PSingle; __N: vDSP_Length; __flag: Integer);
  cdecl; external libAccelerate name _PU + 'vDSP_hann_window';
procedure vDSP_hann_windowD(__C: PDouble; __N: vDSP_Length; __flag: Integer);
  cdecl; external libAccelerate name _PU + 'vDSP_hann_windowD';
procedure vDSP_maxmgv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_maxmgv';
procedure vDSP_maxmgvD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_maxmgvD';
procedure vDSP_maxmgvi(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_maxmgvi';
procedure vDSP_maxmgviD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_maxmgviD';
procedure vDSP_maxv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_maxv';
procedure vDSP_maxvD(__A: PDouble; __I: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_maxvD';
procedure vDSP_maxvi(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_maxvi';
procedure vDSP_maxviD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_maxviD';
procedure vDSP_meamgv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_meamgv';
procedure vDSP_meamgvD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_meamgvD';
procedure vDSP_meanv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_meanv';
procedure vDSP_meanvD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_meanvD';
procedure vDSP_measqv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_measqv';
procedure vDSP_measqvD(__A: PDouble; __I: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_measqvD';
procedure vDSP_minmgv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_minmgv';
procedure vDSP_minmgvD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_minmgvD';
procedure vDSP_minmgvi(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_minmgvi';
procedure vDSP_minmgviD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_minmgviD';
procedure vDSP_minv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_minv';
procedure vDSP_minvD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_minvD';
procedure vDSP_minvi(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_minvi';
procedure vDSP_minviD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __I: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_minviD';
procedure vDSP_mmov(__A: PSingle; __C: PSingle; __M: vDSP_Length;
  __N: vDSP_Length; __TA: vDSP_Length; __TC: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_mmov';
procedure vDSP_mmovD(__A: PDouble; __C: PDouble; __M: vDSP_Length;
  __N: vDSP_Length; __TA: vDSP_Length; __TC: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_mmovD';
procedure vDSP_mvessq(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_mvessq';
procedure vDSP_mvessqD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_mvessqD';
procedure vDSP_nzcros(__A: PSingle; __IA: vDSP_Stride; __B: vDSP_Length;
  __C: PvDSP_Length; __D: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_nzcros';
procedure vDSP_nzcrosD(__A: PDouble; __IA: vDSP_Stride; __B: vDSP_Length;
  __C: PvDSP_Length; __D: PvDSP_Length; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_nzcrosD';
procedure vDSP_polar(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_polar';
procedure vDSP_polarD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_polarD';
procedure vDSP_rect(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_rect';
procedure vDSP_rectD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_rectD';
procedure vDSP_rmsqv(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_rmsqv';
procedure vDSP_rmsqvD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_rmsqvD';
procedure vDSP_svdiv(__A: PSingle; __B: PSingle; __IB: vDSP_Stride;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_svdiv';
procedure vDSP_svdivD(__A: PDouble; __B: PDouble; __IB: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_svdivD';
procedure vDSP_sve(__A: PSingle; __I: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_sve';
procedure vDSP_sveD(__A: PDouble; __I: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_sveD';
procedure vDSP_svemg(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_svemg';
procedure vDSP_svemgD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_svemgD';
procedure vDSP_svesq(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_svesq';
procedure vDSP_svesqD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_svesqD';
procedure vDSP_sve_svesq(__A: PSingle; __IA: vDSP_Stride; __Sum: PSingle;
  __SumOfSquares: PSingle; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_sve_svesq';
procedure vDSP_sve_svesqD(__A: PDouble; __IA: vDSP_Stride; __Sum: PDouble;
  __SumOfSquares: PDouble; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_sve_svesqD';
procedure vDSP_normalize(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __Mean: PSingle; __StandardDeviation: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_normalize';
procedure vDSP_normalizeD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __Mean: PDouble; __StandardDeviation: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_normalizeD';
procedure vDSP_svs(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_svs';
procedure vDSP_svsD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_svsD';
procedure vDSP_vaam(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __E: PSingle; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vaam';
procedure vDSP_vaamD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __E: PDouble; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vaamD';
procedure vDSP_vasbm(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __E: PSingle; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vasbm';
procedure vDSP_vasbmD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __E: PDouble; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vasbmD';
procedure vDSP_vasm(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __D: PSingle; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vasm';
procedure vDSP_vasmD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __D: PDouble; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vasmD';
procedure vDSP_vavlin(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vavlin';
procedure vDSP_vavlinD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vavlinD';
procedure vDSP_vclip(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __D: PSingle; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vclip';
procedure vDSP_vclipD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __D: PDouble; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vclipD';
procedure vDSP_vclipc(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __D: PSingle; __ID: vDSP_Stride; __N: vDSP_Length;
  __NLow: PvDSP_Length; __NHigh: PvDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vclipc';
procedure vDSP_vclipcD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __D: PDouble; __ID: vDSP_Stride; __N: vDSP_Length;
  __NLow: PvDSP_Length; __NHigh: PvDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vclipcD';
procedure vDSP_vclr(__C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vclr';
procedure vDSP_vclrD(__C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vclrD';
procedure vDSP_vcmprs(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vcmprs';
procedure vDSP_vcmprsD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vcmprsD';
procedure vDSP_vdbcon(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length; __F: Cardinal); cdecl;
  external libAccelerate name _PU + 'vDSP_vdbcon';
procedure vDSP_vdbconD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length; __F: Cardinal); cdecl;
  external libAccelerate name _PU + 'vDSP_vdbconD';
procedure vDSP_vdist(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vdist';
procedure vDSP_vdistD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vdistD';
procedure vDSP_venvlp(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_venvlp';
procedure vDSP_venvlpD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_venvlpD';
procedure vDSP_vfix8(__A: PSingle; __IA: vDSP_Stride; __C: MarshaledAString;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfix8';
procedure vDSP_vfix8D(__A: PDouble; __IA: vDSP_Stride; __C: MarshaledAString;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfix8D';
procedure vDSP_vfix16(__A: PSingle; __IA: vDSP_Stride; __C: PSmallInt;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfix16';
procedure vDSP_vfix16D(__A: PDouble; __IA: vDSP_Stride; __C: PSmallInt;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfix16D';
procedure vDSP_vfix32(__A: PSingle; __IA: vDSP_Stride; __C: PInteger;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfix32';
procedure vDSP_vfix32D(__A: PDouble; __IA: vDSP_Stride; __C: PInteger;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfix32D';
procedure vDSP_vfixu8(__A: PSingle; __IA: vDSP_Stride; __C: PByte;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixu8';
procedure vDSP_vfixu8D(__A: PDouble; __IA: vDSP_Stride; __C: PByte;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixu8D';
procedure vDSP_vfixu16(__A: PSingle; __IA: vDSP_Stride; __C: PWord;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixu16';
procedure vDSP_vfixu16D(__A: PDouble; __IA: vDSP_Stride; __C: PWord;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixu16D';
procedure vDSP_vfixu32(__A: PSingle; __IA: vDSP_Stride; __C: PCardinal;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixu32';
procedure vDSP_vfixu32D(__A: PDouble; __IA: vDSP_Stride; __C: PCardinal;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixu32D';
procedure vDSP_vsmfixu24(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PvDSP_uint24; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmfixu24';
procedure vDSP_vsmfix24(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PvDSP_int24; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmfix24';
procedure vDSP_vfltu24(__A: PvDSP_uint24; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltu24';
procedure vDSP_vflt24(__A: PvDSP_int24; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vflt24';
procedure vDSP_vfltsmu24(__A: PvDSP_uint24; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltsmu24';
procedure vDSP_vfltsm24(__A: PvDSP_int24; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltsm24';
procedure vDSP_vfixr8(__A: PSingle; __IA: vDSP_Stride; __C: MarshaledAString;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixr8';
procedure vDSP_vfixr8D(__A: PDouble; __IA: vDSP_Stride; __C: MarshaledAString;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixr8D';
procedure vDSP_vfixr16(__A: PSingle; __IA: vDSP_Stride; __C: PSmallInt;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixr16';
procedure vDSP_vfixr16D(__A: PDouble; __IA: vDSP_Stride; __C: PSmallInt;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixr16D';
procedure vDSP_vfixr32(__A: PSingle; __IA: vDSP_Stride; __C: PInteger;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixr32';
procedure vDSP_vfixr32D(__A: PDouble; __IA: vDSP_Stride; __C: PInteger;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixr32D';
procedure vDSP_vfixru8(__A: PSingle; __IA: vDSP_Stride; __C: PByte;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixru8';
procedure vDSP_vfixru8D(__A: PDouble; __IA: vDSP_Stride; __C: PByte;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixru8D';
procedure vDSP_vfixru16(__A: PSingle; __IA: vDSP_Stride; __C: PWord;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixru16';
procedure vDSP_vfixru16D(__A: PDouble; __IA: vDSP_Stride; __C: PWord;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixru16D';
procedure vDSP_vfixru32(__A: PSingle; __IA: vDSP_Stride; __C: PCardinal;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixru32';
procedure vDSP_vfixru32D(__A: PDouble; __IA: vDSP_Stride; __C: PCardinal;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfixru32D';
procedure vDSP_vflt8(__A: MarshaledAString; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vflt8';
procedure vDSP_vflt8D(__A: MarshaledAString; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vflt8D';
procedure vDSP_vflt16(__A: PSmallInt; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vflt16';
procedure vDSP_vflt16D(__A: PSmallInt; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vflt16D';
procedure vDSP_vflt32(__A: PInteger; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vflt32';
procedure vDSP_vflt32D(__A: PInteger; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vflt32D';
procedure vDSP_vfltu8(__A: PByte; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltu8';
procedure vDSP_vfltu8D(__A: PByte; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltu8D';
procedure vDSP_vfltu16(__A: PWord; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltu16';
procedure vDSP_vfltu16D(__A: PWord; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltu16D';
procedure vDSP_vfltu32(__A: PCardinal; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltu32';
procedure vDSP_vfltu32D(__A: PCardinal; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfltu32D';
procedure vDSP_vfrac(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfrac';
procedure vDSP_vfracD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vfracD';
procedure vDSP_vgathr(__A: PSingle; __B: PvDSP_Length; __IB: vDSP_Stride;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vgathr';
procedure vDSP_vgathrD(__A: PDouble; __B: PvDSP_Length; __IB: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vgathrD';
procedure vDSP_vgathra(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vgathra';
procedure vDSP_vgathraD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vgathraD';
procedure vDSP_vgen(__A: PSingle; __B: PSingle; __C: PSingle; __IC: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vgen';
procedure vDSP_vgenD(__A: PDouble; __B: PDouble; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vgenD';
procedure vDSP_vgenp(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length;
  __M: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vgenp';
procedure vDSP_vgenpD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length;
  __M: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vgenpD';
procedure vDSP_viclip(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __D: PSingle; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_viclip';
procedure vDSP_viclipD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __D: PDouble; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_viclipD';
procedure vDSP_vindex(__A: PSingle; __B: PSingle; __IB: vDSP_Stride;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vindex';
procedure vDSP_vindexD(__A: PDouble; __B: PDouble; __IB: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vindexD';
procedure vDSP_vintb(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __D: PSingle; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vintb';
procedure vDSP_vintbD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __D: PDouble; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vintbD';
procedure vDSP_vlim(__A: PSingle; __IA: vDSP_Stride; __B: PSingle; __C: PSingle;
  __D: PSingle; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vlim';
procedure vDSP_vlimD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __D: PDouble; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vlimD';
procedure vDSP_vlint(__A: PSingle; __B: PSingle; __IB: vDSP_Stride;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length; __M: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vlint';
procedure vDSP_vlintD(__A: PDouble; __B: PDouble; __IB: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length; __M: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vlintD';
procedure vDSP_vmax(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmax';
procedure vDSP_vmaxD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmaxD';
procedure vDSP_vmaxmg(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmaxmg';
procedure vDSP_vmaxmgD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmaxmgD';
procedure vDSP_vswmax(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length; __WindowLength: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vswmax';
procedure vDSP_vswmaxD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length; __WindowLength: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vswmaxD';
procedure vDSP_vmin(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmin';
procedure vDSP_vminD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vminD';
procedure vDSP_vminmg(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vminmg';
procedure vDSP_vminmgD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vminmgD';
procedure vDSP_vmma(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __E: PSingle; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmma';
procedure vDSP_vmmaD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __E: PDouble; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmmaD';
procedure vDSP_vmmsb(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __E: PSingle; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmmsb';
procedure vDSP_vmmsbD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __E: PDouble; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmmsbD';
procedure vDSP_vmsa(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __D: PSingle; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vmsa';
procedure vDSP_vmsaD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __D: PDouble; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vmsaD';
procedure vDSP_vmsb(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmsb';
procedure vDSP_vmsbD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vmsbD';
procedure vDSP_vnabs(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vnabs';
procedure vDSP_vnabsD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vnabsD';
procedure vDSP_vneg(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vneg';
procedure vDSP_vnegD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vnegD';
procedure vDSP_vpoly(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length;
  __P: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vpoly';
procedure vDSP_vpolyD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length;
  __P: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vpolyD';
procedure vDSP_vpythg(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __E: PSingle; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vpythg';
procedure vDSP_vpythgD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __E: PDouble; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vpythgD';
procedure vDSP_vqint(__A: PSingle; __B: PSingle; __IB: vDSP_Stride;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length; __M: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vqint';
procedure vDSP_vqintD(__A: PDouble; __B: PDouble; __IB: vDSP_Stride;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length; __M: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vqintD';
procedure vDSP_vramp(__A: PSingle; __B: PSingle; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vramp';
procedure vDSP_vrampD(__A: PDouble; __B: PDouble; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampD';
procedure vDSP_vrsum(__A: PSingle; __IA: vDSP_Stride; __S: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrsum';
procedure vDSP_vrsumD(__A: PDouble; __IA: vDSP_Stride; __S: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrsumD';
procedure vDSP_vrvrs(__C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrvrs';
procedure vDSP_vrvrsD(__C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrvrsD';
procedure vDSP_vsbm(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsbm';
procedure vDSP_vsbmD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsbmD';
procedure vDSP_vsbsbm(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __D: PSingle;
  __ID: vDSP_Stride; __E: PSingle; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsbsbm';
procedure vDSP_vsbsbmD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __D: PDouble;
  __ID: vDSP_Stride; __E: PDouble; __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsbsbmD';
procedure vDSP_vsbsm(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __D: PSingle; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vsbsm';
procedure vDSP_vsbsmD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __D: PDouble; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vsbsmD';
procedure vDSP_vsimps(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsimps';
procedure vDSP_vsimpsD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsimpsD';
procedure vDSP_vsma(__A: PSingle; __IA: vDSP_Stride; __B: PSingle; __C: PSingle;
  __IC: vDSP_Stride; __D: PSingle; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsma';
procedure vDSP_vsmaD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __D: PDouble; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vsmaD';
procedure vDSP_vsmsa(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __D: PSingle; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmsa';
procedure vDSP_vsmsaD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __D: PDouble; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmsaD';
procedure vDSP_vsmsb(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __D: PSingle; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vsmsb';
procedure vDSP_vsmsbD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __D: PDouble; __ID: vDSP_Stride;
  __N: vDSP_Length); cdecl; external libAccelerate name _PU + 'vDSP_vsmsbD';
procedure vDSP_vsmsma(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __D: PSingle; __E: PSingle;
  __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmsma';
procedure vDSP_vsmsmaD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __D: PDouble; __E: PDouble;
  __IE: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vsmsmaD';
procedure vDSP_vsort(__C: PSingle; __N: vDSP_Length; __Order: Integer); cdecl;
  external libAccelerate name _PU + 'vDSP_vsort';
procedure vDSP_vsortD(__C: PDouble; __N: vDSP_Length; __Order: Integer); cdecl;
  external libAccelerate name _PU + 'vDSP_vsortD';
procedure vDSP_vsorti(__C: PSingle; __I: PvDSP_Length;
  __Temporary: PvDSP_Length; __N: vDSP_Length; __Order: Integer); cdecl;
  external libAccelerate name _PU + 'vDSP_vsorti';
procedure vDSP_vsortiD(__C: PDouble; __I: PvDSP_Length;
  __Temporary: PvDSP_Length; __N: vDSP_Length; __Order: Integer); cdecl;
  external libAccelerate name _PU + 'vDSP_vsortiD';
procedure vDSP_vswap(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vswap';
procedure vDSP_vswapD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vswapD';
procedure vDSP_vswsum(__A: PSingle; __IA: vDSP_Stride; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vswsum';
procedure vDSP_vswsumD(__A: PDouble; __IA: vDSP_Stride; __C: PDouble;
  __IC: vDSP_Stride; __N: vDSP_Length; __P: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vswsumD';
procedure vDSP_vtabi(__A: PSingle; __IA: vDSP_Stride; __S1: PSingle;
  __S2: PSingle; __C: PSingle; __M: vDSP_Length; __D: PSingle;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vtabi';
procedure vDSP_vtabiD(__A: PDouble; __IA: vDSP_Stride; __S1: PDouble;
  __S2: PDouble; __C: PDouble; __M: vDSP_Length; __D: PDouble;
  __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vtabiD';
procedure vDSP_vthr(__A: PSingle; __IA: vDSP_Stride; __B: PSingle; __C: PSingle;
  __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vthr';
procedure vDSP_vthrD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vthrD';
procedure vDSP_vthres(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vthres';
procedure vDSP_vthresD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vthresD';
procedure vDSP_vthrsc(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __D: PSingle; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vthrsc';
procedure vDSP_vthrscD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __D: PDouble; __ID: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vthrscD';
procedure vDSP_vtmerg(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __IB: vDSP_Stride; __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vtmerg';
procedure vDSP_vtmergD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __IB: vDSP_Stride; __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vtmergD';
procedure vDSP_vtrapz(__A: PSingle; __IA: vDSP_Stride; __B: PSingle;
  __C: PSingle; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vtrapz';
procedure vDSP_vtrapzD(__A: PDouble; __IA: vDSP_Stride; __B: PDouble;
  __C: PDouble; __IC: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vtrapzD';
procedure vDSP_wiener(__L: vDSP_Length; __A: PSingle; __C: PSingle;
  __F: PSingle; __P: PSingle; __flag: Integer; __Error: PInteger); cdecl;
  external libAccelerate name _PU + 'vDSP_wiener';
procedure vDSP_wienerD(__L: vDSP_Length; __A: PDouble; __C: PDouble;
  __F: PDouble; __P: PDouble; __flag: Integer; __Error: PInteger); cdecl;
  external libAccelerate name _PU + 'vDSP_wienerD';
procedure vDSP_FFT16_copv(__Output: PSingle; __Input: PSingle;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_FFT16_copv';
procedure vDSP_FFT32_copv(__Output: PSingle; __Input: PSingle;
  __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_FFT32_copv';
procedure vDSP_FFT16_zopv(__Or: PSingle; __Oi: PSingle; __Ir: PSingle;
  __Ii: PSingle; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_FFT16_zopv';
procedure vDSP_FFT32_zopv(__Or: PSingle; __Oi: PSingle; __Ir: PSingle;
  __Ii: PSingle; __Direction: FFTDirection); cdecl;
  external libAccelerate name _PU + 'vDSP_FFT32_zopv';
function vDSP_DFT_CreateSetup(__Previous: vDSP_DFT_Setup; __Length: vDSP_Length)
  : vDSP_DFT_Setup; cdecl; external libAccelerate name _PU +
  'vDSP_DFT_CreateSetup';
function vDSP_DFT_zop_CreateSetup(__Previous: vDSP_DFT_Setup;
  __Length: vDSP_Length; __Direction: vDSP_DFT_Direction): vDSP_DFT_Setup;
  cdecl; external libAccelerate name _PU + 'vDSP_DFT_zop_CreateSetup';
function vDSP_DFT_zop_CreateSetupD(__Previous: vDSP_DFT_SetupD;
  __Length: vDSP_Length; __Direction: vDSP_DFT_Direction): vDSP_DFT_SetupD;
  cdecl; external libAccelerate name _PU + 'vDSP_DFT_zop_CreateSetupD';
function vDSP_DFT_zrop_CreateSetup(__Previous: vDSP_DFT_Setup;
  __Length: vDSP_Length; __Direction: vDSP_DFT_Direction): vDSP_DFT_Setup;
  cdecl; external libAccelerate name _PU + 'vDSP_DFT_zrop_CreateSetup';
function vDSP_DFT_zrop_CreateSetupD(__Previous: vDSP_DFT_SetupD;
  __Length: vDSP_Length; __Direction: vDSP_DFT_Direction): vDSP_DFT_SetupD;
  cdecl; external libAccelerate name _PU + 'vDSP_DFT_zrop_CreateSetupD';
procedure vDSP_DFT_DestroySetup(__setup: vDSP_DFT_Setup); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_DestroySetup';
procedure vDSP_DFT_DestroySetupD(__setup: vDSP_DFT_SetupD); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_DestroySetupD';
procedure vDSP_DFT_zop(__setup: Pointer; __Ir: PSingle; __Ii: PSingle;
  __Is: vDSP_Stride; __Or: PSingle; __Oi: PSingle; __Os: vDSP_Stride;
  __Direction: vDSP_DFT_Direction); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_zop';
procedure vDSP_DFT_Execute(__setup: Pointer; __Ir: PSingle; __Ii: PSingle;
  __Or: PSingle; __Oi: PSingle); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_Execute';
procedure vDSP_DFT_ExecuteD(__setup: Pointer; __Ir: PDouble; __Ii: PDouble;
  __Or: PDouble; __Oi: PDouble); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_ExecuteD';
function vDSP_DCT_CreateSetup(__Previous: vDSP_DFT_Setup; __Length: vDSP_Length;
  __Type: vDSP_DCT_Type): vDSP_DFT_Setup; cdecl;
  external libAccelerate name _PU + 'vDSP_DCT_CreateSetup';
procedure vDSP_DCT_Execute(__setup: Pointer; __Input: PSingle;
  __Output: PSingle); cdecl;
  external libAccelerate name _PU + 'vDSP_DCT_Execute';
function vDSP_DFT_Interleaved_CreateSetup(Previous: vDSP_DFT_Interleaved_Setup;
  Length: vDSP_Length; Direction: vDSP_DFT_Direction;
  RealtoComplex: vDSP_DFT_RealtoComplex): vDSP_DFT_Interleaved_Setup; cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_Interleaved_CreateSetup';
function vDSP_DFT_Interleaved_CreateSetupD
  (Previous: vDSP_DFT_Interleaved_SetupD; Length: vDSP_Length;
  Direction: vDSP_DFT_Direction; RealtoComplex: vDSP_DFT_RealtoComplex)
  : vDSP_DFT_Interleaved_SetupD; cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_Interleaved_CreateSetupD';
procedure vDSP_DFT_Interleaved_Execute(Setup: vDSP_DFT_Interleaved_Setup;
  Iri: PDSPComplex; Ori: PDSPComplex); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_Interleaved_Execute';
procedure vDSP_DFT_Interleaved_ExecuteD(Setup: vDSP_DFT_Interleaved_SetupD;
  Iri: PDSPDoubleComplex; Ori: PDSPDoubleComplex); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_Interleaved_ExecuteD';
procedure vDSP_DFT_Interleaved_DestroySetup(Setup: vDSP_DFT_Interleaved_Setup);
  cdecl; external libAccelerate name _PU + 'vDSP_DFT_Interleaved_DestroySetup';
procedure vDSP_DFT_Interleaved_DestroySetupD
  (Setup: vDSP_DFT_Interleaved_SetupD); cdecl;
  external libAccelerate name _PU + 'vDSP_DFT_Interleaved_DestroySetupD';
procedure vDSP_dotpr2(__A0: PSingle; __IA0: vDSP_Stride; __A1: PSingle;
  __IA1: vDSP_Stride; __B: PSingle; __IB: vDSP_Stride; __C0: PSingle;
  __C1: PSingle; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotpr2';
procedure vDSP_dotpr2D(__A0: PDouble; __IA0: vDSP_Stride; __A1: PDouble;
  __IA1: vDSP_Stride; __B: PDouble; __IB: vDSP_Stride; __C0: PDouble;
  __C1: PDouble; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotpr2D';
procedure vDSP_dotpr_s1_15(__A: PSmallInt; __IA: vDSP_Stride; __B: PSmallInt;
  __IB: vDSP_Stride; __C: PSmallInt; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotpr_s1_15';
procedure vDSP_dotpr2_s1_15(__A0: PSmallInt; __IA0: vDSP_Stride;
  __A1: PSmallInt; __IA1: vDSP_Stride; __B: PSmallInt; __IB: vDSP_Stride;
  __C0: PSmallInt; __C1: PSmallInt; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotpr2_s1_15';
procedure vDSP_dotpr_s8_24(__A: PInteger; __IA: vDSP_Stride; __B: PInteger;
  __IB: vDSP_Stride; __C: PInteger; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotpr_s8_24';
procedure vDSP_dotpr2_s8_24(__A0: PInteger; __IA0: vDSP_Stride; __A1: PInteger;
  __IA1: vDSP_Stride; __B: PInteger; __IB: vDSP_Stride; __C0: PInteger;
  __C1: PInteger; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_dotpr2_s8_24';
procedure vDSP_vaddsub(__I0: PSingle; __I0S: vDSP_Stride; __I1: PSingle;
  __I1S: vDSP_Stride; __O0: PSingle; __O0S: vDSP_Stride; __O1: PSingle;
  __O1S: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vaddsub';
procedure vDSP_vaddsubD(__I0: PDouble; __I0S: vDSP_Stride; __I1: PDouble;
  __I1S: vDSP_Stride; __O0: PDouble; __O0S: vDSP_Stride; __O1: PDouble;
  __O1S: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vaddsubD';
procedure vDSP_vrampmul(__I: PSingle; __Is: vDSP_Stride; __Start: PSingle;
  __Step: PSingle; __O: PSingle; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmul';
procedure vDSP_vrampmulD(__I: PDouble; __Is: vDSP_Stride; __Start: PDouble;
  __Step: PDouble; __O: PDouble; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmulD';
procedure vDSP_vrampmuladd(__I: PSingle; __Is: vDSP_Stride; __Start: PSingle;
  __Step: PSingle; __O: PSingle; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladd';
procedure vDSP_vrampmuladdD(__I: PDouble; __Is: vDSP_Stride; __Start: PDouble;
  __Step: PDouble; __O: PDouble; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladdD';
procedure vDSP_vrampmul2(__I0: PSingle; __I1: PSingle; __Is: vDSP_Stride;
  __Start: PSingle; __Step: PSingle; __O0: PSingle; __O1: PSingle;
  __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmul2';
procedure vDSP_vrampmul2D(__I0: PDouble; __I1: PDouble; __Is: vDSP_Stride;
  __Start: PDouble; __Step: PDouble; __O0: PDouble; __O1: PDouble;
  __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmul2D';
procedure vDSP_vrampmuladd2(__I0: PSingle; __I1: PSingle; __Is: vDSP_Stride;
  __Start: PSingle; __Step: PSingle; __O0: PSingle; __O1: PSingle;
  __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladd2';
procedure vDSP_vrampmuladd2D(__I0: PDouble; __I1: PDouble; __Is: vDSP_Stride;
  __Start: PDouble; __Step: PDouble; __O0: PDouble; __O1: PDouble;
  __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladd2D';
procedure vDSP_vrampmul_s1_15(__I: PSmallInt; __Is: vDSP_Stride;
  __Start: PSmallInt; __Step: PSmallInt; __O: PSmallInt; __Os: vDSP_Stride;
  __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmul_s1_15';
procedure vDSP_vrampmuladd_s1_15(__I: PSmallInt; __Is: vDSP_Stride;
  __Start: PSmallInt; __Step: PSmallInt; __O: PSmallInt; __Os: vDSP_Stride;
  __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladd_s1_15';
procedure vDSP_vrampmul2_s1_15(__I0: PSmallInt; __I1: PSmallInt;
  __Is: vDSP_Stride; __Start: PSmallInt; __Step: PSmallInt; __O0: PSmallInt;
  __O1: PSmallInt; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmul2_s1_15';
procedure vDSP_vrampmuladd2_s1_15(__I0: PSmallInt; __I1: PSmallInt;
  __Is: vDSP_Stride; __Start: PSmallInt; __Step: PSmallInt; __O0: PSmallInt;
  __O1: PSmallInt; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladd2_s1_15';
procedure vDSP_vrampmul_s8_24(__I: PInteger; __Is: vDSP_Stride;
  __Start: PInteger; __Step: PInteger; __O: PInteger; __Os: vDSP_Stride;
  __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmul_s8_24';
procedure vDSP_vrampmuladd_s8_24(__I: PInteger; __Is: vDSP_Stride;
  __Start: PInteger; __Step: PInteger; __O: PInteger; __Os: vDSP_Stride;
  __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladd_s8_24';
procedure vDSP_vrampmul2_s8_24(__I0: PInteger; __I1: PInteger;
  __Is: vDSP_Stride; __Start: PInteger; __Step: PInteger; __O0: PInteger;
  __O1: PInteger; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmul2_s8_24';
procedure vDSP_vrampmuladd2_s8_24(__I0: PInteger; __I1: PInteger;
  __Is: vDSP_Stride; __Start: PInteger; __Step: PInteger; __O0: PInteger;
  __O1: PInteger; __Os: vDSP_Stride; __N: vDSP_Length); cdecl;
  external libAccelerate name _PU + 'vDSP_vrampmuladd2_s8_24';
function isamax_(n: PInteger; sx: PSingle; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'isamax_';
function idamax_(n: PInteger; dx: PDouble; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'idamax_';
function icamax_(n: PInteger; cx: Pointer; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'icamax_';
function izamax_(n: PInteger; cx: Pointer; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'izamax_';
function sasum_(n: PInteger; sx: PSingle; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'sasum_';
function dasum_(n: PInteger; dx: PDouble; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'dasum_';
function scasum_(n: PInteger; cx: Pointer; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'scasum_';
function dzasum_(n: PInteger; cx: Pointer; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'dzasum_';
function saxpy_(n: PInteger; da: PSingle; sx: PSingle; incx: PInteger;
  sy: PSingle; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'saxpy_';
function daxpy_(n: PInteger; da: PDouble; dx: PDouble; incx: PInteger;
  dy: PDouble; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'daxpy_';
function caxpy_(n: PInteger; ca: Pointer; cx: Pointer; incx: PInteger;
  cy: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'caxpy_';
function zaxpy_(n: PInteger; ca: Pointer; cx: Pointer; incx: PInteger;
  cy: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zaxpy_';
function scopy_(n: PInteger; sx: PSingle; incx: PInteger; sy: PSingle;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'scopy_';
function dcopy_(n: PInteger; dx: PDouble; incx: PInteger; dy: PDouble;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'dcopy_';
function ccopy_(n: PInteger; cx: Pointer; incx: PInteger; cy: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'ccopy_';
function zcopy_(n: PInteger; cx: Pointer; incx: PInteger; cy: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'zcopy_';
function sdot_(n: PInteger; sx: PSingle; incx: PInteger; sy: PSingle;
  incy: PInteger): Double; cdecl; external libAccelerate name _PU + 'sdot_';
function ddot_(n: PInteger; dx: PDouble; incx: PInteger; dy: PDouble;
  incy: PInteger): Double; cdecl; external libAccelerate name _PU + 'ddot_';
function sdsdot_(n: PInteger; sb: PSingle; sx: PSingle; incx: PInteger;
  sy: PSingle; incy: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'sdsdot_';
function dsdot_(n: PInteger; sx: PSingle; incx: PInteger; sy: PSingle;
  incy: PInteger): Double; cdecl; external libAccelerate name _PU + 'dsdot_';
procedure cdotc_(ret_val: Pointer; n: PInteger; cx: Pointer; incx: PInteger;
  cy: Pointer; incy: PInteger); cdecl;
  external libAccelerate name _PU + 'cdotc_';
procedure zdotc_(ret_val: Pointer; n: PInteger; cx: Pointer; incx: PInteger;
  cy: Pointer; incy: PInteger); cdecl;
  external libAccelerate name _PU + 'zdotc_';
procedure cdotu_(ret_val: Pointer; n: PInteger; cx: Pointer; incx: PInteger;
  cy: Pointer; incy: PInteger); cdecl;
  external libAccelerate name _PU + 'cdotu_';
procedure zdotu_(ret_val: Pointer; n: PInteger; cx: Pointer; incx: PInteger;
  cy: Pointer; incy: PInteger); cdecl;
  external libAccelerate name _PU + 'zdotu_';
function snrm2_(n: PInteger; x: PSingle; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'snrm2_';
function dnrm2_(n: PInteger; x: PDouble; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'dnrm2_';
function scnrm2_(n: PInteger; cx: Pointer; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'scnrm2_';
function dznrm2_(n: PInteger; cx: Pointer; incx: PInteger): Double; cdecl;
  external libAccelerate name _PU + 'dznrm2_';
function srot_(n: PInteger; sx: PSingle; incx: PInteger; sy: PSingle;
  incy: PInteger; c: PSingle; s: PSingle): Integer; cdecl;
  external libAccelerate name _PU + 'srot_';
function drot_(n: PInteger; dx: PDouble; incx: PInteger; dy: PDouble;
  incy: PInteger; c: PDouble; s: PDouble): Integer; cdecl;
  external libAccelerate name _PU + 'drot_';
function csrot_(n: PInteger; cx: Pointer; incx: PInteger; cy: Pointer;
  incy: PInteger; c: PSingle; s: PSingle): Integer; cdecl;
  external libAccelerate name _PU + 'csrot_';
function zdrot_(n: PInteger; cx: Pointer; incx: PInteger; cy: Pointer;
  incy: PInteger; c: PDouble; s: PDouble): Integer; cdecl;
  external libAccelerate name _PU + 'zdrot_';
function srotg_(sa: PSingle; sb: PSingle; c: PSingle; s: PSingle): Integer;
  cdecl; external libAccelerate name _PU + 'srotg_';
function drotg_(da: PDouble; db: PDouble; c: PDouble; s: PDouble): Integer;
  cdecl; external libAccelerate name _PU + 'drotg_';
function crotg_(ca: Pointer; cb: Pointer; c: PSingle; cs: Pointer): Integer;
  cdecl; external libAccelerate name _PU + 'crotg_';
function zrotg_(ca: Pointer; cb: Pointer; c: PDouble; cs: Pointer): Integer;
  cdecl; external libAccelerate name _PU + 'zrotg_';
function srotm_(n: PInteger; sx: PSingle; incx: PInteger; sy: PSingle;
  incy: PInteger; param: PSingle): Integer; cdecl;
  external libAccelerate name _PU + 'srotm_';
function drotm_(n: PInteger; dx: PDouble; incx: PInteger; dy: PDouble;
  incy: PInteger; dparam: PDouble): Integer; cdecl;
  external libAccelerate name _PU + 'drotm_';
function srotmg_(sd1: PSingle; sd2: PSingle; sx1: PSingle; sy1: PSingle;
  param: PSingle): Integer; cdecl; external libAccelerate name _PU + 'srotmg_';
function drotmg_(dd1: PDouble; dd2: PDouble; dx1: PDouble; dy1: PDouble;
  dparam: PDouble): Integer; cdecl; external libAccelerate name _PU + 'drotmg_';
function sscal_(n: PInteger; sa: PSingle; sx: PSingle; incx: PInteger): Integer;
  cdecl; external libAccelerate name _PU + 'sscal_';
function dscal_(n: PInteger; da: PDouble; dx: PDouble; incx: PInteger): Integer;
  cdecl; external libAccelerate name _PU + 'dscal_';
function cscal_(n: PInteger; ca: Pointer; cx: Pointer; incx: PInteger): Integer;
  cdecl; external libAccelerate name _PU + 'cscal_';
function zscal_(n: PInteger; ca: Pointer; cx: Pointer; incx: PInteger): Integer;
  cdecl; external libAccelerate name _PU + 'zscal_';
function csscal_(n: PInteger; sa: PSingle; cx: Pointer; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'csscal_';
function zdscal_(n: PInteger; sa: PDouble; cx: Pointer; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'zdscal_';
function sswap_(n: PInteger; sx: PSingle; incx: PInteger; sy: PSingle;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'sswap_';
function dswap_(n: PInteger; dx: PDouble; incx: PInteger; dy: PDouble;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'dswap_';
function cswap_(n: PInteger; cx: Pointer; incx: PInteger; cy: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'cswap_';
function zswap_(n: PInteger; cx: Pointer; incx: PInteger; cy: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'zswap_';
function sgemv_(trans: MarshaledAString; m: PInteger; n: PInteger;
  alpha: PSingle; a: PSingle; lda: PInteger; x: PSingle; incx: PInteger;
  beta: PSingle; y: PSingle; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'sgemv_';
function dgemv_(trans: MarshaledAString; m: PInteger; n: PInteger;
  alpha: PDouble; a: PDouble; lda: PInteger; x: PDouble; incx: PInteger;
  beta: PDouble; y: PDouble; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dgemv_';
function cgemv_(trans: MarshaledAString; m: PInteger; n: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; x: Pointer; incx: PInteger;
  beta: Pointer; y: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'cgemv_';
function zgemv_(trans: MarshaledAString; m: PInteger; n: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; x: Pointer; incx: PInteger;
  beta: Pointer; y: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zgemv_';
function sgbmv_(trans: MarshaledAString; m: PInteger; n: PInteger; kl: PInteger;
  ku: PInteger; alpha: PSingle; a: PSingle; lda: PInteger; x: PSingle;
  incx: PInteger; beta: PSingle; y: PSingle; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'sgbmv_';
function dgbmv_(trans: MarshaledAString; m: PInteger; n: PInteger; kl: PInteger;
  ku: PInteger; alpha: PDouble; a: PDouble; lda: PInteger; x: PDouble;
  incx: PInteger; beta: PDouble; y: PDouble; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dgbmv_';
function cgbmv_(trans: MarshaledAString; m: PInteger; n: PInteger; kl: PInteger;
  ku: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; x: Pointer;
  incx: PInteger; beta: Pointer; y: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'cgbmv_';
function zgbmv_(trans: MarshaledAString; m: PInteger; n: PInteger; kl: PInteger;
  ku: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; x: Pointer;
  incx: PInteger; beta: Pointer; y: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zgbmv_';
function ssymv_(uplo: MarshaledAString; n: PInteger; alpha: PSingle; a: PSingle;
  lda: PInteger; x: PSingle; incx: PInteger; beta: PSingle; y: PSingle;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'ssymv_';
function dsymv_(uplo: MarshaledAString; n: PInteger; alpha: PDouble; a: PDouble;
  lda: PInteger; x: PDouble; incx: PInteger; beta: PDouble; y: PDouble;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'dsymv_';
function chemv_(uplo: MarshaledAString; n: PInteger; alpha: Pointer; a: Pointer;
  lda: PInteger; x: Pointer; incx: PInteger; beta: Pointer; y: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'chemv_';
function zhemv_(uplo: MarshaledAString; n: PInteger; alpha: Pointer; a: Pointer;
  lda: PInteger; x: Pointer; incx: PInteger; beta: Pointer; y: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'zhemv_';
function ssbmv_(uplo: MarshaledAString; n: PInteger; k: PInteger;
  alpha: PSingle; a: PSingle; lda: PInteger; x: PSingle; incx: PInteger;
  beta: PSingle; y: PSingle; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ssbmv_';
function dsbmv_(uplo: MarshaledAString; n: PInteger; k: PInteger;
  alpha: PDouble; a: PDouble; lda: PInteger; x: PDouble; incx: PInteger;
  beta: PDouble; y: PDouble; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dsbmv_';
function chbmv_(uplo: MarshaledAString; n: PInteger; k: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; x: Pointer; incx: PInteger;
  beta: Pointer; y: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'chbmv_';
function zhbmv_(uplo: MarshaledAString; n: PInteger; k: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; x: Pointer; incx: PInteger;
  beta: Pointer; y: Pointer; incy: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zhbmv_';
function sspmv_(uplo: MarshaledAString; n: PInteger; alpha: PSingle;
  ap: PSingle; x: PSingle; incx: PInteger; beta: PSingle; y: PSingle;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'sspmv_';
function dspmv_(uplo: MarshaledAString; n: PInteger; alpha: PDouble;
  ap: PDouble; x: PDouble; incx: PInteger; beta: PDouble; y: PDouble;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'dspmv_';
function chpmv_(uplo: MarshaledAString; n: PInteger; alpha: Pointer;
  ap: Pointer; x: Pointer; incx: PInteger; beta: Pointer; y: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'chpmv_';
function zhpmv_(uplo: MarshaledAString; n: PInteger; alpha: Pointer;
  ap: Pointer; x: Pointer; incx: PInteger; beta: Pointer; y: Pointer;
  incy: PInteger): Integer; cdecl; external libAccelerate name _PU + 'zhpmv_';
function strmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: PSingle; lda: PInteger; x: PSingle;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'strmv_';
function dtrmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: PDouble; lda: PInteger; x: PDouble;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'dtrmv_';
function ctrmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: Pointer; lda: PInteger; x: Pointer;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'ctrmv_';
function ztrmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: Pointer; lda: PInteger; x: Pointer;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'ztrmv_';
function stbmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: PSingle; lda: PInteger;
  x: PSingle; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'stbmv_';
function dtbmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: PDouble; lda: PInteger;
  x: PDouble; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dtbmv_';
function ctbmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: Pointer; lda: PInteger;
  x: Pointer; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ctbmv_';
function ztbmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: Pointer; lda: PInteger;
  x: Pointer; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ztbmv_';
function stpmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: PSingle; x: PSingle; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'stpmv_';
function dtpmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: PDouble; x: PDouble; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'dtpmv_';
function ctpmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: Pointer; x: Pointer; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ctpmv_';
function ztpmv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: Pointer; x: Pointer; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ztpmv_';
function strsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: PSingle; lda: PInteger; x: PSingle;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'strsv_';
function dtrsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: PDouble; lda: PInteger; x: PDouble;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'dtrsv_';
function ctrsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: Pointer; lda: PInteger; x: Pointer;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'ctrsv_';
function ztrsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; a: Pointer; lda: PInteger; x: Pointer;
  incx: PInteger): Integer; cdecl; external libAccelerate name _PU + 'ztrsv_';
function stbsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: PSingle; lda: PInteger;
  x: PSingle; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'stbsv_';
function dtbsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: PDouble; lda: PInteger;
  x: PDouble; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dtbsv_';
function ctbsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: Pointer; lda: PInteger;
  x: Pointer; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ctbsv_';
function ztbsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; k: PInteger; a: Pointer; lda: PInteger;
  x: Pointer; incx: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ztbsv_';
function stpsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: PSingle; x: PSingle; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'stpsv_';
function dtpsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: PDouble; x: PDouble; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'dtpsv_';
function ctpsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: Pointer; x: Pointer; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ctpsv_';
function ztpsv_(uplo: MarshaledAString; trans: MarshaledAString;
  diag: MarshaledAString; n: PInteger; ap: Pointer; x: Pointer; incx: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ztpsv_';
function sger_(m: PInteger; n: PInteger; alpha: PSingle; x: PSingle;
  incx: PInteger; y: PSingle; incy: PInteger; a: PSingle; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'sger_';
function dger_(m: PInteger; n: PInteger; alpha: PDouble; x: PDouble;
  incx: PInteger; y: PDouble; incy: PInteger; a: PDouble; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'dger_';
function cgerc_(m: PInteger; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; a: Pointer; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'cgerc_';
function zgerc_(m: PInteger; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; a: Pointer; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'zgerc_';
function cgeru_(m: PInteger; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; a: Pointer; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'cgeru_';
function zgeru_(m: PInteger; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; a: Pointer; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'zgeru_';
function ssyr_(uplo: MarshaledAString; n: PInteger; alpha: PSingle; x: PSingle;
  incx: PInteger; a: PSingle; lda: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ssyr_';
function dsyr_(uplo: MarshaledAString; n: PInteger; alpha: PDouble; x: PDouble;
  incx: PInteger; a: PDouble; lda: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dsyr_';
function cher_(uplo: MarshaledAString; n: PInteger; alpha: PSingle; x: Pointer;
  incx: PInteger; a: Pointer; lda: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'cher_';
function zher_(uplo: MarshaledAString; n: PInteger; alpha: PDouble; x: Pointer;
  incx: PInteger; a: Pointer; lda: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zher_';
function ssyr2_(uplo: MarshaledAString; n: PInteger; alpha: PSingle; x: PSingle;
  incx: PInteger; y: PSingle; incy: PInteger; a: PSingle; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ssyr2_';
function dsyr2_(uplo: MarshaledAString; n: PInteger; alpha: PDouble; x: PDouble;
  incx: PInteger; y: PDouble; incy: PInteger; a: PDouble; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'dsyr2_';
function cher2_(uplo: MarshaledAString; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; a: Pointer; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'cher2_';
function zher2_(uplo: MarshaledAString; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; a: Pointer; lda: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'zher2_';
function sspr_(uplo: MarshaledAString; n: PInteger; alpha: PSingle; x: PSingle;
  incx: PInteger; ap: PSingle): Integer; cdecl;
  external libAccelerate name _PU + 'sspr_';
function dspr_(uplo: MarshaledAString; n: PInteger; alpha: PDouble; x: PDouble;
  incx: PInteger; ap: PDouble): Integer; cdecl;
  external libAccelerate name _PU + 'dspr_';
function chpr_(uplo: MarshaledAString; n: PInteger; alpha: PSingle; x: Pointer;
  incx: PInteger; ap: Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'chpr_';
function zhpr_(uplo: MarshaledAString; n: PInteger; alpha: PDouble; x: Pointer;
  incx: PInteger; ap: Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'zhpr_';
function sspr2_(uplo: MarshaledAString; n: PInteger; alpha: PSingle; x: PSingle;
  incx: PInteger; y: PSingle; incy: PInteger; ap: PSingle): Integer; cdecl;
  external libAccelerate name _PU + 'sspr2_';
function dspr2_(uplo: MarshaledAString; n: PInteger; alpha: PDouble; x: PDouble;
  incx: PInteger; y: PDouble; incy: PInteger; ap: PDouble): Integer; cdecl;
  external libAccelerate name _PU + 'dspr2_';
function chpr2_(uplo: MarshaledAString; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; ap: Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'chpr2_';
function zhpr2_(uplo: MarshaledAString; n: PInteger; alpha: Pointer; x: Pointer;
  incx: PInteger; y: Pointer; incy: PInteger; ap: Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'zhpr2_';
function sgemm_(transA: MarshaledAString; transB: MarshaledAString; m: PInteger;
  n: PInteger; k: PInteger; alpha: PSingle; a: PSingle; lda: PInteger;
  b: PSingle; ldb: PInteger; beta: PSingle; c__: PSingle; ldc: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'sgemm_';
function dgemm_(transA: MarshaledAString; transB: MarshaledAString; m: PInteger;
  n: PInteger; k: PInteger; alpha: PDouble; a: PDouble; lda: PInteger;
  b: PDouble; ldb: PInteger; beta: PDouble; c__: PDouble; ldc: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'dgemm_';
function cgemm_(transA: MarshaledAString; transB: MarshaledAString; m: PInteger;
  n: PInteger; k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger;
  b: Pointer; ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'cgemm_';
function zgemm_(transA: MarshaledAString; transB: MarshaledAString; m: PInteger;
  n: PInteger; k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger;
  b: Pointer; ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'zgemm_';
function ssymm_(side: MarshaledAString; uplo: MarshaledAString; m: PInteger;
  n: PInteger; alpha: PSingle; a: PSingle; lda: PInteger; b: PSingle;
  ldb: PInteger; beta: PSingle; c__: PSingle; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ssymm_';
function dsymm_(side: MarshaledAString; uplo: MarshaledAString; m: PInteger;
  n: PInteger; alpha: PDouble; a: PDouble; lda: PInteger; b: PDouble;
  ldb: PInteger; beta: PDouble; c__: PDouble; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dsymm_';
function csymm_(side: MarshaledAString; uplo: MarshaledAString; m: PInteger;
  n: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'csymm_';
function zsymm_(side: MarshaledAString; uplo: MarshaledAString; m: PInteger;
  n: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zsymm_';
function chemm_(side: MarshaledAString; uplo: MarshaledAString; m: PInteger;
  n: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'chemm_';
function zhemm_(side: MarshaledAString; uplo: MarshaledAString; m: PInteger;
  n: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zhemm_';
function strmm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: PSingle; a: PSingle; lda: PInteger; b: PSingle; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'strmm_';
function dtrmm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: PDouble; a: PDouble; lda: PInteger; b: PDouble; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'dtrmm_';
function ctrmm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ctrmm_';
function ztrmm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ztrmm_';
function strsm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: PSingle; a: PSingle; lda: PInteger; b: PSingle; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'strsm_';
function dtrsm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: PDouble; a: PDouble; lda: PInteger; b: PDouble; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'dtrsm_';
function ctrsm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ctrsm_';
function ztrsm_(side: MarshaledAString; uplo: MarshaledAString;
  transA: MarshaledAString; diag: MarshaledAString; m: PInteger; n: PInteger;
  alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer; ldb: PInteger)
  : Integer; cdecl; external libAccelerate name _PU + 'ztrsm_';
function ssyrk_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: PSingle; a: PSingle; lda: PInteger; beta: PSingle;
  c__: PSingle; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ssyrk_';
function dsyrk_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: PDouble; a: PDouble; lda: PInteger; beta: PDouble;
  c__: PDouble; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dsyrk_';
function csyrk_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; beta: Pointer;
  c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'csyrk_';
function zsyrk_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; beta: Pointer;
  c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zsyrk_';
function cherk_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: PSingle; a: Pointer; lda: PInteger; beta: PSingle;
  c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'cherk_';
function zherk_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: PDouble; a: Pointer; lda: PInteger; beta: PDouble;
  c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zherk_';
function ssyr2k_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: PSingle; a: PSingle; lda: PInteger; b: PSingle;
  ldb: PInteger; beta: PSingle; c__: PSingle; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'ssyr2k_';
function dsyr2k_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: PDouble; a: PDouble; lda: PInteger; b: PDouble;
  ldb: PInteger; beta: PDouble; c__: PDouble; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'dsyr2k_';
function csyr2k_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'csyr2k_';
function zsyr2k_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: Pointer; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zsyr2k_';
function cher2k_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: PSingle; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'cher2k_';
function zher2k_(uplo: MarshaledAString; trans: MarshaledAString; n: PInteger;
  k: PInteger; alpha: Pointer; a: Pointer; lda: PInteger; b: Pointer;
  ldb: PInteger; beta: PDouble; c__: Pointer; ldc: PInteger): Integer; cdecl;
  external libAccelerate name _PU + 'zher2k_';
function cblas_errprn(__ierr: Integer; __info: Integer;
  __form: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'cblas_errprn';
procedure cblas_xerbla(__P: Integer; __rout: MarshaledAString;
  __form: MarshaledAString); cdecl;
  external libAccelerate name _PU + 'cblas_xerbla';
function cblas_sdsdot(__N: Integer; __alpha: Single; __X: PSingle;
  __incX: Integer; __Y: PSingle; __incY: Integer): Single; cdecl;
  external libAccelerate name _PU + 'cblas_sdsdot';
function cblas_dsdot(__N: Integer; __X: PSingle; __incX: Integer; __Y: PSingle;
  __incY: Integer): Double; cdecl;
  external libAccelerate name _PU + 'cblas_dsdot';
function cblas_sdot(__N: Integer; __X: PSingle; __incX: Integer; __Y: PSingle;
  __incY: Integer): Single; cdecl;
  external libAccelerate name _PU + 'cblas_sdot';
function cblas_ddot(__N: Integer; __X: PDouble; __incX: Integer; __Y: PDouble;
  __incY: Integer): Double; cdecl;
  external libAccelerate name _PU + 'cblas_ddot';
procedure cblas_cdotu_sub(__N: Integer; __X: Pointer; __incX: Integer;
  __Y: Pointer; __incY: Integer; __dotu: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_cdotu_sub';
procedure cblas_cdotc_sub(__N: Integer; __X: Pointer; __incX: Integer;
  __Y: Pointer; __incY: Integer; __dotc: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_cdotc_sub';
procedure cblas_zdotu_sub(__N: Integer; __X: Pointer; __incX: Integer;
  __Y: Pointer; __incY: Integer; __dotu: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_zdotu_sub';
procedure cblas_zdotc_sub(__N: Integer; __X: Pointer; __incX: Integer;
  __Y: Pointer; __incY: Integer; __dotc: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_zdotc_sub';
function cblas_snrm2(__N: Integer; __X: PSingle; __incX: Integer): Single;
  cdecl; external libAccelerate name _PU + 'cblas_snrm2';
function cblas_sasum(__N: Integer; __X: PSingle; __incX: Integer): Single;
  cdecl; external libAccelerate name _PU + 'cblas_sasum';
function cblas_dnrm2(__N: Integer; __X: PDouble; __incX: Integer): Double;
  cdecl; external libAccelerate name _PU + 'cblas_dnrm2';
function cblas_dasum(__N: Integer; __X: PDouble; __incX: Integer): Double;
  cdecl; external libAccelerate name _PU + 'cblas_dasum';
function cblas_scnrm2(__N: Integer; __X: Pointer; __incX: Integer): Single;
  cdecl; external libAccelerate name _PU + 'cblas_scnrm2';
function cblas_scasum(__N: Integer; __X: Pointer; __incX: Integer): Single;
  cdecl; external libAccelerate name _PU + 'cblas_scasum';
function cblas_dznrm2(__N: Integer; __X: Pointer; __incX: Integer): Double;
  cdecl; external libAccelerate name _PU + 'cblas_dznrm2';
function cblas_dzasum(__N: Integer; __X: Pointer; __incX: Integer): Double;
  cdecl; external libAccelerate name _PU + 'cblas_dzasum';
function cblas_isamax(__N: Integer; __X: PSingle; __incX: Integer): Integer;
  cdecl; external libAccelerate name _PU + 'cblas_isamax';
function cblas_idamax(__N: Integer; __X: PDouble; __incX: Integer): Integer;
  cdecl; external libAccelerate name _PU + 'cblas_idamax';
function cblas_icamax(__N: Integer; __X: Pointer; __incX: Integer): Integer;
  cdecl; external libAccelerate name _PU + 'cblas_icamax';
function cblas_izamax(__N: Integer; __X: Pointer; __incX: Integer): Integer;
  cdecl; external libAccelerate name _PU + 'cblas_izamax';
procedure cblas_sswap(__N: Integer; __X: PSingle; __incX: Integer; __Y: PSingle;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_sswap';
procedure cblas_scopy(__N: Integer; __X: PSingle; __incX: Integer; __Y: PSingle;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_scopy';
procedure cblas_saxpy(__N: Integer; __alpha: Single; __X: PSingle;
  __incX: Integer; __Y: PSingle; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_saxpy';
procedure catlas_saxpby(__N: Integer; __alpha: Single; __X: PSingle;
  __incX: Integer; __beta: Single; __Y: PSingle; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'catlas_saxpby';
procedure catlas_sset(__N: Integer; __alpha: Single; __X: PSingle;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'catlas_sset';
procedure cblas_dswap(__N: Integer; __X: PDouble; __incX: Integer; __Y: PDouble;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_dswap';
procedure cblas_dcopy(__N: Integer; __X: PDouble; __incX: Integer; __Y: PDouble;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_dcopy';
procedure cblas_daxpy(__N: Integer; __alpha: Double; __X: PDouble;
  __incX: Integer; __Y: PDouble; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_daxpy';
procedure catlas_daxpby(__N: Integer; __alpha: Double; __X: PDouble;
  __incX: Integer; __beta: Double; __Y: PDouble; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'catlas_daxpby';
procedure catlas_dset(__N: Integer; __alpha: Double; __X: PDouble;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'catlas_dset';
procedure cblas_cswap(__N: Integer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_cswap';
procedure cblas_ccopy(__N: Integer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_ccopy';
procedure cblas_caxpy(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_caxpy';
procedure catlas_caxpby(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer; __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'catlas_caxpby';
procedure catlas_cset(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'catlas_cset';
procedure cblas_zswap(__N: Integer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_zswap';
procedure cblas_zcopy(__N: Integer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_zcopy';
procedure cblas_zaxpy(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zaxpy';
procedure catlas_zaxpby(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer; __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'catlas_zaxpby';
procedure catlas_zset(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'catlas_zset';
procedure cblas_srotg(__A: PSingle; __B: PSingle; __C: PSingle; __S: PSingle);
  cdecl; external libAccelerate name _PU + 'cblas_srotg';
procedure cblas_srotmg(__d1: PSingle; __d2: PSingle; __b1: PSingle;
  __b2: Single; __P: PSingle); cdecl;
  external libAccelerate name _PU + 'cblas_srotmg';
procedure cblas_srot(__N: Integer; __X: PSingle; __incX: Integer; __Y: PSingle;
  __incY: Integer; __C: Single; __S: Single); cdecl;
  external libAccelerate name _PU + 'cblas_srot';
procedure cblas_srotm(__N: Integer; __X: PSingle; __incX: Integer; __Y: PSingle;
  __incY: Integer; __P: PSingle); cdecl;
  external libAccelerate name _PU + 'cblas_srotm';
procedure cblas_drotg(__A: PDouble; __B: PDouble; __C: PDouble; __S: PDouble);
  cdecl; external libAccelerate name _PU + 'cblas_drotg';
procedure cblas_drotmg(__d1: PDouble; __d2: PDouble; __b1: PDouble;
  __b2: Double; __P: PDouble); cdecl;
  external libAccelerate name _PU + 'cblas_drotmg';
procedure cblas_drot(__N: Integer; __X: PDouble; __incX: Integer; __Y: PDouble;
  __incY: Integer; __C: Double; __S: Double); cdecl;
  external libAccelerate name _PU + 'cblas_drot';
procedure cblas_drotm(__N: Integer; __X: PDouble; __incX: Integer; __Y: PDouble;
  __incY: Integer; __P: PDouble); cdecl;
  external libAccelerate name _PU + 'cblas_drotm';
procedure cblas_sscal(__N: Integer; __alpha: Single; __X: PSingle;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_sscal';
procedure cblas_dscal(__N: Integer; __alpha: Double; __X: PDouble;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_dscal';
procedure cblas_cscal(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_cscal';
procedure cblas_zscal(__N: Integer; __alpha: Pointer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_zscal';
procedure cblas_csscal(__N: Integer; __alpha: Single; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_csscal';
procedure cblas_zdscal(__N: Integer; __alpha: Double; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_zdscal';
procedure cblas_crotg(__A: Pointer; __B: Pointer; __C: Pointer; __S: Pointer);
  cdecl; external libAccelerate name _PU + 'cblas_crotg';
procedure cblas_zrotg(__A: Pointer; __B: Pointer; __C: Pointer; __S: Pointer);
  cdecl; external libAccelerate name _PU + 'cblas_zrotg';
procedure cblas_csrot(__N: Integer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __C: Single; __S: Single); cdecl;
  external libAccelerate name _PU + 'cblas_csrot';
procedure cblas_zdrot(__N: Integer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __C: Double; __S: Double); cdecl;
  external libAccelerate name _PU + 'cblas_zdrot';
procedure cblas_sgemv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __alpha: Single; __A: PSingle; __lda: Integer; __X: PSingle;
  __incX: Integer; __beta: Single; __Y: PSingle; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_sgemv';
procedure cblas_sgbmv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __KL: Integer; __KU: Integer; __alpha: Single; __A: PSingle;
  __lda: Integer; __X: PSingle; __incX: Integer; __beta: Single; __Y: PSingle;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_sgbmv';
procedure cblas_strmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: PSingle; __lda: Integer; __X: PSingle;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_strmv';
procedure cblas_stbmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: PSingle; __lda: Integer;
  __X: PSingle; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_stbmv';
procedure cblas_stpmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: PSingle; __X: PSingle; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_stpmv';
procedure cblas_strsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: PSingle; __lda: Integer; __X: PSingle;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_strsv';
procedure cblas_stbsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: PSingle; __lda: Integer;
  __X: PSingle; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_stbsv';
procedure cblas_stpsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: PSingle; __X: PSingle; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_stpsv';
procedure cblas_dgemv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __alpha: Double; __A: PDouble; __lda: Integer; __X: PDouble;
  __incX: Integer; __beta: Double; __Y: PDouble; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dgemv';
procedure cblas_dgbmv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __KL: Integer; __KU: Integer; __alpha: Double; __A: PDouble;
  __lda: Integer; __X: PDouble; __incX: Integer; __beta: Double; __Y: PDouble;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_dgbmv';
procedure cblas_dtrmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: PDouble; __lda: Integer; __X: PDouble;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_dtrmv';
procedure cblas_dtbmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: PDouble; __lda: Integer;
  __X: PDouble; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dtbmv';
procedure cblas_dtpmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: PDouble; __X: PDouble; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_dtpmv';
procedure cblas_dtrsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: PDouble; __lda: Integer; __X: PDouble;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_dtrsv';
procedure cblas_dtbsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: PDouble; __lda: Integer;
  __X: PDouble; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dtbsv';
procedure cblas_dtpsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: PDouble; __X: PDouble; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_dtpsv';
procedure cblas_cgemv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer; __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_cgemv';
procedure cblas_cgbmv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __KL: Integer; __KU: Integer; __alpha: Pointer; __A: Pointer;
  __lda: Integer; __X: Pointer; __incX: Integer; __beta: Pointer; __Y: Pointer;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_cgbmv';
procedure cblas_ctrmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_ctrmv';
procedure cblas_ctbmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: Pointer; __lda: Integer;
  __X: Pointer; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ctbmv';
procedure cblas_ctpmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: Pointer; __X: Pointer; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ctpmv';
procedure cblas_ctrsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_ctrsv';
procedure cblas_ctbsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: Pointer; __lda: Integer;
  __X: Pointer; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ctbsv';
procedure cblas_ctpsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: Pointer; __X: Pointer; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ctpsv';
procedure cblas_zgemv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer; __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zgemv';
procedure cblas_zgbmv(__Order: Cardinal; __TransA: Cardinal; __M: Integer;
  __N: Integer; __KL: Integer; __KU: Integer; __alpha: Pointer; __A: Pointer;
  __lda: Integer; __X: Pointer; __incX: Integer; __beta: Pointer; __Y: Pointer;
  __incY: Integer); cdecl; external libAccelerate name _PU + 'cblas_zgbmv';
procedure cblas_ztrmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_ztrmv';
procedure cblas_ztbmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: Pointer; __lda: Integer;
  __X: Pointer; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ztbmv';
procedure cblas_ztpmv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: Pointer; __X: Pointer; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ztpmv';
procedure cblas_ztrsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer); cdecl; external libAccelerate name _PU + 'cblas_ztrsv';
procedure cblas_ztbsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __K: Integer; __A: Pointer; __lda: Integer;
  __X: Pointer; __incX: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ztbsv';
procedure cblas_ztpsv(__Order: Cardinal; __Uplo: Cardinal; __TransA: Cardinal;
  __Diag: Cardinal; __N: Integer; __Ap: Pointer; __X: Pointer; __incX: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ztpsv';
procedure cblas_ssymv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __A: PSingle; __lda: Integer; __X: PSingle; __incX: Integer;
  __beta: Single; __Y: PSingle; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ssymv';
procedure cblas_ssbmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __K: Integer; __alpha: Single; __A: PSingle; __lda: Integer; __X: PSingle;
  __incX: Integer; __beta: Single; __Y: PSingle; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ssbmv';
procedure cblas_sspmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __Ap: PSingle; __X: PSingle; __incX: Integer; __beta: Single;
  __Y: PSingle; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_sspmv';
procedure cblas_sger(__Order: Cardinal; __M: Integer; __N: Integer;
  __alpha: Single; __X: PSingle; __incX: Integer; __Y: PSingle; __incY: Integer;
  __A: PSingle; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_sger';
procedure cblas_ssyr(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __X: PSingle; __incX: Integer; __A: PSingle; __lda: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ssyr';
procedure cblas_sspr(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __X: PSingle; __incX: Integer; __Ap: PSingle); cdecl;
  external libAccelerate name _PU + 'cblas_sspr';
procedure cblas_ssyr2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __X: PSingle; __incX: Integer; __Y: PSingle; __incY: Integer;
  __A: PSingle; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ssyr2';
procedure cblas_sspr2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __X: PSingle; __incX: Integer; __Y: PSingle; __incY: Integer;
  __A: PSingle); cdecl; external libAccelerate name _PU + 'cblas_sspr2';
procedure cblas_dsymv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __A: PDouble; __lda: Integer; __X: PDouble; __incX: Integer;
  __beta: Double; __Y: PDouble; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dsymv';
procedure cblas_dsbmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __K: Integer; __alpha: Double; __A: PDouble; __lda: Integer; __X: PDouble;
  __incX: Integer; __beta: Double; __Y: PDouble; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dsbmv';
procedure cblas_dspmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __Ap: PDouble; __X: PDouble; __incX: Integer; __beta: Double;
  __Y: PDouble; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dspmv';
procedure cblas_dger(__Order: Cardinal; __M: Integer; __N: Integer;
  __alpha: Double; __X: PDouble; __incX: Integer; __Y: PDouble; __incY: Integer;
  __A: PDouble; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dger';
procedure cblas_dsyr(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __X: PDouble; __incX: Integer; __A: PDouble; __lda: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_dsyr';
procedure cblas_dspr(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __X: PDouble; __incX: Integer; __Ap: PDouble); cdecl;
  external libAccelerate name _PU + 'cblas_dspr';
procedure cblas_dsyr2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __X: PDouble; __incX: Integer; __Y: PDouble; __incY: Integer;
  __A: PDouble; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dsyr2';
procedure cblas_dspr2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __X: PDouble; __incX: Integer; __Y: PDouble; __incY: Integer;
  __A: PDouble); cdecl; external libAccelerate name _PU + 'cblas_dspr2';
procedure cblas_chemv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __A: Pointer; __lda: Integer; __X: Pointer; __incX: Integer;
  __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_chemv';
procedure cblas_chbmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer; __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_chbmv';
procedure cblas_chpmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __Ap: Pointer; __X: Pointer; __incX: Integer;
  __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_chpmv';
procedure cblas_cgeru(__Order: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __A: Pointer; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_cgeru';
procedure cblas_cgerc(__Order: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __A: Pointer; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_cgerc';
procedure cblas_cher(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __X: Pointer; __incX: Integer; __A: Pointer; __lda: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_cher';
procedure cblas_chpr(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Single; __X: Pointer; __incX: Integer; __A: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_chpr';
procedure cblas_cher2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __A: Pointer; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_cher2';
procedure cblas_chpr2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __Ap: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_chpr2';
procedure cblas_zhemv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __A: Pointer; __lda: Integer; __X: Pointer; __incX: Integer;
  __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zhemv';
procedure cblas_zhbmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer; __X: Pointer;
  __incX: Integer; __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zhbmv';
procedure cblas_zhpmv(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __Ap: Pointer; __X: Pointer; __incX: Integer;
  __beta: Pointer; __Y: Pointer; __incY: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zhpmv';
procedure cblas_zgeru(__Order: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __A: Pointer; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zgeru';
procedure cblas_zgerc(__Order: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __A: Pointer; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zgerc';
procedure cblas_zher(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __X: Pointer; __incX: Integer; __A: Pointer; __lda: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_zher';
procedure cblas_zhpr(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Double; __X: Pointer; __incX: Integer; __A: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_zhpr';
procedure cblas_zher2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __A: Pointer; __lda: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zher2';
procedure cblas_zhpr2(__Order: Cardinal; __Uplo: Cardinal; __N: Integer;
  __alpha: Pointer; __X: Pointer; __incX: Integer; __Y: Pointer;
  __incY: Integer; __Ap: Pointer); cdecl;
  external libAccelerate name _PU + 'cblas_zhpr2';
procedure cblas_sgemm(__Order: Cardinal; __TransA: Cardinal; __TransB: Cardinal;
  __M: Integer; __N: Integer; __K: Integer; __alpha: Single; __A: PSingle;
  __lda: Integer; __B: PSingle; __ldb: Integer; __beta: Single; __C: PSingle;
  __ldc: Integer); cdecl; external libAccelerate name _PU + 'cblas_sgemm';
procedure cblas_ssymm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __M: Integer; __N: Integer; __alpha: Single; __A: PSingle; __lda: Integer;
  __B: PSingle; __ldb: Integer; __beta: Single; __C: PSingle; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ssymm';
procedure cblas_ssyrk(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Single; __A: PSingle; __lda: Integer;
  __beta: Single; __C: PSingle; __ldc: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_ssyrk';
procedure cblas_ssyr2k(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Single; __A: PSingle; __lda: Integer;
  __B: PSingle; __ldb: Integer; __beta: Single; __C: PSingle; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ssyr2k';
procedure cblas_strmm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Single; __A: PSingle; __lda: Integer; __B: PSingle; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_strmm';
procedure cblas_strsm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Single; __A: PSingle; __lda: Integer; __B: PSingle; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_strsm';
procedure cblas_dgemm(__Order: Cardinal; __TransA: Cardinal; __TransB: Cardinal;
  __M: Integer; __N: Integer; __K: Integer; __alpha: Double; __A: PDouble;
  __lda: Integer; __B: PDouble; __ldb: Integer; __beta: Double; __C: PDouble;
  __ldc: Integer); cdecl; external libAccelerate name _PU + 'cblas_dgemm';
procedure cblas_dsymm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __M: Integer; __N: Integer; __alpha: Double; __A: PDouble; __lda: Integer;
  __B: PDouble; __ldb: Integer; __beta: Double; __C: PDouble; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_dsymm';
procedure cblas_dsyrk(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Double; __A: PDouble; __lda: Integer;
  __beta: Double; __C: PDouble; __ldc: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_dsyrk';
procedure cblas_dsyr2k(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Double; __A: PDouble; __lda: Integer;
  __B: PDouble; __ldb: Integer; __beta: Double; __C: PDouble; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_dsyr2k';
procedure cblas_dtrmm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Double; __A: PDouble; __lda: Integer; __B: PDouble; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_dtrmm';
procedure cblas_dtrsm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Double; __A: PDouble; __lda: Integer; __B: PDouble; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_dtrsm';
procedure cblas_cgemm(__Order: Cardinal; __TransA: Cardinal; __TransB: Cardinal;
  __M: Integer; __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer;
  __lda: Integer; __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer;
  __ldc: Integer); cdecl; external libAccelerate name _PU + 'cblas_cgemm';
procedure cblas_csymm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __M: Integer; __N: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_csymm';
procedure cblas_csyrk(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __beta: Pointer; __C: Pointer; __ldc: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_csyrk';
procedure cblas_csyr2k(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_csyr2k';
procedure cblas_ctrmm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __A: Pointer; __lda: Integer; __B: Pointer; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ctrmm';
procedure cblas_ctrsm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __A: Pointer; __lda: Integer; __B: Pointer; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ctrsm';
procedure cblas_zgemm(__Order: Cardinal; __TransA: Cardinal; __TransB: Cardinal;
  __M: Integer; __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer;
  __lda: Integer; __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer;
  __ldc: Integer); cdecl; external libAccelerate name _PU + 'cblas_zgemm';
procedure cblas_zsymm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __M: Integer; __N: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_zsymm';
procedure cblas_zsyrk(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __beta: Pointer; __C: Pointer; __ldc: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zsyrk';
procedure cblas_zsyr2k(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_zsyr2k';
procedure cblas_ztrmm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __A: Pointer; __lda: Integer; __B: Pointer; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ztrmm';
procedure cblas_ztrsm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __TransA: Cardinal; __Diag: Cardinal; __M: Integer; __N: Integer;
  __alpha: Pointer; __A: Pointer; __lda: Integer; __B: Pointer; __ldb: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_ztrsm';
procedure cblas_chemm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __M: Integer; __N: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_chemm';
procedure cblas_cherk(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Single; __A: Pointer; __lda: Integer;
  __beta: Single; __C: Pointer; __ldc: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_cherk';
procedure cblas_cher2k(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Single; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_cher2k';
procedure cblas_zhemm(__Order: Cardinal; __Side: Cardinal; __Uplo: Cardinal;
  __M: Integer; __N: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Pointer; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_zhemm';
procedure cblas_zherk(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Double; __A: Pointer; __lda: Integer;
  __beta: Double; __C: Pointer; __ldc: Integer); cdecl;
  external libAccelerate name _PU + 'cblas_zherk';
procedure cblas_zher2k(__Order: Cardinal; __Uplo: Cardinal; __Trans: Cardinal;
  __N: Integer; __K: Integer; __alpha: Pointer; __A: Pointer; __lda: Integer;
  __B: Pointer; __ldb: Integer; __beta: Double; __C: Pointer; __ldc: Integer);
  cdecl; external libAccelerate name _PU + 'cblas_zher2k';
procedure appleblas_sgeadd(__Order: Cardinal; __TransA: Cardinal;
  __TransB: Cardinal; __M: Integer; __N: Integer; __alpha: Single; __A: PSingle;
  __lda: Integer; __beta: Single; __B: PSingle; __ldb: Integer; __C: PSingle;
  __ldc: Integer); cdecl; external libAccelerate name _PU + 'appleblas_sgeadd';
procedure appleblas_dgeadd(__Order: Cardinal; __TransA: Cardinal;
  __TransB: Cardinal; __M: Integer; __N: Integer; __alpha: Double; __A: PDouble;
  __lda: Integer; __beta: Double; __B: PDouble; __ldb: Integer; __C: PDouble;
  __ldc: Integer); cdecl; external libAccelerate name _PU + 'appleblas_dgeadd';
procedure SetBLASParamErrorProc(__ErrorProc: BLASParamErrorProc); cdecl;
  external libAccelerate name _PU + 'SetBLASParamErrorProc';
function cbdsqr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __ncvt: P__CLPK_integer; __nru: P__CLPK_integer; __ncc: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __vt: P__CLPK_complex;
  __ldvt: P__CLPK_integer; __u: P__CLPK_complex; __ldu: P__CLPK_integer;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cbdsqr_';
function cgbbrd_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __ncc: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __pt: P__CLPK_complex; __ldpt: P__CLPK_integer;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgbbrd_';
function cgbcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgbcon_';
function cgbequ_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgbequ_';
function cgbequb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgbequb_';
function cgbrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __afb: P__CLPK_complex;
  __ldafb: P__CLPK_integer; __ipiv: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgbrfs_';
function cgbsv_(__N: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgbsv_';
function cgbsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __KL: P__CLPK_integer; __KU: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __afb: P__CLPK_complex; __ldafb: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __equed: MarshaledAString; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_real; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgbsvx_';
function cgbtf2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgbtf2_';
function cgbtrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgbtrf_';
function cgbtrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgbtrs_';
function cgebak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __scale: P__CLPK_real; __M: P__CLPK_integer; __v: P__CLPK_complex;
  __ldv: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgebak_';
function cgebal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __scale: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgebal_';
function cgebd2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __tauq: P__CLPK_complex; __taup: P__CLPK_complex;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgebd2_';
function cgebrd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __tauq: P__CLPK_complex; __taup: P__CLPK_complex;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgebrd_';
function cgecon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgecon_';
function cgeequ_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __r__: P__CLPK_real;
  __c__: P__CLPK_real; __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeequ_';
function cgeequb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __r__: P__CLPK_real;
  __c__: P__CLPK_real; __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeequb_';
function cgees_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __sdim: P__CLPK_integer; __w: P__CLPK_complex;
  __vs: P__CLPK_complex; __ldvs: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgees_';
function cgeesx_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __sdim: P__CLPK_integer;
  __w: P__CLPK_complex; __vs: P__CLPK_complex; __ldvs: P__CLPK_integer;
  __rconde: P__CLPK_real; __rcondv: P__CLPK_real; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeesx_';
function cgeev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __w: P__CLPK_complex; __vl: P__CLPK_complex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_complex; __ldvr: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgeev_';
function cgeevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __w: P__CLPK_complex;
  __vl: P__CLPK_complex; __ldvl: P__CLPK_integer; __vr: P__CLPK_complex;
  __ldvr: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __scale: P__CLPK_real; __abnrm: P__CLPK_real; __rconde: P__CLPK_real;
  __rcondv: P__CLPK_real; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeevx_';
function cgegs_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __alpha: P__CLPK_complex;
  __beta: P__CLPK_complex; __vsl: P__CLPK_complex; __ldvsl: P__CLPK_integer;
  __vsr: P__CLPK_complex; __ldvsr: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgegs_';
function cgegv_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __alpha: P__CLPK_complex;
  __beta: P__CLPK_complex; __vl: P__CLPK_complex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_complex; __ldvr: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgegv_';
function cgehd2_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgehd2_';
function cgehrd_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgehrd_';
function cgelq2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgelq2_';
function cgelqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgelqf_';
function cgels_(__Trans: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgels_';
function cgelsd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __S: P__CLPK_real;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgelsd_';
function cgelss_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __S: P__CLPK_real;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgelss_';
function cgelsx_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgelsx_';
function cgelsy_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgelsy_';
function cgeql2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeql2_';
function cgeqlf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgeqlf_';
function cgeqp3_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeqp3_';
function cgeqpf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeqpf_';
function cgeqr2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgeqr2_';
function cgeqrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgeqrf_';
function cgerfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __af: P__CLPK_complex; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgerfs_';
function cgerq2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgerq2_';
function cgerqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgerqf_';
function cgesc2_(__N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __rhs: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __jpiv: P__CLPK_integer; __scale: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'cgesc2_';
function cgesdd_(__jobz: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __S: P__CLPK_real; __u: P__CLPK_complex; __ldu: P__CLPK_integer;
  __vt: P__CLPK_complex; __ldvt: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgesdd_';
function cgesv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgesv_';
function cgesvd_(__jobu: MarshaledAString; __jobvt: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __S: P__CLPK_real; __u: P__CLPK_complex;
  __ldu: P__CLPK_integer; __vt: P__CLPK_complex; __ldvt: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgesvd_';
function cgesvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __af: P__CLPK_complex; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __equed: MarshaledAString; __r__: P__CLPK_real;
  __c__: P__CLPK_real; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __X: P__CLPK_complex; __ldx: P__CLPK_integer; __rcond: P__CLPK_real;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgesvx_';
function cgetc2_(__N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __jpiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgetc2_';
function cgetf2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgetf2_';
function cgetrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgetrf_';
function cgetri_(__N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgetri_';
function cgetrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgetrs_';
function cggbak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_real; __rscale: P__CLPK_real; __M: P__CLPK_integer;
  __v: P__CLPK_complex; __ldv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cggbak_';
function cggbal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_real; __rscale: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cggbal_';
function cgges_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __sdim: P__CLPK_integer; __alpha: P__CLPK_complex;
  __beta: P__CLPK_complex; __vsl: P__CLPK_complex; __ldvsl: P__CLPK_integer;
  __vsr: P__CLPK_complex; __ldvsr: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgges_';
function cggesx_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __sense: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __sdim: P__CLPK_integer;
  __alpha: P__CLPK_complex; __beta: P__CLPK_complex; __vsl: P__CLPK_complex;
  __ldvsl: P__CLPK_integer; __vsr: P__CLPK_complex; __ldvsr: P__CLPK_integer;
  __rconde: P__CLPK_real; __rcondv: P__CLPK_real; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cggesx_';
function cggev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __alpha: P__CLPK_complex;
  __beta: P__CLPK_complex; __vl: P__CLPK_complex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_complex; __ldvr: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cggev_';
function cggevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __alpha: P__CLPK_complex; __beta: P__CLPK_complex;
  __vl: P__CLPK_complex; __ldvl: P__CLPK_integer; __vr: P__CLPK_complex;
  __ldvr: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_real; __rscale: P__CLPK_real; __abnrm: P__CLPK_real;
  __bbnrm: P__CLPK_real; __rconde: P__CLPK_real; __rcondv: P__CLPK_real;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __rwork: P__CLPK_real;
  __iwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cggevx_';
function cggglm_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __d__: P__CLPK_complex;
  __X: P__CLPK_complex; __Y: P__CLPK_complex; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cggglm_';
function cgghrd_(__compq: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __Q: P__CLPK_complex; __ldq: P__CLPK_integer;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgghrd_';
function cgglse_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __c__: P__CLPK_complex;
  __d__: P__CLPK_complex; __X: P__CLPK_complex; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgglse_';
function cggqrf_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __taua: P__CLPK_complex; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __taub: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cggqrf_';
function cggrqf_(__M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __taua: P__CLPK_complex; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __taub: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cggrqf_';
function cggsvd_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __alpha: P__CLPK_real; __beta: P__CLPK_real;
  __u: P__CLPK_complex; __ldu: P__CLPK_integer; __v: P__CLPK_complex;
  __ldv: P__CLPK_integer; __Q: P__CLPK_complex; __ldq: P__CLPK_integer;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cggsvd_';
function cggsvp_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __tola: P__CLPK_real;
  __tolb: P__CLPK_real; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __u: P__CLPK_complex; __ldu: P__CLPK_integer; __v: P__CLPK_complex;
  __ldv: P__CLPK_integer; __Q: P__CLPK_complex; __ldq: P__CLPK_integer;
  __iwork: P__CLPK_integer; __rwork: P__CLPK_real; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cggsvp_';
function cgtcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_complex; __d__: P__CLPK_complex; __du: P__CLPK_complex;
  __du2: P__CLPK_complex; __ipiv: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgtcon_';
function cgtrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_complex; __d__: P__CLPK_complex;
  __du: P__CLPK_complex; __dlf: P__CLPK_complex; __DF: P__CLPK_complex;
  __duf: P__CLPK_complex; __du2: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgtrfs_';
function cgtsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __dl: P__CLPK_complex; __d__: P__CLPK_complex; __du: P__CLPK_complex;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgtsv_';
function cgtsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __dl: P__CLPK_complex;
  __d__: P__CLPK_complex; __du: P__CLPK_complex; __dlf: P__CLPK_complex;
  __DF: P__CLPK_complex; __duf: P__CLPK_complex; __du2: P__CLPK_complex;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __X: P__CLPK_complex; __ldx: P__CLPK_integer; __rcond: P__CLPK_real;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgtsvx_';
function cgttrf_(__N: P__CLPK_integer; __dl: P__CLPK_complex;
  __d__: P__CLPK_complex; __du: P__CLPK_complex; __du2: P__CLPK_complex;
  __ipiv: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgttrf_';
function cgttrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_complex; __d__: P__CLPK_complex;
  __du: P__CLPK_complex; __du2: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cgttrs_';
function cgtts2_(__itrans: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_complex; __d__: P__CLPK_complex;
  __du: P__CLPK_complex; __du2: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cgtts2_';
function chbev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chbev_';
function chbevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chbevd_';
function chbevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chbevx_';
function chbgst_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __bb: P__CLPK_complex;
  __ldbb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chbgst_';
function chbgv_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __bb: P__CLPK_complex;
  __ldbb: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chbgv_';
function chbgvd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __bb: P__CLPK_complex;
  __ldbb: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chbgvd_';
function chbgvx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __ka: P__CLPK_integer;
  __kb: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __bb: P__CLPK_complex; __ldbb: P__CLPK_integer; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chbgvx_';
function chbtrd_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __Q: P__CLPK_complex; __ldq: P__CLPK_integer; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chbtrd_';
function checon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_real; __rcond: P__CLPK_real; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'checon_';
function cheequb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __S: P__CLPK_real;
  __scond: P__CLPK_real; __amax: P__CLPK_real; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cheequb_';
function cheev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cheev_';
function cheevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cheevd_';
function cheevr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __isuppz: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cheevr_';
function cheevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __iwork: P__CLPK_integer; __ifail: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cheevx_';
function chegs2_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chegs2_';
function chegst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chegst_';
function chegv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chegv_';
function chegvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chegvd_';
function chegvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __iwork: P__CLPK_integer; __ifail: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chegvx_';
function cherfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __af: P__CLPK_complex; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cherfs_';
function chesv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chesv_';
function chesvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __af: P__CLPK_complex; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __X: P__CLPK_complex; __ldx: P__CLPK_integer; __rcond: P__CLPK_real;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chesvx_';
function chetd2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __tau: P__CLPK_complex; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'chetd2_';
function chetf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chetf2_';
function chetrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __tau: P__CLPK_complex; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chetrd_';
function chetrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chetrf_';
function chetri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chetri_';
function chetrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chetrs_';
function chfrk_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __alpha: P__CLPK_real; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __beta: P__CLPK_real; __c__: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'chfrk_';
function chgeqz_(__job: MarshaledAString; __compq: MarshaledAString;
  __compz: MarshaledAString; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __h__: P__CLPK_complex; __ldh: P__CLPK_integer;
  __t: P__CLPK_complex; __ldt: P__CLPK_integer; __alpha: P__CLPK_complex;
  __beta: P__CLPK_complex; __Q: P__CLPK_complex; __ldq: P__CLPK_integer;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chgeqz_';
procedure chla_transtype__(__ret_val: MarshaledAString;
  __ret_val_len: __CLPK_ftnlen; __Trans: P__CLPK_integer); cdecl;
  external libAccelerate name _PU + 'chla_transtype__';
function chpcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chpcon_';
function chpev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_complex; __w: P__CLPK_real;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chpev_';
function chpevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_complex; __w: P__CLPK_real;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chpevd_';
function chpevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_complex;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_real; __M: P__CLPK_integer;
  __w: P__CLPK_real; __z__: P__CLPK_complex; __ldz: P__CLPK_integer;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chpevx_';
function chpgst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_complex; __bp: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chpgst_';
function chpgv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_complex;
  __bp: P__CLPK_complex; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chpgv_';
function chpgvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_complex;
  __bp: P__CLPK_complex; __w: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chpgvd_';
function chpgvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __bp: P__CLPK_complex; __vl: P__CLPK_real;
  __vu: P__CLPK_real; __il: P__CLPK_integer; __iu: P__CLPK_integer;
  __abstol: P__CLPK_real; __M: P__CLPK_integer; __w: P__CLPK_real;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __iwork: P__CLPK_integer; __ifail: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chpgvx_';
function chprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __afp: P__CLPK_complex;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __X: P__CLPK_complex; __ldx: P__CLPK_integer; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chprfs_';
function chpsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chpsv_';
function chpsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex;
  __afp: P__CLPK_complex; __ipiv: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_real; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chpsvx_';
function chptrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __d__: P__CLPK_real; __E: P__CLPK_real;
  __tau: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chptrd_';
function chptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chptrf_';
function chptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chptri_';
function chptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'chptrs_';
function chsein_(__Side: MarshaledAString; __eigsrc: MarshaledAString;
  __initv: MarshaledAString; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __h__: P__CLPK_complex; __ldh: P__CLPK_integer; __w: P__CLPK_complex;
  __vl: P__CLPK_complex; __ldvl: P__CLPK_integer; __vr: P__CLPK_complex;
  __ldvr: P__CLPK_integer; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __ifaill: P__CLPK_integer;
  __ifailr: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chsein_';
function chseqr_(__job: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_complex; __ldh: P__CLPK_integer; __w: P__CLPK_complex;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'chseqr_';
function clabrd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __tauq: P__CLPK_complex;
  __taup: P__CLPK_complex; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __Y: P__CLPK_complex; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clabrd_';
function clacgv_(__N: P__CLPK_integer; __X: P__CLPK_complex;
  __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clacgv_';
function clacn2_(__N: P__CLPK_integer; __v: P__CLPK_complex;
  __X: P__CLPK_complex; __est: P__CLPK_real; __kase: P__CLPK_integer;
  __isave: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clacn2_';
function clacon_(__N: P__CLPK_integer; __v: P__CLPK_complex;
  __X: P__CLPK_complex; __est: P__CLPK_real; __kase: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'clacon_';
function clacp2_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clacp2_';
function clacpy_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clacpy_';
function clacrm_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __rwork: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'clacrm_';
function clacrt_(__N: P__CLPK_integer; __cx: P__CLPK_complex;
  __incX: P__CLPK_integer; __cy: P__CLPK_complex; __incY: P__CLPK_integer;
  __c__: P__CLPK_complex; __S: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clacrt_';
procedure cladiv_(__ret_val: P__CLPK_complex; __X: P__CLPK_complex;
  __Y: P__CLPK_complex); cdecl; external libAccelerate name _PU + 'cladiv_';
function claed0_(__qsiz: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __qstore: P__CLPK_complex; __ldqs: P__CLPK_integer;
  __rwork: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'claed0_';
function claed7_(__N: P__CLPK_integer; __cutpnt: P__CLPK_integer;
  __qsiz: P__CLPK_integer; __tlvls: P__CLPK_integer; __curlvl: P__CLPK_integer;
  __curpbm: P__CLPK_integer; __d__: P__CLPK_real; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __rho: P__CLPK_real; __indxq: P__CLPK_integer;
  __qstore: P__CLPK_real; __qptr: P__CLPK_integer; __prmptr: P__CLPK_integer;
  __perm: P__CLPK_integer; __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __givnum: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claed7_';
function claed8_(__K: P__CLPK_integer; __N: P__CLPK_integer;
  __qsiz: P__CLPK_integer; __Q: P__CLPK_complex; __ldq: P__CLPK_integer;
  __d__: P__CLPK_real; __rho: P__CLPK_real; __cutpnt: P__CLPK_integer;
  __z__: P__CLPK_real; __dlamda: P__CLPK_real; __q2: P__CLPK_complex;
  __ldq2: P__CLPK_integer; __w: P__CLPK_real; __indxp: P__CLPK_integer;
  __indx: P__CLPK_integer; __indxq: P__CLPK_integer; __perm: P__CLPK_integer;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer; __givnum: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claed8_';
function claein_(__rightv: P__CLPK_logical; __noinit: P__CLPK_logical;
  __N: P__CLPK_integer; __h__: P__CLPK_complex; __ldh: P__CLPK_integer;
  __w: P__CLPK_complex; __v: P__CLPK_complex; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __rwork: P__CLPK_real; __eps3: P__CLPK_real;
  __smlnum: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claein_';
function claesy_(__A: P__CLPK_complex; __B: P__CLPK_complex;
  __c__: P__CLPK_complex; __rt1: P__CLPK_complex; __rt2: P__CLPK_complex;
  __evscal: P__CLPK_complex; __cs1: P__CLPK_complex; __sn1: P__CLPK_complex)
  : Integer; cdecl; external libAccelerate name _PU + 'claesy_';
function claev2_(__A: P__CLPK_complex; __B: P__CLPK_complex;
  __c__: P__CLPK_complex; __rt1: P__CLPK_real; __rt2: P__CLPK_real;
  __cs1: P__CLPK_real; __sn1: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'claev2_';
function clag2z_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __sa: P__CLPK_complex; __ldsa: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clag2z_';
function clags2_(__upper: P__CLPK_logical; __A1: P__CLPK_real;
  __a2: P__CLPK_complex; __a3: P__CLPK_real; __b1: P__CLPK_real;
  __b2: P__CLPK_complex; __b3: P__CLPK_real; __csu: P__CLPK_real;
  __snu: P__CLPK_complex; __csv: P__CLPK_real; __snv: P__CLPK_complex;
  __csq: P__CLPK_real; __snq: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clags2_';
function clagtm_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __alpha: P__CLPK_real; __dl: P__CLPK_complex;
  __d__: P__CLPK_complex; __du: P__CLPK_complex; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __beta: P__CLPK_real; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clagtm_';
function clahef_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __kb: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __w: P__CLPK_complex;
  __ldw: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clahef_';
function clahqr_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_complex; __ldh: P__CLPK_integer; __w: P__CLPK_complex;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clahqr_';
function clahr2_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __t: P__CLPK_complex; __ldt: P__CLPK_integer;
  __Y: P__CLPK_complex; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clahr2_';
function clahrd_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __t: P__CLPK_complex; __ldt: P__CLPK_integer;
  __Y: P__CLPK_complex; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clahrd_';
function claic1_(__job: P__CLPK_integer; __j: P__CLPK_integer;
  __X: P__CLPK_complex; __sest: P__CLPK_real; __w: P__CLPK_complex;
  __gamma: P__CLPK_complex; __sestpr: P__CLPK_real; __S: P__CLPK_complex;
  __c__: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'claic1_';
function clals0_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __bx: P__CLPK_complex;
  __ldbx: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer; __givnum: P__CLPK_real;
  __ldgnum: P__CLPK_integer; __poles: P__CLPK_real; __difl: P__CLPK_real;
  __difr: P__CLPK_real; __z__: P__CLPK_real; __K: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_real; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clals0_';
function clalsa_(__icompq: P__CLPK_integer; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __bx: P__CLPK_complex; __ldbx: P__CLPK_integer;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __vt: P__CLPK_real;
  __K: P__CLPK_integer; __difl: P__CLPK_real; __difr: P__CLPK_real;
  __z__: P__CLPK_real; __poles: P__CLPK_real; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer; __perm: P__CLPK_integer;
  __givnum: P__CLPK_real; __c__: P__CLPK_real; __S: P__CLPK_real;
  __rwork: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'clalsa_';
function clalsd_(__Uplo: MarshaledAString; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'clalsd_';
function clangb_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clangb_';
function clange_(__norm: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clange_';
function clangt_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_complex; __d__: P__CLPK_complex; __du: P__CLPK_complex)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'clangt_';
function clanhb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clanhb_';
function clanhe_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clanhe_';
function clanhf_(__norm: MarshaledAString; __transr: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clanhf_';
function clanhp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_complex; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'clanhp_';
function clanhs_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'clanhs_';
function clanht_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_complex): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clanht_';
function clansb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clansb_';
function clansp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_complex; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'clansp_';
function clansy_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clansy_';
function clantb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'clantb_';
function clantp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_complex;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'clantp_';
function clantr_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'clantr_';
function clapll_(__N: P__CLPK_integer; __X: P__CLPK_complex;
  __incX: P__CLPK_integer; __Y: P__CLPK_complex; __incY: P__CLPK_integer;
  __ssmin: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'clapll_';
function clapmt_(__forwrd: P__CLPK_logical; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __K: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clapmt_';
function claqgb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'claqgb_';
function claqge_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __r__: P__CLPK_real;
  __c__: P__CLPK_real; __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real;
  __amax: P__CLPK_real; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'claqge_';
function claqhb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __S: P__CLPK_real; __scond: P__CLPK_real; __amax: P__CLPK_real;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'claqhb_';
function claqhe_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __S: P__CLPK_real;
  __scond: P__CLPK_real; __amax: P__CLPK_real; __equed: MarshaledAString)
  : Integer; cdecl; external libAccelerate name _PU + 'claqhe_';
function claqhp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'claqhp_';
function claqp2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __jpvt: P__CLPK_integer; __tau: P__CLPK_complex; __vn1: P__CLPK_real;
  __vn2: P__CLPK_real; __work: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'claqp2_';
function claqps_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __nb: P__CLPK_integer; __kb: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_complex; __vn1: P__CLPK_real; __vn2: P__CLPK_real;
  __auxv: P__CLPK_complex; __F: P__CLPK_complex; __ldf: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'claqps_';
function claqr0_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_complex; __ldh: P__CLPK_integer; __w: P__CLPK_complex;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claqr0_';
function claqr1_(__N: P__CLPK_integer; __h__: P__CLPK_complex;
  __ldh: P__CLPK_integer; __S1: P__CLPK_complex; __S2: P__CLPK_complex;
  __v: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'claqr1_';
function claqr2_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_complex; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __ns: P__CLPK_integer; __nd: P__CLPK_integer;
  __sh: P__CLPK_complex; __v: P__CLPK_complex; __ldv: P__CLPK_integer;
  __nh: P__CLPK_integer; __t: P__CLPK_complex; __ldt: P__CLPK_integer;
  __nv: P__CLPK_integer; __wv: P__CLPK_complex; __ldwv: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claqr2_';
function claqr3_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_complex; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __ns: P__CLPK_integer; __nd: P__CLPK_integer;
  __sh: P__CLPK_complex; __v: P__CLPK_complex; __ldv: P__CLPK_integer;
  __nh: P__CLPK_integer; __t: P__CLPK_complex; __ldt: P__CLPK_integer;
  __nv: P__CLPK_integer; __wv: P__CLPK_complex; __ldwv: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claqr3_';
function claqr4_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_complex; __ldh: P__CLPK_integer; __w: P__CLPK_complex;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claqr4_';
function claqr5_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __kacc22: P__CLPK_integer; __N: P__CLPK_integer; __ktop: P__CLPK_integer;
  __kbot: P__CLPK_integer; __nshfts: P__CLPK_integer; __S: P__CLPK_complex;
  __h__: P__CLPK_complex; __ldh: P__CLPK_integer; __iloz: P__CLPK_integer;
  __ihiz: P__CLPK_integer; __z__: P__CLPK_complex; __ldz: P__CLPK_integer;
  __v: P__CLPK_complex; __ldv: P__CLPK_integer; __u: P__CLPK_complex;
  __ldu: P__CLPK_integer; __nv: P__CLPK_integer; __wv: P__CLPK_complex;
  __ldwv: P__CLPK_integer; __nh: P__CLPK_integer; __wh: P__CLPK_complex;
  __ldwh: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claqr5_';
function claqsb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __S: P__CLPK_real; __scond: P__CLPK_real; __amax: P__CLPK_real;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'claqsb_';
function claqsp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'claqsp_';
function claqsy_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __S: P__CLPK_real;
  __scond: P__CLPK_real; __amax: P__CLPK_real; __equed: MarshaledAString)
  : Integer; cdecl; external libAccelerate name _PU + 'claqsy_';
function clar1v_(__N: P__CLPK_integer; __b1: P__CLPK_integer;
  __bn: P__CLPK_integer; __lambda: P__CLPK_real; __d__: P__CLPK_real;
  __L: P__CLPK_real; __ld: P__CLPK_real; __lld: P__CLPK_real;
  __pivmin: P__CLPK_real; __gaptol: P__CLPK_real; __z__: P__CLPK_complex;
  __wantnc: P__CLPK_logical; __negcnt: P__CLPK_integer; __ztz: P__CLPK_real;
  __mingma: P__CLPK_real; __r__: P__CLPK_integer; __isuppz: P__CLPK_integer;
  __nrminv: P__CLPK_real; __resid: P__CLPK_real; __rqcorr: P__CLPK_real;
  __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'clar1v_';
function clar2v_(__N: P__CLPK_integer; __X: P__CLPK_complex;
  __Y: P__CLPK_complex; __z__: P__CLPK_complex; __incX: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_complex; __incc: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'clar2v_';
function clarcm_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __rwork: P__CLPK_real)
  : Integer; cdecl; external libAccelerate name _PU + 'clarcm_';
function clarf_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_complex; __incv: P__CLPK_integer;
  __tau: P__CLPK_complex; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __work: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clarf_';
function clarfb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_complex;
  __ldv: P__CLPK_integer; __t: P__CLPK_complex; __ldt: P__CLPK_integer;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clarfb_';
function clarfg_(__N: P__CLPK_integer; __alpha: P__CLPK_complex;
  __X: P__CLPK_complex; __incX: P__CLPK_integer; __tau: P__CLPK_complex)
  : Integer; cdecl; external libAccelerate name _PU + 'clarfg_';
function clarfp_(__N: P__CLPK_integer; __alpha: P__CLPK_complex;
  __X: P__CLPK_complex; __incX: P__CLPK_integer; __tau: P__CLPK_complex)
  : Integer; cdecl; external libAccelerate name _PU + 'clarfp_';
function clarft_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_complex;
  __ldv: P__CLPK_integer; __tau: P__CLPK_complex; __t: P__CLPK_complex;
  __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clarft_';
function clarfx_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_complex; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex)
  : Integer; cdecl; external libAccelerate name _PU + 'clarfx_';
function clargv_(__N: P__CLPK_integer; __X: P__CLPK_complex;
  __incX: P__CLPK_integer; __Y: P__CLPK_complex; __incY: P__CLPK_integer;
  __c__: P__CLPK_real; __incc: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clargv_';
function clarnv_(__idist: P__CLPK_integer; __iseed: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clarnv_';
function clarrv_(__N: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __d__: P__CLPK_real; __L: P__CLPK_real; __pivmin: P__CLPK_real;
  __isplit: P__CLPK_integer; __M: P__CLPK_integer; __dol: P__CLPK_integer;
  __dou: P__CLPK_integer; __minrgp: P__CLPK_real; __rtol1: P__CLPK_real;
  __rtol2: P__CLPK_real; __w: P__CLPK_real; __werr: P__CLPK_real;
  __wgap: P__CLPK_real; __iblock: P__CLPK_integer; __indexw: P__CLPK_integer;
  __gers: P__CLPK_real; __z__: P__CLPK_complex; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clarrv_';
function clarscl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __X: P__CLPK_complex; __ldx: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'clarscl2_';
function clartg_(__F: P__CLPK_complex; __g: P__CLPK_complex; __cs: P__CLPK_real;
  __sn: P__CLPK_complex; __r__: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clartg_';
function clartv_(__N: P__CLPK_integer; __X: P__CLPK_complex;
  __incX: P__CLPK_integer; __Y: P__CLPK_complex; __incY: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_complex; __incc: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'clartv_';
function clarz_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __L: P__CLPK_integer; __v: P__CLPK_complex;
  __incv: P__CLPK_integer; __tau: P__CLPK_complex; __c__: P__CLPK_complex;
  __ldc: P__CLPK_integer; __work: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clarz_';
function clarzb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __v: P__CLPK_complex; __ldv: P__CLPK_integer; __t: P__CLPK_complex;
  __ldt: P__CLPK_integer; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __work: P__CLPK_complex; __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clarzb_';
function clarzt_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_complex;
  __ldv: P__CLPK_integer; __tau: P__CLPK_complex; __t: P__CLPK_complex;
  __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clarzt_';
function clascl_(__type__: MarshaledAString; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __cfrom: P__CLPK_real; __cto: P__CLPK_real;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clascl_';
function clascl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __X: P__CLPK_complex; __ldx: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'clascl2_';
function claset_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __alpha: P__CLPK_complex; __beta: P__CLPK_complex;
  __A: P__CLPK_complex; __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claset_';
function clasr_(__Side: MarshaledAString; __pivot: MarshaledAString;
  __direct: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_real; __A: P__CLPK_complex;
  __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clasr_';
function classq_(__N: P__CLPK_integer; __X: P__CLPK_complex;
  __incX: P__CLPK_integer; __scale: P__CLPK_real; __sumsq: P__CLPK_real)
  : Integer; cdecl; external libAccelerate name _PU + 'classq_';
function claswp_(__N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __k1: P__CLPK_integer; __k2: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'claswp_';
function clasyf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __kb: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __w: P__CLPK_complex;
  __ldw: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clasyf_';
function clatbs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __X: P__CLPK_complex; __scale: P__CLPK_real; __cnorm: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clatbs_';
function clatdf_(__ijob: P__CLPK_integer; __N: P__CLPK_integer;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __rhs: P__CLPK_complex;
  __rdsum: P__CLPK_real; __rdscal: P__CLPK_real; __ipiv: P__CLPK_integer;
  __jpiv: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clatdf_';
function clatps_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __X: P__CLPK_complex; __scale: P__CLPK_real;
  __cnorm: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clatps_';
function clatrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __E: P__CLPK_real; __tau: P__CLPK_complex; __w: P__CLPK_complex;
  __ldw: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'clatrd_';
function clatrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __X: P__CLPK_complex;
  __scale: P__CLPK_real; __cnorm: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'clatrs_';
function clatrz_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clatrz_';
function clatzm_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_complex; __incv: P__CLPK_integer;
  __tau: P__CLPK_complex; __C1: P__CLPK_complex; __c2: P__CLPK_complex;
  __ldc: P__CLPK_integer; __work: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'clatzm_';
function clauu2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'clauu2_';
function clauum_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'clauum_';
function cpbcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __anorm: P__CLPK_real; __rcond: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbcon_';
function cpbequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __S: P__CLPK_real; __scond: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbequ_';
function cpbrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __afb: P__CLPK_complex; __ldafb: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpbrfs_';
function cpbstf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbstf_';
function cpbsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbsv_';
function cpbsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __afb: P__CLPK_complex;
  __ldafb: P__CLPK_integer; __equed: MarshaledAString; __S: P__CLPK_real;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_real; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbsvx_';
function cpbtf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbtf2_';
function cpbtrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbtrf_';
function cpbtrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_complex;
  __ldab: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpbtrs_';
function cpftrf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'cpftrf_';
function cpftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'cpftri_';
function cpftrs_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_complex;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpftrs_';
function cpocon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpocon_';
function cpoequ_(__N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpoequ_';
function cpoequb_(__N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpoequb_';
function cporfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __af: P__CLPK_complex; __ldaf: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cporfs_';
function cposv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cposv_';
function cposvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __af: P__CLPK_complex; __ldaf: P__CLPK_integer;
  __equed: MarshaledAString; __S: P__CLPK_real; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_real; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cposvx_';
function cpotf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpotf2_';
function cpotrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpotrf_';
function cpotri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpotri_';
function cpotrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpotrs_';
function cppcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __anorm: P__CLPK_real; __rcond: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cppcon_';
function cppequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cppequ_';
function cpprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __afp: P__CLPK_complex;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpprfs_';
function cppsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cppsv_';
function cppsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex;
  __afp: P__CLPK_complex; __equed: MarshaledAString; __S: P__CLPK_real;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_real; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cppsvx_';
function cpptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpptrf_';
function cpptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpptri_';
function cpptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpptrs_';
function cpstf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpstf2_';
function cpstrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpstrf_';
function cptcon_(__N: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_complex; __anorm: P__CLPK_real; __rcond: P__CLPK_real;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cptcon_';
function cpteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpteqr_';
function cptrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_complex;
  __DF: P__CLPK_real; __ef: P__CLPK_complex; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cptrfs_';
function cptsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_complex; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cptsv_';
function cptsvx_(__fact: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_complex;
  __DF: P__CLPK_real; __ef: P__CLPK_complex; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_real; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cptsvx_';
function cpttrf_(__N: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cpttrf_';
function cpttrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_complex;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cpttrs_';
function cptts2_(__iuplo: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_complex;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cptts2_';
function crot_(__N: P__CLPK_integer; __cx: P__CLPK_complex;
  __incX: P__CLPK_integer; __cy: P__CLPK_complex; __incY: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'crot_';
function cspcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cspcon_';
function cspmv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_complex; __Ap: P__CLPK_complex; __X: P__CLPK_complex;
  __incX: P__CLPK_integer; __beta: P__CLPK_complex; __Y: P__CLPK_complex;
  __incY: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cspmv_';
function cspr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_complex; __X: P__CLPK_complex; __incX: P__CLPK_integer;
  __Ap: P__CLPK_complex): Integer; cdecl;
  external libAccelerate name _PU + 'cspr_';
function csprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __afp: P__CLPK_complex;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __X: P__CLPK_complex; __ldx: P__CLPK_integer; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csprfs_';
function cspsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cspsv_';
function cspsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex;
  __afp: P__CLPK_complex; __ipiv: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_real; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cspsvx_';
function csptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'csptrf_';
function csptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csptri_';
function csptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_complex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'csptrs_';
function csrscl_(__N: P__CLPK_integer; __sa: P__CLPK_real;
  __sx: P__CLPK_complex; __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csrscl_';
function cstedc_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_real; __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cstedc_';
function cstegr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_real; __M: P__CLPK_integer;
  __w: P__CLPK_real; __z__: P__CLPK_complex; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cstegr_';
function cstein_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __iblock: P__CLPK_integer;
  __isplit: P__CLPK_integer; __z__: P__CLPK_complex; __ldz: P__CLPK_integer;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __ifail: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cstein_';
function cstemr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __M: P__CLPK_integer; __w: P__CLPK_real;
  __z__: P__CLPK_complex; __ldz: P__CLPK_integer; __nzc: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __tryrac: P__CLPK_logical; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cstemr_';
function csteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'csteqr_';
function csycon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_real; __rcond: P__CLPK_real; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csycon_';
function csyequb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __S: P__CLPK_real;
  __scond: P__CLPK_real; __amax: P__CLPK_real; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csyequb_';
function csymv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_complex; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __X: P__CLPK_complex; __incX: P__CLPK_integer; __beta: P__CLPK_complex;
  __Y: P__CLPK_complex; __incY: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csymv_';
function csyr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_complex; __X: P__CLPK_complex; __incX: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csyr_';
function csyrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __af: P__CLPK_complex; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'csyrfs_';
function csysv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'csysv_';
function csysvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __af: P__CLPK_complex; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __X: P__CLPK_complex; __ldx: P__CLPK_integer; __rcond: P__CLPK_real;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'csysvx_';
function csytf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csytf2_';
function csytrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'csytrf_';
function csytri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csytri_';
function csytrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'csytrs_';
function ctbcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_complex; __ldab: P__CLPK_integer; __rcond: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctbcon_';
function ctbrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __X: P__CLPK_complex;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctbrfs_';
function ctbtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_complex; __ldab: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctbtrs_';
function ctfsm_(__transr: MarshaledAString; __Side: MarshaledAString;
  __Uplo: MarshaledAString; __Trans: MarshaledAString; __Diag: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __alpha: P__CLPK_complex;
  __A: P__CLPK_complex; __B: P__CLPK_complex; __ldb: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'ctfsm_';
function ctftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctftri_';
function ctfttp_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_complex; __Ap: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctfttp_';
function ctfttr_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_complex; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctfttr_';
function ctgevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __S: P__CLPK_complex;
  __lds: P__CLPK_integer; __P: P__CLPK_complex; __ldp: P__CLPK_integer;
  __vl: P__CLPK_complex; __ldvl: P__CLPK_integer; __vr: P__CLPK_complex;
  __ldvr: P__CLPK_integer; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_complex; __rwork: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctgevc_';
function ctgex2_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __z__: P__CLPK_complex; __ldz: P__CLPK_integer;
  __j1: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctgex2_';
function ctgexc_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __B: P__CLPK_complex; __ldb: P__CLPK_integer; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __z__: P__CLPK_complex; __ldz: P__CLPK_integer;
  __ifst: P__CLPK_integer; __ilst: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctgexc_';
function ctgsen_(__ijob: P__CLPK_integer; __wantq: P__CLPK_logical;
  __wantz: P__CLPK_logical; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __alpha: P__CLPK_complex; __beta: P__CLPK_complex;
  __Q: P__CLPK_complex; __ldq: P__CLPK_integer; __z__: P__CLPK_complex;
  __ldz: P__CLPK_integer; __M: P__CLPK_integer; __pl: P__CLPK_real;
  __pr: P__CLPK_real; __dif: P__CLPK_real; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctgsen_';
function ctgsja_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __tola: P__CLPK_real; __tolb: P__CLPK_real;
  __alpha: P__CLPK_real; __beta: P__CLPK_real; __u: P__CLPK_complex;
  __ldu: P__CLPK_integer; __v: P__CLPK_complex; __ldv: P__CLPK_integer;
  __Q: P__CLPK_complex; __ldq: P__CLPK_integer; __work: P__CLPK_complex;
  __ncycle: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctgsja_';
function ctgsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __vl: P__CLPK_complex; __ldvl: P__CLPK_integer; __vr: P__CLPK_complex;
  __ldvr: P__CLPK_integer; __S: P__CLPK_real; __dif: P__CLPK_real;
  __mm: P__CLPK_integer; __M: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctgsna_';
function ctgsy2_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __d__: P__CLPK_complex;
  __ldd: P__CLPK_integer; __E: P__CLPK_complex; __lde: P__CLPK_integer;
  __F: P__CLPK_complex; __ldf: P__CLPK_integer; __scale: P__CLPK_real;
  __rdsum: P__CLPK_real; __rdscal: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctgsy2_';
function ctgsyl_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __d__: P__CLPK_complex;
  __ldd: P__CLPK_integer; __E: P__CLPK_complex; __lde: P__CLPK_integer;
  __F: P__CLPK_complex; __ldf: P__CLPK_integer; __scale: P__CLPK_real;
  __dif: P__CLPK_real; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctgsyl_';
function ctpcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_complex;
  __rcond: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctpcon_';
function ctprfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_complex; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __X: P__CLPK_complex; __ldx: P__CLPK_integer; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctprfs_';
function ctptri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctptri_';
function ctptrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_complex; __B: P__CLPK_complex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctptrs_';
function ctpttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_complex; __arf: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctpttf_';
function ctpttr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctpttr_';
function ctrcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __rcond: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrcon_';
function ctrevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_complex;
  __ldt: P__CLPK_integer; __vl: P__CLPK_complex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_complex; __ldvr: P__CLPK_integer; __mm: P__CLPK_integer;
  __M: P__CLPK_integer; __work: P__CLPK_complex; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrevc_';
function ctrexc_(__compq: MarshaledAString; __N: P__CLPK_integer;
  __t: P__CLPK_complex; __ldt: P__CLPK_integer; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __ifst: P__CLPK_integer; __ilst: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrexc_';
function ctrrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __X: P__CLPK_complex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_complex;
  __rwork: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrrfs_';
function ctrsen_(__job: MarshaledAString; __compq: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_complex;
  __ldt: P__CLPK_integer; __Q: P__CLPK_complex; __ldq: P__CLPK_integer;
  __w: P__CLPK_complex; __M: P__CLPK_integer; __S: P__CLPK_real;
  __sep: P__CLPK_real; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrsen_';
function ctrsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_complex;
  __ldt: P__CLPK_integer; __vl: P__CLPK_complex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_complex; __ldvr: P__CLPK_integer; __S: P__CLPK_real;
  __sep: P__CLPK_real; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_complex; __ldwork: P__CLPK_integer; __rwork: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrsna_';
function ctrsyl_(__trana: MarshaledAString; __tranb: MarshaledAString;
  __isgn: P__CLPK_integer; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __scale: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrsyl_';
function ctrti2_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrti2_';
function ctrtri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrtri_';
function ctrtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __B: P__CLPK_complex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrtrs_';
function ctrttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __arf: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrttf_';
function ctrttp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __Ap: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctrttp_';
function ctzrqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ctzrqf_';
function ctzrzf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ctzrzf_';
function cung2l_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cung2l_';
function cung2r_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cung2r_';
function cungbr_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __A: P__CLPK_complex;
  __lda: P__CLPK_integer; __tau: P__CLPK_complex; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cungbr_';
function cunghr_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunghr_';
function cungl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cungl2_';
function cunglq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunglq_';
function cungql_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cungql_';
function cungqr_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cungqr_';
function cungr2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cungr2_';
function cungrq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __work: P__CLPK_complex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cungrq_';
function cungtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cungtr_';
function cunm2l_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunm2l_';
function cunm2r_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunm2r_';
function cunmbr_(__vect: MarshaledAString; __Side: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cunmbr_';
function cunmhr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cunmhr_';
function cunml2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunml2_';
function cunmlq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunmlq_';
function cunmql_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunmql_';
function cunmqr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunmqr_';
function cunmr2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunmr2_';
function cunmr3_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __work: P__CLPK_complex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunmr3_';
function cunmrq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunmrq_';
function cunmrz_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_complex; __lda: P__CLPK_integer;
  __tau: P__CLPK_complex; __c__: P__CLPK_complex; __ldc: P__CLPK_integer;
  __work: P__CLPK_complex; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cunmrz_';
function cunmtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer; __tau: P__CLPK_complex;
  __c__: P__CLPK_complex; __ldc: P__CLPK_integer; __work: P__CLPK_complex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'cunmtr_';
function cupgtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __tau: P__CLPK_complex; __Q: P__CLPK_complex;
  __ldq: P__CLPK_integer; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cupgtr_';
function cupmtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __Ap: P__CLPK_complex; __tau: P__CLPK_complex; __c__: P__CLPK_complex;
  __ldc: P__CLPK_integer; __work: P__CLPK_complex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'cupmtr_';
function dbdsdc_(__Uplo: MarshaledAString; __compq: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __vt: P__CLPK_doublereal;
  __ldvt: P__CLPK_integer; __Q: P__CLPK_doublereal; __iq: P__CLPK_integer;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dbdsdc_';
function dbdsqr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __ncvt: P__CLPK_integer; __nru: P__CLPK_integer; __ncc: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __vt: P__CLPK_doublereal;
  __ldvt: P__CLPK_integer; __u: P__CLPK_doublereal; __ldu: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dbdsqr_';
function ddisna_(__job: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __sep: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ddisna_';
function dgbbrd_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __ncc: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __pt: P__CLPK_doublereal; __ldpt: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgbbrd_';
function dgbcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgbcon_';
function dgbequ_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __r__: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __rowcnd: P__CLPK_doublereal; __colcnd: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgbequ_';
function dgbequb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __r__: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __rowcnd: P__CLPK_doublereal; __colcnd: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgbequb_';
function dgbrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __afb: P__CLPK_doublereal;
  __ldafb: P__CLPK_integer; __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgbrfs_';
function dgbsv_(__N: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgbsv_';
function dgbsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __KL: P__CLPK_integer; __KU: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __afb: P__CLPK_doublereal; __ldafb: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __equed: MarshaledAString; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgbsvx_';
function dgbtf2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgbtf2_';
function dgbtrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgbtrf_';
function dgbtrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgbtrs_';
function dgebak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __scale: P__CLPK_doublereal; __M: P__CLPK_integer; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgebak_';
function dgebal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __scale: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgebal_';
function dgebd2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tauq: P__CLPK_doublereal;
  __taup: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgebd2_';
function dgebrd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tauq: P__CLPK_doublereal;
  __taup: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgebrd_';
function dgecon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgecon_';
function dgeequ_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rowcnd: P__CLPK_doublereal;
  __colcnd: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgeequ_';
function dgeequb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rowcnd: P__CLPK_doublereal;
  __colcnd: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgeequb_';
function dgees_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __sdim: P__CLPK_integer; __wr: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal; __vs: P__CLPK_doublereal; __ldvs: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __bwork: P__CLPK_logical; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgees_';
function dgeesx_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __sdim: P__CLPK_integer;
  __wr: P__CLPK_doublereal; __wi: P__CLPK_doublereal; __vs: P__CLPK_doublereal;
  __ldvs: P__CLPK_integer; __rconde: P__CLPK_doublereal;
  __rcondv: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __bwork: P__CLPK_logical; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgeesx_';
function dgeev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __wr: P__CLPK_doublereal; __wi: P__CLPK_doublereal; __vl: P__CLPK_doublereal;
  __ldvl: P__CLPK_integer; __vr: P__CLPK_doublereal; __ldvr: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgeev_';
function dgeevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __wr: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal; __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublereal; __ldvr: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __scale: P__CLPK_doublereal;
  __abnrm: P__CLPK_doublereal; __rconde: P__CLPK_doublereal;
  __rcondv: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgeevx_';
function dgegs_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __vsl: P__CLPK_doublereal; __ldvsl: P__CLPK_integer;
  __vsr: P__CLPK_doublereal; __ldvsr: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgegs_';
function dgegv_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer; __vr: P__CLPK_doublereal;
  __ldvr: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgegv_';
function dgehd2_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgehd2_';
function dgehrd_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgehrd_';
function dgejsv_(__joba: MarshaledAString; __jobu: MarshaledAString;
  __jobv: MarshaledAString; __jobr: MarshaledAString; __jobt: MarshaledAString;
  __jobp: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __sva: P__CLPK_doublereal;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgejsv_';
function dgelq2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgelq2_';
function dgelqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgelqf_';
function dgels_(__Trans: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgels_';
function dgelsd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __S: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgelsd_';
function dgelss_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __S: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgelss_';
function dgelsx_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgelsx_';
function dgelsy_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgelsy_';
function dgeql2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgeql2_';
function dgeqlf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgeqlf_';
function dgeqp3_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgeqp3_';
function dgeqpf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgeqpf_';
function dgeqr2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgeqr2_';
function dgeqrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgeqrf_';
function dgerfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __af: P__CLPK_doublereal; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgerfs_';
function dgerq2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgerq2_';
function dgerqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgerqf_';
function dgesc2_(__N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __rhs: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __jpiv: P__CLPK_integer; __scale: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dgesc2_';
function dgesdd_(__jobz: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __S: P__CLPK_doublereal; __u: P__CLPK_doublereal; __ldu: P__CLPK_integer;
  __vt: P__CLPK_doublereal; __ldvt: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgesdd_';
function dgesv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgesv_';
function dgesvd_(__jobu: MarshaledAString; __jobvt: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __S: P__CLPK_doublereal; __u: P__CLPK_doublereal;
  __ldu: P__CLPK_integer; __vt: P__CLPK_doublereal; __ldvt: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgesvd_';
function dgesvj_(__joba: MarshaledAString; __jobu: MarshaledAString;
  __jobv: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __sva: P__CLPK_doublereal;
  __mv: P__CLPK_integer; __v: P__CLPK_doublereal; __ldv: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgesvj_';
function dgesvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __af: P__CLPK_doublereal; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __equed: MarshaledAString; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgesvx_';
function dgetc2_(__N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __jpiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgetc2_';
function dgetf2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgetf2_';
function dgetrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgetrf_';
function dgetri_(__N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgetri_';
function dgetrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgetrs_';
function dggbak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_doublereal; __rscale: P__CLPK_doublereal;
  __M: P__CLPK_integer; __v: P__CLPK_doublereal; __ldv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggbak_';
function dggbal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_doublereal; __rscale: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggbal_';
function dgges_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __sdim: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __vsl: P__CLPK_doublereal; __ldvsl: P__CLPK_integer;
  __vsr: P__CLPK_doublereal; __ldvsr: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __bwork: P__CLPK_logical; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgges_';
function dggesx_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __sense: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __sdim: P__CLPK_integer;
  __alphar: P__CLPK_doublereal; __alphai: P__CLPK_doublereal;
  __beta: P__CLPK_doublereal; __vsl: P__CLPK_doublereal;
  __ldvsl: P__CLPK_integer; __vsr: P__CLPK_doublereal; __ldvsr: P__CLPK_integer;
  __rconde: P__CLPK_doublereal; __rcondv: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggesx_';
function dggev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer; __vr: P__CLPK_doublereal;
  __ldvr: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggev_';
function dggevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer; __vr: P__CLPK_doublereal;
  __ldvr: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_doublereal; __rscale: P__CLPK_doublereal;
  __abnrm: P__CLPK_doublereal; __bbnrm: P__CLPK_doublereal;
  __rconde: P__CLPK_doublereal; __rcondv: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dggevx_';
function dggglm_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __Y: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggglm_';
function dgghrd_(__compq: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgghrd_';
function dgglse_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __c__: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __X: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgglse_';
function dggqrf_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __taua: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __taub: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggqrf_';
function dggrqf_(__M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __taua: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __taub: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggrqf_';
function dggsvd_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __alpha: P__CLPK_doublereal;
  __beta: P__CLPK_doublereal; __u: P__CLPK_doublereal; __ldu: P__CLPK_integer;
  __v: P__CLPK_doublereal; __ldv: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggsvd_';
function dggsvp_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __tola: P__CLPK_doublereal;
  __tolb: P__CLPK_doublereal; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer;
  __iwork: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dggsvp_';
function dgsvj0_(__jobv: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __sva: P__CLPK_doublereal; __mv: P__CLPK_integer;
  __v: P__CLPK_doublereal; __ldv: P__CLPK_integer; __eps: P__CLPK_doublereal;
  __sfmin: P__CLPK_doublereal; __tol: P__CLPK_doublereal;
  __nsweep: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgsvj0_';
function dgsvj1_(__jobv: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __n1: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __d__: P__CLPK_doublereal; __sva: P__CLPK_doublereal;
  __mv: P__CLPK_integer; __v: P__CLPK_doublereal; __ldv: P__CLPK_integer;
  __eps: P__CLPK_doublereal; __sfmin: P__CLPK_doublereal;
  __tol: P__CLPK_doublereal; __nsweep: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgsvj1_';
function dgtcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __du: P__CLPK_doublereal;
  __du2: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgtcon_';
function dgtrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __du: P__CLPK_doublereal; __dlf: P__CLPK_doublereal; __DF: P__CLPK_doublereal;
  __duf: P__CLPK_doublereal; __du2: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgtrfs_';
function dgtsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __dl: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __du: P__CLPK_doublereal;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgtsv_';
function dgtsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __dl: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __du: P__CLPK_doublereal;
  __dlf: P__CLPK_doublereal; __DF: P__CLPK_doublereal;
  __duf: P__CLPK_doublereal; __du2: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgtsvx_';
function dgttrf_(__N: P__CLPK_integer; __dl: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __du: P__CLPK_doublereal;
  __du2: P__CLPK_doublereal; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgttrf_';
function dgttrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __du: P__CLPK_doublereal; __du2: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dgttrs_';
function dgtts2_(__itrans: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __du: P__CLPK_doublereal; __du2: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dgtts2_';
function dhgeqz_(__job: MarshaledAString; __compq: MarshaledAString;
  __compz: MarshaledAString; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer;
  __t: P__CLPK_doublereal; __ldt: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dhgeqz_';
function dhsein_(__Side: MarshaledAString; __eigsrc: MarshaledAString;
  __initv: MarshaledAString; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer; __wr: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal; __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublereal; __ldvr: P__CLPK_integer; __mm: P__CLPK_integer;
  __M: P__CLPK_integer; __work: P__CLPK_doublereal; __ifaill: P__CLPK_integer;
  __ifailr: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dhsein_';
function dhseqr_(__job: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer; __wr: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dhseqr_';
function disnan_(__din: P__CLPK_doublereal): __CLPK_logical; cdecl;
  external libAccelerate name _PU + 'disnan_';
function dlabad_(__small: P__CLPK_doublereal; __large: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlabad_';
function dlabrd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __tauq: P__CLPK_doublereal; __taup: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __Y: P__CLPK_doublereal;
  __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlabrd_';
function dlacn2_(__N: P__CLPK_integer; __v: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __isgn: P__CLPK_integer; __est: P__CLPK_doublereal;
  __kase: P__CLPK_integer; __isave: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlacn2_';
function dlacon_(__N: P__CLPK_integer; __v: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __isgn: P__CLPK_integer; __est: P__CLPK_doublereal;
  __kase: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlacon_';
function dlacpy_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlacpy_';
function dladiv_(__A: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __P: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dladiv_';
function dlae2_(__A: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rt1: P__CLPK_doublereal;
  __rt2: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlae2_';
function dlaebz_(__ijob: P__CLPK_integer; __nitmax: P__CLPK_integer;
  __N: P__CLPK_integer; __mmax: P__CLPK_integer; __minp: P__CLPK_integer;
  __nbmin: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __reltol: P__CLPK_doublereal; __pivmin: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __e2: P__CLPK_doublereal;
  __nval: P__CLPK_integer; __ab: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __mout: P__CLPK_integer; __nab: P__CLPK_integer; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaebz_';
function dlaed0_(__icompq: P__CLPK_integer; __qsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __qstore: P__CLPK_doublereal;
  __ldqs: P__CLPK_integer; __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed0_';
function dlaed1_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __indxq: P__CLPK_integer;
  __rho: P__CLPK_doublereal; __cutpnt: P__CLPK_integer;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlaed1_';
function dlaed2_(__K: P__CLPK_integer; __N: P__CLPK_integer;
  __n1: P__CLPK_integer; __d__: P__CLPK_doublereal; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __indxq: P__CLPK_integer; __rho: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __dlamda: P__CLPK_doublereal;
  __w: P__CLPK_doublereal; __q2: P__CLPK_doublereal; __indx: P__CLPK_integer;
  __indxc: P__CLPK_integer; __indxp: P__CLPK_integer; __coltyp: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed2_';
function dlaed3_(__K: P__CLPK_integer; __N: P__CLPK_integer;
  __n1: P__CLPK_integer; __d__: P__CLPK_doublereal; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __rho: P__CLPK_doublereal;
  __dlamda: P__CLPK_doublereal; __q2: P__CLPK_doublereal;
  __indx: P__CLPK_integer; __ctot: P__CLPK_integer; __w: P__CLPK_doublereal;
  __S: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed3_';
function dlaed4_(__N: P__CLPK_integer; __i__: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __delta: P__CLPK_doublereal; __rho: P__CLPK_doublereal;
  __dlam: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed4_';
function dlaed5_(__i__: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __delta: P__CLPK_doublereal;
  __rho: P__CLPK_doublereal; __dlam: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed5_';
function dlaed6_(__kniter: P__CLPK_integer; __orgati: P__CLPK_logical;
  __rho: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __finit: P__CLPK_doublereal;
  __tau: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed6_';
function dlaed7_(__icompq: P__CLPK_integer; __N: P__CLPK_integer;
  __qsiz: P__CLPK_integer; __tlvls: P__CLPK_integer; __curlvl: P__CLPK_integer;
  __curpbm: P__CLPK_integer; __d__: P__CLPK_doublereal; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __indxq: P__CLPK_integer; __rho: P__CLPK_doublereal;
  __cutpnt: P__CLPK_integer; __qstore: P__CLPK_doublereal;
  __qptr: P__CLPK_integer; __prmptr: P__CLPK_integer; __perm: P__CLPK_integer;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed7_';
function dlaed8_(__icompq: P__CLPK_integer; __K: P__CLPK_integer;
  __N: P__CLPK_integer; __qsiz: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __indxq: P__CLPK_integer;
  __rho: P__CLPK_doublereal; __cutpnt: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __dlamda: P__CLPK_doublereal;
  __q2: P__CLPK_doublereal; __ldq2: P__CLPK_integer; __w: P__CLPK_doublereal;
  __perm: P__CLPK_integer; __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __indxp: P__CLPK_integer;
  __indx: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaed8_';
function dlaed9_(__K: P__CLPK_integer; __kstart: P__CLPK_integer;
  __kstop: P__CLPK_integer; __N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __rho: P__CLPK_doublereal;
  __dlamda: P__CLPK_doublereal; __w: P__CLPK_doublereal;
  __S: P__CLPK_doublereal; __lds: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlaed9_';
function dlaeda_(__N: P__CLPK_integer; __tlvls: P__CLPK_integer;
  __curlvl: P__CLPK_integer; __curpbm: P__CLPK_integer;
  __prmptr: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __givnum: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __qptr: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __ztemp: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaeda_';
function dlaein_(__rightv: P__CLPK_logical; __noinit: P__CLPK_logical;
  __N: P__CLPK_integer; __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer;
  __wr: P__CLPK_doublereal; __wi: P__CLPK_doublereal; __vr: P__CLPK_doublereal;
  __vi: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __work: P__CLPK_doublereal; __eps3: P__CLPK_doublereal;
  __smlnum: P__CLPK_doublereal; __bignum: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaein_';
function dlaev2_(__A: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rt1: P__CLPK_doublereal;
  __rt2: P__CLPK_doublereal; __cs1: P__CLPK_doublereal;
  __sn1: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlaev2_';
function dlaexc_(__wantq: P__CLPK_logical; __N: P__CLPK_integer;
  __t: P__CLPK_doublereal; __ldt: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __j1: P__CLPK_integer; __n1: P__CLPK_integer;
  __n2: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlaexc_';
function dlag2_(__A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __safmin: P__CLPK_doublereal;
  __scale1: P__CLPK_doublereal; __scale2: P__CLPK_doublereal;
  __wr1: P__CLPK_doublereal; __wr2: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlag2_';
function dlag2s_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __sa: P__CLPK_real;
  __ldsa: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlag2s_';
function dlags2_(__upper: P__CLPK_logical; __A1: P__CLPK_doublereal;
  __a2: P__CLPK_doublereal; __a3: P__CLPK_doublereal; __b1: P__CLPK_doublereal;
  __b2: P__CLPK_doublereal; __b3: P__CLPK_doublereal; __csu: P__CLPK_doublereal;
  __snu: P__CLPK_doublereal; __csv: P__CLPK_doublereal;
  __snv: P__CLPK_doublereal; __csq: P__CLPK_doublereal;
  __snq: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlags2_';
function dlagtf_(__N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lambda: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __tol: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __in: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlagtf_';
function dlagtm_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __alpha: P__CLPK_doublereal;
  __dl: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __du: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __beta: P__CLPK_doublereal;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlagtm_';
function dlagts_(__job: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __B: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __in: P__CLPK_integer; __Y: P__CLPK_doublereal;
  __tol: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlagts_';
function dlagv2_(__A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __csl: P__CLPK_doublereal; __snl: P__CLPK_doublereal;
  __csr: P__CLPK_doublereal; __snr: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlagv2_';
function dlahqr_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer; __wr: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlahqr_';
function dlahr2_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __t: P__CLPK_doublereal; __ldt: P__CLPK_integer;
  __Y: P__CLPK_doublereal; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlahr2_';
function dlahrd_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __t: P__CLPK_doublereal; __ldt: P__CLPK_integer;
  __Y: P__CLPK_doublereal; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlahrd_';
function dlaic1_(__job: P__CLPK_integer; __j: P__CLPK_integer;
  __X: P__CLPK_doublereal; __sest: P__CLPK_doublereal; __w: P__CLPK_doublereal;
  __gamma: P__CLPK_doublereal; __sestpr: P__CLPK_doublereal;
  __S: P__CLPK_doublereal; __c__: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlaic1_';
function dlaisnan_(__din1: P__CLPK_doublereal; __din2: P__CLPK_doublereal)
  : __CLPK_logical; cdecl; external libAccelerate name _PU + 'dlaisnan_';
function dlaln2_(__ltrans: P__CLPK_logical; __na: P__CLPK_integer;
  __nw: P__CLPK_integer; __smin: P__CLPK_doublereal; __ca: P__CLPK_doublereal;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __d1: P__CLPK_doublereal;
  __d2: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __wr: P__CLPK_doublereal; __wi: P__CLPK_doublereal; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __scale: P__CLPK_doublereal;
  __xnorm: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaln2_';
function dlals0_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __bx: P__CLPK_doublereal;
  __ldbx: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __ldgnum: P__CLPK_integer;
  __poles: P__CLPK_doublereal; __difl: P__CLPK_doublereal;
  __difr: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __K: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlals0_';
function dlalsa_(__icompq: P__CLPK_integer; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __bx: P__CLPK_doublereal; __ldbx: P__CLPK_integer;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __vt: P__CLPK_doublereal;
  __K: P__CLPK_integer; __difl: P__CLPK_doublereal; __difr: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __poles: P__CLPK_doublereal;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __ldgcol: P__CLPK_integer; __perm: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __S: P__CLPK_doublereal; __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlalsa_';
function dlalsd_(__Uplo: MarshaledAString; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlalsd_';
function dlamrg_(__n1: P__CLPK_integer; __n2: P__CLPK_integer;
  __A: P__CLPK_doublereal; __dtrd1: P__CLPK_integer; __dtrd2: P__CLPK_integer;
  __index: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlamrg_';
function dlaneg_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __lld: P__CLPK_doublereal; __sigma: P__CLPK_doublereal;
  __pivmin: P__CLPK_doublereal; __r__: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'dlaneg_';
function dlangb_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __work: P__CLPK_doublereal): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'dlangb_';
function dlange_(__norm: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dlange_';
function dlangt_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __du: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'dlangt_';
function dlanhs_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __work: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'dlanhs_';
function dlansb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __work: P__CLPK_doublereal): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'dlansb_';
function dlansf_(__norm: MarshaledAString; __transr: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dlansf_';
function dlansp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublereal; __work: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'dlansp_';
function dlanst_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dlanst_';
function dlansy_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dlansy_';
function dlantb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __work: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'dlantb_';
function dlantp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dlantp_';
function dlantr_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __work: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'dlantr_';
function dlanv2_(__A: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __rt1r: P__CLPK_doublereal; __rt1i: P__CLPK_doublereal;
  __rt2r: P__CLPK_doublereal; __rt2i: P__CLPK_doublereal;
  __cs: P__CLPK_doublereal; __sn: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlanv2_';
function dlapll_(__N: P__CLPK_integer; __X: P__CLPK_doublereal;
  __incX: P__CLPK_integer; __Y: P__CLPK_doublereal; __incY: P__CLPK_integer;
  __ssmin: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlapll_';
function dlapmt_(__forwrd: P__CLPK_logical; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __K: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlapmt_';
function dlapy2_(__X: P__CLPK_doublereal; __Y: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'dlapy2_';
function dlapy3_(__X: P__CLPK_doublereal; __Y: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dlapy3_';
function dlaqgb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __r__: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __rowcnd: P__CLPK_doublereal; __colcnd: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqgb_';
function dlaqge_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rowcnd: P__CLPK_doublereal;
  __colcnd: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqge_';
function dlaqp2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __jpvt: P__CLPK_integer; __tau: P__CLPK_doublereal; __vn1: P__CLPK_doublereal;
  __vn2: P__CLPK_doublereal; __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqp2_';
function dlaqps_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __nb: P__CLPK_integer; __kb: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __vn1: P__CLPK_doublereal;
  __vn2: P__CLPK_doublereal; __auxv: P__CLPK_doublereal;
  __F: P__CLPK_doublereal; __ldf: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqps_';
function dlaqr0_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer; __wr: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqr0_';
function dlaqr1_(__N: P__CLPK_integer; __h__: P__CLPK_doublereal;
  __ldh: P__CLPK_integer; __sr1: P__CLPK_doublereal; __si1: P__CLPK_doublereal;
  __sr2: P__CLPK_doublereal; __si2: P__CLPK_doublereal; __v: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlaqr1_';
function dlaqr2_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __ns: P__CLPK_integer; __nd: P__CLPK_integer;
  __sr: P__CLPK_doublereal; __si: P__CLPK_doublereal; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __nh: P__CLPK_integer; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer; __nv: P__CLPK_integer; __wv: P__CLPK_doublereal;
  __ldwv: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlaqr2_';
function dlaqr3_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __ns: P__CLPK_integer; __nd: P__CLPK_integer;
  __sr: P__CLPK_doublereal; __si: P__CLPK_doublereal; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __nh: P__CLPK_integer; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer; __nv: P__CLPK_integer; __wv: P__CLPK_doublereal;
  __ldwv: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlaqr3_';
function dlaqr4_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer; __wr: P__CLPK_doublereal;
  __wi: P__CLPK_doublereal; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqr4_';
function dlaqr5_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __kacc22: P__CLPK_integer; __N: P__CLPK_integer; __ktop: P__CLPK_integer;
  __kbot: P__CLPK_integer; __nshfts: P__CLPK_integer; __sr: P__CLPK_doublereal;
  __si: P__CLPK_doublereal; __h__: P__CLPK_doublereal; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __v: P__CLPK_doublereal; __ldv: P__CLPK_integer;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __nv: P__CLPK_integer;
  __wv: P__CLPK_doublereal; __ldwv: P__CLPK_integer; __nh: P__CLPK_integer;
  __wh: P__CLPK_doublereal; __ldwh: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqr5_';
function dlaqsb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqsb_';
function dlaqsp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqsp_';
function dlaqsy_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'dlaqsy_';
function dlaqtr_(__ltran: P__CLPK_logical; __l__CLPK_real: P__CLPK_logical;
  __N: P__CLPK_integer; __t: P__CLPK_doublereal; __ldt: P__CLPK_integer;
  __B: P__CLPK_doublereal; __w: P__CLPK_doublereal; __scale: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlaqtr_';
function dlar1v_(__N: P__CLPK_integer; __b1: P__CLPK_integer;
  __bn: P__CLPK_integer; __lambda: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __L: P__CLPK_doublereal; __ld: P__CLPK_doublereal;
  __lld: P__CLPK_doublereal; __pivmin: P__CLPK_doublereal;
  __gaptol: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __wantnc: P__CLPK_logical; __negcnt: P__CLPK_integer;
  __ztz: P__CLPK_doublereal; __mingma: P__CLPK_doublereal;
  __r__: P__CLPK_integer; __isuppz: P__CLPK_integer;
  __nrminv: P__CLPK_doublereal; __resid: P__CLPK_doublereal;
  __rqcorr: P__CLPK_doublereal; __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlar1v_';
function dlar2v_(__N: P__CLPK_integer; __X: P__CLPK_doublereal;
  __Y: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __incX: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublereal; __incc: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlar2v_';
function dlarf_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_doublereal; __incv: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlarf_';
function dlarfb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __t: P__CLPK_doublereal; __ldt: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarfb_';
function dlarfg_(__N: P__CLPK_integer; __alpha: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __incX: P__CLPK_integer; __tau: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlarfg_';
function dlarfp_(__N: P__CLPK_integer; __alpha: P__CLPK_doublereal;
  __X: P__CLPK_doublereal; __incX: P__CLPK_integer; __tau: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlarfp_';
function dlarft_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __tau: P__CLPK_doublereal; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarft_';
function dlarfx_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_doublereal; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlarfx_';
function dlargv_(__N: P__CLPK_integer; __X: P__CLPK_doublereal;
  __incX: P__CLPK_integer; __Y: P__CLPK_doublereal; __incY: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __incc: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlargv_';
function dlarnv_(__idist: P__CLPK_integer; __iseed: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlarnv_';
function dlarra_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __e2: P__CLPK_doublereal;
  __spltol: P__CLPK_doublereal; __tnrm: P__CLPK_doublereal;
  __nsplit: P__CLPK_integer; __isplit: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlarra_';
function dlarrb_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __lld: P__CLPK_doublereal; __ifirst: P__CLPK_integer;
  __ilast: P__CLPK_integer; __rtol1: P__CLPK_doublereal;
  __rtol2: P__CLPK_doublereal; __offset: P__CLPK_integer;
  __w: P__CLPK_doublereal; __wgap: P__CLPK_doublereal;
  __werr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __pivmin: P__CLPK_doublereal;
  __spdiam: P__CLPK_doublereal; __twist: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarrb_';
function dlarrc_(__jobt: MarshaledAString; __N: P__CLPK_integer;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __pivmin: P__CLPK_doublereal;
  __eigcnt: P__CLPK_integer; __lcnt: P__CLPK_integer; __rcnt: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarrc_';
function dlarrd_(__range: MarshaledAString; __Order: MarshaledAString;
  __N: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __gers: P__CLPK_doublereal;
  __reltol: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __e2: P__CLPK_doublereal;
  __pivmin: P__CLPK_doublereal; __nsplit: P__CLPK_integer;
  __isplit: P__CLPK_integer; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __werr: P__CLPK_doublereal; __wl: P__CLPK_doublereal;
  __wu: P__CLPK_doublereal; __iblock: P__CLPK_integer;
  __indexw: P__CLPK_integer; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarrd_';
function dlarre_(__range: MarshaledAString; __N: P__CLPK_integer;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __e2: P__CLPK_doublereal; __rtol1: P__CLPK_doublereal;
  __rtol2: P__CLPK_doublereal; __spltol: P__CLPK_doublereal;
  __nsplit: P__CLPK_integer; __isplit: P__CLPK_integer; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __werr: P__CLPK_doublereal;
  __wgap: P__CLPK_doublereal; __iblock: P__CLPK_integer;
  __indexw: P__CLPK_integer; __gers: P__CLPK_doublereal;
  __pivmin: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarre_';
function dlarrf_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __L: P__CLPK_doublereal; __ld: P__CLPK_doublereal; __clstrt: P__CLPK_integer;
  __clend: P__CLPK_integer; __w: P__CLPK_doublereal; __wgap: P__CLPK_doublereal;
  __werr: P__CLPK_doublereal; __spdiam: P__CLPK_doublereal;
  __clgapl: P__CLPK_doublereal; __clgapr: P__CLPK_doublereal;
  __pivmin: P__CLPK_doublereal; __sigma: P__CLPK_doublereal;
  __dplus: P__CLPK_doublereal; __lplus: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarrf_';
function dlarrj_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __e2: P__CLPK_doublereal; __ifirst: P__CLPK_integer; __ilast: P__CLPK_integer;
  __rtol: P__CLPK_doublereal; __offset: P__CLPK_integer;
  __w: P__CLPK_doublereal; __werr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __pivmin: P__CLPK_doublereal; __spdiam: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarrj_';
function dlarrk_(__N: P__CLPK_integer; __iw: P__CLPK_integer;
  __gl: P__CLPK_doublereal; __gu: P__CLPK_doublereal; __d__: P__CLPK_doublereal;
  __e2: P__CLPK_doublereal; __pivmin: P__CLPK_doublereal;
  __reltol: P__CLPK_doublereal; __w: P__CLPK_doublereal;
  __werr: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarrk_';
function dlarrr_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarrr_';
function dlarrv_(__N: P__CLPK_integer; __vl: P__CLPK_doublereal;
  __vu: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __L: P__CLPK_doublereal;
  __pivmin: P__CLPK_doublereal; __isplit: P__CLPK_integer; __M: P__CLPK_integer;
  __dol: P__CLPK_integer; __dou: P__CLPK_integer; __minrgp: P__CLPK_doublereal;
  __rtol1: P__CLPK_doublereal; __rtol2: P__CLPK_doublereal;
  __w: P__CLPK_doublereal; __werr: P__CLPK_doublereal;
  __wgap: P__CLPK_doublereal; __iblock: P__CLPK_integer;
  __indexw: P__CLPK_integer; __gers: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __isuppz: P__CLPK_integer;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlarrv_';
function dlarscl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlarscl2_';
function dlartg_(__F: P__CLPK_doublereal; __g: P__CLPK_doublereal;
  __cs: P__CLPK_doublereal; __sn: P__CLPK_doublereal; __r__: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlartg_';
function dlartv_(__N: P__CLPK_integer; __X: P__CLPK_doublereal;
  __incX: P__CLPK_integer; __Y: P__CLPK_doublereal; __incY: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublereal; __incc: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlartv_';
function dlaruv_(__iseed: P__CLPK_integer; __N: P__CLPK_integer;
  __X: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlaruv_';
function dlarz_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __L: P__CLPK_integer; __v: P__CLPK_doublereal;
  __incv: P__CLPK_integer; __tau: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlarz_';
function dlarzb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __v: P__CLPK_doublereal; __ldv: P__CLPK_integer; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublereal; __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarzb_';
function dlarzt_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_doublereal;
  __ldv: P__CLPK_integer; __tau: P__CLPK_doublereal; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlarzt_';
function dlas2_(__F: P__CLPK_doublereal; __g: P__CLPK_doublereal;
  __h__: P__CLPK_doublereal; __ssmin: P__CLPK_doublereal;
  __ssmax: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlas2_';
function dlascl_(__type__: MarshaledAString; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __cfrom: P__CLPK_doublereal; __cto: P__CLPK_doublereal;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlascl_';
function dlascl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlascl2_';
function dlasd0_(__N: P__CLPK_integer; __sqre: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __u: P__CLPK_doublereal;
  __ldu: P__CLPK_integer; __vt: P__CLPK_doublereal; __ldvt: P__CLPK_integer;
  __smlsiz: P__CLPK_integer; __iwork: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasd0_';
function dlasd1_(__nl: P__CLPK_integer; __NR: P__CLPK_integer;
  __sqre: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __alpha: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __vt: P__CLPK_doublereal;
  __ldvt: P__CLPK_integer; __idxq: P__CLPK_integer; __iwork: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasd1_';
function dlasd2_(__nl: P__CLPK_integer; __NR: P__CLPK_integer;
  __sqre: P__CLPK_integer; __K: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __alpha: P__CLPK_doublereal;
  __beta: P__CLPK_doublereal; __u: P__CLPK_doublereal; __ldu: P__CLPK_integer;
  __vt: P__CLPK_doublereal; __ldvt: P__CLPK_integer;
  __dsigma: P__CLPK_doublereal; __u2: P__CLPK_doublereal;
  __ldu2: P__CLPK_integer; __vt2: P__CLPK_doublereal; __ldvt2: P__CLPK_integer;
  __idxp: P__CLPK_integer; __idx: P__CLPK_integer; __idxc: P__CLPK_integer;
  __idxq: P__CLPK_integer; __coltyp: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlasd2_';
function dlasd3_(__nl: P__CLPK_integer; __NR: P__CLPK_integer;
  __sqre: P__CLPK_integer; __K: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __dsigma: P__CLPK_doublereal;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __u2: P__CLPK_doublereal;
  __ldu2: P__CLPK_integer; __vt: P__CLPK_doublereal; __ldvt: P__CLPK_integer;
  __vt2: P__CLPK_doublereal; __ldvt2: P__CLPK_integer; __idxc: P__CLPK_integer;
  __ctot: P__CLPK_integer; __z__: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlasd3_';
function dlasd4_(__N: P__CLPK_integer; __i__: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __delta: P__CLPK_doublereal; __rho: P__CLPK_doublereal;
  __sigma: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasd4_';
function dlasd5_(__i__: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __delta: P__CLPK_doublereal;
  __rho: P__CLPK_doublereal; __dsigma: P__CLPK_doublereal;
  __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlasd5_';
function dlasd6_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __vf: P__CLPK_doublereal; __vl: P__CLPK_doublereal;
  __alpha: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __idxq: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __ldgnum: P__CLPK_integer;
  __poles: P__CLPK_doublereal; __difl: P__CLPK_doublereal;
  __difr: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __K: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlasd6_';
function dlasd7_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __K: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __zw: P__CLPK_doublereal; __vf: P__CLPK_doublereal; __vfw: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vlw: P__CLPK_doublereal;
  __alpha: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __dsigma: P__CLPK_doublereal; __idx: P__CLPK_integer; __idxp: P__CLPK_integer;
  __idxq: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __ldgnum: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlasd7_';
function dlasd8_(__icompq: P__CLPK_integer; __K: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __vf: P__CLPK_doublereal; __vl: P__CLPK_doublereal;
  __difl: P__CLPK_doublereal; __difr: P__CLPK_doublereal;
  __lddifr: P__CLPK_integer; __dsigma: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasd8_';
function dlasda_(__icompq: P__CLPK_integer; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __sqre: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __u: P__CLPK_doublereal; __ldu: P__CLPK_integer;
  __vt: P__CLPK_doublereal; __K: P__CLPK_integer; __difl: P__CLPK_doublereal;
  __difr: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __poles: P__CLPK_doublereal; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer; __perm: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __S: P__CLPK_doublereal; __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasda_';
function dlasdq_(__Uplo: MarshaledAString; __sqre: P__CLPK_integer;
  __N: P__CLPK_integer; __ncvt: P__CLPK_integer; __nru: P__CLPK_integer;
  __ncc: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vt: P__CLPK_doublereal; __ldvt: P__CLPK_integer; __u: P__CLPK_doublereal;
  __ldu: P__CLPK_integer; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasdq_';
function dlasdt_(__N: P__CLPK_integer; __lvl: P__CLPK_integer;
  __nd: P__CLPK_integer; __inode: P__CLPK_integer; __ndiml: P__CLPK_integer;
  __ndimr: P__CLPK_integer; __msub: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasdt_';
function dlaset_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __alpha: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaset_';
function dlasq1_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlasq1_';
function dlasq2_(__N: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasq2_';
function dlasq3_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __pp: P__CLPK_integer;
  __dmin__: P__CLPK_doublereal; __sigma: P__CLPK_doublereal;
  __desig: P__CLPK_doublereal; __qmax: P__CLPK_doublereal;
  __nfail: P__CLPK_integer; __iter: P__CLPK_integer; __ndiv: P__CLPK_integer;
  __ieee: P__CLPK_logical; __ttype: P__CLPK_integer;
  __dmin1: P__CLPK_doublereal; __dmin2: P__CLPK_doublereal;
  __dn: P__CLPK_doublereal; __dn1: P__CLPK_doublereal;
  __dn2: P__CLPK_doublereal; __g: P__CLPK_doublereal; __tau: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlasq3_';
function dlasq4_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __pp: P__CLPK_integer; __n0in: P__CLPK_integer;
  __dmin__: P__CLPK_doublereal; __dmin1: P__CLPK_doublereal;
  __dmin2: P__CLPK_doublereal; __dn: P__CLPK_doublereal;
  __dn1: P__CLPK_doublereal; __dn2: P__CLPK_doublereal;
  __tau: P__CLPK_doublereal; __ttype: P__CLPK_integer; __g: P__CLPK_doublereal)
  : Integer; cdecl; external libAccelerate name _PU + 'dlasq4_';
function dlasq5_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __pp: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __dmin__: P__CLPK_doublereal; __dmin1: P__CLPK_doublereal;
  __dmin2: P__CLPK_doublereal; __dn: P__CLPK_doublereal;
  __dnm1: P__CLPK_doublereal; __dnm2: P__CLPK_doublereal;
  __ieee: P__CLPK_logical): Integer; cdecl;
  external libAccelerate name _PU + 'dlasq5_';
function dlasq6_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __pp: P__CLPK_integer;
  __dmin__: P__CLPK_doublereal; __dmin1: P__CLPK_doublereal;
  __dmin2: P__CLPK_doublereal; __dn: P__CLPK_doublereal;
  __dnm1: P__CLPK_doublereal; __dnm2: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlasq6_';
function dlasr_(__Side: MarshaledAString; __pivot: MarshaledAString;
  __direct: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublereal; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasr_';
function dlasrt_(__ID: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasrt_';
function dlassq_(__N: P__CLPK_integer; __X: P__CLPK_doublereal;
  __incX: P__CLPK_integer; __scale: P__CLPK_doublereal;
  __sumsq: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlassq_';
function dlasv2_(__F: P__CLPK_doublereal; __g: P__CLPK_doublereal;
  __h__: P__CLPK_doublereal; __ssmin: P__CLPK_doublereal;
  __ssmax: P__CLPK_doublereal; __snr: P__CLPK_doublereal;
  __csr: P__CLPK_doublereal; __snl: P__CLPK_doublereal;
  __csl: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlasv2_';
function dlaswp_(__N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __k1: P__CLPK_integer; __k2: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlaswp_';
function dlasy2_(__ltranl: P__CLPK_logical; __ltranr: P__CLPK_logical;
  __isgn: P__CLPK_integer; __n1: P__CLPK_integer; __n2: P__CLPK_integer;
  __tl: P__CLPK_doublereal; __ldtl: P__CLPK_integer; __tr: P__CLPK_doublereal;
  __ldtr: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __scale: P__CLPK_doublereal; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __xnorm: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasy2_';
function dlasyf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __kb: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __w: P__CLPK_doublereal;
  __ldw: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlasyf_';
function dlat2s_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __sa: P__CLPK_real;
  __ldsa: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlat2s_';
function dlatbs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __X: P__CLPK_doublereal; __scale: P__CLPK_doublereal;
  __cnorm: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlatbs_';
function dlatdf_(__ijob: P__CLPK_integer; __N: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __rhs: P__CLPK_doublereal;
  __rdsum: P__CLPK_doublereal; __rdscal: P__CLPK_doublereal;
  __ipiv: P__CLPK_integer; __jpiv: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlatdf_';
function dlatps_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __X: P__CLPK_doublereal;
  __scale: P__CLPK_doublereal; __cnorm: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlatps_';
function dlatrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __E: P__CLPK_doublereal; __tau: P__CLPK_doublereal; __w: P__CLPK_doublereal;
  __ldw: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlatrd_';
function dlatrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __X: P__CLPK_doublereal;
  __scale: P__CLPK_doublereal; __cnorm: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlatrs_';
function dlatrz_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlatrz_';
function dlatzm_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_doublereal; __incv: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __C1: P__CLPK_doublereal; __c2: P__CLPK_doublereal;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlatzm_';
function dlauu2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlauu2_';
function dlauum_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dlauum_';
function dopgtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __tau: P__CLPK_doublereal; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dopgtr_';
function dopmtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dopmtr_';
function dorg2l_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorg2l_';
function dorg2r_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorg2r_';
function dorgbr_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorgbr_';
function dorghr_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorghr_';
function dorgl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorgl2_';
function dorglq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorglq_';
function dorgql_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorgql_';
function dorgqr_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorgqr_';
function dorgr2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorgr2_';
function dorgrq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorgrq_';
function dorgtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dorgtr_';
function dorm2l_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorm2l_';
function dorm2r_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorm2r_';
function dormbr_(__vect: MarshaledAString; __Side: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dormbr_';
function dormhr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dormhr_';
function dorml2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dorml2_';
function dormlq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dormlq_';
function dormql_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dormql_';
function dormqr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dormqr_';
function dormr2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dormr2_';
function dormr3_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dormr3_';
function dormrq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dormrq_';
function dormrz_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublereal; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dormrz_';
function dormtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dormtr_';
function dpbcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpbcon_';
function dpbequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpbequ_';
function dpbrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __afb: P__CLPK_doublereal; __ldafb: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpbrfs_';
function dpbstf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpbstf_';
function dpbsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpbsv_';
function dpbsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __afb: P__CLPK_doublereal;
  __ldafb: P__CLPK_integer; __equed: MarshaledAString; __S: P__CLPK_doublereal;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpbsvx_';
function dpbtf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpbtf2_';
function dpbtrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpbtrf_';
function dpbtrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpbtrs_';
function dpftrf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpftrf_';
function dpftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpftri_';
function dpftrs_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpftrs_';
function dpocon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpocon_';
function dpoequ_(__N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpoequ_';
function dpoequb_(__N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpoequb_';
function dporfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __af: P__CLPK_doublereal; __ldaf: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dporfs_';
function dposv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dposv_';
function dposvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __af: P__CLPK_doublereal; __ldaf: P__CLPK_integer;
  __equed: MarshaledAString; __S: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dposvx_';
function dpotf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpotf2_';
function dpotrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpotrf_';
function dpotri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpotri_';
function dpotrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpotrs_';
function dppcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dppcon_';
function dppequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dppequ_';
function dpprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal; __afp: P__CLPK_doublereal;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpprfs_';
function dppsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dppsv_';
function dppsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __afp: P__CLPK_doublereal; __equed: MarshaledAString; __S: P__CLPK_doublereal;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dppsvx_';
function dpptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpptrf_';
function dpptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpptri_';
function dpptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpptrs_';
function dpstf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpstf2_';
function dpstrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpstrf_';
function dptcon_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dptcon_';
function dpteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dpteqr_';
function dptrfs_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __DF: P__CLPK_doublereal;
  __ef: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dptrfs_';
function dptsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dptsv_';
function dptsvx_(__fact: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __DF: P__CLPK_doublereal; __ef: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dptsvx_';
function dpttrf_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpttrf_';
function dpttrs_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dpttrs_';
function dptts2_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dptts2_';
function drscl_(__N: P__CLPK_integer; __sa: P__CLPK_doublereal;
  __sx: P__CLPK_doublereal; __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'drscl_';
function dsbev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsbev_';
function dsbevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsbevd_';
function dsbevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __M: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsbevx_';
function dsbgst_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __bb: P__CLPK_doublereal;
  __ldbb: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsbgst_';
function dsbgv_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __bb: P__CLPK_doublereal;
  __ldbb: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsbgv_';
function dsbgvd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer; __bb: P__CLPK_doublereal;
  __ldbb: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsbgvd_';
function dsbgvx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __ka: P__CLPK_integer;
  __kb: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __bb: P__CLPK_doublereal; __ldbb: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __M: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsbgvx_';
function dsbtrd_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_doublereal;
  __ldab: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsbtrd_';
function dsfrk_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __alpha: P__CLPK_doublereal; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __beta: P__CLPK_doublereal; __c__: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dsfrk_';
function dsgesv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __work: P__CLPK_doublereal; __swork: P__CLPK_real;
  __iter: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsgesv_';
function dspcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dspcon_';
function dspev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublereal; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dspev_';
function dspevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublereal; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dspevd_';
function dspevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dspevx_';
function dspgst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublereal; __bp: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dspgst_';
function dspgv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __bp: P__CLPK_doublereal; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dspgv_';
function dspgvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __bp: P__CLPK_doublereal; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dspgvd_';
function dspgvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __bp: P__CLPK_doublereal; __vl: P__CLPK_doublereal;
  __vu: P__CLPK_doublereal; __il: P__CLPK_integer; __iu: P__CLPK_integer;
  __abstol: P__CLPK_doublereal; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dspgvx_';
function dsposv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __work: P__CLPK_doublereal; __swork: P__CLPK_real;
  __iter: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsposv_';
function dsprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal; __afp: P__CLPK_doublereal;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsprfs_';
function dspsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dspsv_';
function dspsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __afp: P__CLPK_doublereal; __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dspsvx_';
function dsptrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __tau: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsptrd_';
function dsptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsptrf_';
function dsptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __ipiv: P__CLPK_integer; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsptri_';
function dsptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsptrs_';
function dstebz_(__range: MarshaledAString; __Order: MarshaledAString;
  __N: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __M: P__CLPK_integer;
  __nsplit: P__CLPK_integer; __w: P__CLPK_doublereal; __iblock: P__CLPK_integer;
  __isplit: P__CLPK_integer; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dstebz_';
function dstedc_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dstedc_';
function dstegr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dstegr_';
function dstein_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __iblock: P__CLPK_integer; __isplit: P__CLPK_integer;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dstein_';
function dstemr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer; __nzc: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __tryrac: P__CLPK_logical;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dstemr_';
function dsteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsteqr_';
function dsterf_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsterf_';
function dstev_(__jobz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dstev_';
function dstevd_(__jobz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dstevd_';
function dstevr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dstevr_';
function dstevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dstevx_';
function dsycon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsycon_';
function dsyequb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsyequb_';
function dsyev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsyev_';
function dsyevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsyevd_';
function dsyevr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __M: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __isuppz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsyevr_';
function dsyevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __M: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsyevx_';
function dsygs2_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsygs2_';
function dsygst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsygst_';
function dsygv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsygv_';
function dsygvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsygvd_';
function dsygvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __M: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsygvx_';
function dsyrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __af: P__CLPK_doublereal; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsyrfs_';
function dsysv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsysv_';
function dsysvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __af: P__CLPK_doublereal; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsysvx_';
function dsytd2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tau: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsytd2_';
function dsytf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsytf2_';
function dsytrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsytrd_';
function dsytrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dsytrf_';
function dsytri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsytri_';
function dsytrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dsytrs_';
function dtbcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtbcon_';
function dtbrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __X: P__CLPK_doublereal;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtbrfs_';
function dtbtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_doublereal; __ldab: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtbtrs_';
function dtfsm_(__transr: MarshaledAString; __Side: MarshaledAString;
  __Uplo: MarshaledAString; __Trans: MarshaledAString; __Diag: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __alpha: P__CLPK_doublereal;
  __A: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtfsm_';
function dtftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtftri_';
function dtfttp_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_doublereal; __Ap: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtfttp_';
function dtfttr_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_doublereal; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtfttr_';
function dtgevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __S: P__CLPK_doublereal;
  __lds: P__CLPK_integer; __P: P__CLPK_doublereal; __ldp: P__CLPK_integer;
  __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer; __vr: P__CLPK_doublereal;
  __ldvr: P__CLPK_integer; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtgevc_';
function dtgex2_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer;
  __j1: P__CLPK_integer; __n1: P__CLPK_integer; __n2: P__CLPK_integer;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtgex2_';
function dtgexc_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublereal; __ldb: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __z__: P__CLPK_doublereal; __ldz: P__CLPK_integer;
  __ifst: P__CLPK_integer; __ilst: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtgexc_';
function dtgsen_(__ijob: P__CLPK_integer; __wantq: P__CLPK_logical;
  __wantz: P__CLPK_logical; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __alphar: P__CLPK_doublereal;
  __alphai: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __ldz: P__CLPK_integer; __M: P__CLPK_integer; __pl: P__CLPK_doublereal;
  __pr: P__CLPK_doublereal; __dif: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtgsen_';
function dtgsja_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __tola: P__CLPK_doublereal;
  __tolb: P__CLPK_doublereal; __alpha: P__CLPK_doublereal;
  __beta: P__CLPK_doublereal; __u: P__CLPK_doublereal; __ldu: P__CLPK_integer;
  __v: P__CLPK_doublereal; __ldv: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __work: P__CLPK_doublereal; __ncycle: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtgsja_';
function dtgsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer; __vr: P__CLPK_doublereal;
  __ldvr: P__CLPK_integer; __S: P__CLPK_doublereal; __dif: P__CLPK_doublereal;
  __mm: P__CLPK_integer; __M: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtgsna_';
function dtgsy2_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __ldd: P__CLPK_integer; __E: P__CLPK_doublereal; __lde: P__CLPK_integer;
  __F: P__CLPK_doublereal; __ldf: P__CLPK_integer; __scale: P__CLPK_doublereal;
  __rdsum: P__CLPK_doublereal; __rdscal: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __pq: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtgsy2_';
function dtgsyl_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __ldd: P__CLPK_integer; __E: P__CLPK_doublereal; __lde: P__CLPK_integer;
  __F: P__CLPK_doublereal; __ldf: P__CLPK_integer; __scale: P__CLPK_doublereal;
  __dif: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtgsyl_';
function dtpcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtpcon_';
function dtprfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublereal; __ldx: P__CLPK_integer; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtprfs_';
function dtptri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtptri_';
function dtptrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __B: P__CLPK_doublereal; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtptrs_';
function dtpttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublereal; __arf: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtpttf_';
function dtpttr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublereal; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtpttr_';
function dtrcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublereal;
  __lda: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtrcon_';
function dtrevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer; __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublereal; __ldvr: P__CLPK_integer; __mm: P__CLPK_integer;
  __M: P__CLPK_integer; __work: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtrevc_';
function dtrexc_(__compq: MarshaledAString; __N: P__CLPK_integer;
  __t: P__CLPK_doublereal; __ldt: P__CLPK_integer; __Q: P__CLPK_doublereal;
  __ldq: P__CLPK_integer; __ifst: P__CLPK_integer; __ilst: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrexc_';
function dtrrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublereal; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtrrfs_';
function dtrsen_(__job: MarshaledAString; __compq: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer; __Q: P__CLPK_doublereal; __ldq: P__CLPK_integer;
  __wr: P__CLPK_doublereal; __wi: P__CLPK_doublereal; __M: P__CLPK_integer;
  __S: P__CLPK_doublereal; __sep: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtrsen_';
function dtrsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_doublereal;
  __ldt: P__CLPK_integer; __vl: P__CLPK_doublereal; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublereal; __ldvr: P__CLPK_integer; __S: P__CLPK_doublereal;
  __sep: P__CLPK_doublereal; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_doublereal; __ldwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrsna_';
function dtrsyl_(__trana: MarshaledAString; __tranb: MarshaledAString;
  __isgn: P__CLPK_integer; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __c__: P__CLPK_doublereal; __ldc: P__CLPK_integer;
  __scale: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrsyl_';
function dtrti2_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrti2_';
function dtrtri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrtri_';
function dtrtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrtrs_';
function dtrttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __arf: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrttf_';
function dtrttp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __Ap: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtrttp_';
function dtzrqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dtzrqf_';
function dtzrzf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __tau: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'dtzrzf_';
function dzsum1_(__N: P__CLPK_integer; __cx: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dzsum1_';
function icmax1_(__N: P__CLPK_integer; __cx: P__CLPK_complex;
  __incX: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'icmax1_';
function ieeeck_(__ispec: P__CLPK_integer; __zero: P__CLPK_real;
  __one: P__CLPK_real): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ieeeck_';
function ilaclc_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilaclc_';
function ilaclr_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_complex; __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilaclr_';
function iladiag_(__Diag: MarshaledAString): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'iladiag_';
function iladlc_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'iladlc_';
function iladlr_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'iladlr_';
function ilaenv_(__ispec: P__CLPK_integer; __name__: MarshaledAString;
  __opts: MarshaledAString; __n1: P__CLPK_integer; __n2: P__CLPK_integer;
  __n3: P__CLPK_integer; __n4: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilaenv_';
function ilaprec_(__prec: MarshaledAString): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilaprec_';
function ilaslc_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilaslc_';
function ilaslr_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilaslr_';
function ilatrans_(__Trans: MarshaledAString): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilatrans_';
function ilauplo_(__Uplo: MarshaledAString): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilauplo_';
function ilaver_(__vers_major__: P__CLPK_integer;
  __vers_minor__: P__CLPK_integer; __vers_patch__: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'ilaver_';
function ilazlc_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilazlc_';
function ilazlr_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'ilazlr_';
function iparmq_(__ispec: P__CLPK_integer; __name__: MarshaledAString;
  __opts: MarshaledAString; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __lwork: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'iparmq_';
function izmax1_(__N: P__CLPK_integer; __cx: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer): __CLPK_integer; cdecl;
  external libAccelerate name _PU + 'izmax1_';
function lsamen_(__N: P__CLPK_integer; __ca: MarshaledAString;
  __cb: MarshaledAString): __CLPK_logical; cdecl;
  external libAccelerate name _PU + 'lsamen_';
function smaxloc_(__A: P__CLPK_real; __dimm: P__CLPK_integer): __CLPK_integer;
  cdecl; external libAccelerate name _PU + 'smaxloc_';
function sbdsdc_(__Uplo: MarshaledAString; __compq: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __vt: P__CLPK_real;
  __ldvt: P__CLPK_integer; __Q: P__CLPK_real; __iq: P__CLPK_integer;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sbdsdc_';
function sbdsqr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __ncvt: P__CLPK_integer; __nru: P__CLPK_integer; __ncc: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __vt: P__CLPK_real;
  __ldvt: P__CLPK_integer; __u: P__CLPK_real; __ldu: P__CLPK_integer;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sbdsqr_';
function scsum1_(__N: P__CLPK_integer; __cx: P__CLPK_complex;
  __incX: P__CLPK_integer): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'scsum1_';
function sdisna_(__job: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __sep: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sdisna_';
function sgbbrd_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __ncc: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __pt: P__CLPK_real; __ldpt: P__CLPK_integer;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgbbrd_';
function sgbcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgbcon_';
function sgbequ_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgbequ_';
function sgbequb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgbequb_';
function sgbrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __afb: P__CLPK_real;
  __ldafb: P__CLPK_integer; __ipiv: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgbrfs_';
function sgbsv_(__N: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgbsv_';
function sgbsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __KL: P__CLPK_integer; __KU: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __afb: P__CLPK_real; __ldafb: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __equed: MarshaledAString; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_real; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgbsvx_';
function sgbtf2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgbtf2_';
function sgbtrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgbtrf_';
function sgbtrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sgbtrs_';
function sgebak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __scale: P__CLPK_real; __M: P__CLPK_integer; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgebak_';
function sgebal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __scale: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgebal_';
function sgebd2_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __tauq: P__CLPK_real; __taup: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgebd2_';
function sgebrd_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __tauq: P__CLPK_real; __taup: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgebrd_';
function sgecon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgecon_';
function sgeequ_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgeequ_';
function sgeequb_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgeequb_';
function sgees_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __sdim: P__CLPK_integer; __wr: P__CLPK_real;
  __wi: P__CLPK_real; __vs: P__CLPK_real; __ldvs: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgees_';
function sgeesx_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __sdim: P__CLPK_integer;
  __wr: P__CLPK_real; __wi: P__CLPK_real; __vs: P__CLPK_real;
  __ldvs: P__CLPK_integer; __rconde: P__CLPK_real; __rcondv: P__CLPK_real;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgeesx_';
function sgeev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __wr: P__CLPK_real; __wi: P__CLPK_real; __vl: P__CLPK_real;
  __ldvl: P__CLPK_integer; __vr: P__CLPK_real; __ldvr: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgeev_';
function sgeevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __wr: P__CLPK_real;
  __wi: P__CLPK_real; __vl: P__CLPK_real; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_real; __ldvr: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __scale: P__CLPK_real; __abnrm: P__CLPK_real;
  __rconde: P__CLPK_real; __rcondv: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgeevx_';
function sgegs_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __alphar: P__CLPK_real;
  __alphai: P__CLPK_real; __beta: P__CLPK_real; __vsl: P__CLPK_real;
  __ldvsl: P__CLPK_integer; __vsr: P__CLPK_real; __ldvsr: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgegs_';
function sgegv_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __alphar: P__CLPK_real;
  __alphai: P__CLPK_real; __beta: P__CLPK_real; __vl: P__CLPK_real;
  __ldvl: P__CLPK_integer; __vr: P__CLPK_real; __ldvr: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgegv_';
function sgehd2_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sgehd2_';
function sgehrd_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgehrd_';
function sgejsv_(__joba: MarshaledAString; __jobu: MarshaledAString;
  __jobv: MarshaledAString; __jobr: MarshaledAString; __jobt: MarshaledAString;
  __jobp: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __sva: P__CLPK_real;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgejsv_';
function sgelq2_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgelq2_';
function sgelqf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgelqf_';
function sgels_(__Trans: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgels_';
function sgelsd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __S: P__CLPK_real;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgelsd_';
function sgelss_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __S: P__CLPK_real;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgelss_';
function sgelsx_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgelsx_';
function sgelsy_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgelsy_';
function sgeql2_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgeql2_';
function sgeqlf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgeqlf_';
function sgeqp3_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __jpvt: P__CLPK_integer; __tau: P__CLPK_real;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgeqp3_';
function sgeqpf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __jpvt: P__CLPK_integer; __tau: P__CLPK_real;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgeqpf_';
function sgeqr2_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgeqr2_';
function sgeqrf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgeqrf_';
function sgerfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __af: P__CLPK_real; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgerfs_';
function sgerq2_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgerq2_';
function sgerqf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgerqf_';
function sgesc2_(__N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __rhs: P__CLPK_real; __ipiv: P__CLPK_integer;
  __jpiv: P__CLPK_integer; __scale: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'sgesc2_';
function sgesdd_(__jobz: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __S: P__CLPK_real; __u: P__CLPK_real; __ldu: P__CLPK_integer;
  __vt: P__CLPK_real; __ldvt: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgesdd_';
function sgesv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sgesv_';
function sgesvd_(__jobu: MarshaledAString; __jobvt: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __S: P__CLPK_real; __u: P__CLPK_real;
  __ldu: P__CLPK_integer; __vt: P__CLPK_real; __ldvt: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgesvd_';
function sgesvj_(__joba: MarshaledAString; __jobu: MarshaledAString;
  __jobv: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __sva: P__CLPK_real;
  __mv: P__CLPK_integer; __v: P__CLPK_real; __ldv: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgesvj_';
function sgesvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __af: P__CLPK_real; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __equed: MarshaledAString; __r__: P__CLPK_real;
  __c__: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __X: P__CLPK_real; __ldx: P__CLPK_integer; __rcond: P__CLPK_real;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgesvx_';
function sgetc2_(__N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __jpiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgetc2_';
function sgetf2_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgetf2_';
function sgetrf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgetrf_';
function sgetri_(__N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgetri_';
function sgetrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgetrs_';
function sggbak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_real; __rscale: P__CLPK_real; __M: P__CLPK_integer;
  __v: P__CLPK_real; __ldv: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sggbak_';
function sggbal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_real; __rscale: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sggbal_';
function sgges_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __sdim: P__CLPK_integer; __alphar: P__CLPK_real;
  __alphai: P__CLPK_real; __beta: P__CLPK_real; __vsl: P__CLPK_real;
  __ldvsl: P__CLPK_integer; __vsr: P__CLPK_real; __ldvsr: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgges_';
function sggesx_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __sense: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __sdim: P__CLPK_integer;
  __alphar: P__CLPK_real; __alphai: P__CLPK_real; __beta: P__CLPK_real;
  __vsl: P__CLPK_real; __ldvsl: P__CLPK_integer; __vsr: P__CLPK_real;
  __ldvsr: P__CLPK_integer; __rconde: P__CLPK_real; __rcondv: P__CLPK_real;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sggesx_';
function sggev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __alphar: P__CLPK_real;
  __alphai: P__CLPK_real; __beta: P__CLPK_real; __vl: P__CLPK_real;
  __ldvl: P__CLPK_integer; __vr: P__CLPK_real; __ldvr: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sggev_';
function sggevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __alphar: P__CLPK_real; __alphai: P__CLPK_real;
  __beta: P__CLPK_real; __vl: P__CLPK_real; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_real; __ldvr: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __lscale: P__CLPK_real; __rscale: P__CLPK_real;
  __abnrm: P__CLPK_real; __bbnrm: P__CLPK_real; __rconde: P__CLPK_real;
  __rcondv: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sggevx_';
function sggglm_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __d__: P__CLPK_real;
  __X: P__CLPK_real; __Y: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sggglm_';
function sgghrd_(__compq: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __Q: P__CLPK_real; __ldq: P__CLPK_integer;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgghrd_';
function sgglse_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __c__: P__CLPK_real;
  __d__: P__CLPK_real; __X: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgglse_';
function sggqrf_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __taua: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __taub: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sggqrf_';
function sggrqf_(__M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __taua: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __taub: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sggrqf_';
function sggsvd_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __alpha: P__CLPK_real; __beta: P__CLPK_real;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __Q: P__CLPK_real; __ldq: P__CLPK_integer;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sggsvd_';
function sggsvp_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __tola: P__CLPK_real;
  __tolb: P__CLPK_real; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __Q: P__CLPK_real; __ldq: P__CLPK_integer;
  __iwork: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sggsvp_';
function sgsvj0_(__jobv: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __d__: P__CLPK_real; __sva: P__CLPK_real; __mv: P__CLPK_integer;
  __v: P__CLPK_real; __ldv: P__CLPK_integer; __eps: P__CLPK_real;
  __sfmin: P__CLPK_real; __tol: P__CLPK_real; __nsweep: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgsvj0_';
function sgsvj1_(__jobv: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __n1: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __d__: P__CLPK_real; __sva: P__CLPK_real;
  __mv: P__CLPK_integer; __v: P__CLPK_real; __ldv: P__CLPK_integer;
  __eps: P__CLPK_real; __sfmin: P__CLPK_real; __tol: P__CLPK_real;
  __nsweep: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgsvj1_';
function sgtcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_real; __d__: P__CLPK_real; __du: P__CLPK_real;
  __du2: P__CLPK_real; __ipiv: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgtcon_';
function sgtrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_real; __d__: P__CLPK_real;
  __du: P__CLPK_real; __dlf: P__CLPK_real; __DF: P__CLPK_real;
  __duf: P__CLPK_real; __du2: P__CLPK_real; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sgtrfs_';
function sgtsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __dl: P__CLPK_real; __d__: P__CLPK_real; __du: P__CLPK_real;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sgtsv_';
function sgtsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __dl: P__CLPK_real;
  __d__: P__CLPK_real; __du: P__CLPK_real; __dlf: P__CLPK_real;
  __DF: P__CLPK_real; __duf: P__CLPK_real; __du2: P__CLPK_real;
  __ipiv: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __X: P__CLPK_real; __ldx: P__CLPK_integer; __rcond: P__CLPK_real;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgtsvx_';
function sgttrf_(__N: P__CLPK_integer; __dl: P__CLPK_real; __d__: P__CLPK_real;
  __du: P__CLPK_real; __du2: P__CLPK_real; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgttrf_';
function sgttrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_real; __d__: P__CLPK_real;
  __du: P__CLPK_real; __du2: P__CLPK_real; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sgttrs_';
function sgtts2_(__itrans: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_real; __d__: P__CLPK_real;
  __du: P__CLPK_real; __du2: P__CLPK_real; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sgtts2_';
function shgeqz_(__job: MarshaledAString; __compq: MarshaledAString;
  __compz: MarshaledAString; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __h__: P__CLPK_real; __ldh: P__CLPK_integer;
  __t: P__CLPK_real; __ldt: P__CLPK_integer; __alphar: P__CLPK_real;
  __alphai: P__CLPK_real; __beta: P__CLPK_real; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'shgeqz_';
function shsein_(__Side: MarshaledAString; __eigsrc: MarshaledAString;
  __initv: MarshaledAString; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __h__: P__CLPK_real; __ldh: P__CLPK_integer; __wr: P__CLPK_real;
  __wi: P__CLPK_real; __vl: P__CLPK_real; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_real; __ldvr: P__CLPK_integer; __mm: P__CLPK_integer;
  __M: P__CLPK_integer; __work: P__CLPK_real; __ifaill: P__CLPK_integer;
  __ifailr: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'shsein_';
function shseqr_(__job: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_real; __ldh: P__CLPK_integer; __wr: P__CLPK_real;
  __wi: P__CLPK_real; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'shseqr_';
function sisnan_(__sin__: P__CLPK_real): __CLPK_logical; cdecl;
  external libAccelerate name _PU + 'sisnan_';
function slabad_(__small: P__CLPK_real; __large: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slabad_';
function slabrd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __tauq: P__CLPK_real;
  __taup: P__CLPK_real; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __Y: P__CLPK_real; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slabrd_';
function slacn2_(__N: P__CLPK_integer; __v: P__CLPK_real; __X: P__CLPK_real;
  __isgn: P__CLPK_integer; __est: P__CLPK_real; __kase: P__CLPK_integer;
  __isave: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slacn2_';
function slacon_(__N: P__CLPK_integer; __v: P__CLPK_real; __X: P__CLPK_real;
  __isgn: P__CLPK_integer; __est: P__CLPK_real; __kase: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slacon_';
function slacpy_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slacpy_';
function sladiv_(__A: P__CLPK_real; __B: P__CLPK_real; __c__: P__CLPK_real;
  __d__: P__CLPK_real; __P: P__CLPK_real; __Q: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'sladiv_';
function slae2_(__A: P__CLPK_real; __B: P__CLPK_real; __c__: P__CLPK_real;
  __rt1: P__CLPK_real; __rt2: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slae2_';
function slaebz_(__ijob: P__CLPK_integer; __nitmax: P__CLPK_integer;
  __N: P__CLPK_integer; __mmax: P__CLPK_integer; __minp: P__CLPK_integer;
  __nbmin: P__CLPK_integer; __abstol: P__CLPK_real; __reltol: P__CLPK_real;
  __pivmin: P__CLPK_real; __d__: P__CLPK_real; __E: P__CLPK_real;
  __e2: P__CLPK_real; __nval: P__CLPK_integer; __ab: P__CLPK_real;
  __c__: P__CLPK_real; __mout: P__CLPK_integer; __nab: P__CLPK_integer;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slaebz_';
function slaed0_(__icompq: P__CLPK_integer; __qsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __Q: P__CLPK_real; __ldq: P__CLPK_integer; __qstore: P__CLPK_real;
  __ldqs: P__CLPK_integer; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaed0_';
function slaed1_(__N: P__CLPK_integer; __d__: P__CLPK_real; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __indxq: P__CLPK_integer; __rho: P__CLPK_real;
  __cutpnt: P__CLPK_integer; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaed1_';
function slaed2_(__K: P__CLPK_integer; __N: P__CLPK_integer;
  __n1: P__CLPK_integer; __d__: P__CLPK_real; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __indxq: P__CLPK_integer; __rho: P__CLPK_real;
  __z__: P__CLPK_real; __dlamda: P__CLPK_real; __w: P__CLPK_real;
  __q2: P__CLPK_real; __indx: P__CLPK_integer; __indxc: P__CLPK_integer;
  __indxp: P__CLPK_integer; __coltyp: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slaed2_';
function slaed3_(__K: P__CLPK_integer; __N: P__CLPK_integer;
  __n1: P__CLPK_integer; __d__: P__CLPK_real; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __rho: P__CLPK_real; __dlamda: P__CLPK_real;
  __q2: P__CLPK_real; __indx: P__CLPK_integer; __ctot: P__CLPK_integer;
  __w: P__CLPK_real; __S: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slaed3_';
function slaed4_(__N: P__CLPK_integer; __i__: P__CLPK_integer;
  __d__: P__CLPK_real; __z__: P__CLPK_real; __delta: P__CLPK_real;
  __rho: P__CLPK_real; __dlam: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slaed4_';
function slaed5_(__i__: P__CLPK_integer; __d__: P__CLPK_real;
  __z__: P__CLPK_real; __delta: P__CLPK_real; __rho: P__CLPK_real;
  __dlam: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slaed5_';
function slaed6_(__kniter: P__CLPK_integer; __orgati: P__CLPK_logical;
  __rho: P__CLPK_real; __d__: P__CLPK_real; __z__: P__CLPK_real;
  __finit: P__CLPK_real; __tau: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slaed6_';
function slaed7_(__icompq: P__CLPK_integer; __N: P__CLPK_integer;
  __qsiz: P__CLPK_integer; __tlvls: P__CLPK_integer; __curlvl: P__CLPK_integer;
  __curpbm: P__CLPK_integer; __d__: P__CLPK_real; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __indxq: P__CLPK_integer; __rho: P__CLPK_real;
  __cutpnt: P__CLPK_integer; __qstore: P__CLPK_real; __qptr: P__CLPK_integer;
  __prmptr: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __givnum: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaed7_';
function slaed8_(__icompq: P__CLPK_integer; __K: P__CLPK_integer;
  __N: P__CLPK_integer; __qsiz: P__CLPK_integer; __d__: P__CLPK_real;
  __Q: P__CLPK_real; __ldq: P__CLPK_integer; __indxq: P__CLPK_integer;
  __rho: P__CLPK_real; __cutpnt: P__CLPK_integer; __z__: P__CLPK_real;
  __dlamda: P__CLPK_real; __q2: P__CLPK_real; __ldq2: P__CLPK_integer;
  __w: P__CLPK_real; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __givnum: P__CLPK_real; __indxp: P__CLPK_integer;
  __indx: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaed8_';
function slaed9_(__K: P__CLPK_integer; __kstart: P__CLPK_integer;
  __kstop: P__CLPK_integer; __N: P__CLPK_integer; __d__: P__CLPK_real;
  __Q: P__CLPK_real; __ldq: P__CLPK_integer; __rho: P__CLPK_real;
  __dlamda: P__CLPK_real; __w: P__CLPK_real; __S: P__CLPK_real;
  __lds: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaed9_';
function slaeda_(__N: P__CLPK_integer; __tlvls: P__CLPK_integer;
  __curlvl: P__CLPK_integer; __curpbm: P__CLPK_integer;
  __prmptr: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __givnum: P__CLPK_real; __Q: P__CLPK_real;
  __qptr: P__CLPK_integer; __z__: P__CLPK_real; __ztemp: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaeda_';
function slaein_(__rightv: P__CLPK_logical; __noinit: P__CLPK_logical;
  __N: P__CLPK_integer; __h__: P__CLPK_real; __ldh: P__CLPK_integer;
  __wr: P__CLPK_real; __wi: P__CLPK_real; __vr: P__CLPK_real;
  __vi: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __work: P__CLPK_real; __eps3: P__CLPK_real; __smlnum: P__CLPK_real;
  __bignum: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaein_';
function slaev2_(__A: P__CLPK_real; __B: P__CLPK_real; __c__: P__CLPK_real;
  __rt1: P__CLPK_real; __rt2: P__CLPK_real; __cs1: P__CLPK_real;
  __sn1: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slaev2_';
function slaexc_(__wantq: P__CLPK_logical; __N: P__CLPK_integer;
  __t: P__CLPK_real; __ldt: P__CLPK_integer; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __j1: P__CLPK_integer; __n1: P__CLPK_integer;
  __n2: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slaexc_';
function slag2_(__A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __safmin: P__CLPK_real; __scale1: P__CLPK_real;
  __scale2: P__CLPK_real; __wr1: P__CLPK_real; __wr2: P__CLPK_real;
  __wi: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slag2_';
function slag2d_(__M: P__CLPK_integer; __N: P__CLPK_integer; __sa: P__CLPK_real;
  __ldsa: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slag2d_';
function slags2_(__upper: P__CLPK_logical; __A1: P__CLPK_real;
  __a2: P__CLPK_real; __a3: P__CLPK_real; __b1: P__CLPK_real;
  __b2: P__CLPK_real; __b3: P__CLPK_real; __csu: P__CLPK_real;
  __snu: P__CLPK_real; __csv: P__CLPK_real; __snv: P__CLPK_real;
  __csq: P__CLPK_real; __snq: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slags2_';
function slagtf_(__N: P__CLPK_integer; __A: P__CLPK_real;
  __lambda: P__CLPK_real; __B: P__CLPK_real; __c__: P__CLPK_real;
  __tol: P__CLPK_real; __d__: P__CLPK_real; __in: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slagtf_';
function slagtm_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __alpha: P__CLPK_real; __dl: P__CLPK_real;
  __d__: P__CLPK_real; __du: P__CLPK_real; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __beta: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slagtm_';
function slagts_(__job: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_real; __B: P__CLPK_real; __c__: P__CLPK_real;
  __d__: P__CLPK_real; __in: P__CLPK_integer; __Y: P__CLPK_real;
  __tol: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slagts_';
function slagv2_(__A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __alphar: P__CLPK_real; __alphai: P__CLPK_real;
  __beta: P__CLPK_real; __csl: P__CLPK_real; __snl: P__CLPK_real;
  __csr: P__CLPK_real; __snr: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slagv2_';
function slahqr_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_real; __ldh: P__CLPK_integer; __wr: P__CLPK_real;
  __wi: P__CLPK_real; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slahqr_';
function slahr2_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __t: P__CLPK_real; __ldt: P__CLPK_integer;
  __Y: P__CLPK_real; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slahr2_';
function slahrd_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __t: P__CLPK_real; __ldt: P__CLPK_integer;
  __Y: P__CLPK_real; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slahrd_';
function slaic1_(__job: P__CLPK_integer; __j: P__CLPK_integer;
  __X: P__CLPK_real; __sest: P__CLPK_real; __w: P__CLPK_real;
  __gamma: P__CLPK_real; __sestpr: P__CLPK_real; __S: P__CLPK_real;
  __c__: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slaic1_';
function slaisnan_(__sin1: P__CLPK_real; __sin2: P__CLPK_real): __CLPK_logical;
  cdecl; external libAccelerate name _PU + 'slaisnan_';
function slaln2_(__ltrans: P__CLPK_logical; __na: P__CLPK_integer;
  __nw: P__CLPK_integer; __smin: P__CLPK_real; __ca: P__CLPK_real;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __d1: P__CLPK_real;
  __d2: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __wr: P__CLPK_real; __wi: P__CLPK_real; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __scale: P__CLPK_real; __xnorm: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaln2_';
function slals0_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __bx: P__CLPK_real;
  __ldbx: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer; __givnum: P__CLPK_real;
  __ldgnum: P__CLPK_integer; __poles: P__CLPK_real; __difl: P__CLPK_real;
  __difr: P__CLPK_real; __z__: P__CLPK_real; __K: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slals0_';
function slalsa_(__icompq: P__CLPK_integer; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __bx: P__CLPK_real; __ldbx: P__CLPK_integer;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __vt: P__CLPK_real;
  __K: P__CLPK_integer; __difl: P__CLPK_real; __difr: P__CLPK_real;
  __z__: P__CLPK_real; __poles: P__CLPK_real; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer; __perm: P__CLPK_integer;
  __givnum: P__CLPK_real; __c__: P__CLPK_real; __S: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slalsa_';
function slalsd_(__Uplo: MarshaledAString; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __rcond: P__CLPK_real; __rank: P__CLPK_integer; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slalsd_';
function slamrg_(__n1: P__CLPK_integer; __n2: P__CLPK_integer;
  __A: P__CLPK_real; __strd1: P__CLPK_integer; __strd2: P__CLPK_integer;
  __index: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slamrg_';
function slaneg_(__N: P__CLPK_integer; __d__: P__CLPK_real; __lld: P__CLPK_real;
  __sigma: P__CLPK_real; __pivmin: P__CLPK_real; __r__: P__CLPK_integer)
  : __CLPK_integer; cdecl; external libAccelerate name _PU + 'slaneg_';
function slangb_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slangb_';
function slange_(__norm: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slange_';
function slangt_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_real; __d__: P__CLPK_real; __du: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'slangt_';
function slanhs_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'slanhs_';
function slansb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slansb_';
function slansf_(__norm: MarshaledAString; __transr: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_real;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slansf_';
function slansp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_real; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'slansp_';
function slanst_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slanst_';
function slansy_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slansy_';
function slantb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'slantb_';
function slantp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_real;
  __work: P__CLPK_real): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slantp_';
function slantr_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __work: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'slantr_';
function slanv2_(__A: P__CLPK_real; __B: P__CLPK_real; __c__: P__CLPK_real;
  __d__: P__CLPK_real; __rt1r: P__CLPK_real; __rt1i: P__CLPK_real;
  __rt2r: P__CLPK_real; __rt2i: P__CLPK_real; __cs: P__CLPK_real;
  __sn: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slanv2_';
function slapll_(__N: P__CLPK_integer; __X: P__CLPK_real;
  __incX: P__CLPK_integer; __Y: P__CLPK_real; __incY: P__CLPK_integer;
  __ssmin: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slapll_';
function slapmt_(__forwrd: P__CLPK_logical; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __K: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slapmt_';
function slapy2_(__X: P__CLPK_real; __Y: P__CLPK_real): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'slapy2_';
function slapy3_(__X: P__CLPK_real; __Y: P__CLPK_real; __z__: P__CLPK_real)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'slapy3_';
function slaqgb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'slaqgb_';
function slaqge_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __r__: P__CLPK_real; __c__: P__CLPK_real;
  __rowcnd: P__CLPK_real; __colcnd: P__CLPK_real; __amax: P__CLPK_real;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'slaqge_';
function slaqp2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __jpvt: P__CLPK_integer; __tau: P__CLPK_real; __vn1: P__CLPK_real;
  __vn2: P__CLPK_real; __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slaqp2_';
function slaqps_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __nb: P__CLPK_integer; __kb: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_real; __vn1: P__CLPK_real; __vn2: P__CLPK_real;
  __auxv: P__CLPK_real; __F: P__CLPK_real; __ldf: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slaqps_';
function slaqr0_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_real; __ldh: P__CLPK_integer; __wr: P__CLPK_real;
  __wi: P__CLPK_real; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaqr0_';
function slaqr1_(__N: P__CLPK_integer; __h__: P__CLPK_real;
  __ldh: P__CLPK_integer; __sr1: P__CLPK_real; __si1: P__CLPK_real;
  __sr2: P__CLPK_real; __si2: P__CLPK_real; __v: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slaqr1_';
function slaqr2_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_real; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __ns: P__CLPK_integer; __nd: P__CLPK_integer;
  __sr: P__CLPK_real; __si: P__CLPK_real; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __nh: P__CLPK_integer; __t: P__CLPK_real;
  __ldt: P__CLPK_integer; __nv: P__CLPK_integer; __wv: P__CLPK_real;
  __ldwv: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slaqr2_';
function slaqr3_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_real; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __ns: P__CLPK_integer; __nd: P__CLPK_integer;
  __sr: P__CLPK_real; __si: P__CLPK_real; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __nh: P__CLPK_integer; __t: P__CLPK_real;
  __ldt: P__CLPK_integer; __nv: P__CLPK_integer; __wv: P__CLPK_real;
  __ldwv: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slaqr3_';
function slaqr4_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_real; __ldh: P__CLPK_integer; __wr: P__CLPK_real;
  __wi: P__CLPK_real; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaqr4_';
function slaqr5_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __kacc22: P__CLPK_integer; __N: P__CLPK_integer; __ktop: P__CLPK_integer;
  __kbot: P__CLPK_integer; __nshfts: P__CLPK_integer; __sr: P__CLPK_real;
  __si: P__CLPK_real; __h__: P__CLPK_real; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __v: P__CLPK_real; __ldv: P__CLPK_integer;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __nv: P__CLPK_integer;
  __wv: P__CLPK_real; __ldwv: P__CLPK_integer; __nh: P__CLPK_integer;
  __wh: P__CLPK_real; __ldwh: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaqr5_';
function slaqsb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __S: P__CLPK_real; __scond: P__CLPK_real; __amax: P__CLPK_real;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'slaqsb_';
function slaqsp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'slaqsp_';
function slaqsy_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __S: P__CLPK_real;
  __scond: P__CLPK_real; __amax: P__CLPK_real; __equed: MarshaledAString)
  : Integer; cdecl; external libAccelerate name _PU + 'slaqsy_';
function slaqtr_(__ltran: P__CLPK_logical; __l__CLPK_real: P__CLPK_logical;
  __N: P__CLPK_integer; __t: P__CLPK_real; __ldt: P__CLPK_integer;
  __B: P__CLPK_real; __w: P__CLPK_real; __scale: P__CLPK_real;
  __X: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slaqtr_';
function slar1v_(__N: P__CLPK_integer; __b1: P__CLPK_integer;
  __bn: P__CLPK_integer; __lambda: P__CLPK_real; __d__: P__CLPK_real;
  __L: P__CLPK_real; __ld: P__CLPK_real; __lld: P__CLPK_real;
  __pivmin: P__CLPK_real; __gaptol: P__CLPK_real; __z__: P__CLPK_real;
  __wantnc: P__CLPK_logical; __negcnt: P__CLPK_integer; __ztz: P__CLPK_real;
  __mingma: P__CLPK_real; __r__: P__CLPK_integer; __isuppz: P__CLPK_integer;
  __nrminv: P__CLPK_real; __resid: P__CLPK_real; __rqcorr: P__CLPK_real;
  __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slar1v_';
function slar2v_(__N: P__CLPK_integer; __X: P__CLPK_real; __Y: P__CLPK_real;
  __z__: P__CLPK_real; __incX: P__CLPK_integer; __c__: P__CLPK_real;
  __S: P__CLPK_real; __incc: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slar2v_';
function slarf_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_real; __incv: P__CLPK_integer;
  __tau: P__CLPK_real; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slarf_';
function slarfb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __t: P__CLPK_real; __ldt: P__CLPK_integer;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarfb_';
function slarfg_(__N: P__CLPK_integer; __alpha: P__CLPK_real; __X: P__CLPK_real;
  __incX: P__CLPK_integer; __tau: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slarfg_';
function slarfp_(__N: P__CLPK_integer; __alpha: P__CLPK_real; __X: P__CLPK_real;
  __incX: P__CLPK_integer; __tau: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slarfp_';
function slarft_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __tau: P__CLPK_real; __t: P__CLPK_real;
  __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarft_';
function slarfx_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_real; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real): Integer;
  cdecl; external libAccelerate name _PU + 'slarfx_';
function slargv_(__N: P__CLPK_integer; __X: P__CLPK_real;
  __incX: P__CLPK_integer; __Y: P__CLPK_real; __incY: P__CLPK_integer;
  __c__: P__CLPK_real; __incc: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slargv_';
function slarnv_(__idist: P__CLPK_integer; __iseed: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slarnv_';
function slarra_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __e2: P__CLPK_real; __spltol: P__CLPK_real; __tnrm: P__CLPK_real;
  __nsplit: P__CLPK_integer; __isplit: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slarra_';
function slarrb_(__N: P__CLPK_integer; __d__: P__CLPK_real; __lld: P__CLPK_real;
  __ifirst: P__CLPK_integer; __ilast: P__CLPK_integer; __rtol1: P__CLPK_real;
  __rtol2: P__CLPK_real; __offset: P__CLPK_integer; __w: P__CLPK_real;
  __wgap: P__CLPK_real; __werr: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __pivmin: P__CLPK_real; __spdiam: P__CLPK_real;
  __twist: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarrb_';
function slarrc_(__jobt: MarshaledAString; __N: P__CLPK_integer;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __d__: P__CLPK_real;
  __E: P__CLPK_real; __pivmin: P__CLPK_real; __eigcnt: P__CLPK_integer;
  __lcnt: P__CLPK_integer; __rcnt: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slarrc_';
function slarrd_(__range: MarshaledAString; __Order: MarshaledAString;
  __N: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __gers: P__CLPK_real;
  __reltol: P__CLPK_real; __d__: P__CLPK_real; __E: P__CLPK_real;
  __e2: P__CLPK_real; __pivmin: P__CLPK_real; __nsplit: P__CLPK_integer;
  __isplit: P__CLPK_integer; __M: P__CLPK_integer; __w: P__CLPK_real;
  __werr: P__CLPK_real; __wl: P__CLPK_real; __wu: P__CLPK_real;
  __iblock: P__CLPK_integer; __indexw: P__CLPK_integer; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarrd_';
function slarre_(__range: MarshaledAString; __N: P__CLPK_integer;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __e2: P__CLPK_real; __rtol1: P__CLPK_real; __rtol2: P__CLPK_real;
  __spltol: P__CLPK_real; __nsplit: P__CLPK_integer; __isplit: P__CLPK_integer;
  __M: P__CLPK_integer; __w: P__CLPK_real; __werr: P__CLPK_real;
  __wgap: P__CLPK_real; __iblock: P__CLPK_integer; __indexw: P__CLPK_integer;
  __gers: P__CLPK_real; __pivmin: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarre_';
function slarrf_(__N: P__CLPK_integer; __d__: P__CLPK_real; __L: P__CLPK_real;
  __ld: P__CLPK_real; __clstrt: P__CLPK_integer; __clend: P__CLPK_integer;
  __w: P__CLPK_real; __wgap: P__CLPK_real; __werr: P__CLPK_real;
  __spdiam: P__CLPK_real; __clgapl: P__CLPK_real; __clgapr: P__CLPK_real;
  __pivmin: P__CLPK_real; __sigma: P__CLPK_real; __dplus: P__CLPK_real;
  __lplus: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slarrf_';
function slarrj_(__N: P__CLPK_integer; __d__: P__CLPK_real; __e2: P__CLPK_real;
  __ifirst: P__CLPK_integer; __ilast: P__CLPK_integer; __rtol: P__CLPK_real;
  __offset: P__CLPK_integer; __w: P__CLPK_real; __werr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __pivmin: P__CLPK_real;
  __spdiam: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarrj_';
function slarrk_(__N: P__CLPK_integer; __iw: P__CLPK_integer;
  __gl: P__CLPK_real; __gu: P__CLPK_real; __d__: P__CLPK_real;
  __e2: P__CLPK_real; __pivmin: P__CLPK_real; __reltol: P__CLPK_real;
  __w: P__CLPK_real; __werr: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slarrk_';
function slarrr_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarrr_';
function slarrv_(__N: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __d__: P__CLPK_real; __L: P__CLPK_real; __pivmin: P__CLPK_real;
  __isplit: P__CLPK_integer; __M: P__CLPK_integer; __dol: P__CLPK_integer;
  __dou: P__CLPK_integer; __minrgp: P__CLPK_real; __rtol1: P__CLPK_real;
  __rtol2: P__CLPK_real; __w: P__CLPK_real; __werr: P__CLPK_real;
  __wgap: P__CLPK_real; __iblock: P__CLPK_integer; __indexw: P__CLPK_integer;
  __gers: P__CLPK_real; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarrv_';
function slarscl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __X: P__CLPK_real; __ldx: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slarscl2_';
function slartg_(__F: P__CLPK_real; __g: P__CLPK_real; __cs: P__CLPK_real;
  __sn: P__CLPK_real; __r__: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slartg_';
function slartv_(__N: P__CLPK_integer; __X: P__CLPK_real;
  __incX: P__CLPK_integer; __Y: P__CLPK_real; __incY: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_real; __incc: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slartv_';
function slaruv_(__iseed: P__CLPK_integer; __N: P__CLPK_integer;
  __X: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slaruv_';
function slarz_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __L: P__CLPK_integer; __v: P__CLPK_real;
  __incv: P__CLPK_integer; __tau: P__CLPK_real; __c__: P__CLPK_real;
  __ldc: P__CLPK_integer; __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slarz_';
function slarzb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __v: P__CLPK_real; __ldv: P__CLPK_integer; __t: P__CLPK_real;
  __ldt: P__CLPK_integer; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __work: P__CLPK_real; __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarzb_';
function slarzt_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_real;
  __ldv: P__CLPK_integer; __tau: P__CLPK_real; __t: P__CLPK_real;
  __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slarzt_';
function slas2_(__F: P__CLPK_real; __g: P__CLPK_real; __h__: P__CLPK_real;
  __ssmin: P__CLPK_real; __ssmax: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slas2_';
function slascl_(__type__: MarshaledAString; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __cfrom: P__CLPK_real; __cto: P__CLPK_real;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slascl_';
function slascl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __X: P__CLPK_real; __ldx: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slascl2_';
function slasd0_(__N: P__CLPK_integer; __sqre: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __u: P__CLPK_real;
  __ldu: P__CLPK_integer; __vt: P__CLPK_real; __ldvt: P__CLPK_integer;
  __smlsiz: P__CLPK_integer; __iwork: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasd0_';
function slasd1_(__nl: P__CLPK_integer; __NR: P__CLPK_integer;
  __sqre: P__CLPK_integer; __d__: P__CLPK_real; __alpha: P__CLPK_real;
  __beta: P__CLPK_real; __u: P__CLPK_real; __ldu: P__CLPK_integer;
  __vt: P__CLPK_real; __ldvt: P__CLPK_integer; __idxq: P__CLPK_integer;
  __iwork: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slasd1_';
function slasd2_(__nl: P__CLPK_integer; __NR: P__CLPK_integer;
  __sqre: P__CLPK_integer; __K: P__CLPK_integer; __d__: P__CLPK_real;
  __z__: P__CLPK_real; __alpha: P__CLPK_real; __beta: P__CLPK_real;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __vt: P__CLPK_real;
  __ldvt: P__CLPK_integer; __dsigma: P__CLPK_real; __u2: P__CLPK_real;
  __ldu2: P__CLPK_integer; __vt2: P__CLPK_real; __ldvt2: P__CLPK_integer;
  __idxp: P__CLPK_integer; __idx: P__CLPK_integer; __idxc: P__CLPK_integer;
  __idxq: P__CLPK_integer; __coltyp: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slasd2_';
function slasd3_(__nl: P__CLPK_integer; __NR: P__CLPK_integer;
  __sqre: P__CLPK_integer; __K: P__CLPK_integer; __d__: P__CLPK_real;
  __Q: P__CLPK_real; __ldq: P__CLPK_integer; __dsigma: P__CLPK_real;
  __u: P__CLPK_real; __ldu: P__CLPK_integer; __u2: P__CLPK_real;
  __ldu2: P__CLPK_integer; __vt: P__CLPK_real; __ldvt: P__CLPK_integer;
  __vt2: P__CLPK_real; __ldvt2: P__CLPK_integer; __idxc: P__CLPK_integer;
  __ctot: P__CLPK_integer; __z__: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slasd3_';
function slasd4_(__N: P__CLPK_integer; __i__: P__CLPK_integer;
  __d__: P__CLPK_real; __z__: P__CLPK_real; __delta: P__CLPK_real;
  __rho: P__CLPK_real; __sigma: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasd4_';
function slasd5_(__i__: P__CLPK_integer; __d__: P__CLPK_real;
  __z__: P__CLPK_real; __delta: P__CLPK_real; __rho: P__CLPK_real;
  __dsigma: P__CLPK_real; __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slasd5_';
function slasd6_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __d__: P__CLPK_real;
  __vf: P__CLPK_real; __vl: P__CLPK_real; __alpha: P__CLPK_real;
  __beta: P__CLPK_real; __idxq: P__CLPK_integer; __perm: P__CLPK_integer;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __ldgcol: P__CLPK_integer; __givnum: P__CLPK_real; __ldgnum: P__CLPK_integer;
  __poles: P__CLPK_real; __difl: P__CLPK_real; __difr: P__CLPK_real;
  __z__: P__CLPK_real; __K: P__CLPK_integer; __c__: P__CLPK_real;
  __S: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasd6_';
function slasd7_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __K: P__CLPK_integer;
  __d__: P__CLPK_real; __z__: P__CLPK_real; __zw: P__CLPK_real;
  __vf: P__CLPK_real; __vfw: P__CLPK_real; __vl: P__CLPK_real;
  __vlw: P__CLPK_real; __alpha: P__CLPK_real; __beta: P__CLPK_real;
  __dsigma: P__CLPK_real; __idx: P__CLPK_integer; __idxp: P__CLPK_integer;
  __idxq: P__CLPK_integer; __perm: P__CLPK_integer; __givptr: P__CLPK_integer;
  __givcol: P__CLPK_integer; __ldgcol: P__CLPK_integer; __givnum: P__CLPK_real;
  __ldgnum: P__CLPK_integer; __c__: P__CLPK_real; __S: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasd7_';
function slasd8_(__icompq: P__CLPK_integer; __K: P__CLPK_integer;
  __d__: P__CLPK_real; __z__: P__CLPK_real; __vf: P__CLPK_real;
  __vl: P__CLPK_real; __difl: P__CLPK_real; __difr: P__CLPK_real;
  __lddifr: P__CLPK_integer; __dsigma: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasd8_';
function slasda_(__icompq: P__CLPK_integer; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __sqre: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __u: P__CLPK_real; __ldu: P__CLPK_integer;
  __vt: P__CLPK_real; __K: P__CLPK_integer; __difl: P__CLPK_real;
  __difr: P__CLPK_real; __z__: P__CLPK_real; __poles: P__CLPK_real;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __ldgcol: P__CLPK_integer; __perm: P__CLPK_integer; __givnum: P__CLPK_real;
  __c__: P__CLPK_real; __S: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasda_';
function slasdq_(__Uplo: MarshaledAString; __sqre: P__CLPK_integer;
  __N: P__CLPK_integer; __ncvt: P__CLPK_integer; __nru: P__CLPK_integer;
  __ncc: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __vt: P__CLPK_real; __ldvt: P__CLPK_integer; __u: P__CLPK_real;
  __ldu: P__CLPK_integer; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasdq_';
function slasdt_(__N: P__CLPK_integer; __lvl: P__CLPK_integer;
  __nd: P__CLPK_integer; __inode: P__CLPK_integer; __ndiml: P__CLPK_integer;
  __ndimr: P__CLPK_integer; __msub: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasdt_';
function slaset_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __alpha: P__CLPK_real; __beta: P__CLPK_real;
  __A: P__CLPK_real; __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaset_';
function slasq1_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasq1_';
function slasq2_(__N: P__CLPK_integer; __z__: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasq2_';
function slasq3_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_real; __pp: P__CLPK_integer; __dmin__: P__CLPK_real;
  __sigma: P__CLPK_real; __desig: P__CLPK_real; __qmax: P__CLPK_real;
  __nfail: P__CLPK_integer; __iter: P__CLPK_integer; __ndiv: P__CLPK_integer;
  __ieee: P__CLPK_logical; __ttype: P__CLPK_integer; __dmin1: P__CLPK_real;
  __dmin2: P__CLPK_real; __dn: P__CLPK_real; __dn1: P__CLPK_real;
  __dn2: P__CLPK_real; __g: P__CLPK_real; __tau: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slasq3_';
function slasq4_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_real; __pp: P__CLPK_integer; __n0in: P__CLPK_integer;
  __dmin__: P__CLPK_real; __dmin1: P__CLPK_real; __dmin2: P__CLPK_real;
  __dn: P__CLPK_real; __dn1: P__CLPK_real; __dn2: P__CLPK_real;
  __tau: P__CLPK_real; __ttype: P__CLPK_integer; __g: P__CLPK_real): Integer;
  cdecl; external libAccelerate name _PU + 'slasq4_';
function slasq5_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_real; __pp: P__CLPK_integer; __tau: P__CLPK_real;
  __dmin__: P__CLPK_real; __dmin1: P__CLPK_real; __dmin2: P__CLPK_real;
  __dn: P__CLPK_real; __dnm1: P__CLPK_real; __dnm2: P__CLPK_real;
  __ieee: P__CLPK_logical): Integer; cdecl;
  external libAccelerate name _PU + 'slasq5_';
function slasq6_(__I0: P__CLPK_integer; __n0: P__CLPK_integer;
  __z__: P__CLPK_real; __pp: P__CLPK_integer; __dmin__: P__CLPK_real;
  __dmin1: P__CLPK_real; __dmin2: P__CLPK_real; __dn: P__CLPK_real;
  __dnm1: P__CLPK_real; __dnm2: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slasq6_';
function slasr_(__Side: MarshaledAString; __pivot: MarshaledAString;
  __direct: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __c__: P__CLPK_real; __S: P__CLPK_real; __A: P__CLPK_real;
  __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasr_';
function slasrt_(__ID: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasrt_';
function slassq_(__N: P__CLPK_integer; __X: P__CLPK_real;
  __incX: P__CLPK_integer; __scale: P__CLPK_real; __sumsq: P__CLPK_real)
  : Integer; cdecl; external libAccelerate name _PU + 'slassq_';
function slasv2_(__F: P__CLPK_real; __g: P__CLPK_real; __h__: P__CLPK_real;
  __ssmin: P__CLPK_real; __ssmax: P__CLPK_real; __snr: P__CLPK_real;
  __csr: P__CLPK_real; __snl: P__CLPK_real; __csl: P__CLPK_real): Integer;
  cdecl; external libAccelerate name _PU + 'slasv2_';
function slaswp_(__N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __k1: P__CLPK_integer; __k2: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slaswp_';
function slasy2_(__ltranl: P__CLPK_logical; __ltranr: P__CLPK_logical;
  __isgn: P__CLPK_integer; __n1: P__CLPK_integer; __n2: P__CLPK_integer;
  __tl: P__CLPK_real; __ldtl: P__CLPK_integer; __tr: P__CLPK_real;
  __ldtr: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __scale: P__CLPK_real; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __xnorm: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasy2_';
function slasyf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __kb: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __w: P__CLPK_real;
  __ldw: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slasyf_';
function slatbs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __X: P__CLPK_real; __scale: P__CLPK_real; __cnorm: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slatbs_';
function slatdf_(__ijob: P__CLPK_integer; __N: P__CLPK_integer;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __rhs: P__CLPK_real;
  __rdsum: P__CLPK_real; __rdscal: P__CLPK_real; __ipiv: P__CLPK_integer;
  __jpiv: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slatdf_';
function slatps_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __X: P__CLPK_real; __scale: P__CLPK_real;
  __cnorm: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slatps_';
function slatrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __E: P__CLPK_real; __tau: P__CLPK_real; __w: P__CLPK_real;
  __ldw: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slatrd_';
function slatrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __X: P__CLPK_real;
  __scale: P__CLPK_real; __cnorm: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'slatrs_';
function slatrz_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slatrz_';
function slatzm_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_real; __incv: P__CLPK_integer;
  __tau: P__CLPK_real; __C1: P__CLPK_real; __c2: P__CLPK_real;
  __ldc: P__CLPK_integer; __work: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slatzm_';
function slauu2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slauu2_';
function slauum_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'slauum_';
function sopgtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __tau: P__CLPK_real; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sopgtr_';
function sopmtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __tau: P__CLPK_real; __c__: P__CLPK_real;
  __ldc: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sopmtr_';
function sorg2l_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sorg2l_';
function sorg2r_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sorg2r_';
function sorgbr_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorgbr_';
function sorghr_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorghr_';
function sorgl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sorgl2_';
function sorglq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorglq_';
function sorgql_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorgql_';
function sorgqr_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorgqr_';
function sorgr2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sorgr2_';
function sorgrq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorgrq_';
function sorgtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sorgtr_';
function sorm2l_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorm2l_';
function sorm2r_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorm2r_';
function sormbr_(__vect: MarshaledAString; __Side: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sormbr_';
function sormhr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sormhr_';
function sorml2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sorml2_';
function sormlq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sormlq_';
function sormql_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sormql_';
function sormqr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sormqr_';
function sormr2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sormr2_';
function sormr3_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sormr3_';
function sormrq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sormrq_';
function sormrz_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __tau: P__CLPK_real; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sormrz_';
function sormtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __tau: P__CLPK_real;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sormtr_';
function spbcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __anorm: P__CLPK_real; __rcond: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbcon_';
function spbequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __S: P__CLPK_real; __scond: P__CLPK_real; __amax: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbequ_';
function spbrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __afb: P__CLPK_real; __ldafb: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'spbrfs_';
function spbstf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbstf_';
function spbsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbsv_';
function spbsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __afb: P__CLPK_real;
  __ldafb: P__CLPK_integer; __equed: MarshaledAString; __S: P__CLPK_real;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_real; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbsvx_';
function spbtf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbtf2_';
function spbtrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbtrf_';
function spbtrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spbtrs_';
function spftrf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'spftrf_';
function spftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'spftri_';
function spftrs_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_real;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'spftrs_';
function spocon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spocon_';
function spoequ_(__N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spoequ_';
function spoequb_(__N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spoequb_';
function sporfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __af: P__CLPK_real; __ldaf: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sporfs_';
function sposv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sposv_';
function sposvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __af: P__CLPK_real; __ldaf: P__CLPK_integer;
  __equed: MarshaledAString; __S: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_real; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sposvx_';
function spotf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'spotf2_';
function spotrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'spotrf_';
function spotri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'spotri_';
function spotrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'spotrs_';
function sppcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __anorm: P__CLPK_real; __rcond: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sppcon_';
function sppequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __S: P__CLPK_real; __scond: P__CLPK_real;
  __amax: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sppequ_';
function spprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_real; __afp: P__CLPK_real;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'spprfs_';
function sppsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sppsv_';
function sppsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_real;
  __afp: P__CLPK_real; __equed: MarshaledAString; __S: P__CLPK_real;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __rcond: P__CLPK_real; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sppsvx_';
function spptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spptrf_';
function spptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spptri_';
function spptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spptrs_';
function spstf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spstf2_';
function spstrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spstrf_';
function sptcon_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __anorm: P__CLPK_real; __rcond: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sptcon_';
function spteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'spteqr_';
function sptrfs_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __DF: P__CLPK_real;
  __ef: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __X: P__CLPK_real; __ldx: P__CLPK_integer; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sptrfs_';
function sptsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sptsv_';
function sptsvx_(__fact: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __DF: P__CLPK_real; __ef: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_real; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sptsvx_';
function spttrf_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spttrf_';
function spttrs_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'spttrs_';
function sptts2_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __B: P__CLPK_real;
  __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sptts2_';
function srscl_(__N: P__CLPK_integer; __sa: P__CLPK_real; __sx: P__CLPK_real;
  __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'srscl_';
function ssbev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssbev_';
function ssbevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssbevd_';
function ssbevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssbevx_';
function ssbgst_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __bb: P__CLPK_real;
  __ldbb: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssbgst_';
function ssbgv_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __bb: P__CLPK_real;
  __ldbb: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssbgv_';
function ssbgvd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __bb: P__CLPK_real;
  __ldbb: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssbgvd_';
function ssbgvx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __ka: P__CLPK_integer;
  __kb: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __bb: P__CLPK_real; __ldbb: P__CLPK_integer; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssbgvx_';
function ssbtrd_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_real;
  __ldab: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __Q: P__CLPK_real; __ldq: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssbtrd_';
function ssfrk_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __alpha: P__CLPK_real; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __beta: P__CLPK_real; __c__: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'ssfrk_';
function sspcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __ipiv: P__CLPK_integer; __anorm: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sspcon_';
function sspev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_real; __w: P__CLPK_real;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sspev_';
function sspevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_real; __w: P__CLPK_real;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sspevd_';
function sspevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_real;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_real; __M: P__CLPK_integer;
  __w: P__CLPK_real; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __ifail: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sspevx_';
function sspgst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_real; __bp: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sspgst_';
function sspgv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_real;
  __bp: P__CLPK_real; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sspgv_';
function sspgvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_real;
  __bp: P__CLPK_real; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sspgvd_';
function sspgvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __bp: P__CLPK_real; __vl: P__CLPK_real;
  __vu: P__CLPK_real; __il: P__CLPK_integer; __iu: P__CLPK_integer;
  __abstol: P__CLPK_real; __M: P__CLPK_integer; __w: P__CLPK_real;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sspgvx_';
function ssprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_real; __afp: P__CLPK_real;
  __ipiv: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __X: P__CLPK_real; __ldx: P__CLPK_integer; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssprfs_';
function sspsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_real; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'sspsv_';
function sspsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_real;
  __afp: P__CLPK_real; __ipiv: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_real; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sspsvx_';
function ssptrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __d__: P__CLPK_real; __E: P__CLPK_real;
  __tau: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssptrd_';
function ssptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssptrf_';
function ssptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __ipiv: P__CLPK_integer; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssptri_';
function ssptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_real; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'ssptrs_';
function sstebz_(__range: MarshaledAString; __Order: MarshaledAString;
  __N: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __d__: P__CLPK_real; __E: P__CLPK_real; __M: P__CLPK_integer;
  __nsplit: P__CLPK_integer; __w: P__CLPK_real; __iblock: P__CLPK_integer;
  __isplit: P__CLPK_integer; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sstebz_';
function sstedc_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sstedc_';
function sstegr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_real; __M: P__CLPK_integer;
  __w: P__CLPK_real; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sstegr_';
function sstein_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __iblock: P__CLPK_integer;
  __isplit: P__CLPK_integer; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __ifail: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sstein_';
function sstemr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __M: P__CLPK_integer; __w: P__CLPK_real;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __nzc: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __tryrac: P__CLPK_logical; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sstemr_';
function ssteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssteqr_';
function ssterf_(__N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssterf_';
function sstev_(__jobz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sstev_';
function sstevd_(__jobz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_real; __E: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sstevd_';
function sstevr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_real; __M: P__CLPK_integer;
  __w: P__CLPK_real; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'sstevr_';
function sstevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_real; __E: P__CLPK_real;
  __vl: P__CLPK_real; __vu: P__CLPK_real; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_real; __M: P__CLPK_integer;
  __w: P__CLPK_real; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __ifail: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'sstevx_';
function ssycon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_real; __rcond: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssycon_';
function ssyequb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __S: P__CLPK_real;
  __scond: P__CLPK_real; __amax: P__CLPK_real; __work: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssyequb_';
function ssyev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssyev_';
function ssyevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssyevd_';
function ssyevr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __isuppz: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssyevr_';
function ssyevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssyevx_';
function ssygs2_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'ssygs2_';
function ssygst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'ssygst_';
function ssygv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssygv_';
function ssygvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __w: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssygvd_';
function ssygvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __vl: P__CLPK_real; __vu: P__CLPK_real;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_real;
  __M: P__CLPK_integer; __w: P__CLPK_real; __z__: P__CLPK_real;
  __ldz: P__CLPK_integer; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssygvx_';
function ssyrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __af: P__CLPK_real; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssyrfs_';
function ssysv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssysv_';
function ssysvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __af: P__CLPK_real; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __X: P__CLPK_real; __ldx: P__CLPK_integer; __rcond: P__CLPK_real;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssysvx_';
function ssytd2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __tau: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'ssytd2_';
function ssytf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssytf2_';
function ssytrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __d__: P__CLPK_real;
  __E: P__CLPK_real; __tau: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssytrd_';
function ssytrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ssytrf_';
function ssytri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssytri_';
function ssytrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ssytrs_';
function stbcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_real; __ldab: P__CLPK_integer; __rcond: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'stbcon_';
function stbrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __X: P__CLPK_real;
  __ldx: P__CLPK_integer; __ferr: P__CLPK_real; __berr: P__CLPK_real;
  __work: P__CLPK_real; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'stbrfs_';
function stbtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_real; __ldab: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'stbtrs_';
function stfsm_(__transr: MarshaledAString; __Side: MarshaledAString;
  __Uplo: MarshaledAString; __Trans: MarshaledAString; __Diag: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __alpha: P__CLPK_real;
  __A: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stfsm_';
function stftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stftri_';
function stfttp_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_real; __Ap: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stfttp_';
function stfttr_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_real; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stfttr_';
function stgevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __S: P__CLPK_real;
  __lds: P__CLPK_integer; __P: P__CLPK_real; __ldp: P__CLPK_integer;
  __vl: P__CLPK_real; __ldvl: P__CLPK_integer; __vr: P__CLPK_real;
  __ldvr: P__CLPK_integer; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stgevc_';
function stgex2_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __j1: P__CLPK_integer; __n1: P__CLPK_integer; __n2: P__CLPK_integer;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'stgex2_';
function stgexc_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __B: P__CLPK_real; __ldb: P__CLPK_integer; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __z__: P__CLPK_real; __ldz: P__CLPK_integer;
  __ifst: P__CLPK_integer; __ilst: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stgexc_';
function stgsen_(__ijob: P__CLPK_integer; __wantq: P__CLPK_logical;
  __wantz: P__CLPK_logical; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __alphar: P__CLPK_real; __alphai: P__CLPK_real;
  __beta: P__CLPK_real; __Q: P__CLPK_real; __ldq: P__CLPK_integer;
  __z__: P__CLPK_real; __ldz: P__CLPK_integer; __M: P__CLPK_integer;
  __pl: P__CLPK_real; __pr: P__CLPK_real; __dif: P__CLPK_real;
  __work: P__CLPK_real; __lwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stgsen_';
function stgsja_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __tola: P__CLPK_real; __tolb: P__CLPK_real;
  __alpha: P__CLPK_real; __beta: P__CLPK_real; __u: P__CLPK_real;
  __ldu: P__CLPK_integer; __v: P__CLPK_real; __ldv: P__CLPK_integer;
  __Q: P__CLPK_real; __ldq: P__CLPK_integer; __work: P__CLPK_real;
  __ncycle: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stgsja_';
function stgsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __vl: P__CLPK_real; __ldvl: P__CLPK_integer; __vr: P__CLPK_real;
  __ldvr: P__CLPK_integer; __S: P__CLPK_real; __dif: P__CLPK_real;
  __mm: P__CLPK_integer; __M: P__CLPK_integer; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'stgsna_';
function stgsy2_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __d__: P__CLPK_real;
  __ldd: P__CLPK_integer; __E: P__CLPK_real; __lde: P__CLPK_integer;
  __F: P__CLPK_real; __ldf: P__CLPK_integer; __scale: P__CLPK_real;
  __rdsum: P__CLPK_real; __rdscal: P__CLPK_real; __iwork: P__CLPK_integer;
  __pq: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stgsy2_';
function stgsyl_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __c__: P__CLPK_real; __ldc: P__CLPK_integer; __d__: P__CLPK_real;
  __ldd: P__CLPK_integer; __E: P__CLPK_real; __lde: P__CLPK_integer;
  __F: P__CLPK_real; __ldf: P__CLPK_integer; __scale: P__CLPK_real;
  __dif: P__CLPK_real; __work: P__CLPK_real; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stgsyl_';
function stpcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_real;
  __rcond: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stpcon_';
function stprfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __X: P__CLPK_real; __ldx: P__CLPK_integer; __ferr: P__CLPK_real;
  __berr: P__CLPK_real; __work: P__CLPK_real; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stprfs_';
function stptri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'stptri_';
function stptrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_real; __B: P__CLPK_real; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stptrs_';
function stpttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_real; __arf: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stpttf_';
function stpttr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_real; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stpttr_';
function strcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __rcond: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strcon_';
function strevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_real;
  __ldt: P__CLPK_integer; __vl: P__CLPK_real; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_real; __ldvr: P__CLPK_integer; __mm: P__CLPK_integer;
  __M: P__CLPK_integer; __work: P__CLPK_real; __info: P__CLPK_integer): Integer;
  cdecl; external libAccelerate name _PU + 'strevc_';
function strexc_(__compq: MarshaledAString; __N: P__CLPK_integer;
  __t: P__CLPK_real; __ldt: P__CLPK_integer; __Q: P__CLPK_real;
  __ldq: P__CLPK_integer; __ifst: P__CLPK_integer; __ilst: P__CLPK_integer;
  __work: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strexc_';
function strrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __X: P__CLPK_real; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_real; __berr: P__CLPK_real; __work: P__CLPK_real;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strrfs_';
function strsen_(__job: MarshaledAString; __compq: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_real;
  __ldt: P__CLPK_integer; __Q: P__CLPK_real; __ldq: P__CLPK_integer;
  __wr: P__CLPK_real; __wi: P__CLPK_real; __M: P__CLPK_integer;
  __S: P__CLPK_real; __sep: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strsen_';
function strsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_real;
  __ldt: P__CLPK_integer; __vl: P__CLPK_real; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_real; __ldvr: P__CLPK_integer; __S: P__CLPK_real;
  __sep: P__CLPK_real; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_real; __ldwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strsna_';
function strsyl_(__trana: MarshaledAString; __tranb: MarshaledAString;
  __isgn: P__CLPK_integer; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __c__: P__CLPK_real; __ldc: P__CLPK_integer;
  __scale: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strsyl_';
function strti2_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strti2_';
function strtri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strtri_';
function strtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __B: P__CLPK_real;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strtrs_';
function strttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_real; __lda: P__CLPK_integer;
  __arf: P__CLPK_real; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strttf_';
function strttp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_real; __lda: P__CLPK_integer; __Ap: P__CLPK_real;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'strttp_';
function stzrqf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'stzrqf_';
function stzrzf_(__M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_real;
  __lda: P__CLPK_integer; __tau: P__CLPK_real; __work: P__CLPK_real;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'stzrzf_';
function zbdsqr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __ncvt: P__CLPK_integer; __nru: P__CLPK_integer; __ncc: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vt: P__CLPK_doublecomplex; __ldvt: P__CLPK_integer;
  __u: P__CLPK_doublecomplex; __ldu: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zbdsqr_';
function zcgesv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __swork: P__CLPK_complex;
  __rwork: P__CLPK_doublereal; __iter: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zcgesv_';
function zcposv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __swork: P__CLPK_complex;
  __rwork: P__CLPK_doublereal; __iter: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zcposv_';
function zdrscl_(__N: P__CLPK_integer; __sa: P__CLPK_doublereal;
  __sx: P__CLPK_doublecomplex; __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zdrscl_';
function zgbbrd_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __ncc: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __pt: P__CLPK_doublecomplex; __ldpt: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgbbrd_';
function zgbcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgbcon_';
function zgbequ_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __r__: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __rowcnd: P__CLPK_doublereal; __colcnd: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgbequ_';
function zgbequb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __r__: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __rowcnd: P__CLPK_doublereal; __colcnd: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgbequb_';
function zgbrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __afb: P__CLPK_doublecomplex; __ldafb: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgbrfs_';
function zgbsv_(__N: P__CLPK_integer; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgbsv_';
function zgbsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __KL: P__CLPK_integer; __KU: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __afb: P__CLPK_doublecomplex; __ldafb: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __equed: MarshaledAString; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgbsvx_';
function zgbtf2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zgbtf2_';
function zgbtrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zgbtrf_';
function zgbtrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zgbtrs_';
function zgebak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __scale: P__CLPK_doublereal; __M: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __ldv: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgebak_';
function zgebal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __scale: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zgebal_';
function zgebd2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tauq: P__CLPK_doublecomplex;
  __taup: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgebd2_';
function zgebrd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tauq: P__CLPK_doublecomplex;
  __taup: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgebrd_';
function zgecon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgecon_';
function zgeequ_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rowcnd: P__CLPK_doublereal;
  __colcnd: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeequ_';
function zgeequb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rowcnd: P__CLPK_doublereal;
  __colcnd: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeequb_';
function zgees_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __sdim: P__CLPK_integer; __w: P__CLPK_doublecomplex;
  __vs: P__CLPK_doublecomplex; __ldvs: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgees_';
function zgeesx_(__jobvs: MarshaledAString; __sort: MarshaledAString;
  __select: __CLPK_L_fp; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __sdim: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __vs: P__CLPK_doublecomplex;
  __ldvs: P__CLPK_integer; __rconde: P__CLPK_doublereal;
  __rcondv: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __bwork: P__CLPK_logical; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeesx_';
function zgeev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __vl: P__CLPK_doublecomplex;
  __ldvl: P__CLPK_integer; __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeev_';
function zgeevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __vl: P__CLPK_doublecomplex;
  __ldvl: P__CLPK_integer; __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer;
  __ilo: P__CLPK_integer; __ihi: P__CLPK_integer; __scale: P__CLPK_doublereal;
  __abnrm: P__CLPK_doublereal; __rconde: P__CLPK_doublereal;
  __rcondv: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeevx_';
function zgegs_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __vsl: P__CLPK_doublecomplex; __ldvsl: P__CLPK_integer;
  __vsr: P__CLPK_doublecomplex; __ldvsr: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgegs_';
function zgegv_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __vl: P__CLPK_doublecomplex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgegv_';
function zgehd2_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgehd2_';
function zgehrd_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgehrd_';
function zgelq2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgelq2_';
function zgelqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgelqf_';
function zgels_(__Trans: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgels_';
function zgelsd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __S: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgelsd_';
function zgelss_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __S: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgelss_';
function zgelsx_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgelsx_';
function zgelsy_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgelsy_';
function zgeql2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeql2_';
function zgeqlf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeqlf_';
function zgeqp3_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeqp3_';
function zgeqpf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeqpf_';
function zgeqr2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeqr2_';
function zgeqrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgeqrf_';
function zgerfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgerfs_';
function zgerq2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgerq2_';
function zgerqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgerqf_';
function zgesc2_(__N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __rhs: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __jpiv: P__CLPK_integer; __scale: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'zgesc2_';
function zgesdd_(__jobz: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __S: P__CLPK_doublereal; __u: P__CLPK_doublecomplex; __ldu: P__CLPK_integer;
  __vt: P__CLPK_doublecomplex; __ldvt: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgesdd_';
function zgesv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zgesv_';
function zgesvd_(__jobu: MarshaledAString; __jobvt: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __S: P__CLPK_doublereal; __u: P__CLPK_doublecomplex;
  __ldu: P__CLPK_integer; __vt: P__CLPK_doublecomplex; __ldvt: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgesvd_';
function zgesvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __equed: MarshaledAString; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgesvx_';
function zgetc2_(__N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __jpiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgetc2_';
function zgetf2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgetf2_';
function zgetrf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgetrf_';
function zgetri_(__N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgetri_';
function zgetrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgetrs_';
function zggbak_(__job: MarshaledAString; __Side: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __lscale: P__CLPK_doublereal; __rscale: P__CLPK_doublereal;
  __M: P__CLPK_integer; __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggbak_';
function zggbal_(__job: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __lscale: P__CLPK_doublereal;
  __rscale: P__CLPK_doublereal; __work: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggbal_';
function zgges_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __sdim: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __vsl: P__CLPK_doublecomplex; __ldvsl: P__CLPK_integer;
  __vsr: P__CLPK_doublecomplex; __ldvsr: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __bwork: P__CLPK_logical;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgges_';
function zggesx_(__jobvsl: MarshaledAString; __jobvsr: MarshaledAString;
  __sort: MarshaledAString; __selctg: __CLPK_L_fp; __sense: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __sdim: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __vsl: P__CLPK_doublecomplex; __ldvsl: P__CLPK_integer;
  __vsr: P__CLPK_doublecomplex; __ldvsr: P__CLPK_integer;
  __rconde: P__CLPK_doublereal; __rcondv: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zggesx_';
function zggev_(__jobvl: MarshaledAString; __jobvr: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __vl: P__CLPK_doublecomplex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggev_';
function zggevx_(__balanc: MarshaledAString; __jobvl: MarshaledAString;
  __jobvr: MarshaledAString; __sense: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __vl: P__CLPK_doublecomplex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __lscale: P__CLPK_doublereal;
  __rscale: P__CLPK_doublereal; __abnrm: P__CLPK_doublereal;
  __bbnrm: P__CLPK_doublereal; __rconde: P__CLPK_doublereal;
  __rcondv: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __bwork: P__CLPK_logical; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zggevx_';
function zggglm_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __d__: P__CLPK_doublecomplex; __X: P__CLPK_doublecomplex;
  __Y: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggglm_';
function zgghrd_(__compq: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zgghrd_';
function zgglse_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __d__: P__CLPK_doublecomplex;
  __X: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgglse_';
function zggqrf_(__N: P__CLPK_integer; __M: P__CLPK_integer;
  __P: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __taua: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __taub: P__CLPK_doublecomplex;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggqrf_';
function zggrqf_(__M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __taua: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __taub: P__CLPK_doublecomplex;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggrqf_';
function zggsvd_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __P: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __alpha: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __u: P__CLPK_doublecomplex; __ldu: P__CLPK_integer;
  __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggsvd_';
function zggsvp_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __tola: P__CLPK_doublereal; __tolb: P__CLPK_doublereal; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __u: P__CLPK_doublecomplex; __ldu: P__CLPK_integer;
  __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer; __iwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __tau: P__CLPK_doublecomplex;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zggsvp_';
function zgtcon_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_doublecomplex; __d__: P__CLPK_doublecomplex;
  __du: P__CLPK_doublecomplex; __du2: P__CLPK_doublecomplex;
  __ipiv: P__CLPK_integer; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgtcon_';
function zgtrfs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_doublecomplex;
  __d__: P__CLPK_doublecomplex; __du: P__CLPK_doublecomplex;
  __dlf: P__CLPK_doublecomplex; __DF: P__CLPK_doublecomplex;
  __duf: P__CLPK_doublecomplex; __du2: P__CLPK_doublecomplex;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgtrfs_';
function zgtsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __dl: P__CLPK_doublecomplex; __d__: P__CLPK_doublecomplex;
  __du: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgtsv_';
function zgtsvx_(__fact: MarshaledAString; __Trans: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __dl: P__CLPK_doublecomplex;
  __d__: P__CLPK_doublecomplex; __du: P__CLPK_doublecomplex;
  __dlf: P__CLPK_doublecomplex; __DF: P__CLPK_doublecomplex;
  __duf: P__CLPK_doublecomplex; __du2: P__CLPK_doublecomplex;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgtsvx_';
function zgttrf_(__N: P__CLPK_integer; __dl: P__CLPK_doublecomplex;
  __d__: P__CLPK_doublecomplex; __du: P__CLPK_doublecomplex;
  __du2: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgttrf_';
function zgttrs_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_doublecomplex;
  __d__: P__CLPK_doublecomplex; __du: P__CLPK_doublecomplex;
  __du2: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zgttrs_';
function zgtts2_(__itrans: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __dl: P__CLPK_doublecomplex;
  __d__: P__CLPK_doublecomplex; __du: P__CLPK_doublecomplex;
  __du2: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zgtts2_';
function zhbev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhbev_';
function zhbevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhbevd_';
function zhbevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer; __vl: P__CLPK_doublereal;
  __vu: P__CLPK_doublereal; __il: P__CLPK_integer; __iu: P__CLPK_integer;
  __abstol: P__CLPK_doublereal; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhbevx_';
function zhbgst_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __bb: P__CLPK_doublecomplex; __ldbb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhbgst_';
function zhbgv_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __bb: P__CLPK_doublecomplex; __ldbb: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhbgv_';
function zhbgvd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __ka: P__CLPK_integer; __kb: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __bb: P__CLPK_doublecomplex; __ldbb: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhbgvd_';
function zhbgvx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __ka: P__CLPK_integer;
  __kb: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __bb: P__CLPK_doublecomplex; __ldbb: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer; __vl: P__CLPK_doublereal;
  __vu: P__CLPK_doublereal; __il: P__CLPK_integer; __iu: P__CLPK_integer;
  __abstol: P__CLPK_doublereal; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhbgvx_';
function zhbtrd_(__vect: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhbtrd_';
function zhecon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhecon_';
function zheequb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zheequb_';
function zheev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zheev_';
function zheevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zheevd_';
function zheevr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __M: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublecomplex;
  __ldz: P__CLPK_integer; __isuppz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zheevr_';
function zheevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal;
  __il: P__CLPK_integer; __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal;
  __M: P__CLPK_integer; __w: P__CLPK_doublereal; __z__: P__CLPK_doublecomplex;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zheevx_';
function zhegs2_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhegs2_';
function zhegst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhegst_';
function zhegv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhegv_';
function zhegvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __w: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __lrwork: P__CLPK_integer; __iwork: P__CLPK_integer;
  __liwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhegvd_';
function zhegvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __vl: P__CLPK_doublereal;
  __vu: P__CLPK_doublereal; __il: P__CLPK_integer; __iu: P__CLPK_integer;
  __abstol: P__CLPK_doublereal; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhegvx_';
function zherfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zherfs_';
function zhesv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhesv_';
function zhesvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhesvx_';
function zhetd2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tau: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhetd2_';
function zhetf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhetf2_';
function zhetrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tau: P__CLPK_doublecomplex;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhetrd_';
function zhetrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhetrf_';
function zhetri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhetri_';
function zhetrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhetrs_';
function zhfrk_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __alpha: P__CLPK_doublereal; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __beta: P__CLPK_doublereal;
  __c__: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zhfrk_';
function zhgeqz_(__job: MarshaledAString; __compq: MarshaledAString;
  __compz: MarshaledAString; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhgeqz_';
function zhpcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhpcon_';
function zhpev_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhpev_';
function zhpevd_(__jobz: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhpevd_';
function zhpevx_(__jobz: MarshaledAString; __range: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhpevx_';
function zhpgst_(__itype: P__CLPK_integer; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __bp: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhpgst_';
function zhpgv_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __bp: P__CLPK_doublecomplex; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhpgv_';
function zhpgvd_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __bp: P__CLPK_doublecomplex; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhpgvd_';
function zhpgvx_(__itype: P__CLPK_integer; __jobz: MarshaledAString;
  __range: MarshaledAString; __Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __bp: P__CLPK_doublecomplex;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __ifail: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhpgvx_';
function zhprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __afp: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhprfs_';
function zhpsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhpsv_';
function zhpsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __afp: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhpsvx_';
function zhptrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __tau: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhptrd_';
function zhptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhptrf_';
function zhptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhptri_';
function zhptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zhptrs_';
function zhsein_(__Side: MarshaledAString; __eigsrc: MarshaledAString;
  __initv: MarshaledAString; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __vl: P__CLPK_doublecomplex;
  __ldvl: P__CLPK_integer; __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer;
  __mm: P__CLPK_integer; __M: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __ifaill: P__CLPK_integer;
  __ifailr: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhsein_';
function zhseqr_(__job: MarshaledAString; __compz: MarshaledAString;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __z__: P__CLPK_doublecomplex;
  __ldz: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zhseqr_';
function zlabrd_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __tauq: P__CLPK_doublecomplex; __taup: P__CLPK_doublecomplex;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __Y: P__CLPK_doublecomplex; __ldy: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlabrd_';
function zlacgv_(__N: P__CLPK_integer; __X: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlacgv_';
function zlacn2_(__N: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __X: P__CLPK_doublecomplex; __est: P__CLPK_doublereal;
  __kase: P__CLPK_integer; __isave: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlacn2_';
function zlacon_(__N: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __X: P__CLPK_doublecomplex; __est: P__CLPK_doublereal;
  __kase: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlacon_';
function zlacp2_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublereal; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlacp2_';
function zlacpy_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlacpy_';
function zlacrm_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __B: P__CLPK_doublereal;
  __ldb: P__CLPK_integer; __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __rwork: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'zlacrm_';
function zlacrt_(__N: P__CLPK_integer; __cx: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __cy: P__CLPK_doublecomplex; __incY: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __S: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlacrt_';
procedure zladiv_(__ret_val: P__CLPK_doublecomplex; __X: P__CLPK_doublecomplex;
  __Y: P__CLPK_doublecomplex); cdecl;
  external libAccelerate name _PU + 'zladiv_';
function zlaed0_(__qsiz: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __qstore: P__CLPK_doublecomplex; __ldqs: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaed0_';
function zlaed7_(__N: P__CLPK_integer; __cutpnt: P__CLPK_integer;
  __qsiz: P__CLPK_integer; __tlvls: P__CLPK_integer; __curlvl: P__CLPK_integer;
  __curpbm: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer; __rho: P__CLPK_doublereal;
  __indxq: P__CLPK_integer; __qstore: P__CLPK_doublereal;
  __qptr: P__CLPK_integer; __prmptr: P__CLPK_integer; __perm: P__CLPK_integer;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaed7_';
function zlaed8_(__K: P__CLPK_integer; __N: P__CLPK_integer;
  __qsiz: P__CLPK_integer; __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __rho: P__CLPK_doublereal;
  __cutpnt: P__CLPK_integer; __z__: P__CLPK_doublereal;
  __dlamda: P__CLPK_doublereal; __q2: P__CLPK_doublecomplex;
  __ldq2: P__CLPK_integer; __w: P__CLPK_doublereal; __indxp: P__CLPK_integer;
  __indx: P__CLPK_integer; __indxq: P__CLPK_integer; __perm: P__CLPK_integer;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaed8_';
function zlaein_(__rightv: P__CLPK_logical; __noinit: P__CLPK_logical;
  __N: P__CLPK_integer; __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __v: P__CLPK_doublecomplex;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __eps3: P__CLPK_doublereal;
  __smlnum: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaein_';
function zlaesy_(__A: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __c__: P__CLPK_doublecomplex; __rt1: P__CLPK_doublecomplex;
  __rt2: P__CLPK_doublecomplex; __evscal: P__CLPK_doublecomplex;
  __cs1: P__CLPK_doublecomplex; __sn1: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlaesy_';
function zlaev2_(__A: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __c__: P__CLPK_doublecomplex; __rt1: P__CLPK_doublereal;
  __rt2: P__CLPK_doublereal; __cs1: P__CLPK_doublereal;
  __sn1: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlaev2_';
function zlag2c_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __sa: P__CLPK_complex;
  __ldsa: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlag2c_';
function zlags2_(__upper: P__CLPK_logical; __A1: P__CLPK_doublereal;
  __a2: P__CLPK_doublecomplex; __a3: P__CLPK_doublereal;
  __b1: P__CLPK_doublereal; __b2: P__CLPK_doublecomplex;
  __b3: P__CLPK_doublereal; __csu: P__CLPK_doublereal;
  __snu: P__CLPK_doublecomplex; __csv: P__CLPK_doublereal;
  __snv: P__CLPK_doublecomplex; __csq: P__CLPK_doublereal;
  __snq: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlags2_';
function zlagtm_(__Trans: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __alpha: P__CLPK_doublereal;
  __dl: P__CLPK_doublecomplex; __d__: P__CLPK_doublecomplex;
  __du: P__CLPK_doublecomplex; __X: P__CLPK_doublecomplex;
  __ldx: P__CLPK_integer; __beta: P__CLPK_doublereal;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlagtm_';
function zlahef_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __kb: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __w: P__CLPK_doublecomplex;
  __ldw: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlahef_';
function zlahqr_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlahqr_';
function zlahr2_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __t: P__CLPK_doublecomplex;
  __ldt: P__CLPK_integer; __Y: P__CLPK_doublecomplex; __ldy: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlahr2_';
function zlahrd_(__N: P__CLPK_integer; __K: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __t: P__CLPK_doublecomplex;
  __ldt: P__CLPK_integer; __Y: P__CLPK_doublecomplex; __ldy: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlahrd_';
function zlaic1_(__job: P__CLPK_integer; __j: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __sest: P__CLPK_doublereal;
  __w: P__CLPK_doublecomplex; __gamma: P__CLPK_doublecomplex;
  __sestpr: P__CLPK_doublereal; __S: P__CLPK_doublecomplex;
  __c__: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlaic1_';
function zlals0_(__icompq: P__CLPK_integer; __nl: P__CLPK_integer;
  __NR: P__CLPK_integer; __sqre: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __bx: P__CLPK_doublecomplex; __ldbx: P__CLPK_integer; __perm: P__CLPK_integer;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __ldgcol: P__CLPK_integer; __givnum: P__CLPK_doublereal;
  __ldgnum: P__CLPK_integer; __poles: P__CLPK_doublereal;
  __difl: P__CLPK_doublereal; __difr: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __K: P__CLPK_integer; __c__: P__CLPK_doublereal;
  __S: P__CLPK_doublereal; __rwork: P__CLPK_doublereal; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlals0_';
function zlalsa_(__icompq: P__CLPK_integer; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __bx: P__CLPK_doublecomplex; __ldbx: P__CLPK_integer;
  __u: P__CLPK_doublereal; __ldu: P__CLPK_integer; __vt: P__CLPK_doublereal;
  __K: P__CLPK_integer; __difl: P__CLPK_doublereal; __difr: P__CLPK_doublereal;
  __z__: P__CLPK_doublereal; __poles: P__CLPK_doublereal;
  __givptr: P__CLPK_integer; __givcol: P__CLPK_integer;
  __ldgcol: P__CLPK_integer; __perm: P__CLPK_integer;
  __givnum: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __S: P__CLPK_doublereal; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlalsa_';
function zlalsd_(__Uplo: MarshaledAString; __smlsiz: P__CLPK_integer;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __rank: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlalsd_';
function zlangb_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __work: P__CLPK_doublereal): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'zlangb_';
function zlange_(__norm: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlange_';
function zlangt_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __dl: P__CLPK_doublecomplex; __d__: P__CLPK_doublecomplex;
  __du: P__CLPK_doublecomplex): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlangt_';
function zlanhb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __work: P__CLPK_doublereal): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'zlanhb_';
function zlanhe_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlanhe_';
function zlanhf_(__norm: MarshaledAString; __transr: MarshaledAString;
  __Uplo: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlanhf_';
function zlanhp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __work: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'zlanhp_';
function zlanhs_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlanhs_';
function zlanht_(__norm: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublecomplex): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'zlanht_';
function zlansb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __work: P__CLPK_doublereal): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'zlansb_';
function zlansp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __work: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'zlansp_';
function zlansy_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlansy_';
function zlantb_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlantb_';
function zlantp_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlantp_';
function zlantr_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __work: P__CLPK_doublereal): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'zlantr_';
function zlapll_(__N: P__CLPK_integer; __X: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __Y: P__CLPK_doublecomplex; __incY: P__CLPK_integer;
  __ssmin: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'zlapll_';
function zlapmt_(__forwrd: P__CLPK_logical; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __K: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlapmt_';
function zlaqgb_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __KL: P__CLPK_integer; __KU: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __r__: P__CLPK_doublereal; __c__: P__CLPK_doublereal;
  __rowcnd: P__CLPK_doublereal; __colcnd: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqgb_';
function zlaqge_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __r__: P__CLPK_doublereal;
  __c__: P__CLPK_doublereal; __rowcnd: P__CLPK_doublereal;
  __colcnd: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqge_';
function zlaqhb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqhb_';
function zlaqhe_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqhe_';
function zlaqhp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqhp_';
function zlaqp2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __jpvt: P__CLPK_integer; __tau: P__CLPK_doublecomplex;
  __vn1: P__CLPK_doublereal; __vn2: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqp2_';
function zlaqps_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __offset: P__CLPK_integer; __nb: P__CLPK_integer; __kb: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __jpvt: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __vn1: P__CLPK_doublereal;
  __vn2: P__CLPK_doublereal; __auxv: P__CLPK_doublecomplex;
  __F: P__CLPK_doublecomplex; __ldf: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqps_';
function zlaqr0_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqr0_';
function zlaqr1_(__N: P__CLPK_integer; __h__: P__CLPK_doublecomplex;
  __ldh: P__CLPK_integer; __S1: P__CLPK_doublecomplex;
  __S2: P__CLPK_doublecomplex; __v: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqr1_';
function zlaqr2_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __ns: P__CLPK_integer;
  __nd: P__CLPK_integer; __sh: P__CLPK_doublecomplex;
  __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer; __nh: P__CLPK_integer;
  __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer; __nv: P__CLPK_integer;
  __wv: P__CLPK_doublecomplex; __ldwv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqr2_';
function zlaqr3_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ktop: P__CLPK_integer; __kbot: P__CLPK_integer;
  __nw: P__CLPK_integer; __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __ns: P__CLPK_integer;
  __nd: P__CLPK_integer; __sh: P__CLPK_doublecomplex;
  __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer; __nh: P__CLPK_integer;
  __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer; __nv: P__CLPK_integer;
  __wv: P__CLPK_doublecomplex; __ldwv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqr3_';
function zlaqr4_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __ilo: P__CLPK_integer; __ihi: P__CLPK_integer;
  __h__: P__CLPK_doublecomplex; __ldh: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqr4_';
function zlaqr5_(__wantt: P__CLPK_logical; __wantz: P__CLPK_logical;
  __kacc22: P__CLPK_integer; __N: P__CLPK_integer; __ktop: P__CLPK_integer;
  __kbot: P__CLPK_integer; __nshfts: P__CLPK_integer;
  __S: P__CLPK_doublecomplex; __h__: P__CLPK_doublecomplex;
  __ldh: P__CLPK_integer; __iloz: P__CLPK_integer; __ihiz: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer;
  __u: P__CLPK_doublecomplex; __ldu: P__CLPK_integer; __nv: P__CLPK_integer;
  __wv: P__CLPK_doublecomplex; __ldwv: P__CLPK_integer; __nh: P__CLPK_integer;
  __wh: P__CLPK_doublecomplex; __ldwh: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqr5_';
function zlaqsb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqsb_';
function zlaqsp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqsp_';
function zlaqsy_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __equed: MarshaledAString): Integer; cdecl;
  external libAccelerate name _PU + 'zlaqsy_';
function zlar1v_(__N: P__CLPK_integer; __b1: P__CLPK_integer;
  __bn: P__CLPK_integer; __lambda: P__CLPK_doublereal;
  __d__: P__CLPK_doublereal; __L: P__CLPK_doublereal; __ld: P__CLPK_doublereal;
  __lld: P__CLPK_doublereal; __pivmin: P__CLPK_doublereal;
  __gaptol: P__CLPK_doublereal; __z__: P__CLPK_doublecomplex;
  __wantnc: P__CLPK_logical; __negcnt: P__CLPK_integer;
  __ztz: P__CLPK_doublereal; __mingma: P__CLPK_doublereal;
  __r__: P__CLPK_integer; __isuppz: P__CLPK_integer;
  __nrminv: P__CLPK_doublereal; __resid: P__CLPK_doublereal;
  __rqcorr: P__CLPK_doublereal; __work: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'zlar1v_';
function zlar2v_(__N: P__CLPK_integer; __X: P__CLPK_doublecomplex;
  __Y: P__CLPK_doublecomplex; __z__: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __c__: P__CLPK_doublereal;
  __S: P__CLPK_doublecomplex; __incc: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlar2v_';
function zlarcm_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublereal; __lda: P__CLPK_integer; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __rwork: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'zlarcm_';
function zlarf_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_doublecomplex; __incv: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlarf_';
function zlarfb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __ldv: P__CLPK_integer; __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlarfb_';
function zlarfg_(__N: P__CLPK_integer; __alpha: P__CLPK_doublecomplex;
  __X: P__CLPK_doublecomplex; __incX: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlarfg_';
function zlarfp_(__N: P__CLPK_integer; __alpha: P__CLPK_doublecomplex;
  __X: P__CLPK_doublecomplex; __incX: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlarfp_';
function zlarft_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __ldv: P__CLPK_integer; __tau: P__CLPK_doublecomplex;
  __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlarft_';
function zlarfx_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlarfx_';
function zlargv_(__N: P__CLPK_integer; __X: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __Y: P__CLPK_doublecomplex; __incY: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __incc: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlargv_';
function zlarnv_(__idist: P__CLPK_integer; __iseed: P__CLPK_integer;
  __N: P__CLPK_integer; __X: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlarnv_';
function zlarrv_(__N: P__CLPK_integer; __vl: P__CLPK_doublereal;
  __vu: P__CLPK_doublereal; __d__: P__CLPK_doublereal; __L: P__CLPK_doublereal;
  __pivmin: P__CLPK_doublereal; __isplit: P__CLPK_integer; __M: P__CLPK_integer;
  __dol: P__CLPK_integer; __dou: P__CLPK_integer; __minrgp: P__CLPK_doublereal;
  __rtol1: P__CLPK_doublereal; __rtol2: P__CLPK_doublereal;
  __w: P__CLPK_doublereal; __werr: P__CLPK_doublereal;
  __wgap: P__CLPK_doublereal; __iblock: P__CLPK_integer;
  __indexw: P__CLPK_integer; __gers: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlarrv_';
function zlarscl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlarscl2_';
function zlartg_(__F: P__CLPK_doublecomplex; __g: P__CLPK_doublecomplex;
  __cs: P__CLPK_doublereal; __sn: P__CLPK_doublecomplex;
  __r__: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlartg_';
function zlartv_(__N: P__CLPK_integer; __X: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __Y: P__CLPK_doublecomplex; __incY: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublecomplex;
  __incc: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlartv_';
function zlarz_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __L: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __incv: P__CLPK_integer; __tau: P__CLPK_doublecomplex;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlarz_';
function zlarzb_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __direct: MarshaledAString; __storev: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer;
  __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __ldwork: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlarzb_';
function zlarzt_(__direct: MarshaledAString; __storev: MarshaledAString;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __v: P__CLPK_doublecomplex;
  __ldv: P__CLPK_integer; __tau: P__CLPK_doublecomplex;
  __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlarzt_';
function zlascl_(__type__: MarshaledAString; __KL: P__CLPK_integer;
  __KU: P__CLPK_integer; __cfrom: P__CLPK_doublereal; __cto: P__CLPK_doublereal;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlascl_';
function zlascl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlascl2_';
function zlaset_(__Uplo: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __alpha: P__CLPK_doublecomplex;
  __beta: P__CLPK_doublecomplex; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaset_';
function zlasr_(__Side: MarshaledAString; __pivot: MarshaledAString;
  __direct: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublereal;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlasr_';
function zlassq_(__N: P__CLPK_integer; __X: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __scale: P__CLPK_doublereal;
  __sumsq: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'zlassq_';
function zlaswp_(__N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __k1: P__CLPK_integer; __k2: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __incX: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlaswp_';
function zlasyf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __kb: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __ipiv: P__CLPK_integer; __w: P__CLPK_doublecomplex;
  __ldw: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlasyf_';
function zlat2c_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __sa: P__CLPK_complex;
  __ldsa: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlat2c_';
function zlatbs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __scale: P__CLPK_doublereal;
  __cnorm: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlatbs_';
function zlatdf_(__ijob: P__CLPK_integer; __N: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __rhs: P__CLPK_doublecomplex; __rdsum: P__CLPK_doublereal;
  __rdscal: P__CLPK_doublereal; __ipiv: P__CLPK_integer;
  __jpiv: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlatdf_';
function zlatps_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __X: P__CLPK_doublecomplex;
  __scale: P__CLPK_doublereal; __cnorm: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlatps_';
function zlatrd_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nb: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __E: P__CLPK_doublereal; __tau: P__CLPK_doublecomplex;
  __w: P__CLPK_doublecomplex; __ldw: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlatrd_';
function zlatrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __normin: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __scale: P__CLPK_doublereal;
  __cnorm: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zlatrs_';
function zlatrz_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlatrz_';
function zlatzm_(__Side: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __v: P__CLPK_doublecomplex; __incv: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __C1: P__CLPK_doublecomplex;
  __c2: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zlatzm_';
function zlauu2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlauu2_';
function zlauum_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zlauum_';
function zpbcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbcon_';
function zpbequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbequ_';
function zpbrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __afb: P__CLPK_doublecomplex;
  __ldafb: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbrfs_';
function zpbstf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbstf_';
function zpbsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbsv_';
function zpbsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __kd: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __afb: P__CLPK_doublecomplex; __ldafb: P__CLPK_integer;
  __equed: MarshaledAString; __S: P__CLPK_doublereal;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbsvx_';
function zpbtf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbtf2_';
function zpbtrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbtrf_';
function zpbtrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __kd: P__CLPK_integer; __nrhs: P__CLPK_integer; __ab: P__CLPK_doublecomplex;
  __ldab: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpbtrs_';
function zpftrf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpftrf_';
function zpftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpftri_';
function zpftrs_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpftrs_';
function zpocon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpocon_';
function zpoequ_(__N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpoequ_';
function zpoequb_(__N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __S: P__CLPK_doublereal; __scond: P__CLPK_doublereal;
  __amax: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpoequb_';
function zporfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zporfs_';
function zposv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zposv_';
function zposvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer;
  __equed: MarshaledAString; __S: P__CLPK_doublereal;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zposvx_';
function zpotf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpotf2_';
function zpotrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpotrf_';
function zpotri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpotri_';
function zpotrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpotrs_';
function zppcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zppcon_';
function zppequ_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zppequ_';
function zpprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __afp: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpprfs_';
function zppsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zppsv_';
function zppsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __afp: P__CLPK_doublecomplex; __equed: MarshaledAString;
  __S: P__CLPK_doublereal; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zppsvx_';
function zpptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpptrf_';
function zpptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpptri_';
function zpptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zpptrs_';
function zpstf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpstf2_';
function zpstrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __piv: P__CLPK_integer;
  __rank: P__CLPK_integer; __tol: P__CLPK_doublereal;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpstrf_';
function zptcon_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublecomplex; __anorm: P__CLPK_doublereal;
  __rcond: P__CLPK_doublereal; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zptcon_';
function zpteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpteqr_';
function zptrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublecomplex; __DF: P__CLPK_doublereal;
  __ef: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zptrfs_';
function zptsv_(__N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublecomplex;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zptsv_';
function zptsvx_(__fact: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublecomplex; __DF: P__CLPK_doublereal;
  __ef: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zptsvx_';
function zpttrf_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpttrf_';
function zpttrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zpttrs_';
function zptts2_(__iuplo: P__CLPK_integer; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zptts2_';
function zrot_(__N: P__CLPK_integer; __cx: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __cy: P__CLPK_doublecomplex; __incY: P__CLPK_integer;
  __c__: P__CLPK_doublereal; __S: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zrot_';
function zspcon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zspcon_';
function zspmv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __Ap: P__CLPK_doublecomplex;
  __X: P__CLPK_doublecomplex; __incX: P__CLPK_integer;
  __beta: P__CLPK_doublecomplex; __Y: P__CLPK_doublecomplex;
  __incY: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zspmv_';
function zspr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __X: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __Ap: P__CLPK_doublecomplex): Integer; cdecl;
  external libAccelerate name _PU + 'zspr_';
function zsprfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __afp: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsprfs_';
function zspsv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zspsv_';
function zspsvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __afp: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zspsvx_';
function zsptrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zsptrf_';
function zsptri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsptri_';
function zsptrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zsptrs_';
function zstedc_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __lrwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zstedc_';
function zstegr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __abstol: P__CLPK_doublereal; __M: P__CLPK_integer;
  __w: P__CLPK_doublereal; __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __work: P__CLPK_doublereal;
  __lwork: P__CLPK_integer; __iwork: P__CLPK_integer; __liwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zstegr_';
function zstein_(__N: P__CLPK_integer; __d__: P__CLPK_doublereal;
  __E: P__CLPK_doublereal; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __iblock: P__CLPK_integer; __isplit: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublereal; __iwork: P__CLPK_integer;
  __ifail: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zstein_';
function zstemr_(__jobz: MarshaledAString; __range: MarshaledAString;
  __N: P__CLPK_integer; __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __vl: P__CLPK_doublereal; __vu: P__CLPK_doublereal; __il: P__CLPK_integer;
  __iu: P__CLPK_integer; __M: P__CLPK_integer; __w: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __nzc: P__CLPK_integer;
  __isuppz: P__CLPK_integer; __tryrac: P__CLPK_logical;
  __work: P__CLPK_doublereal; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zstemr_';
function zsteqr_(__compz: MarshaledAString; __N: P__CLPK_integer;
  __d__: P__CLPK_doublereal; __E: P__CLPK_doublereal;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer;
  __work: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsteqr_';
function zsycon_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __anorm: P__CLPK_doublereal; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsycon_';
function zsyequb_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __S: P__CLPK_doublereal;
  __scond: P__CLPK_doublereal; __amax: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsyequb_';
function zsymv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __X: P__CLPK_doublecomplex; __incX: P__CLPK_integer;
  __beta: P__CLPK_doublecomplex; __Y: P__CLPK_doublecomplex;
  __incY: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsymv_';
function zsyr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __X: P__CLPK_doublecomplex;
  __incX: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'zsyr_';
function zsyrfs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsyrfs_';
function zsysv_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsysv_';
function zsysvx_(__fact: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __af: P__CLPK_doublecomplex; __ldaf: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __ferr: P__CLPK_doublereal;
  __berr: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsysvx_';
function zsytf2_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsytf2_';
function zsytrf_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsytrf_';
function zsytri_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __ipiv: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsytri_';
function zsytrs_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __ipiv: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zsytrs_';
function ztbcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztbcon_';
function ztbrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztbrfs_';
function ztbtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __kd: P__CLPK_integer;
  __nrhs: P__CLPK_integer; __ab: P__CLPK_doublecomplex; __ldab: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ztbtrs_';
function ztfsm_(__transr: MarshaledAString; __Side: MarshaledAString;
  __Uplo: MarshaledAString; __Trans: MarshaledAString; __Diag: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __alpha: P__CLPK_doublecomplex;
  __A: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztfsm_';
function ztftri_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztftri_';
function ztfttp_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_doublecomplex;
  __Ap: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztfttp_';
function ztfttr_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __arf: P__CLPK_doublecomplex;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ztfttr_';
function ztgevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __S: P__CLPK_doublecomplex;
  __lds: P__CLPK_integer; __P: P__CLPK_doublecomplex; __ldp: P__CLPK_integer;
  __vl: P__CLPK_doublecomplex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer; __mm: P__CLPK_integer;
  __M: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztgevc_';
function ztgex2_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __j1: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztgex2_';
function ztgexc_(__wantq: P__CLPK_logical; __wantz: P__CLPK_logical;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __ifst: P__CLPK_integer;
  __ilst: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztgexc_';
function ztgsen_(__ijob: P__CLPK_integer; __wantq: P__CLPK_logical;
  __wantz: P__CLPK_logical; __select: P__CLPK_logical; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __alpha: P__CLPK_doublecomplex; __beta: P__CLPK_doublecomplex;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __z__: P__CLPK_doublecomplex; __ldz: P__CLPK_integer; __M: P__CLPK_integer;
  __pl: P__CLPK_doublereal; __pr: P__CLPK_doublereal; __dif: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __liwork: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ztgsen_';
function ztgsja_(__jobu: MarshaledAString; __jobv: MarshaledAString;
  __jobq: MarshaledAString; __M: P__CLPK_integer; __P: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __L: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __tola: P__CLPK_doublereal; __tolb: P__CLPK_doublereal;
  __alpha: P__CLPK_doublereal; __beta: P__CLPK_doublereal;
  __u: P__CLPK_doublecomplex; __ldu: P__CLPK_integer;
  __v: P__CLPK_doublecomplex; __ldv: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __ncycle: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztgsja_';
function ztgsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __vl: P__CLPK_doublecomplex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer; __S: P__CLPK_doublereal;
  __dif: P__CLPK_doublereal; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztgsna_';
function ztgsy2_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __d__: P__CLPK_doublecomplex; __ldd: P__CLPK_integer;
  __E: P__CLPK_doublecomplex; __lde: P__CLPK_integer;
  __F: P__CLPK_doublecomplex; __ldf: P__CLPK_integer;
  __scale: P__CLPK_doublereal; __rdsum: P__CLPK_doublereal;
  __rdscal: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztgsy2_';
function ztgsyl_(__Trans: MarshaledAString; __ijob: P__CLPK_integer;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __d__: P__CLPK_doublecomplex; __ldd: P__CLPK_integer;
  __E: P__CLPK_doublecomplex; __lde: P__CLPK_integer;
  __F: P__CLPK_doublecomplex; __ldf: P__CLPK_integer;
  __scale: P__CLPK_doublereal; __dif: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __iwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztgsyl_';
function ztpcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __rcond: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztpcon_';
function ztprfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztprfs_';
function ztptri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ztptri_';
function ztptrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __B: P__CLPK_doublecomplex;
  __ldb: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztptrs_';
function ztpttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __Ap: P__CLPK_doublecomplex;
  __arf: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztpttf_';
function ztpttr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztpttr_';
function ztrcon_(__norm: MarshaledAString; __Uplo: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __rcond: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrcon_';
function ztrevc_(__Side: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_doublecomplex;
  __ldt: P__CLPK_integer; __vl: P__CLPK_doublecomplex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer; __mm: P__CLPK_integer;
  __M: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrevc_';
function ztrexc_(__compq: MarshaledAString; __N: P__CLPK_integer;
  __t: P__CLPK_doublecomplex; __ldt: P__CLPK_integer;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer; __ifst: P__CLPK_integer;
  __ilst: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrexc_';
function ztrrfs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __X: P__CLPK_doublecomplex; __ldx: P__CLPK_integer;
  __ferr: P__CLPK_doublereal; __berr: P__CLPK_doublereal;
  __work: P__CLPK_doublecomplex; __rwork: P__CLPK_doublereal;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrrfs_';
function ztrsen_(__job: MarshaledAString; __compq: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_doublecomplex;
  __ldt: P__CLPK_integer; __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __w: P__CLPK_doublecomplex; __M: P__CLPK_integer; __S: P__CLPK_doublereal;
  __sep: P__CLPK_doublereal; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrsen_';
function ztrsna_(__job: MarshaledAString; __howmny: MarshaledAString;
  __select: P__CLPK_logical; __N: P__CLPK_integer; __t: P__CLPK_doublecomplex;
  __ldt: P__CLPK_integer; __vl: P__CLPK_doublecomplex; __ldvl: P__CLPK_integer;
  __vr: P__CLPK_doublecomplex; __ldvr: P__CLPK_integer; __S: P__CLPK_doublereal;
  __sep: P__CLPK_doublereal; __mm: P__CLPK_integer; __M: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __ldwork: P__CLPK_integer;
  __rwork: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrsna_';
function ztrsyl_(__trana: MarshaledAString; __tranb: MarshaledAString;
  __isgn: P__CLPK_integer; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __scale: P__CLPK_doublereal; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrsyl_';
function ztrti2_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrti2_';
function ztrtri_(__Uplo: MarshaledAString; __Diag: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrtri_';
function ztrtrs_(__Uplo: MarshaledAString; __Trans: MarshaledAString;
  __Diag: MarshaledAString; __N: P__CLPK_integer; __nrhs: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __B: P__CLPK_doublecomplex; __ldb: P__CLPK_integer; __info: P__CLPK_integer)
  : Integer; cdecl; external libAccelerate name _PU + 'ztrtrs_';
function ztrttf_(__transr: MarshaledAString; __Uplo: MarshaledAString;
  __N: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __arf: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrttf_';
function ztrttp_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztrttp_';
function ztzrqf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztzrqf_';
function ztzrzf_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'ztzrzf_';
function zung2l_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zung2l_';
function zung2r_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zung2r_';
function zungbr_(__vect: MarshaledAString; __M: P__CLPK_integer;
  __N: P__CLPK_integer; __K: P__CLPK_integer; __A: P__CLPK_doublecomplex;
  __lda: P__CLPK_integer; __tau: P__CLPK_doublecomplex;
  __work: P__CLPK_doublecomplex; __lwork: P__CLPK_integer;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zungbr_';
function zunghr_(__N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunghr_';
function zungl2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zungl2_';
function zunglq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunglq_';
function zungql_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zungql_';
function zungqr_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zungqr_';
function zungr2_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zungr2_';
function zungrq_(__M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zungrq_';
function zungtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zungtr_';
function zunm2l_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunm2l_';
function zunm2r_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunm2r_';
function zunmbr_(__vect: MarshaledAString; __Side: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __K: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmbr_';
function zunmhr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __ilo: P__CLPK_integer;
  __ihi: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmhr_';
function zunml2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunml2_';
function zunmlq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmlq_';
function zunmql_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmql_';
function zunmqr_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmqr_';
function zunmr2_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmr2_';
function zunmr3_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmr3_';
function zunmrq_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmrq_';
function zunmrz_(__Side: MarshaledAString; __Trans: MarshaledAString;
  __M: P__CLPK_integer; __N: P__CLPK_integer; __K: P__CLPK_integer;
  __L: P__CLPK_integer; __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmrz_';
function zunmtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __A: P__CLPK_doublecomplex; __lda: P__CLPK_integer;
  __tau: P__CLPK_doublecomplex; __c__: P__CLPK_doublecomplex;
  __ldc: P__CLPK_integer; __work: P__CLPK_doublecomplex;
  __lwork: P__CLPK_integer; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zunmtr_';
function zupgtr_(__Uplo: MarshaledAString; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __tau: P__CLPK_doublecomplex;
  __Q: P__CLPK_doublecomplex; __ldq: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zupgtr_';
function zupmtr_(__Side: MarshaledAString; __Uplo: MarshaledAString;
  __Trans: MarshaledAString; __M: P__CLPK_integer; __N: P__CLPK_integer;
  __Ap: P__CLPK_doublecomplex; __tau: P__CLPK_doublecomplex;
  __c__: P__CLPK_doublecomplex; __ldc: P__CLPK_integer;
  __work: P__CLPK_doublecomplex; __info: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'zupmtr_';
function dlamc1_(__beta: P__CLPK_integer; __t: P__CLPK_integer;
  __rnd: P__CLPK_logical; __ieee1: P__CLPK_logical): Integer; cdecl;
  external libAccelerate name _PU + 'dlamc1_';
function slamch_(__cmach: MarshaledAString): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'slamch_';
function slamc1_(__beta: P__CLPK_integer; __t: P__CLPK_integer;
  __rnd: P__CLPK_logical; __ieee1: P__CLPK_logical): Integer; cdecl;
  external libAccelerate name _PU + 'slamc1_';
function slamc2_(__beta: P__CLPK_integer; __t: P__CLPK_integer;
  __rnd: P__CLPK_logical; __eps: P__CLPK_real; __emin: P__CLPK_integer;
  __rmin: P__CLPK_real; __emax: P__CLPK_integer; __rmax: P__CLPK_real): Integer;
  cdecl; external libAccelerate name _PU + 'slamc2_';
function slamc3_(__A: P__CLPK_real; __B: P__CLPK_real): __CLPK_doublereal;
  cdecl; external libAccelerate name _PU + 'slamc3_';
function slamc4_(__emin: P__CLPK_integer; __Start: P__CLPK_real;
  __base: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'slamc4_';
function slamc5_(__beta: P__CLPK_integer; __P: P__CLPK_integer;
  __emin: P__CLPK_integer; __ieee: P__CLPK_logical; __emax: P__CLPK_integer;
  __rmax: P__CLPK_real): Integer; cdecl;
  external libAccelerate name _PU + 'slamc5_';
function dlamch_(__cmach: MarshaledAString): __CLPK_doublereal; cdecl;
  external libAccelerate name _PU + 'dlamch_';
function dlamc2_(__beta: P__CLPK_integer; __t: P__CLPK_integer;
  __rnd: P__CLPK_logical; __eps: P__CLPK_doublereal; __emin: P__CLPK_integer;
  __rmin: P__CLPK_doublereal; __emax: P__CLPK_integer;
  __rmax: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlamc2_';
function dlamc3_(__A: P__CLPK_doublereal; __B: P__CLPK_doublereal)
  : __CLPK_doublereal; cdecl; external libAccelerate name _PU + 'dlamc3_';
function dlamc4_(__emin: P__CLPK_integer; __Start: P__CLPK_doublereal;
  __base: P__CLPK_integer): Integer; cdecl;
  external libAccelerate name _PU + 'dlamc4_';
function dlamc5_(__beta: P__CLPK_integer; __P: P__CLPK_integer;
  __emin: P__CLPK_integer; __ieee: P__CLPK_logical; __emax: P__CLPK_integer;
  __rmax: P__CLPK_doublereal): Integer; cdecl;
  external libAccelerate name _PU + 'dlamc5_';
function la_retain(&object: la_object_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_retain';
procedure la_release(&object: la_object_t); cdecl;
  external libAccelerate name _PU + 'la_release';
procedure la_add_attributes(&object: la_object_t; attributes: la_attribute_t);
  cdecl; external libAccelerate name _PU + 'la_add_attributes';
procedure la_remove_attributes(&object: la_object_t;
  attributes: la_attribute_t); cdecl;
  external libAccelerate name _PU + 'la_remove_attributes';
function la_status(&object: la_object_t): la_status_t; cdecl;
  external libAccelerate name _PU + 'la_status';
function la_matrix_from_float_buffer(buffer: PSingle; matrix_rows: la_count_t;
  matrix_cols: la_count_t; matrix_row_stride: la_count_t;
  matrix_hint: la_hint_t; attributes: la_attribute_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_matrix_from_float_buffer';
function la_matrix_from_double_buffer(buffer: PDouble; matrix_rows: la_count_t;
  matrix_cols: la_count_t; matrix_row_stride: la_count_t;
  matrix_hint: la_hint_t; attributes: la_attribute_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_matrix_from_double_buffer';
function la_matrix_from_float_buffer_nocopy(buffer: PSingle;
  matrix_rows: la_count_t; matrix_cols: la_count_t;
  matrix_row_stride: la_count_t; matrix_hint: la_hint_t;
  deallocator: la_deallocator_t; attributes: la_attribute_t): la_object_t;
  cdecl; external libAccelerate name _PU + 'la_matrix_from_float_buffer_nocopy';
function la_matrix_from_double_buffer_nocopy(buffer: PDouble;
  matrix_rows: la_count_t; matrix_cols: la_count_t;
  matrix_row_stride: la_count_t; matrix_hint: la_hint_t;
  deallocator: la_deallocator_t; attributes: la_attribute_t): la_object_t;
  cdecl; external libAccelerate name _PU +
  'la_matrix_from_double_buffer_nocopy';
function la_matrix_to_float_buffer(buffer: PSingle;
  buffer_row_stride: la_count_t; matrix: la_object_t): la_status_t; cdecl;
  external libAccelerate name _PU + 'la_matrix_to_float_buffer';
function la_matrix_to_double_buffer(buffer: PDouble;
  buffer_row_stride: la_count_t; matrix: la_object_t): la_status_t; cdecl;
  external libAccelerate name _PU + 'la_matrix_to_double_buffer';
function la_matrix_rows(matrix: la_object_t): la_count_t; cdecl;
  external libAccelerate name _PU + 'la_matrix_rows';
function la_matrix_cols(matrix: la_object_t): la_count_t; cdecl;
  external libAccelerate name _PU + 'la_matrix_cols';
function la_matrix_slice(matrix: la_object_t; matrix_first_row: la_index_t;
  matrix_first_col: la_index_t; matrix_row_stride: la_index_t;
  matrix_col_stride: la_index_t; slice_rows: la_count_t; slice_cols: la_count_t)
  : la_object_t; cdecl; external libAccelerate name _PU + 'la_matrix_slice';
function la_identity_matrix(matrix_size: la_count_t;
  scalar_type: la_scalar_type_t; attributes: la_attribute_t): la_object_t;
  cdecl; external libAccelerate name _PU + 'la_identity_matrix';
function la_diagonal_matrix_from_vector(vector: la_object_t;
  matrix_diagonal: la_index_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_diagonal_matrix_from_vector';
function la_vector_from_matrix_row(matrix: la_object_t; matrix_row: la_count_t)
  : la_object_t; cdecl; external libAccelerate name _PU +
  'la_vector_from_matrix_row';
function la_vector_from_matrix_col(matrix: la_object_t; matrix_col: la_count_t)
  : la_object_t; cdecl; external libAccelerate name _PU +
  'la_vector_from_matrix_col';
function la_vector_from_matrix_diagonal(matrix: la_object_t;
  matrix_diagonal: la_index_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_vector_from_matrix_diagonal';
function la_vector_to_float_buffer(buffer: PSingle; buffer_stride: la_index_t;
  vector: la_object_t): la_status_t; cdecl;
  external libAccelerate name _PU + 'la_vector_to_float_buffer';
function la_vector_to_double_buffer(buffer: PDouble; buffer_stride: la_index_t;
  vector: la_object_t): la_status_t; cdecl;
  external libAccelerate name _PU + 'la_vector_to_double_buffer';
function la_vector_length(vector: la_object_t): la_count_t; cdecl;
  external libAccelerate name _PU + 'la_vector_length';
function la_vector_slice(vector: la_object_t; vector_first: la_index_t;
  vector_stride: la_index_t; slice_length: la_count_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_vector_slice';
function la_splat_from_float(scalar_value: Single; attributes: la_attribute_t)
  : la_object_t; cdecl; external libAccelerate name _PU + 'la_splat_from_float';
function la_splat_from_double(scalar_value: Double; attributes: la_attribute_t)
  : la_object_t; cdecl; external libAccelerate name _PU +
  'la_splat_from_double';
function la_splat_from_vector_element(vector: la_object_t;
  vector_index: la_index_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_splat_from_vector_element';
function la_splat_from_matrix_element(matrix: la_object_t;
  matrix_row: la_index_t; matrix_col: la_index_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_splat_from_matrix_element';
function la_vector_from_splat(splat: la_object_t; vector_length: la_count_t)
  : la_object_t; cdecl; external libAccelerate name _PU +
  'la_vector_from_splat';
function la_matrix_from_splat(splat: la_object_t; matrix_rows: la_count_t;
  matrix_cols: la_count_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_matrix_from_splat';
function la_transpose(matrix: la_object_t): la_object_t; cdecl;
  external libAccelerate name _PU + 'la_transpose';
function la_scale_with_float(matrix: la_object_t; scalar: Single): la_object_t;
  cdecl; external libAccelerate name _PU + 'la_scale_with_float';
function la_scale_with_double(matrix: la_object_t; scalar: Double): la_object_t;
  cdecl; external libAccelerate name _PU + 'la_scale_with_double';
function la_sum(obj_left: la_object_t; obj_right: la_object_t): la_object_t;
  cdecl; external libAccelerate name _PU + 'la_sum';
function la_difference(obj_left: la_object_t; obj_right: la_object_t)
  : la_object_t; cdecl; external libAccelerate name _PU + 'la_difference';
function la_elementwise_product(obj_left: la_object_t; obj_right: la_object_t)
  : la_object_t; cdecl; external libAccelerate name _PU +
  'la_elementwise_product';
function la_inner_product(vector_left: la_object_t; vector_right: la_object_t)
  : la_object_t; cdecl; external libAccelerate name _PU + 'la_inner_product';
function la_outer_product(vector_left: la_object_t; vector_right: la_object_t)
  : la_object_t; cdecl; external libAccelerate name _PU + 'la_outer_product';
function la_matrix_product(matrix_left: la_object_t; matrix_right: la_object_t)
  : la_object_t; cdecl; external libAccelerate name _PU + 'la_matrix_product';
function la_solve(matrix_system: la_object_t; obj_rhs: la_object_t)
  : la_object_t; cdecl; external libAccelerate name _PU + 'la_solve';
function la_norm_as_float(vector: la_object_t; vector_norm: la_norm_t): Single;
  cdecl; external libAccelerate name _PU + 'la_norm_as_float';
function la_norm_as_double(vector: la_object_t; vector_norm: la_norm_t): Double;
  cdecl; external libAccelerate name _PU + 'la_norm_as_double';
function la_normalized_vector(vector: la_object_t; vector_norm: la_norm_t)
  : la_object_t; cdecl; external libAccelerate name _PU +
  'la_normalized_vector';
function sparse_inner_product_dense_float(nz: sparse_dimension; x: PSingle;
  indx: Psparse_index; y: PSingle; incy: sparse_stride): Single; cdecl;
  external libAccelerate name _PU + 'sparse_inner_product_dense_float';
function sparse_inner_product_dense_double(nz: sparse_dimension; x: PDouble;
  indx: Psparse_index; y: PDouble; incy: sparse_stride): Double; cdecl;
  external libAccelerate name _PU + 'sparse_inner_product_dense_double';
function sparse_inner_product_sparse_float(nzx: sparse_dimension;
  nzy: sparse_dimension; x: PSingle; indx: Psparse_index; y: PSingle;
  indy: Psparse_index): Single; cdecl;
  external libAccelerate name _PU + 'sparse_inner_product_sparse_float';
function sparse_inner_product_sparse_double(nzx: sparse_dimension;
  nzy: sparse_dimension; x: PDouble; indx: Psparse_index; y: PDouble;
  indy: Psparse_index): Double; cdecl;
  external libAccelerate name _PU + 'sparse_inner_product_sparse_double';
procedure sparse_vector_add_with_scale_dense_float(nz: sparse_dimension;
  alpha: Single; x: PSingle; indx: Psparse_index; y: PSingle;
  incy: sparse_stride); cdecl;
  external libAccelerate name _PU + 'sparse_vector_add_with_scale_dense_float';
procedure sparse_vector_add_with_scale_dense_double(nz: sparse_dimension;
  alpha: Double; x: PDouble; indx: Psparse_index; y: PDouble;
  incy: sparse_stride); cdecl;
  external libAccelerate name _PU + 'sparse_vector_add_with_scale_dense_double';
function sparse_vector_norm_float(nz: sparse_dimension; x: PSingle;
  indx: Psparse_index; norm: sparse_norm): Single; cdecl;
  external libAccelerate name _PU + 'sparse_vector_norm_float';
function sparse_vector_norm_double(nz: sparse_dimension; x: PDouble;
  indx: Psparse_index; norm: sparse_norm): Double; cdecl;
  external libAccelerate name _PU + 'sparse_vector_norm_double';
function sparse_matrix_vector_product_dense_float(transA: Cardinal;
  alpha: Single; a: sparse_matrix_float; x: PSingle; incx: sparse_stride;
  y: PSingle; incy: sparse_stride): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_vector_product_dense_float';
function sparse_matrix_vector_product_dense_double(transA: Cardinal;
  alpha: Double; a: sparse_matrix_double; x: PDouble; incx: sparse_stride;
  y: PDouble; incy: sparse_stride): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_vector_product_dense_double';
function sparse_vector_triangular_solve_dense_float(transt: Cardinal;
  alpha: Single; T: sparse_matrix_float; x: PSingle; incx: sparse_stride)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_vector_triangular_solve_dense_float';
function sparse_vector_triangular_solve_dense_double(transt: Cardinal;
  alpha: Double; T: sparse_matrix_double; x: PDouble; incx: sparse_stride)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_vector_triangular_solve_dense_double';
function sparse_outer_product_dense_float(m: sparse_dimension;
  n: sparse_dimension; nz: sparse_dimension; alpha: Single; x: PSingle;
  incx: sparse_stride; y: PSingle; indy: Psparse_index; c: Psparse_matrix_float)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_outer_product_dense_float';
function sparse_outer_product_dense_double(m: sparse_dimension;
  n: sparse_dimension; nz: sparse_dimension; alpha: Double; x: PDouble;
  incx: sparse_stride; y: PDouble; indy: Psparse_index;
  c: Psparse_matrix_double): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_outer_product_dense_double';
function sparse_permute_rows_float(a: sparse_matrix_float; perm: Psparse_index)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_permute_rows_float';
function sparse_permute_rows_double(a: sparse_matrix_double;
  perm: Psparse_index): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_permute_rows_double';
function sparse_permute_cols_float(a: sparse_matrix_float; perm: Psparse_index)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_permute_cols_float';
function sparse_permute_cols_double(a: sparse_matrix_double;
  perm: Psparse_index): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_permute_cols_double';
function sparse_elementwise_norm_float(a: sparse_matrix_float;
  norm: sparse_norm): Single; cdecl;
  external libAccelerate name _PU + 'sparse_elementwise_norm_float';
function sparse_elementwise_norm_double(a: sparse_matrix_double;
  norm: sparse_norm): Double; cdecl;
  external libAccelerate name _PU + 'sparse_elementwise_norm_double';
function sparse_operator_norm_float(a: sparse_matrix_float; norm: sparse_norm)
  : Single; cdecl; external libAccelerate name _PU +
  'sparse_operator_norm_float';
function sparse_operator_norm_double(a: sparse_matrix_double; norm: sparse_norm)
  : Double; cdecl; external libAccelerate name _PU +
  'sparse_operator_norm_double';
function sparse_matrix_trace_float(a: sparse_matrix_float; offset: sparse_index)
  : Single; cdecl; external libAccelerate name _PU +
  'sparse_matrix_trace_float';
function sparse_matrix_trace_double(a: sparse_matrix_double;
  offset: sparse_index): Double; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_trace_double';
function sparse_matrix_product_dense_float(order: Cardinal; transA: Cardinal;
  n: sparse_dimension; alpha: Single; a: sparse_matrix_float; b: PSingle;
  ldb: sparse_dimension; c: PSingle; ldc: sparse_dimension): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_matrix_product_dense_float';
function sparse_matrix_product_dense_double(order: Cardinal; transA: Cardinal;
  n: sparse_dimension; alpha: Double; a: sparse_matrix_double; b: PDouble;
  ldb: sparse_dimension; c: PDouble; ldc: sparse_dimension): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_matrix_product_dense_double';
function sparse_matrix_product_sparse_float(order: Cardinal; transA: Cardinal;
  alpha: Single; a: sparse_matrix_float; b: sparse_matrix_float; c: PSingle;
  ldc: sparse_dimension): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_product_sparse_float';
function sparse_matrix_product_sparse_double(order: Cardinal; transA: Cardinal;
  alpha: Double; a: sparse_matrix_double; b: sparse_matrix_double; c: PDouble;
  ldc: sparse_dimension): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_product_sparse_double';
function sparse_matrix_triangular_solve_dense_float(order: Cardinal;
  transt: Cardinal; nrhs: sparse_dimension; alpha: Single;
  T: sparse_matrix_float; b: PSingle; ldb: sparse_dimension): sparse_status;
  cdecl; external libAccelerate name _PU +
  'sparse_matrix_triangular_solve_dense_float';
function sparse_matrix_triangular_solve_dense_double(order: Cardinal;
  transt: Cardinal; nrhs: sparse_dimension; alpha: Double;
  T: sparse_matrix_double; b: PDouble; ldb: sparse_dimension): sparse_status;
  cdecl; external libAccelerate name _PU +
  'sparse_matrix_triangular_solve_dense_double';
function sparse_matrix_create_float(m: sparse_dimension; n: sparse_dimension)
  : sparse_matrix_float; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_create_float';
function sparse_matrix_create_double(m: sparse_dimension; n: sparse_dimension)
  : sparse_matrix_double; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_create_double';
function sparse_insert_entry_float(a: sparse_matrix_float; val: Single;
  i: sparse_index; j: sparse_index): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_insert_entry_float';
function sparse_insert_entry_double(a: sparse_matrix_double; val: Double;
  i: sparse_index; j: sparse_index): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_insert_entry_double';
function sparse_insert_entries_float(a: sparse_matrix_float;
  n: sparse_dimension; val: PSingle; indx: Psparse_index; jndx: Psparse_index)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_insert_entries_float';
function sparse_insert_entries_double(a: sparse_matrix_double;
  n: sparse_dimension; val: PDouble; indx: Psparse_index; jndx: Psparse_index)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_insert_entries_double';
function sparse_insert_col_float(a: sparse_matrix_float; j: sparse_index;
  nz: sparse_dimension; val: PSingle; indx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_insert_col_float';
function sparse_insert_col_double(a: sparse_matrix_double; j: sparse_index;
  nz: sparse_dimension; val: PDouble; indx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_insert_col_double';
function sparse_insert_row_float(a: sparse_matrix_float; i: sparse_index;
  nz: sparse_dimension; val: PSingle; jndx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_insert_row_float';
function sparse_insert_row_double(a: sparse_matrix_double; i: sparse_index;
  nz: sparse_dimension; val: PDouble; jndx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_insert_row_double';
function sparse_extract_sparse_row_float(a: sparse_matrix_float;
  row: sparse_index; column_start: sparse_index; column_end: Psparse_index;
  nz: sparse_dimension; val: PSingle; jndx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_extract_sparse_row_float';
function sparse_extract_sparse_row_double(a: sparse_matrix_double;
  row: sparse_index; column_start: sparse_index; column_end: Psparse_index;
  nz: sparse_dimension; val: PDouble; jndx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_extract_sparse_row_double';
function sparse_extract_sparse_column_float(a: sparse_matrix_float;
  column: sparse_index; row_start: sparse_index; row_end: Psparse_index;
  nz: sparse_dimension; val: PSingle; indx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU + 'sparse_extract_sparse_column_float';
function sparse_extract_sparse_column_double(a: sparse_matrix_double;
  column: sparse_index; row_start: sparse_index; row_end: Psparse_index;
  nz: sparse_dimension; val: PDouble; indx: Psparse_index): sparse_status;
  cdecl; external libAccelerate name _PU +
  'sparse_extract_sparse_column_double';
function sparse_matrix_block_create_float(Mb: sparse_dimension;
  Nb: sparse_dimension; k: sparse_dimension; l: sparse_dimension)
  : sparse_matrix_float; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_block_create_float';
function sparse_matrix_block_create_double(Mb: sparse_dimension;
  Nb: sparse_dimension; k: sparse_dimension; l: sparse_dimension)
  : sparse_matrix_double; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_block_create_double';
function sparse_matrix_variable_block_create_float(Mb: sparse_dimension;
  Nb: sparse_dimension; k: Psparse_dimension; l: Psparse_dimension)
  : sparse_matrix_float; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_variable_block_create_float';
function sparse_matrix_variable_block_create_double(Mb: sparse_dimension;
  Nb: sparse_dimension; k: Psparse_dimension; l: Psparse_dimension)
  : sparse_matrix_double; cdecl;
  external libAccelerate name _PU +
  'sparse_matrix_variable_block_create_double';
function sparse_insert_block_float(a: sparse_matrix_float; val: PSingle;
  row_stride: sparse_dimension; col_stride: sparse_dimension; bi: sparse_index;
  bj: sparse_index): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_insert_block_float';
function sparse_insert_block_double(a: sparse_matrix_double; val: PDouble;
  row_stride: sparse_dimension; col_stride: sparse_dimension; bi: sparse_index;
  bj: sparse_index): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_insert_block_double';
function sparse_extract_block_float(a: sparse_matrix_float; bi: sparse_index;
  bj: sparse_index; row_stride: sparse_dimension; col_stride: sparse_dimension;
  val: PSingle): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_extract_block_float';
function sparse_extract_block_double(a: sparse_matrix_double; bi: sparse_index;
  bj: sparse_index; row_stride: sparse_dimension; col_stride: sparse_dimension;
  val: PDouble): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_extract_block_double';
function sparse_get_block_dimension_for_row(a: Pointer; i: sparse_index)
  : LongInt; cdecl; external libAccelerate name _PU +
  'sparse_get_block_dimension_for_row';
function sparse_get_block_dimension_for_col(a: Pointer; j: sparse_index)
  : LongInt; cdecl; external libAccelerate name _PU +
  'sparse_get_block_dimension_for_col';
function sparse_commit(a: Pointer): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_commit';
function sparse_get_matrix_property(a: Pointer; pname: sparse_matrix_property)
  : LongInt; cdecl; external libAccelerate name _PU +
  'sparse_get_matrix_property';
function sparse_set_matrix_property(a: Pointer; pname: sparse_matrix_property)
  : sparse_status; cdecl; external libAccelerate name _PU +
  'sparse_set_matrix_property';
function sparse_get_matrix_number_of_rows(a: Pointer): sparse_dimension; cdecl;
  external libAccelerate name _PU + 'sparse_get_matrix_number_of_rows';
function sparse_get_matrix_number_of_columns(a: Pointer): sparse_dimension;
  cdecl; external libAccelerate name _PU +
  'sparse_get_matrix_number_of_columns';
function sparse_get_matrix_nonzero_count(a: Pointer): LongInt; cdecl;
  external libAccelerate name _PU + 'sparse_get_matrix_nonzero_count';
function sparse_get_matrix_nonzero_count_for_row(a: Pointer; i: sparse_index)
  : LongInt; cdecl; external libAccelerate name _PU +
  'sparse_get_matrix_nonzero_count_for_row';
function sparse_get_matrix_nonzero_count_for_column(a: Pointer; j: sparse_index)
  : LongInt; cdecl; external libAccelerate name _PU +
  'sparse_get_matrix_nonzero_count_for_column';
function sparse_matrix_destroy(a: Pointer): sparse_status; cdecl;
  external libAccelerate name _PU + 'sparse_matrix_destroy';
function sparse_get_vector_nonzero_count_float(n: sparse_dimension; x: PSingle;
  incx: sparse_stride): LongInt; cdecl;
  external libAccelerate name _PU + 'sparse_get_vector_nonzero_count_float';
function sparse_get_vector_nonzero_count_double(n: sparse_dimension; x: PDouble;
  incx: sparse_stride): LongInt; cdecl;
  external libAccelerate name _PU + 'sparse_get_vector_nonzero_count_double';
function sparse_pack_vector_float(n: sparse_dimension; nz: sparse_dimension;
  x: PSingle; incx: sparse_stride; y: PSingle; indy: Psparse_index): LongInt;
  cdecl; external libAccelerate name _PU + 'sparse_pack_vector_float';
function sparse_pack_vector_double(n: sparse_dimension; nz: sparse_dimension;
  x: PDouble; incx: sparse_stride; y: PDouble; indy: Psparse_index): LongInt;
  cdecl; external libAccelerate name _PU + 'sparse_pack_vector_double';
procedure sparse_unpack_vector_float(n: sparse_dimension; nz: sparse_dimension;
  zero: Integer; x: PSingle; indx: Psparse_index; y: PSingle;
  incy: sparse_stride); cdecl;
  external libAccelerate name _PU + 'sparse_unpack_vector_float';
procedure sparse_unpack_vector_double(n: sparse_dimension; nz: sparse_dimension;
  zero: Integer; x: PDouble; indx: Psparse_index; y: PDouble;
  incy: sparse_stride); cdecl;
  external libAccelerate name _PU + 'sparse_unpack_vector_double';
function SparseConvertFromCoordinate(rowCount: Integer; columnCount: Integer;
  blockCount: LongInt; blockSize: Byte; attributes: SparseAttributes_t;
  row: PInteger; column: PInteger; data: PDouble): SparseMatrix_Double; cdecl;
  external libAccelerate name _PU + 'SparseConvertFromCoordinate';
function SparseConvertFromCoordinate(rowCount: Integer; columnCount: Integer;
  blockCount: LongInt; blockSize: Byte; attributes: SparseAttributes_t;
  row: PInteger; column: PInteger; data: PSingle): SparseMatrix_Float; cdecl;
  external libAccelerate name _PU + 'SparseConvertFromCoordinate';
function SparseConvertFromCoordinate(rowCount: Integer; columnCount: Integer;
  blockCount: LongInt; blockSize: Byte; attributes: SparseAttributes_t;
  row: PInteger; column: PInteger; data: PDouble; storage: Pointer;
  workspace: Pointer): SparseMatrix_Double; cdecl;
  external libAccelerate name _PU + 'SparseConvertFromCoordinate';
function SparseConvertFromCoordinate(rowCount: Integer; columnCount: Integer;
  blockCount: LongInt; blockSize: Byte; attributes: SparseAttributes_t;
  row: PInteger; column: PInteger; data: PSingle; storage: Pointer;
  workspace: Pointer): SparseMatrix_Float; cdecl;
  external libAccelerate name _PU + 'SparseConvertFromCoordinate';
function SparseConvertFromOpaque(matrix: sparse_matrix_double)
  : SparseMatrix_Double; cdecl;
  external libAccelerate name _PU + 'SparseConvertFromOpaque';
function SparseConvertFromOpaque(matrix: sparse_matrix_float)
  : SparseMatrix_Float; cdecl;
  external libAccelerate name _PU + 'SparseConvertFromOpaque';
procedure SparseMultiply(a: SparseMatrix_Double; x: DenseMatrix_Double;
  y: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(a: SparseMatrix_Float; x: DenseMatrix_Float;
  y: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(alpha: Double; a: SparseMatrix_Double;
  x: DenseMatrix_Double; y: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(alpha: Single; a: SparseMatrix_Float;
  x: DenseMatrix_Float; y: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(a: SparseMatrix_Double; x: DenseVector_Double;
  y: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(a: SparseMatrix_Float; x: DenseVector_Float;
  y: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(alpha: Double; a: SparseMatrix_Double;
  x: DenseVector_Double; y: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(alpha: Single; a: SparseMatrix_Float;
  x: DenseVector_Float; y: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiplyAdd(a: SparseMatrix_Double; x: DenseMatrix_Double;
  y: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
procedure SparseMultiplyAdd(a: SparseMatrix_Float; x: DenseMatrix_Float;
  y: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
procedure SparseMultiplyAdd(alpha: Double; a: SparseMatrix_Double;
  x: DenseMatrix_Double; y: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
procedure SparseMultiplyAdd(alpha: Single; a: SparseMatrix_Float;
  x: DenseMatrix_Float; y: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
procedure SparseMultiplyAdd(a: SparseMatrix_Double; x: DenseVector_Double;
  y: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
procedure SparseMultiplyAdd(a: SparseMatrix_Float; x: DenseVector_Float;
  y: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
procedure SparseMultiplyAdd(alpha: Double; a: SparseMatrix_Double;
  x: DenseVector_Double; y: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
procedure SparseMultiplyAdd(alpha: Single; a: SparseMatrix_Float;
  x: DenseVector_Float; y: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiplyAdd';
function SparseGetTranspose(matrix: SparseMatrix_Double): SparseMatrix_Double;
  cdecl; external libAccelerate name _PU + 'SparseGetTranspose';
function SparseGetTranspose(matrix: SparseMatrix_Float): SparseMatrix_Float;
  cdecl; external libAccelerate name _PU + 'SparseGetTranspose';
function SparseGetTranspose(factor: SparseOpaqueFactorization_Double)
  : SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + 'SparseGetTranspose';
function SparseGetTranspose(factor: SparseOpaqueFactorization_Float)
  : SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + 'SparseGetTranspose';
function SparseGetTranspose(Subfactor: SparseOpaqueSubfactor_Double)
  : SparseOpaqueSubfactor_Double; cdecl;
  external libAccelerate name _PU + 'SparseGetTranspose';
function SparseGetTranspose(Subfactor: SparseOpaqueSubfactor_Float)
  : SparseOpaqueSubfactor_Float; cdecl;
  external libAccelerate name _PU + 'SparseGetTranspose';
function SparseFactor(&type: SparseFactorization_t; matrix: SparseMatrix_Double)
  : SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(&type: SparseFactorization_t; matrix: SparseMatrix_Float)
  : SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(&type: SparseFactorization_t; matrix: SparseMatrix_Double;
  sfoptions: SparseSymbolicFactorOptions; nfoptions: SparseNumericFactorOptions)
  : SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(&type: SparseFactorization_t; matrix: SparseMatrix_Float;
  sfoptions: SparseSymbolicFactorOptions; nfoptions: SparseNumericFactorOptions)
  : SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(SymbolicFactor: SparseOpaqueSymbolicFactorization;
  matrix: SparseMatrix_Double): SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(SymbolicFactor: SparseOpaqueSymbolicFactorization;
  matrix: SparseMatrix_Float): SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(SymbolicFactor: SparseOpaqueSymbolicFactorization;
  matrix: SparseMatrix_Double; nfoptions: SparseNumericFactorOptions)
  : SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(SymbolicFactor: SparseOpaqueSymbolicFactorization;
  matrix: SparseMatrix_Float; nfoptions: SparseNumericFactorOptions)
  : SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(SymbolicFactor: SparseOpaqueSymbolicFactorization;
  matrix: SparseMatrix_Double; nfoptions: SparseNumericFactorOptions;
  factorStorage: Pointer; workspace: Pointer): SparseOpaqueFactorization_Double;
  cdecl; external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(SymbolicFactor: SparseOpaqueSymbolicFactorization;
  matrix: SparseMatrix_Float; nfoptions: SparseNumericFactorOptions;
  factorStorage: Pointer; workspace: Pointer): SparseOpaqueFactorization_Float;
  cdecl; external libAccelerate name _PU + 'SparseFactor';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  XB: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  XB: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  b: DenseMatrix_Double; x: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  b: DenseMatrix_Float; x: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  XB: DenseMatrix_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  XB: DenseMatrix_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  x: DenseMatrix_Double; b: DenseMatrix_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  x: DenseMatrix_Float; b: DenseMatrix_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  XB: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  XB: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  b: DenseVector_Double; x: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  b: DenseVector_Float; x: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  XB: DenseVector_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  XB: DenseVector_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Double;
  x: DenseVector_Double; b: DenseVector_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Factored: SparseOpaqueFactorization_Float;
  x: DenseVector_Float; b: DenseVector_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseFactor(&type: SparseFactorization_t;
  matrix: SparseMatrixStructure): SparseOpaqueSymbolicFactorization; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
function SparseFactor(&type: SparseFactorization_t;
  matrix: SparseMatrixStructure; sfoptions: SparseSymbolicFactorOptions)
  : SparseOpaqueSymbolicFactorization; cdecl;
  external libAccelerate name _PU + 'SparseFactor';
procedure SparseRefactor(matrix: SparseMatrix_Double;
  factorization: PSparseOpaqueFactorization_Double); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
procedure SparseRefactor(matrix: SparseMatrix_Float;
  factorization: PSparseOpaqueFactorization_Float); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
procedure SparseRefactor(matrix: SparseMatrix_Double;
  factorization: PSparseOpaqueFactorization_Double;
  nfoptions: SparseNumericFactorOptions); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
procedure SparseRefactor(matrix: SparseMatrix_Float;
  factorization: PSparseOpaqueFactorization_Float;
  nfoptions: SparseNumericFactorOptions); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
procedure SparseRefactor(matrix: SparseMatrix_Double;
  factorization: PSparseOpaqueFactorization_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
procedure SparseRefactor(matrix: SparseMatrix_Float;
  factorization: PSparseOpaqueFactorization_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
procedure SparseRefactor(matrix: SparseMatrix_Double;
  factorization: PSparseOpaqueFactorization_Double;
  nfoptions: SparseNumericFactorOptions; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
procedure SparseRefactor(matrix: SparseMatrix_Float;
  factorization: PSparseOpaqueFactorization_Float;
  nfoptions: SparseNumericFactorOptions; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseRefactor';
function SparseGetInertia(Factored: SparseOpaqueFactorization_Float;
  num_positive: PInteger; num_zero: PInteger; num_negative: PInteger): Integer;
  cdecl; external libAccelerate name _PU + 'SparseGetInertia';
function SparseGetInertia(Factored: SparseOpaqueFactorization_Double;
  num_positive: PInteger; num_zero: PInteger; num_negative: PInteger): Integer;
  cdecl; external libAccelerate name _PU + 'SparseGetInertia';
function SparseCreateSubfactor(Subfactor: SparseSubfactor_t;
  factor: SparseOpaqueFactorization_Double): SparseOpaqueSubfactor_Double;
  cdecl; external libAccelerate name _PU + 'SparseCreateSubfactor';
function SparseCreateSubfactor(Subfactor: SparseSubfactor_t;
  factor: SparseOpaqueFactorization_Float): SparseOpaqueSubfactor_Float; cdecl;
  external libAccelerate name _PU + 'SparseCreateSubfactor';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  XB: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  XB: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  b: DenseMatrix_Double; x: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  b: DenseMatrix_Float; x: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  XB: DenseMatrix_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  XB: DenseMatrix_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  b: DenseMatrix_Double; x: DenseMatrix_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  b: DenseMatrix_Float; x: DenseMatrix_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  XB: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  XB: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  b: DenseVector_Double; x: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  b: DenseVector_Float; x: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  XB: DenseVector_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Double;
  b: DenseVector_Double; x: DenseVector_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  b: DenseVector_Float; x: DenseVector_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  XY: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  XY: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  x: DenseMatrix_Double; y: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  x: DenseMatrix_Float; y: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  XY: DenseMatrix_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  XY: DenseMatrix_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  x: DenseMatrix_Double; y: DenseMatrix_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  x: DenseMatrix_Float; y: DenseMatrix_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  XY: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  XY: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  x: DenseVector_Double; y: DenseVector_Double); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  x: DenseVector_Float; y: DenseVector_Float); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  XY: DenseVector_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  XY: DenseVector_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Double;
  x: DenseVector_Double; y: DenseVector_Double; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
procedure SparseMultiply(Subfactor: SparseOpaqueSubfactor_Float;
  x: DenseVector_Float; y: DenseVector_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseMultiply';
function SparseCreatePreconditioner(&type: SparsePreconditioner_t;
  a: SparseMatrix_Double): SparseOpaquePreconditioner_Double; cdecl;
  external libAccelerate name _PU + 'SparseCreatePreconditioner';
function SparseCreatePreconditioner(&type: SparsePreconditioner_t;
  a: SparseMatrix_Float): SparseOpaquePreconditioner_Float; cdecl;
  external libAccelerate name _PU + 'SparseCreatePreconditioner';
function SparseConjugateGradient: SparseIterativeMethod; cdecl;
  external libAccelerate name _PU + 'SparseConjugateGradient';
function SparseConjugateGradient(options: SparseCGOptions)
  : SparseIterativeMethod; cdecl;
  external libAccelerate name _PU + 'SparseConjugateGradient';
function SparseGMRES: SparseIterativeMethod; cdecl;
  external libAccelerate name _PU + 'SparseGMRES';
function SparseGMRES(options: SparseGMRESOptions): SparseIterativeMethod; cdecl;
  external libAccelerate name _PU + 'SparseGMRES';
function SparseLSMR: SparseIterativeMethod; cdecl;
  external libAccelerate name _PU + 'SparseLSMR';
function SparseLSMR(options: SparseLSMROptions): SparseIterativeMethod; cdecl;
  external libAccelerate name _PU + 'SparseLSMR';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Double;
  b: DenseMatrix_Double; x: DenseMatrix_Double): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Float;
  b: DenseMatrix_Float; x: DenseMatrix_Float): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Double;
  b: DenseVector_Double; x: DenseVector_Double): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Float;
  b: DenseVector_Float; x: DenseVector_Float): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator; b: DenseMatrix_Double;
  x: DenseMatrix_Double): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator1; b: DenseMatrix_Float;
  x: DenseMatrix_Float): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator2; b: DenseVector_Double;
  x: DenseVector_Double): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator3; b: DenseVector_Float;
  x: DenseVector_Float): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Double;
  b: DenseMatrix_Double; x: DenseMatrix_Double;
  Preconditioner: SparsePreconditioner_t): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Float;
  b: DenseMatrix_Float; x: DenseMatrix_Float;
  Preconditioner: SparsePreconditioner_t): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Double;
  b: DenseVector_Double; x: DenseVector_Double;
  Preconditioner: SparsePreconditioner_t): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Float;
  b: DenseVector_Float; x: DenseVector_Float;
  Preconditioner: SparsePreconditioner_t): SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Double;
  b: DenseMatrix_Double; x: DenseMatrix_Double;
  Preconditioner: SparseOpaquePreconditioner_Double): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Float;
  b: DenseMatrix_Float; x: DenseMatrix_Float;
  Preconditioner: SparseOpaquePreconditioner_Float): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Double;
  b: DenseVector_Double; x: DenseVector_Double;
  Preconditioner: SparseOpaquePreconditioner_Double): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod; a: SparseMatrix_Float;
  b: DenseVector_Float; x: DenseVector_Float;
  Preconditioner: SparseOpaquePreconditioner_Float): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator; b: DenseMatrix_Double;
  x: DenseMatrix_Double; Preconditioner: SparseOpaquePreconditioner_Double)
  : SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator1; b: DenseMatrix_Float;
  x: DenseMatrix_Float; Preconditioner: SparseOpaquePreconditioner_Float)
  : SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator2; b: DenseVector_Double;
  x: DenseVector_Double; Preconditioner: SparseOpaquePreconditioner_Double)
  : SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseSolve(method: SparseIterativeMethod;
  ApplyOperator: TAccelerateApplyOperator3; b: DenseVector_Float;
  x: DenseVector_Float; Preconditioner: SparseOpaquePreconditioner_Float)
  : SparseIterativeStatus_t; cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function SparseGetStateSize_Double(method: SparseIterativeMethod;
  Preconditioner: Integer; m: Integer; n: Integer; nrhs: Integer): LongWord;
  cdecl; external libAccelerate name _PU + 'SparseGetStateSize_Double';
function SparseGetStateSize_Float(method: SparseIterativeMethod;
  Preconditioner: Integer; m: Integer; n: Integer; nrhs: Integer): LongWord;
  cdecl; external libAccelerate name _PU + 'SparseGetStateSize_Float';
procedure SparseIterate(method: SparseIterativeMethod; iteration: Integer;
  converged: PInteger; state: Pointer; ApplyOperator: TAccelerateApplyOperator;
  b: DenseMatrix_Double; r: DenseMatrix_Double; x: DenseMatrix_Double;
  Preconditioner: SparseOpaquePreconditioner_Double); cdecl;
  external libAccelerate name _PU + 'SparseIterate';
procedure SparseIterate(method: SparseIterativeMethod; iteration: Integer;
  converged: PInteger; state: Pointer; ApplyOperator: TAccelerateApplyOperator1;
  b: DenseMatrix_Float; r: DenseMatrix_Float; x: DenseMatrix_Float;
  Preconditioner: SparseOpaquePreconditioner_Float); cdecl;
  external libAccelerate name _PU + 'SparseIterate';
procedure SparseIterate(method: SparseIterativeMethod; iteration: Integer;
  converged: PInteger; state: Pointer; ApplyOperator: TAccelerateApplyOperator;
  b: DenseMatrix_Double; r: DenseMatrix_Double; x: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseIterate';
procedure SparseIterate(method: SparseIterativeMethod; iteration: Integer;
  converged: PInteger; state: Pointer; ApplyOperator: TAccelerateApplyOperator1;
  b: DenseMatrix_Float; r: DenseMatrix_Float; x: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseIterate';
function SparseRetain(SymbolicFactor: SparseOpaqueSymbolicFactorization)
  : SparseOpaqueSymbolicFactorization; cdecl;
  external libAccelerate name _PU + 'SparseRetain';
function SparseRetain(NumericFactor: SparseOpaqueFactorization_Double)
  : SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + 'SparseRetain';
function SparseRetain(NumericFactor: SparseOpaqueFactorization_Float)
  : SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + 'SparseRetain';
function SparseRetain(NumericFactor: SparseOpaqueSubfactor_Double)
  : SparseOpaqueSubfactor_Double; cdecl;
  external libAccelerate name _PU + 'SparseRetain';
function SparseRetain(NumericFactor: SparseOpaqueSubfactor_Float)
  : SparseOpaqueSubfactor_Float; cdecl;
  external libAccelerate name _PU + 'SparseRetain';
procedure SparseCleanup(opaque: SparseOpaqueSymbolicFactorization); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(opaque: SparseOpaqueFactorization_Double); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(opaque: SparseOpaqueFactorization_Float); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(opaque: SparseOpaqueSubfactor_Double); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(opaque: SparseOpaqueSubfactor_Float); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(matrix: SparseMatrix_Double); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(matrix: SparseMatrix_Float); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(opaque: SparseOpaquePreconditioner_Double); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
procedure SparseCleanup(opaque: SparseOpaquePreconditioner_Float); cdecl;
  external libAccelerate name _PU + 'SparseCleanup';
function _SparseSymbolicFactorSymmetric(factorType: SparseFactorization_t;
  matrix: PSparseMatrixStructure; options: PSparseSymbolicFactorOptions)
  : SparseOpaqueSymbolicFactorization; cdecl;
  external libAccelerate name _PU + '_SparseSymbolicFactorSymmetric';
function _SparseSymbolicFactorQR(factorType: SparseFactorization_t;
  matrix: PSparseMatrixStructure; options: PSparseSymbolicFactorOptions)
  : SparseOpaqueSymbolicFactorization; cdecl;
  external libAccelerate name _PU + '_SparseSymbolicFactorQR';
procedure _SparseRetainSymbolic(SymbolicFactor
  : PSparseOpaqueSymbolicFactorization); cdecl;
  external libAccelerate name _PU + '_SparseRetainSymbolic';
procedure _SparseDestroyOpaqueSymbolic
  (toFree: PSparseOpaqueSymbolicFactorization); cdecl;
  external libAccelerate name _PU + '_SparseDestroyOpaqueSymbolic';
function _SparseGetOptionsFromSymbolicFactor
  (factor: PSparseOpaqueSymbolicFactorization): SparseSymbolicFactorOptions;
  cdecl; external libAccelerate name _PU +
  '_SparseGetOptionsFromSymbolicFactor';
procedure _SparseTrap; cdecl; external libAccelerate name _PU + '_SparseTrap';
function _SparseConvertFromCoordinate_Double(m: Integer; n: Integer;
  nBlock: LongInt; blockSize: Byte; attributes: SparseAttributes_t;
  row: PInteger; col: PInteger; val: PDouble; storage: MarshaledAString;
  workspace: PInteger): SparseMatrix_Double; cdecl;
  external libAccelerate name _PU + '_SparseConvertFromCoordinate_Double';
function _SparseConvertFromOpaque_Double(matrix: sparse_matrix_double)
  : SparseMatrix_Double; cdecl;
  external libAccelerate name _PU + '_SparseConvertFromOpaque_Double';
function _SparseNumericFactorSymmetric_Double(SymbolicFactor
  : PSparseOpaqueSymbolicFactorization; matrix: PSparseMatrix_Double;
  options: PSparseNumericFactorOptions; factorStorage: Pointer;
  workspace: Pointer): SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + '_SparseNumericFactorSymmetric_Double';
function _SparseNumericFactorQR_Double(SymbolicFactor
  : PSparseOpaqueSymbolicFactorization; matrix: PSparseMatrix_Double;
  options: PSparseNumericFactorOptions; factorStorage: Pointer;
  workspace: Pointer): SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + '_SparseNumericFactorQR_Double';
function _SparseFactorSymmetric_Double(factorType: SparseFactorization_t;
  matrix: PSparseMatrix_Double; sfoptions: PSparseSymbolicFactorOptions;
  nfoptions: PSparseNumericFactorOptions): SparseOpaqueFactorization_Double;
  cdecl; external libAccelerate name _PU + '_SparseFactorSymmetric_Double';
function _SparseFactorQR_Double(factorType: SparseFactorization_t;
  matrix: PSparseMatrix_Double; sfoptions: PSparseSymbolicFactorOptions;
  nfoptions: PSparseNumericFactorOptions): SparseOpaqueFactorization_Double;
  cdecl; external libAccelerate name _PU + '_SparseFactorQR_Double';
procedure _SparseRefactorSymmetric_Double(matrix: PSparseMatrix_Double;
  factorization: PSparseOpaqueFactorization_Double;
  nfoptions: PSparseNumericFactorOptions; workspace: Pointer); cdecl;
  external libAccelerate name _PU + '_SparseRefactorSymmetric_Double';
procedure _SparseRefactorQR_Double(matrix: PSparseMatrix_Double;
  factorization: PSparseOpaqueFactorization_Double;
  nfoptions: PSparseNumericFactorOptions; workspace: Pointer); cdecl;
  external libAccelerate name _PU + '_SparseRefactorQR_Double';
procedure _SparseMultiplySubfactor_Double
  (Subfactor: PSparseOpaqueSubfactor_Double; x: PDenseMatrix_Double;
  y: PDenseMatrix_Double; workspace: MarshaledAString); cdecl;
  external libAccelerate name _PU + '_SparseMultiplySubfactor_Double';
procedure _SparseSolveSubfactor_Double(Subfactor: PSparseOpaqueSubfactor_Double;
  b: PDenseMatrix_Double; x: PDenseMatrix_Double; workspace: MarshaledAString);
  cdecl; external libAccelerate name _PU + '_SparseSolveSubfactor_Double';
procedure _SparseSolveOpaque_Double(Factored: PSparseOpaqueFactorization_Double;
  RHS: PDenseMatrix_Double; Soln: PDenseMatrix_Double; workspace: Pointer);
  cdecl; external libAccelerate name _PU + '_SparseSolveOpaque_Double';
procedure _SparseDestroyOpaqueNumeric_Double
  (toFree: PSparseOpaqueFactorization_Double); cdecl;
  external libAccelerate name _PU + '_SparseDestroyOpaqueNumeric_Double';
procedure _SparseRetainNumeric_Double(NumericFactor
  : PSparseOpaqueFactorization_Double); cdecl;
  external libAccelerate name _PU + '_SparseRetainNumeric_Double';
function _SparseGetOptionsFromNumericFactor_Double
  (factor: PSparseOpaqueFactorization_Double): SparseNumericFactorOptions;
  cdecl; external libAccelerate name _PU +
  '_SparseGetOptionsFromNumericFactor_Double';
procedure _SparseGetWorkspaceRequired_Double(Subfactor: SparseSubfactor_t;
  factor: SparseOpaqueFactorization_Double; workStatic: PLongWord;
  workPerRHS: PLongWord); cdecl;
  external libAccelerate name _PU + '_SparseGetWorkspaceRequired_Double';
function _SparseGetIterativeStateSize_Double(method: PSparseIterativeMethod;
  Preconditioner: Integer; m: Integer; n: Integer; nrhs: Integer): LongWord;
  cdecl; external libAccelerate name _PU +
  '_SparseGetIterativeStateSize_Double';
procedure _SparseCGIterate_Double(options: PSparseCGOptions; iteration: Integer;
  state: MarshaledAString; converged: PInteger; x: PDenseMatrix_Double;
  b: PDenseMatrix_Double; r: PDenseMatrix_Double;
  Preconditioner: PSparseOpaquePreconditioner_Double;
  ApplyOperator: TAccelerateApplyOperator); cdecl;
  external libAccelerate name _PU + '_SparseCGIterate_Double';
function _SparseCGSolve_Double(options: PSparseCGOptions;
  x: PDenseMatrix_Double; b: PDenseMatrix_Double;
  ApplyOperator: TAccelerateApplyOperator;
  Preconditioner: PSparseOpaquePreconditioner_Double): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + '_SparseCGSolve_Double';
procedure _SparseGMRESIterate_Double(options: PSparseGMRESOptions;
  iteration: Integer; state: MarshaledAString; converged: PInteger;
  x: PDenseMatrix_Double; b: PDenseMatrix_Double; r: PDenseMatrix_Double;
  Preconditioner: PSparseOpaquePreconditioner_Double;
  ApplyOperator: TAccelerateApplyOperator); cdecl;
  external libAccelerate name _PU + '_SparseGMRESIterate_Double';
function _SparseGMRESSolve_Double(options: PSparseGMRESOptions;
  x: PDenseMatrix_Double; b: PDenseMatrix_Double;
  ApplyOperator: TAccelerateApplyOperator;
  Preconditioner: PSparseOpaquePreconditioner_Double): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + '_SparseGMRESSolve_Double';
procedure _SparseLSMRIterate_Double(options: PSparseLSMROptions;
  iteration: Integer; state: MarshaledAString; converged: PInteger;
  x: PDenseMatrix_Double; b: PDenseMatrix_Double; r: PDenseMatrix_Double;
  Preconditioner: PSparseOpaquePreconditioner_Double;
  ApplyOperator: TAccelerateApplyOperator); cdecl;
  external libAccelerate name _PU + '_SparseLSMRIterate_Double';
function _SparseLSMRSolve_Double(options: PSparseLSMROptions;
  x: PDenseMatrix_Double; b: PDenseMatrix_Double;
  ApplyOperator: TAccelerateApplyOperator;
  Preconditioner: PSparseOpaquePreconditioner_Double): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + '_SparseLSMRSolve_Double';
function _SparseCreatePreconditioner_Double(&type: SparsePreconditioner_t;
  a: PSparseMatrix_Double): SparseOpaquePreconditioner_Double; cdecl;
  external libAccelerate name _PU + '_SparseCreatePreconditioner_Double';
procedure _SparseReleaseOpaquePreconditioner_Double
  (toFree: PSparseOpaquePreconditioner_Double); cdecl;
  external libAccelerate name _PU + '_SparseReleaseOpaquePreconditioner_Double';
procedure _SparseSpMV_Double(alpha: Double; a: SparseMatrix_Double;
  x: DenseMatrix_Double; accumulate: Integer; y: DenseMatrix_Double); cdecl;
  external libAccelerate name _PU + '_SparseSpMV_Double';
function _DenseMatrixFromVector_Double(x: DenseVector_Double)
  : DenseMatrix_Double; cdecl;
  external libAccelerate name _PU + '_DenseMatrixFromVector_Double';
function _SparseInvalidSubfactor_Double: SparseOpaqueSubfactor_Double; cdecl;
  external libAccelerate name _PU + '_SparseInvalidSubfactor_Double';
function _SparseFailedFactor_Double(status: SparseStatus_t)
  : SparseOpaqueFactorization_Double; cdecl;
  external libAccelerate name _PU + '_SparseFailedFactor_Double';
procedure _SparseSubFactorGetDimn_Double(Subfactor
  : SparseOpaqueSubfactor_Double; m: PInteger; n: PInteger); cdecl;
  external libAccelerate name _PU + '_SparseSubFactorGetDimn_Double';
function _SparseConvertFromCoordinate_Float(m: Integer; n: Integer;
  nBlock: LongInt; blockSize: Byte; attributes: SparseAttributes_t;
  row: PInteger; col: PInteger; val: PSingle; storage: MarshaledAString;
  workspace: PInteger): SparseMatrix_Float; cdecl;
  external libAccelerate name _PU + '_SparseConvertFromCoordinate_Float';
function _SparseConvertFromOpaque_Float(matrix: sparse_matrix_float)
  : SparseMatrix_Float; cdecl;
  external libAccelerate name _PU + '_SparseConvertFromOpaque_Float';
function _SparseNumericFactorSymmetric_Float(SymbolicFactor
  : PSparseOpaqueSymbolicFactorization; matrix: PSparseMatrix_Float;
  options: PSparseNumericFactorOptions; factorStorage: Pointer;
  workspace: Pointer): SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + '_SparseNumericFactorSymmetric_Float';
function _SparseNumericFactorQR_Float(SymbolicFactor
  : PSparseOpaqueSymbolicFactorization; matrix: PSparseMatrix_Float;
  options: PSparseNumericFactorOptions; factorStorage: Pointer;
  workspace: Pointer): SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + '_SparseNumericFactorQR_Float';
function _SparseFactorSymmetric_Float(factorType: SparseFactorization_t;
  matrix: PSparseMatrix_Float; sfoptions: PSparseSymbolicFactorOptions;
  nfoptions: PSparseNumericFactorOptions): SparseOpaqueFactorization_Float;
  cdecl; external libAccelerate name _PU + '_SparseFactorSymmetric_Float';
function _SparseFactorQR_Float(factorType: SparseFactorization_t;
  matrix: PSparseMatrix_Float; sfoptions: PSparseSymbolicFactorOptions;
  nfoptions: PSparseNumericFactorOptions): SparseOpaqueFactorization_Float;
  cdecl; external libAccelerate name _PU + '_SparseFactorQR_Float';
procedure _SparseRefactorSymmetric_Float(matrix: PSparseMatrix_Float;
  factorization: PSparseOpaqueFactorization_Float;
  nfoptions: PSparseNumericFactorOptions; workspace: Pointer); cdecl;
  external libAccelerate name _PU + '_SparseRefactorSymmetric_Float';
procedure _SparseRefactorQR_Float(matrix: PSparseMatrix_Float;
  factorization: PSparseOpaqueFactorization_Float;
  nfoptions: PSparseNumericFactorOptions; workspace: Pointer); cdecl;
  external libAccelerate name _PU + '_SparseRefactorQR_Float';
procedure _SparseMultiplySubfactor_Float(Subfactor
  : PSparseOpaqueSubfactor_Float; x: PDenseMatrix_Float; y: PDenseMatrix_Float;
  workspace: MarshaledAString); cdecl;
  external libAccelerate name _PU + '_SparseMultiplySubfactor_Float';
procedure _SparseSolveSubfactor_Float(Subfactor: PSparseOpaqueSubfactor_Float;
  b: PDenseMatrix_Float; x: PDenseMatrix_Float; workspace: MarshaledAString);
  cdecl; external libAccelerate name _PU + '_SparseSolveSubfactor_Float';
procedure _SparseSolveOpaque_Float(Factored: PSparseOpaqueFactorization_Float;
  RHS: PDenseMatrix_Float; Soln: PDenseMatrix_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + '_SparseSolveOpaque_Float';
procedure _SparseDestroyOpaqueNumeric_Float
  (toFree: PSparseOpaqueFactorization_Float); cdecl;
  external libAccelerate name _PU + '_SparseDestroyOpaqueNumeric_Float';
procedure _SparseRetainNumeric_Float(NumericFactor
  : PSparseOpaqueFactorization_Float); cdecl;
  external libAccelerate name _PU + '_SparseRetainNumeric_Float';
function _SparseGetOptionsFromNumericFactor_Float
  (factor: PSparseOpaqueFactorization_Float): SparseNumericFactorOptions; cdecl;
  external libAccelerate name _PU + '_SparseGetOptionsFromNumericFactor_Float';
procedure _SparseGetWorkspaceRequired_Float(Subfactor: SparseSubfactor_t;
  factor: SparseOpaqueFactorization_Float; workStatic: PLongWord;
  workPerRHS: PLongWord); cdecl;
  external libAccelerate name _PU + '_SparseGetWorkspaceRequired_Float';
function _SparseGetIterativeStateSize_Float(method: PSparseIterativeMethod;
  Preconditioner: Integer; m: Integer; n: Integer; nrhs: Integer): LongWord;
  cdecl; external libAccelerate name _PU + '_SparseGetIterativeStateSize_Float';
procedure _SparseCGIterate_Float(options: PSparseCGOptions; iteration: Integer;
  state: MarshaledAString; converged: PInteger; x: PDenseMatrix_Float;
  b: PDenseMatrix_Float; r: PDenseMatrix_Float;
  Preconditioner: PSparseOpaquePreconditioner_Float;
  ApplyOperator: TAccelerateApplyOperator1); cdecl;
  external libAccelerate name _PU + '_SparseCGIterate_Float';
function _SparseCGSolve_Float(options: PSparseCGOptions; x: PDenseMatrix_Float;
  b: PDenseMatrix_Float; ApplyOperator: TAccelerateApplyOperator1;
  Preconditioner: PSparseOpaquePreconditioner_Float): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + '_SparseCGSolve_Float';
procedure _SparseGMRESIterate_Float(options: PSparseGMRESOptions;
  iteration: Integer; state: MarshaledAString; converged: PInteger;
  x: PDenseMatrix_Float; b: PDenseMatrix_Float; r: PDenseMatrix_Float;
  Preconditioner: PSparseOpaquePreconditioner_Float;
  ApplyOperator: TAccelerateApplyOperator1); cdecl;
  external libAccelerate name _PU + '_SparseGMRESIterate_Float';
function _SparseGMRESSolve_Float(options: PSparseGMRESOptions;
  x: PDenseMatrix_Float; b: PDenseMatrix_Float;
  ApplyOperator: TAccelerateApplyOperator1;
  Preconditioner: PSparseOpaquePreconditioner_Float): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + '_SparseGMRESSolve_Float';
procedure _SparseLSMRIterate_Float(options: PSparseLSMROptions;
  iteration: Integer; state: MarshaledAString; converged: PInteger;
  x: PDenseMatrix_Float; b: PDenseMatrix_Float; r: PDenseMatrix_Float;
  Preconditioner: PSparseOpaquePreconditioner_Float;
  ApplyOperator: TAccelerateApplyOperator1); cdecl;
  external libAccelerate name _PU + '_SparseLSMRIterate_Float';
function _SparseLSMRSolve_Float(options: PSparseLSMROptions;
  x: PDenseMatrix_Float; b: PDenseMatrix_Float;
  ApplyOperator: TAccelerateApplyOperator1;
  Preconditioner: PSparseOpaquePreconditioner_Float): SparseIterativeStatus_t;
  cdecl; external libAccelerate name _PU + '_SparseLSMRSolve_Float';
function _SparseCreatePreconditioner_Float(&type: SparsePreconditioner_t;
  a: PSparseMatrix_Float): SparseOpaquePreconditioner_Float; cdecl;
  external libAccelerate name _PU + '_SparseCreatePreconditioner_Float';
procedure _SparseReleaseOpaquePreconditioner_Float
  (toFree: PSparseOpaquePreconditioner_Float); cdecl;
  external libAccelerate name _PU + '_SparseReleaseOpaquePreconditioner_Float';
procedure _SparseSpMV_Float(alpha: Single; a: SparseMatrix_Float;
  x: DenseMatrix_Float; accumulate: Integer; y: DenseMatrix_Float); cdecl;
  external libAccelerate name _PU + '_SparseSpMV_Float';
function _DenseMatrixFromVector_Float(x: DenseVector_Float): DenseMatrix_Float;
  cdecl; external libAccelerate name _PU + '_DenseMatrixFromVector_Float';
function _SparseInvalidSubfactor_Float: SparseOpaqueSubfactor_Float; cdecl;
  external libAccelerate name _PU + '_SparseInvalidSubfactor_Float';
function _SparseFailedFactor_Float(status: SparseStatus_t)
  : SparseOpaqueFactorization_Float; cdecl;
  external libAccelerate name _PU + '_SparseFailedFactor_Float';
procedure _SparseSubFactorGetDimn_Float(Subfactor: SparseOpaqueSubfactor_Float;
  m: PInteger; n: PInteger); cdecl;
  external libAccelerate name _PU + '_SparseSubFactorGetDimn_Float';
procedure SparseSolve(Subfactor: SparseOpaqueSubfactor_Float;
  XB: DenseVector_Float; workspace: Pointer); cdecl;
  external libAccelerate name _PU + 'SparseSolve';
function quadrature_integrate(__F: Pquadrature_integrate_function; __A: Double;
  __B: Double; options: Pquadrature_integrate_options;
  status: Pquadrature_status; abs_error: PDouble; workspace_size: LongWord;
  workspace: Pointer): Double; cdecl;
  external libAccelerate name _PU + 'quadrature_integrate';
function BNNSFilterCreateLayerConvolution(layer_params
  : PBNNSLayerParametersConvolution; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerConvolution';
function BNNSFilterCreateLayerTransposedConvolution(layer_params
  : PBNNSLayerParametersConvolution; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerTransposedConvolution';
function BNNSFilterCreateLayerFullyConnected(layer_params
  : PBNNSLayerParametersFullyConnected; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerFullyConnected';
function BNNSFilterCreateLayerPooling(layer_params: PBNNSLayerParametersPooling;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerPooling';
function BNNSFilterCreateLayerActivation(layer_params
  : PBNNSLayerParametersActivation; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerActivation';
function BNNSFilterCreateLayerLoss(layer_params: Pointer;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerLoss';
function BNNSFilterCreateLayerNormalization(normType: BNNSFilterType;
  layer_params: PBNNSLayerParametersNormalization;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerNormalization';
function BNNSFilterCreateLayerArithmetic(layer_params
  : PBNNSLayerParametersArithmetic; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerArithmetic';
function BNNSFilterCreateLayerPermute(layer_params: PBNNSLayerParametersPermute;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerPermute';
function BNNSFilterCreateLayerDropout(layer_params: PBNNSLayerParametersDropout;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerDropout';
function BNNSFilterCreateLayerPadding(layer_params: PBNNSLayerParametersPadding;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerPadding';
function BNNSFilterCreateLayerBroadcastMatMul(layer_params
  : PBNNSLayerParametersBroadcastMatMul; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerBroadcastMatMul';
function BNNSFilterCreateLayerTensorContraction(layer_params
  : PBNNSLayerParametersTensorContraction; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerTensorContraction';
function BNNSFilterCreateLayerGram(layer_params: PBNNSLayerParametersGram;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerGram';
function BNNSFilterCreateLayerResize(layer_params: PBNNSLayerParametersResize;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerResize';
function BNNSFilterCreateLayerMultiheadAttention(layer_params
  : PBNNSLayerParametersMultiheadAttention;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateLayerMultiheadAttention';
function BNNSFilterCreateLayerReduction(layer_params
  : PBNNSLayerParametersReduction; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerReduction';
function BNNSFilterCreateFusedLayer(number_of_fused_filters: LongWord;
  filter_type: PBNNSFilterType; layer_params: Pointer;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateFusedLayer';
function BNNSFilterCreateLayerEmbedding(layer_params
  : PBNNSLayerParametersEmbedding; filter_params: PBNNSFilterParameters)
  : BNNSFilter; cdecl; external libAccelerate name _PU +
  'BNNSFilterCreateLayerEmbedding';
function BNNSFilterApply(filter: BNNSFilter; &in: Pointer; out : Pointer)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSFilterApply';
function BNNSFilterApplyBatch(filter: BNNSFilter; batch_size: LongWord;
  &in: Pointer; in_stride: LongWord; out : Pointer; out_stride: LongWord)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSFilterApplyBatch';
function BNNSPoolingFilterApplyBatch(filter: BNNSFilter; batch_size: LongWord;
  &in: Pointer; in_stride: LongWord; out : Pointer; out_stride: LongWord;
  indices: PLongWord; idx_stride: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSPoolingFilterApplyBatch';
function BNNSPoolingFilterApplyBatchEx(filter: BNNSFilter; batch_size: LongWord;
  &in: Pointer; in_stride: LongWord; out : Pointer; out_stride: LongWord;
  indices_data_type: BNNSDataType; indices: Pointer; idx_stride: LongWord)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSPoolingFilterApplyBatchEx';
function BNNSFilterApplyTwoInput(filter: BNNSFilter; inA: Pointer; inB: Pointer;
  out : Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSFilterApplyTwoInput';
function BNNSFilterApplyTwoInputBatch(filter: BNNSFilter; batch_size: LongWord;
  inA: Pointer; inA_stride: LongWord; inB: Pointer; inB_stride: LongWord;
  out : Pointer; out_stride: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSFilterApplyTwoInputBatch';
function BNNSNormalizationFilterApplyBatch(filter: BNNSFilter;
  batch_size: LongWord; &in: Pointer; in_stride: LongWord; out : Pointer;
  out_stride: LongWord; training: Integer): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSNormalizationFilterApplyBatch';
function BNNSFusedFilterApplyBatch(filter: BNNSFilter; batch_size: LongWord;
  &in: Pointer; in_stride: LongWord; out : Pointer; out_stride: LongWord;
  training: Integer): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSFusedFilterApplyBatch';
function BNNSFusedFilterApplyMultiInputBatch(filter: BNNSFilter;
  batch_size: LongWord; number_of_inputs: LongWord; &in: Pointer;
  in_stride: PLongWord; out : Pointer; out_stride: LongWord; training: Integer)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSFusedFilterApplyMultiInputBatch';
function BNNSArithmeticFilterApplyBatch(filter: BNNSFilter;
  batch_size: LongWord; number_of_inputs: LongWord; &in: Pointer;
  in_stride: PLongWord; out : Pointer; out_stride: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSArithmeticFilterApplyBatch';
function BNNSApplyMultiheadAttention(F: BNNSFilter; batch_size: LongWord;
  query: Pointer; query_stride: LongWord; key: Pointer; key_stride: LongWord;
  key_mask: PBNNSNDArrayDescriptor; key_mask_stride: LongWord; value: Pointer;
  value_stride: LongWord; output: Pointer; output_stride: LongWord;
  add_to_attention: PBNNSNDArrayDescriptor; backprop_cache_size: PLongWord;
  backprop_cache: Pointer; workspace_size: PLongWord; workspace: Pointer)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSApplyMultiheadAttention';
function BNNSDirectApplyQuantizer(layer_params
  : PBNNSLayerParametersQuantization; filter_params: PBNNSFilterParameters;
  batch_size: LongWord; input_stride: LongWord; output_stride: LongWord)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSDirectApplyQuantizer';
procedure BNNSFilterDestroy(filter: BNNSFilter); cdecl;
  external libAccelerate name _PU + 'BNNSFilterDestroy';
function BNNSOptimizerStep(&function: BNNSOptimizerFunction;
  OptimizerAlgFields: Pointer; number_of_parameters: LongWord;
  parameters: PBNNSNDArrayDescriptor; gradients: PBNNSNDArrayDescriptor;
  accumulators: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSOptimizerStep';
function BNNSClipByValue(dest: PBNNSNDArrayDescriptor;
  src: PBNNSNDArrayDescriptor; min_val: Single; max_val: Single): Integer;
  cdecl; external libAccelerate name _PU + 'BNNSClipByValue';
function BNNSClipByNorm(dest: PBNNSNDArrayDescriptor;
  src: PBNNSNDArrayDescriptor; max_norm: Single; axis_flags: LongWord): Integer;
  cdecl; external libAccelerate name _PU + 'BNNSClipByNorm';
function BNNSClipByGlobalNorm(dest: PBNNSNDArrayDescriptor;
  src: PBNNSNDArrayDescriptor; count: LongWord; max_norm: Single;
  use_norm: Single): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSClipByGlobalNorm';
function BNNSComputeNorm(dest: PBNNSNDArrayDescriptor;
  src: PBNNSNDArrayDescriptor; norm_type: BNNSNormType; axis_flags: LongWord)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSComputeNorm';
function BNNSComputeNormBackward(&in: Pointer; in_delta: PBNNSNDArrayDescriptor;
  out : Pointer; out_delta: PBNNSNDArrayDescriptor; norm_type: BNNSNormType;
  axis_flags: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSComputeNormBackward';
function BNNSFilterApplyBackwardBatch(filter: BNNSFilter; batch_size: LongWord;
  &in: Pointer; in_stride: LongWord; in_delta: PBNNSNDArrayDescriptor;
  in_delta_stride: LongWord; out : Pointer; out_stride: LongWord;
  out_delta: PBNNSNDArrayDescriptor; out_delta_stride: LongWord;
  weights_delta: PBNNSNDArrayDescriptor; bias_delta: PBNNSNDArrayDescriptor)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSFilterApplyBackwardBatch';
function BNNSPoolingFilterApplyBackwardBatch(filter: BNNSFilter;
  batch_size: LongWord; &in: Pointer; in_stride: LongWord;
  in_delta: PBNNSNDArrayDescriptor; in_delta_stride: LongWord; out : Pointer;
  out_stride: LongWord; out_delta: PBNNSNDArrayDescriptor;
  out_delta_stride: LongWord; bias_delta: PBNNSNDArrayDescriptor;
  indices: PLongWord; idx_stride: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSPoolingFilterApplyBackwardBatch';
function BNNSPoolingFilterApplyBackwardBatchEx(filter: BNNSFilter;
  batch_size: LongWord; &in: Pointer; in_stride: LongWord;
  in_delta: PBNNSNDArrayDescriptor; in_delta_stride: LongWord; out : Pointer;
  out_stride: LongWord; out_delta: PBNNSNDArrayDescriptor;
  out_delta_stride: LongWord; bias_delta: PBNNSNDArrayDescriptor;
  indices_data_type: BNNSDataType; indices: Pointer; idx_stride: LongWord)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSPoolingFilterApplyBackwardBatchEx';
function BNNSFilterApplyBackwardTwoInputBatch(filter: BNNSFilter;
  batch_size: LongWord; inA: Pointer; inA_stride: LongWord;
  inA_delta: PBNNSNDArrayDescriptor; inA_delta_stride: LongWord; inB: Pointer;
  inB_stride: LongWord; inB_delta: PBNNSNDArrayDescriptor;
  inB_delta_stride: LongWord; out : Pointer; out_stride: LongWord;
  out_delta: PBNNSNDArrayDescriptor; out_delta_stride: LongWord;
  weights_delta: PBNNSNDArrayDescriptor; bias_delta: PBNNSNDArrayDescriptor)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSFilterApplyBackwardTwoInputBatch';
function BNNSNormalizationFilterApplyBackwardBatch(filter: BNNSFilter;
  batch_size: LongWord; in_delta: PBNNSNDArrayDescriptor;
  in_delta_stride: LongWord; out : Pointer; out_stride: LongWord;
  out_delta: PBNNSNDArrayDescriptor; out_delta_stride: LongWord;
  beta_delta: PBNNSNDArrayDescriptor; gamma_delta: PBNNSNDArrayDescriptor)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSNormalizationFilterApplyBackwardBatch';
function BNNSFusedFilterApplyBackwardBatch(filter: BNNSFilter;
  batch_size: LongWord; &in: Pointer; in_stride: LongWord;
  in_delta: PBNNSNDArrayDescriptor; in_delta_stride: LongWord; out : Pointer;
  out_stride: LongWord; out_delta: PBNNSNDArrayDescriptor;
  out_delta_stride: LongWord; delta_parameters: PBNNSNDArrayDescriptor)
  : Integer; cdecl; external libAccelerate name _PU +
  'BNNSFusedFilterApplyBackwardBatch';
function BNNSFusedFilterApplyBackwardMultiInputBatch(filter: BNNSFilter;
  batch_size: LongWord; number_of_inputs: LongWord; &in: Pointer;
  in_stride: PLongWord; in_delta: PBNNSNDArrayDescriptor;
  in_delta_stride: PLongWord; out : Pointer; out_stride: LongWord;
  out_delta: PBNNSNDArrayDescriptor; out_delta_stride: LongWord;
  delta_parameters: PBNNSNDArrayDescriptor): Integer; cdecl;
  external libAccelerate name _PU +
  'BNNSFusedFilterApplyBackwardMultiInputBatch';
function BNNSArithmeticFilterApplyBackwardBatch(filter: BNNSFilter;
  batch_size: LongWord; number_of_inputs: LongWord; &in: Pointer;
  in_stride: PLongWord; in_delta: PBNNSNDArrayDescriptor;
  in_delta_stride: PLongWord; out : Pointer; out_stride: LongWord;
  out_delta: PBNNSNDArrayDescriptor; out_delta_stride: LongWord): Integer;
  cdecl; external libAccelerate name _PU +
  'BNNSArithmeticFilterApplyBackwardBatch';
function BNNSPermuteFilterApplyBackwardBatch(filter: BNNSFilter;
  batch_size: LongWord; in_delta: PBNNSNDArrayDescriptor;
  in_delta_stride: LongWord; out_delta: PBNNSNDArrayDescriptor;
  out_delta_stride: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSPermuteFilterApplyBackwardBatch';
function BNNSLossFilterApplyBatch(filter: BNNSFilter; batch_size: LongWord;
  &in: Pointer; in_stride: LongWord; labels: Pointer; labels_stride: LongWord;
  weights: Pointer; weights_size: LongWord; out : Pointer;
  in_delta: PBNNSNDArrayDescriptor; in_delta_stride: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSLossFilterApplyBatch';
function BNNSLossFilterApplyBackwardBatch(filter: BNNSFilter;
  batch_size: LongWord; &in: Pointer; in_stride: LongWord;
  in_delta: PBNNSNDArrayDescriptor; in_delta_stride: LongWord; labels: Pointer;
  labels_stride: LongWord; weights: Pointer; weights_size: LongWord;
  out_delta: PBNNSNDArrayDescriptor; out_delta_stride: LongWord): Integer;
  cdecl; external libAccelerate name _PU + 'BNNSLossFilterApplyBackwardBatch';
function BNNSApplyMultiheadAttentionBackward(F: BNNSFilter;
  batch_size: LongWord; query: Pointer; query_stride: LongWord;
  query_param_delta: PBNNSMHAProjectionParameters; key: Pointer;
  key_stride: LongWord; key_mask: PBNNSNDArrayDescriptor;
  key_mask_stride: LongWord; key_param_delta: PBNNSMHAProjectionParameters;
  value: Pointer; value_stride: LongWord;
  value_param_delta: PBNNSMHAProjectionParameters;
  add_to_attention: PBNNSNDArrayDescriptor;
  key_attn_bias_delta: PBNNSNDArrayDescriptor;
  value_attn_bias_delta: PBNNSNDArrayDescriptor; output: Pointer;
  output_stride: LongWord; output_param_delta: PBNNSMHAProjectionParameters;
  backprop_cache_size: LongWord; backprop_cache: Pointer;
  workspace_size: PLongWord; workspace: Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSApplyMultiheadAttentionBackward';
function BNNSComputeLSTMTrainingCacheCapacity(layer_params
  : PBNNSLayerParametersLSTM): LongWord; cdecl;
  external libAccelerate name _PU + 'BNNSComputeLSTMTrainingCacheCapacity';
function BNNSDirectApplyLSTMBatchTrainingCaching(layer_params
  : PBNNSLayerParametersLSTM; filter_params: PBNNSFilterParameters;
  training_cache_ptr: Pointer; training_cache_capacity: LongWord): Integer;
  cdecl; external libAccelerate name _PU +
  'BNNSDirectApplyLSTMBatchTrainingCaching';
function BNNSDirectApplyActivationBatch(layer_params
  : PBNNSLayerParametersActivation; filter_params: PBNNSFilterParameters;
  batch_size: LongWord; in_stride: LongWord; out_stride: LongWord): Integer;
  cdecl; external libAccelerate name _PU + 'BNNSDirectApplyActivationBatch';
function BNNSCopy(dest: PBNNSNDArrayDescriptor; src: PBNNSNDArrayDescriptor;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSCopy';
function BNNSMatMulWorkspaceSize(transA: Integer; transB: Integer;
  alpha: Single; inputA: PBNNSNDArrayDescriptor; inputB: PBNNSNDArrayDescriptor;
  output: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSMatMulWorkspaceSize';
function BNNSMatMul(transA: Integer; transB: Integer; alpha: Single;
  inputA: PBNNSNDArrayDescriptor; inputB: PBNNSNDArrayDescriptor;
  output: PBNNSNDArrayDescriptor; workspace: Pointer;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSMatMul';
procedure BNNSDirectApplyBroadcastMatMul(transA: Integer; transB: Integer;
  alpha: Single; inputA: PBNNSNDArrayDescriptor; inputB: PBNNSNDArrayDescriptor;
  output: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters); cdecl;
  external libAccelerate name _PU + 'BNNSDirectApplyBroadcastMatMul';
function BNNSTranspose(dest: PBNNSNDArrayDescriptor;
  src: PBNNSNDArrayDescriptor; axis0: LongWord; axis1: LongWord;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSTranspose';
function BNNSDirectApplyReduction(layer_params: PBNNSLayerParametersReduction;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSDirectApplyReduction';
function BNNSCompareTensor(in0: PBNNSNDArrayDescriptor;
  in1: PBNNSNDArrayDescriptor; op: BNNSRelationalOperator;
  out : PBNNSNDArrayDescriptor): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSCompareTensor';
function BNNSTile(input: PBNNSNDArrayDescriptor; output: PBNNSNDArrayDescriptor;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSTile';
function BNNSDirectApplyTopK(k: LongWord; axis: LongWord; batch_size: LongWord;
  input: PBNNSNDArrayDescriptor; input_batch_stride: LongWord;
  best_values: PBNNSNDArrayDescriptor; best_values_batch_stride: LongWord;
  best_indices: PBNNSNDArrayDescriptor; best_indices_batch_stride: LongWord;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSDirectApplyTopK';
function BNNSDirectApplyInTopK(k: LongWord; axis: LongWord;
  batch_size: LongWord; input: PBNNSNDArrayDescriptor;
  input_batch_stride: LongWord; test_indices: PBNNSNDArrayDescriptor;
  test_indices_batch_stride: LongWord; output: PBNNSNDArrayDescriptor;
  output_batch_stride: LongWord; filter_params: PBNNSFilterParameters): Integer;
  cdecl; external libAccelerate name _PU + 'BNNSDirectApplyInTopK';
function BNNSGather(axis: LongWord; input: PBNNSNDArrayDescriptor;
  indices: PBNNSNDArrayDescriptor; output: PBNNSNDArrayDescriptor;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSGather';
function BNNSScatter(axis: LongWord; op: BNNSReduceFunction;
  input: PBNNSNDArrayDescriptor; indices: PBNNSNDArrayDescriptor;
  output: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSScatter';
function BNNSGatherND(input: PBNNSNDArrayDescriptor;
  indices: PBNNSNDArrayDescriptor; output: PBNNSNDArrayDescriptor;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSGatherND';
function BNNSScatterND(op: BNNSReduceFunction; input: PBNNSNDArrayDescriptor;
  indices: PBNNSNDArrayDescriptor; output: PBNNSNDArrayDescriptor;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSScatterND';
function BNNSShuffle(&type: BNNSShuffleType; input: PBNNSNDArrayDescriptor;
  output: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSShuffle';
function BNNSBandPart(num_lower: Integer; num_upper: Integer;
  input: PBNNSNDArrayDescriptor; output: PBNNSNDArrayDescriptor;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSBandPart';
function BNNSCropResize(layer_params: PBNNSLayerParametersCropResize;
  input: PBNNSNDArrayDescriptor; roi: PBNNSNDArrayDescriptor;
  output: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSCropResize';
function BNNSDirectApplyLSTMBatchBackward(layer_params
  : PBNNSLayerParametersLSTM; layer_delta_params: PBNNSLayerParametersLSTM;
  filter_params: PBNNSFilterParameters; training_cache_ptr: Pointer;
  training_cache_capacity: LongWord): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSDirectApplyLSTMBatchBackward';
function BNNSTileBackward(in_delta: PBNNSNDArrayDescriptor;
  out_delta: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSTileBackward';
function BNNSCropResizeBackward(layer_params: PBNNSLayerParametersCropResize;
  in_delta: PBNNSNDArrayDescriptor; roi: PBNNSNDArrayDescriptor;
  out_delta: PBNNSNDArrayDescriptor; filter_params: PBNNSFilterParameters)
  : Integer; cdecl; external libAccelerate name _PU + 'BNNSCropResizeBackward';
function BNNSGetPointer(filter: BNNSFilter; target: BNNSPointerSpecifier)
  : BNNSNDArrayDescriptor; cdecl;
  external libAccelerate name _PU + 'BNNSGetPointer';
function BNNSNDArrayGetDataSize(&array: PBNNSNDArrayDescriptor): LongWord;
  cdecl; external libAccelerate name _PU + 'BNNSNDArrayGetDataSize';
function BNNSNDArrayFullyConnectedSparsifySparseCOO(in_dense_shape
  : PBNNSNDArrayDescriptor; in_indices: PBNNSNDArrayDescriptor;
  in_values: PBNNSNDArrayDescriptor; out : PBNNSNDArrayDescriptor;
  sparse_params: PBNNSSparsityParameters; batch_size: LongWord;
  workspace: Pointer; workspace_size: LongWord;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU +
  'BNNSNDArrayFullyConnectedSparsifySparseCOO';
function BNNSNDArrayFullyConnectedSparsifySparseCSR(in_dense_shape
  : PBNNSNDArrayDescriptor; in_column_indices: PBNNSNDArrayDescriptor;
  in_row_starts: PBNNSNDArrayDescriptor; in_values: PBNNSNDArrayDescriptor;
  out : PBNNSNDArrayDescriptor; sparse_params: PBNNSSparsityParameters;
  batch_size: LongWord; workspace: Pointer; workspace_size: LongWord;
  filter_params: PBNNSFilterParameters): Integer; cdecl;
  external libAccelerate name _PU +
  'BNNSNDArrayFullyConnectedSparsifySparseCSR';
function BNNSCreateRandomGenerator(method: BNNSRandomGeneratorMethod;
  filter_params: PBNNSFilterParameters): BNNSRandomGenerator; cdecl;
  external libAccelerate name _PU + 'BNNSCreateRandomGenerator';
function BNNSCreateRandomGeneratorWithSeed(method: BNNSRandomGeneratorMethod;
  seed: UInt64; filter_params: PBNNSFilterParameters): BNNSRandomGenerator;
  cdecl; external libAccelerate name _PU + 'BNNSCreateRandomGeneratorWithSeed';
procedure BNNSDestroyRandomGenerator(generator: BNNSRandomGenerator); cdecl;
  external libAccelerate name _PU + 'BNNSDestroyRandomGenerator';
function BNNSRandomGeneratorStateSize(generator: BNNSRandomGenerator): LongWord;
  cdecl; external libAccelerate name _PU + 'BNNSRandomGeneratorStateSize';
function BNNSRandomGeneratorGetState(generator: BNNSRandomGenerator;
  state_size: LongWord; state: Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSRandomGeneratorGetState';
function BNNSRandomGeneratorSetState(generator: BNNSRandomGenerator;
  state_size: LongWord; state: Pointer): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSRandomGeneratorSetState';
function BNNSRandomFillUniformFloat(generator: BNNSRandomGenerator;
  desc: PBNNSNDArrayDescriptor; a: Single; b: Single): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSRandomFillUniformFloat';
function BNNSRandomFillUniformInt(generator: BNNSRandomGenerator;
  desc: PBNNSNDArrayDescriptor; a: Int64; b: Int64): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSRandomFillUniformInt';
function BNNSRandomFillNormalFloat(generator: BNNSRandomGenerator;
  desc: PBNNSNDArrayDescriptor; mean: Single; stddev: Single): Integer; cdecl;
  external libAccelerate name _PU + 'BNNSRandomFillNormalFloat';
function BNNSFilterCreateConvolutionLayer(in_desc: PBNNSImageStackDescriptor;
  out_desc: PBNNSImageStackDescriptor;
  layer_params: PBNNSConvolutionLayerParameters;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateConvolutionLayer';
function BNNSFilterCreateFullyConnectedLayer(in_desc: PBNNSVectorDescriptor;
  out_desc: PBNNSVectorDescriptor;
  layer_params: PBNNSFullyConnectedLayerParameters;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateFullyConnectedLayer';
function BNNSFilterCreatePoolingLayer(in_desc: PBNNSImageStackDescriptor;
  out_desc: PBNNSImageStackDescriptor;
  layer_params: PBNNSPoolingLayerParameters;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreatePoolingLayer';
function BNNSFilterCreateVectorActivationLayer(in_desc: PBNNSVectorDescriptor;
  out_desc: PBNNSVectorDescriptor; activation: PBNNSActivation;
  filter_params: PBNNSFilterParameters): BNNSFilter; cdecl;
  external libAccelerate name _PU + 'BNNSFilterCreateVectorActivationLayer';
procedure vvrecf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvrecf';
procedure vvrec(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvrec';
procedure vvdivf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvdivf';
procedure vvdiv(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvdiv';
procedure vvsqrtf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsqrtf';
procedure vvsqrt(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsqrt';
procedure vvcbrtf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcbrtf';
procedure vvcbrt(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcbrt';
procedure vvrsqrtf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvrsqrtf';
procedure vvrsqrt(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvrsqrt';
procedure vvexpf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvexpf';
procedure vvexp(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvexp';
procedure vvexp2f(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvexp2f';
procedure vvexp2(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvexp2';
procedure vvexpm1f(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvexpm1f';
procedure vvexpm1(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvexpm1';
procedure vvlogf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlogf';
procedure vvlog(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlog';
procedure vvlog10f(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlog10f';
procedure vvlog10(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlog10';
procedure vvlog1pf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlog1pf';
procedure vvlog1p(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlog1p';
procedure vvlog2f(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlog2f';
procedure vvlog2(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlog2';
procedure vvlogbf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlogbf';
procedure vvlogb(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvlogb';
procedure vvfabsf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvfabsf';
procedure vvfabs(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvfabs';
procedure vvpowf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvpowf';
procedure vvpow(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvpow';
procedure vvpowsf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvpowsf';
procedure vvpows(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvpows';
procedure vvsinf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsinf';
procedure vvsin(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsin';
procedure vvcosf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcosf';
procedure vvcos(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcos';
procedure vvtanf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvtanf';
procedure vvtan(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvtan';
procedure vvasinf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvasinf';
procedure vvasin(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvasin';
procedure vvacosf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvacosf';
procedure vvacos(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvacos';
procedure vvatanf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvatanf';
procedure vvatan(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvatan';
procedure vvatan2f(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvatan2f';
procedure vvatan2(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvatan2';
procedure vvsincosf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvsincosf';
procedure vvsincos(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvsincos';
procedure vvcosisinf(param1: P__float_complex_t; param2: PSingle;
  param3: PInteger); cdecl; external libAccelerate name _PU + 'vvcosisinf';
procedure vvcosisin(param1: P__double_complex_t; param2: PDouble;
  param3: PInteger); cdecl; external libAccelerate name _PU + 'vvcosisin';
procedure vvsinhf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsinhf';
procedure vvsinh(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsinh';
procedure vvcoshf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcoshf';
procedure vvcosh(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcosh';
procedure vvtanhf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvtanhf';
procedure vvtanh(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvtanh';
procedure vvasinhf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvasinhf';
procedure vvasinh(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvasinh';
procedure vvacoshf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvacoshf';
procedure vvacosh(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvacosh';
procedure vvatanhf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvatanhf';
procedure vvatanh(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvatanh';
procedure vvintf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvintf';
procedure vvint(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvint';
procedure vvnintf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvnintf';
procedure vvnint(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvnint';
procedure vvceilf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvceilf';
procedure vvceil(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvceil';
procedure vvfloorf(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvfloorf';
procedure vvfloor(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvfloor';
procedure vvfmodf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvfmodf';
procedure vvfmod(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvfmod';
procedure vvremainderf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvremainderf';
procedure vvremainder(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvremainder';
procedure vvcopysignf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvcopysignf';
procedure vvcopysign(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvcopysign';
procedure vvnextafterf(param1: PSingle; param2: PSingle; param3: PSingle;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvnextafterf';
procedure vvnextafter(param1: PDouble; param2: PDouble; param3: PDouble;
  param4: PInteger); cdecl; external libAccelerate name _PU + 'vvnextafter';
procedure vvsinpif(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsinpif';
procedure vvsinpi(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvsinpi';
procedure vvcospif(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcospif';
procedure vvcospi(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvcospi';
procedure vvtanpif(param1: PSingle; param2: PSingle; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvtanpif';
procedure vvtanpi(param1: PDouble; param2: PDouble; param3: PInteger); cdecl;
  external libAccelerate name _PU + 'vvtanpi';
function vImageAlphaBlend_Planar8(srcTop: PvImage_Buffer;
  srcTopAlpha: PvImage_Buffer; srcBottom: PvImage_Buffer;
  srcBottomAlpha: PvImage_Buffer; alpha: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAlphaBlend_Planar8';
function vImageAlphaBlend_PlanarF(srcTop: PvImage_Buffer;
  srcTopAlpha: PvImage_Buffer; srcBottom: PvImage_Buffer;
  srcBottomAlpha: PvImage_Buffer; alpha: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAlphaBlend_PlanarF';
function vImageAlphaBlend_ARGB8888(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageAlphaBlend_ARGB8888';
function vImageAlphaBlend_ARGBFFFF(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageAlphaBlend_ARGBFFFF';
function vImagePremultipliedAlphaBlend_Planar8(srcTop: PvImage_Buffer;
  srcTopAlpha: PvImage_Buffer; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultipliedAlphaBlend_Planar8';
function vImagePremultipliedAlphaBlend_PlanarF(srcTop: PvImage_Buffer;
  srcTopAlpha: PvImage_Buffer; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultipliedAlphaBlend_PlanarF';
function vImagePremultipliedAlphaBlend_ARGB8888(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlend_ARGB8888';
function vImagePremultipliedAlphaBlend_BGRA8888(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlend_BGRA8888';
function vImagePremultipliedAlphaBlend_ARGBFFFF(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlend_ARGBFFFF';
function vImagePremultipliedAlphaBlend_BGRAFFFF(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlend_BGRAFFFF';
function vImagePremultipliedAlphaBlendWithPermute_ARGB8888
  (srcTop: PvImage_Buffer; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  permuteMap: Byte; makeDestAlphaOpaque: Integer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlendWithPermute_ARGB8888';
function vImagePremultipliedAlphaBlendWithPermute_RGBA8888
  (srcTop: PvImage_Buffer; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  permuteMap: Byte; makeDestAlphaOpaque: Integer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlendWithPermute_RGBA8888';
function vImagePremultipliedAlphaBlendMultiply_RGBA8888(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlendMultiply_RGBA8888';
function vImagePremultipliedAlphaBlendScreen_RGBA8888(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlendScreen_RGBA8888';
function vImagePremultipliedAlphaBlendDarken_RGBA8888(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlendDarken_RGBA8888';
function vImagePremultipliedAlphaBlendLighten_RGBA8888(srcTop: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultipliedAlphaBlendLighten_RGBA8888';
function vImagePremultiplyData_Planar8(src: PvImage_Buffer;
  alpha: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultiplyData_Planar8';
function vImagePremultiplyData_PlanarF(src: PvImage_Buffer;
  alpha: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePremultiplyData_PlanarF';
function vImagePremultiplyData_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_ARGB8888';
function vImagePremultiplyData_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_ARGBFFFF';
function vImagePremultiplyData_RGBA8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_RGBA8888';
function vImagePremultiplyData_RGBAFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_RGBAFFFF';
function vImagePremultiplyData_RGBA16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_RGBA16F';
function vImagePremultiplyData_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_ARGB16U';
function vImagePremultiplyData_RGBA16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_RGBA16U';
function vImagePremultiplyData_ARGB16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_ARGB16Q12';
function vImagePremultiplyData_RGBA16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePremultiplyData_RGBA16Q12';
function vImageUnpremultiplyData_Planar8(src: PvImage_Buffer;
  alpha: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageUnpremultiplyData_Planar8';
function vImageUnpremultiplyData_PlanarF(src: PvImage_Buffer;
  alpha: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageUnpremultiplyData_PlanarF';
function vImageUnpremultiplyData_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_ARGB8888';
function vImageUnpremultiplyData_RGBA8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_RGBA8888';
function vImageUnpremultiplyData_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_ARGBFFFF';
function vImageUnpremultiplyData_RGBAFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_RGBAFFFF';
function vImageUnpremultiplyData_RGBA16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_RGBA16F';
function vImageUnpremultiplyData_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_ARGB16U';
function vImageUnpremultiplyData_RGBA16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_RGBA16U';
function vImageUnpremultiplyData_ARGB16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_ARGB16Q12';
function vImageUnpremultiplyData_RGBA16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageUnpremultiplyData_RGBA16Q12';
function vImagePremultipliedConstAlphaBlend_Planar8(srcTop: PvImage_Buffer;
  constAlpha: Pixel_8; srcTopAlpha: PvImage_Buffer; srcBottom: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImagePremultipliedConstAlphaBlend_Planar8';
function vImagePremultipliedConstAlphaBlend_PlanarF(srcTop: PvImage_Buffer;
  constAlpha: Pixel_F; srcTopAlpha: PvImage_Buffer; srcBottom: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImagePremultipliedConstAlphaBlend_PlanarF';
function vImagePremultipliedConstAlphaBlend_ARGB8888(srcTop: PvImage_Buffer;
  constAlpha: Pixel_8; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImagePremultipliedConstAlphaBlend_ARGB8888';
function vImagePremultipliedConstAlphaBlend_ARGBFFFF(srcTop: PvImage_Buffer;
  constAlpha: Pixel_F; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImagePremultipliedConstAlphaBlend_ARGBFFFF';
function vImageAlphaBlend_NonpremultipliedToPremultiplied_Planar8
  (srcTop: PvImage_Buffer; srcTopAlpha: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageAlphaBlend_NonpremultipliedToPremultiplied_Planar8';
function vImageAlphaBlend_NonpremultipliedToPremultiplied_PlanarF
  (srcTop: PvImage_Buffer; srcTopAlpha: PvImage_Buffer;
  srcBottom: PvImage_Buffer; dest: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageAlphaBlend_NonpremultipliedToPremultiplied_PlanarF';
function vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGB8888
  (srcTop: PvImage_Buffer; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGB8888';
function vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGBFFFF
  (srcTop: PvImage_Buffer; srcBottom: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGBFFFF';
function vImageClipToAlpha_Planar8(src: PvImage_Buffer; alpha: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageClipToAlpha_Planar8';
function vImageClipToAlpha_PlanarF(src: PvImage_Buffer; alpha: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageClipToAlpha_PlanarF';
function vImageClipToAlpha_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageClipToAlpha_ARGB8888';
function vImageClipToAlpha_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageClipToAlpha_ARGBFFFF';
function vImageClipToAlpha_RGBA8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageClipToAlpha_RGBA8888';
function vImageClipToAlpha_RGBAFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageClipToAlpha_RGBAFFFF';
function vImageConvolve_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSmallInt;
  kernel_height: LongWord; kernel_width: LongWord; divisor: Int32;
  backgroundColor: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolve_Planar8';
function vImageConvolve_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Pixel_F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvolve_PlanarF';
function vImageConvolve_Planar16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Pixel_16F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvolve_Planar16F';
function vImageConvolve_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSmallInt;
  kernel_height: LongWord; kernel_width: LongWord; divisor: Int32;
  backgroundColor: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolve_ARGB8888';
function vImageConvolve_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvolve_ARGBFFFF';
function vImageConvolve_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Word; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvolve_ARGB16F';
function vImageConvolveWithBias_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSmallInt;
  kernel_height: LongWord; kernel_width: LongWord; divisor: Int32; bias: Int32;
  backgroundColor: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolveWithBias_Planar8';
function vImageConvolveWithBias_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; bias: Single; backgroundColor: Pixel_F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolveWithBias_PlanarF';
function vImageConvolveWithBias_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; bias: Single; backgroundColor: Pixel_16F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolveWithBias_Planar16F';
function vImageConvolveWithBias_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSmallInt;
  kernel_height: LongWord; kernel_width: LongWord; divisor: Int32; bias: Int32;
  backgroundColor: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolveWithBias_ARGB8888';
function vImageConvolveWithBias_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; bias: Single; backgroundColor: Single;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolveWithBias_ARGBFFFF';
function vImageConvolveWithBias_ARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; bias: Single; backgroundColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolveWithBias_ARGB16F';
function vImageConvolveMultiKernel_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernels: PSmallInt;
  kernel_height: LongWord; kernel_width: LongWord; divisors: Int32;
  biases: Int32; backgroundColor: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageConvolveMultiKernel_ARGB8888';
function vImageConvolveMultiKernel_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernels: PSingle; kernel_height: LongWord;
  kernel_width: LongWord; biases: Single; backgroundColor: Single;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvolveMultiKernel_ARGBFFFF';
function vImageRichardsonLucyDeConvolve_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSmallInt; kernel2: PSmallInt;
  kernel_height: LongWord; kernel_width: LongWord; kernel_height2: LongWord;
  kernel_width2: LongWord; divisor: Int32; divisor2: Int32;
  backgroundColor: Pixel_8; iterationCount: LongWord; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageRichardsonLucyDeConvolve_Planar8';
function vImageRichardsonLucyDeConvolve_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel2: PSingle;
  kernel_height: LongWord; kernel_width: LongWord; kernel_height2: LongWord;
  kernel_width2: LongWord; backgroundColor: Pixel_F; iterationCount: LongWord;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRichardsonLucyDeConvolve_PlanarF';
function vImageRichardsonLucyDeConvolve_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSmallInt; kernel2: PSmallInt;
  kernel_height: LongWord; kernel_width: LongWord; kernel_height2: LongWord;
  kernel_width2: LongWord; divisor: Int32; divisor2: Int32;
  backgroundColor: Byte; iterationCount: LongWord; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageRichardsonLucyDeConvolve_ARGB8888';
function vImageRichardsonLucyDeConvolve_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel: PSingle; kernel2: PSingle;
  kernel_height: LongWord; kernel_width: LongWord; kernel_height2: LongWord;
  kernel_width2: LongWord; backgroundColor: Single; iterationCount: LongWord;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRichardsonLucyDeConvolve_ARGBFFFF';
function vImageBoxConvolve_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Pixel_8; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageBoxConvolve_Planar8';
function vImageBoxConvolve_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageBoxConvolve_ARGB8888';
function vImageTentConvolve_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Pixel_8; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageTentConvolve_Planar8';
function vImageTentConvolve_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: LongWord;
  kernel_width: LongWord; backgroundColor: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageTentConvolve_ARGB8888';
function vImageSepConvolve_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernelX: PSingle; kernelX_width: LongWord;
  kernelY: PSingle; kernelY_width: LongWord; bias: Single;
  backgroundColor: Pixel_16U; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageSepConvolve_Planar8';
function vImageSepConvolve_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernelX: PSingle; kernelX_width: LongWord;
  kernelY: PSingle; kernelY_width: LongWord; bias: Single;
  backgroundColor: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageSepConvolve_PlanarF';
function vImageSepConvolve_Planar16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernelX: PSingle; kernelX_width: LongWord;
  kernelY: PSingle; kernelY_width: LongWord; bias: Single;
  backgroundColor: Pixel_16F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageSepConvolve_Planar16F';
function vImageSepConvolve_Planar16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernelX: PSingle; kernelX_width: LongWord;
  kernelY: PSingle; kernelY_width: LongWord; bias: Single;
  backgroundColor: Pixel_16U; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageSepConvolve_Planar16U';
function vImageSepConvolve_Planar8to16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernelX: PSingle; kernelX_width: LongWord;
  kernelY: PSingle; kernelY_width: LongWord; scale: Single; bias: Single;
  backgroundColor: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageSepConvolve_Planar8to16U';
function vImageClip_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  maxFloat: Pixel_F; minFloat: Pixel_F; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageClip_PlanarF';
function vImageConvert_Planar8toPlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; maxFloat: Pixel_F; minFloat: Pixel_F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toPlanarF';
function vImageConvert_PlanarFtoPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; maxFloat: Pixel_F; minFloat: Pixel_F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFtoPlanar8';
function vImageConvert_PlanarFtoPlanar8_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; maxFloat: Pixel_F; minFloat: Pixel_F; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFtoPlanar8_dithered';
function vImageConvert_RGBFFFtoRGB888_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; maxFloat: Pixel_F; minFloat: Pixel_F; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBFFFtoRGB888_dithered';
function vImageConvert_ARGBFFFFtoARGB8888_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; maxFloat: Single; minFloat: Single; dither: Integer;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGBFFFFtoARGB8888_dithered';
function vImageConvert_Planar8toARGB8888(srcA: PvImage_Buffer;
  srcR: PvImage_Buffer; srcG: PvImage_Buffer; srcB: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toARGB8888';
function vImageConvert_PlanarFtoARGBFFFF(srcA: PvImage_Buffer;
  srcR: PvImage_Buffer; srcG: PvImage_Buffer; srcB: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFtoARGBFFFF';
function vImageConvert_ARGB8888toPlanar8(srcARGB: PvImage_Buffer;
  destA: PvImage_Buffer; destR: PvImage_Buffer; destG: PvImage_Buffer;
  destB: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888toPlanar8';
function vImageConvert_ARGBFFFFtoPlanarF(srcARGB: PvImage_Buffer;
  destA: PvImage_Buffer; destR: PvImage_Buffer; destG: PvImage_Buffer;
  destB: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGBFFFFtoPlanarF';
function vImageConvert_ChunkyToPlanar8(srcChannels: Pointer;
  destPlanarBuffers: PvImage_Buffer; channelCount: Cardinal;
  srcStrideBytes: LongWord; srcWidth: vImagePixelCount;
  srcHeight: vImagePixelCount; srcRowBytes: LongWord; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_ChunkyToPlanar8';
function vImageConvert_PlanarToChunky8(srcPlanarBuffers: PvImage_Buffer;
  destChannels: Pointer; channelCount: Cardinal; destStrideBytes: LongWord;
  destWidth: vImagePixelCount; destHeight: vImagePixelCount;
  destRowBytes: LongWord; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarToChunky8';
function vImageConvert_ChunkyToPlanarF(srcChannels: Pointer;
  destPlanarBuffers: PvImage_Buffer; channelCount: Cardinal;
  srcStrideBytes: LongWord; srcWidth: vImagePixelCount;
  srcHeight: vImagePixelCount; srcRowBytes: LongWord; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_ChunkyToPlanarF';
function vImageConvert_PlanarToChunkyF(srcPlanarBuffers: PvImage_Buffer;
  destChannels: Pointer; channelCount: Cardinal; destStrideBytes: LongWord;
  destWidth: vImagePixelCount; destHeight: vImagePixelCount;
  destRowBytes: LongWord; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarToChunkyF';
function vImageConvert_16SToF(src: PvImage_Buffer; dest: PvImage_Buffer;
  offset: Single; scale: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16SToF';
function vImageConvert_16UToF(src: PvImage_Buffer; dest: PvImage_Buffer;
  offset: Single; scale: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16UToF';
function vImageConvert_FTo16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  offset: Single; scale: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_FTo16S';
function vImageConvert_FTo16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  offset: Single; scale: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_FTo16U';
function vImageConvert_16Uto16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Uto16F';
function vImageConvert_16Fto16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Fto16U';
function vImageConvert_12UTo16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_12UTo16U';
function vImageConvert_16UTo12U(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16UTo12U';
function vImageTableLookUp_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  alphaTable: Pixel_8; redTable: Pixel_8; greenTable: Pixel_8;
  blueTable: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageTableLookUp_ARGB8888';
function vImageTableLookUp_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  table: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageTableLookUp_Planar8';
function vImageOverwriteChannels_ARGB8888(newSrc: PvImage_Buffer;
  origSrc: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageOverwriteChannels_ARGB8888';
function vImageOverwriteChannels_ARGBFFFF(newSrc: PvImage_Buffer;
  origSrc: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageOverwriteChannels_ARGBFFFF';
function vImageOverwriteChannelsWithScalar_Planar8(scalar: Pixel_8;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageOverwriteChannelsWithScalar_Planar8';
function vImageOverwriteChannelsWithScalar_PlanarF(scalar: Pixel_F;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageOverwriteChannelsWithScalar_PlanarF';
function vImageOverwriteChannelsWithScalar_Planar16S(scalar: Pixel_16S;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageOverwriteChannelsWithScalar_Planar16S';
function vImageOverwriteChannelsWithScalar_Planar16U(scalar: Pixel_16U;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageOverwriteChannelsWithScalar_Planar16U';
function vImageOverwriteChannelsWithScalar_Planar16F(scalar: Pixel_16F;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageOverwriteChannelsWithScalar_Planar16F';
function vImageExtractChannel_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; channelIndex: LongInt; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageExtractChannel_ARGB8888';
function vImageExtractChannel_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  channelIndex: LongInt; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageExtractChannel_ARGB16U';
function vImageExtractChannel_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; channelIndex: LongInt; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageExtractChannel_ARGBFFFF';
function vImageBufferFill_ARGB8888(dest: PvImage_Buffer; color: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_ARGB8888';
function vImageBufferFill_ARGB16U(dest: PvImage_Buffer; color: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_ARGB16U';
function vImageBufferFill_ARGB16S(dest: PvImage_Buffer; color: Int16;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_ARGB16S';
function vImageBufferFill_ARGBFFFF(dest: PvImage_Buffer; color: Single;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_ARGBFFFF';
function vImageBufferFill_ARGB16F(dest: PvImage_Buffer; color: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_ARGB16F';
function vImageBufferFill_CbCr8(dest: PvImage_Buffer; color: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_CbCr8';
function vImageBufferFill_CbCr16U(dest: PvImage_Buffer; color: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_CbCr16U';
function vImageBufferFill_CbCr16S(dest: PvImage_Buffer; color: Int16;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBufferFill_CbCr16S';
function vImageOverwriteChannelsWithScalar_ARGB8888(scalar: Pixel_8;
  src: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageOverwriteChannelsWithScalar_ARGB8888';
function vImageOverwriteChannelsWithScalar_ARGBFFFF(scalar: Pixel_F;
  src: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageOverwriteChannelsWithScalar_ARGBFFFF';
function vImagePermuteChannels_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImagePermuteChannels_ARGB8888';
function vImagePermuteChannels_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImagePermuteChannels_ARGB16U';
function vImagePermuteChannels_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImagePermuteChannels_ARGBFFFF';
function vImagePermuteChannels_ARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImagePermuteChannels_ARGB16F';
function vImagePermuteChannelsWithMaskedInsert_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; copyMask: Byte; backgroundColor: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImagePermuteChannelsWithMaskedInsert_ARGB8888';
function vImagePermuteChannelsWithMaskedInsert_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; copyMask: Byte; backgroundColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImagePermuteChannelsWithMaskedInsert_ARGB16U';
function vImagePermuteChannelsWithMaskedInsert_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; copyMask: Byte;
  backgroundColor: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImagePermuteChannelsWithMaskedInsert_ARGBFFFF';
function vImageConvert_ARGB8888toPlanarF(src: PvImage_Buffer;
  alpha: PvImage_Buffer; red: PvImage_Buffer; green: PvImage_Buffer;
  blue: PvImage_Buffer; maxFloat: Single; minFloat: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_ARGB8888toPlanarF';
function vImageConvert_ARGBFFFFtoPlanar8(src: PvImage_Buffer;
  alpha: PvImage_Buffer; red: PvImage_Buffer; green: PvImage_Buffer;
  blue: PvImage_Buffer; maxFloat: Single; minFloat: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_ARGBFFFFtoPlanar8';
function vImageConvert_ARGBFFFFtoRGBFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGBFFFFtoRGBFFF';
function vImageConvert_RGBAFFFFtoRGBFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBAFFFFtoRGBFFF';
function vImageConvert_BGRAFFFFtoRGBFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_BGRAFFFFtoRGBFFF';
function vImageConvert_RGBFFFtoARGBFFFF(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Pixel_F; param4: PvImage_Buffer;
  param5: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBFFFtoARGBFFFF';
function vImageConvert_RGBFFFtoRGBAFFFF(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Pixel_F; param4: PvImage_Buffer;
  param5: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBFFFtoRGBAFFFF';
function vImageConvert_RGBFFFtoBGRAFFFF(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Pixel_F; param4: PvImage_Buffer;
  param5: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBFFFtoBGRAFFFF';
function vImageConvert_ARGB1555toPlanar8(src: PvImage_Buffer;
  destA: PvImage_Buffer; destR: PvImage_Buffer; destG: PvImage_Buffer;
  destB: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB1555toPlanar8';
function vImageConvert_ARGB1555toARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB1555toARGB8888';
function vImageConvert_Planar8toARGB1555(srcA: PvImage_Buffer;
  srcR: PvImage_Buffer; srcG: PvImage_Buffer; srcB: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toARGB1555';
function vImageConvert_ARGB8888toARGB1555(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888toARGB1555';
function vImageConvert_RGBA5551toRGBA8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA5551toRGBA8888';
function vImageConvert_RGBA8888toRGBA5551(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA8888toRGBA5551';
function vImageConvert_ARGB8888toARGB1555_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888toARGB1555_dithered';
function vImageConvert_RGBA8888toRGBA5551_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA8888toRGBA5551_dithered';
function vImageConvert_RGB565toARGB8888(alpha: Pixel_8; src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB565toARGB8888';
function vImageConvert_RGB565toRGBA8888(alpha: Pixel_8; src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB565toRGBA8888';
function vImageConvert_RGB565toBGRA8888(alpha: Pixel_8; src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB565toBGRA8888';
function vImageConvert_RGB565toRGB888(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB565toRGB888';
function vImageConvert_ARGB8888toRGB565(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888toRGB565';
function vImageConvert_RGBA8888toRGB565(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA8888toRGB565';
function vImageConvert_BGRA8888toRGB565(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_BGRA8888toRGB565';
function vImageConvert_RGB888toRGB565_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB888toRGB565_dithered';
function vImageConvert_ARGB8888toRGB565_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888toRGB565_dithered';
function vImageConvert_RGBA8888toRGB565_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA8888toRGB565_dithered';
function vImageConvert_BGRA8888toRGB565_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_BGRA8888toRGB565_dithered';
function vImageConvert_RGB565toPlanar8(src: PvImage_Buffer;
  destR: PvImage_Buffer; destG: PvImage_Buffer; destB: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB565toPlanar8';
function vImageConvert_Planar8toRGB565(srcR: PvImage_Buffer;
  srcG: PvImage_Buffer; srcB: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toRGB565';
function vImageConvert_RGBA5551toRGB565(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA5551toRGB565';
function vImageConvert_ARGB1555toRGB565(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB1555toRGB565';
function vImageConvert_RGB565toRGBA5551(src: PvImage_Buffer;
  dest: PvImage_Buffer; dither: Integer; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageConvert_RGB565toRGBA5551';
function vImageConvert_RGB565toARGB1555(src: PvImage_Buffer;
  dest: PvImage_Buffer; dither: Integer; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageConvert_RGB565toARGB1555';
function vImageConvert_Planar16FtoPlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16FtoPlanarF';
function vImageConvert_PlanarFtoPlanar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFtoPlanar16F';
function vImageConvert_Planar8toPlanar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toPlanar16F';
function vImageConvert_Planar16FtoPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16FtoPlanar8';
function vImageConvert_16UToPlanar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16UToPlanar8';
function vImageConvert_Planar8To16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8To16U';
function vImageConvert_RGB888toARGB8888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Pixel_8; param4: PvImage_Buffer;
  param5: Integer; param6: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB888toARGB8888';
function vImageConvert_RGB888toRGBA8888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Pixel_8; param4: PvImage_Buffer;
  param5: Integer; param6: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB888toRGBA8888';
function vImageConvert_RGB888toBGRA8888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Pixel_8; param4: PvImage_Buffer;
  param5: Integer; param6: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB888toBGRA8888';
function vImageConvert_ARGB8888toRGB888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888toRGB888';
function vImageConvert_RGBA8888toRGB888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA8888toRGB888';
function vImageConvert_BGRA8888toRGB888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_BGRA8888toRGB888';
function vImageFlatten_ARGB8888ToRGB888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Byte; param4: Integer; param5: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageFlatten_ARGB8888ToRGB888';
function vImageFlatten_ARGBFFFFToRGBFFF(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Single; param4: Integer; param5: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageFlatten_ARGBFFFFToRGBFFF';
function vImageFlatten_RGBA8888ToRGB888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Byte; param4: Integer; param5: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageFlatten_RGBA8888ToRGB888';
function vImageFlatten_RGBAFFFFToRGBFFF(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Single; param4: Integer; param5: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageFlatten_RGBAFFFFToRGBFFF';
function vImageFlatten_BGRA8888ToRGB888(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Byte; param4: Integer; param5: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageFlatten_BGRA8888ToRGB888';
function vImageFlatten_BGRAFFFFToRGBFFF(param1: PvImage_Buffer;
  param2: PvImage_Buffer; param3: Single; param4: Integer; param5: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageFlatten_BGRAFFFFToRGBFFF';
function vImageConvert_Planar8toRGB888(planarRed: PvImage_Buffer;
  planarGreen: PvImage_Buffer; planarBlue: PvImage_Buffer;
  rgbDest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toRGB888';
function vImageConvert_PlanarFtoRGBFFF(planarRed: PvImage_Buffer;
  planarGreen: PvImage_Buffer; planarBlue: PvImage_Buffer;
  rgbDest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFtoRGBFFF';
function vImageConvert_RGB888toPlanar8(rgbSrc: PvImage_Buffer;
  redDest: PvImage_Buffer; greenDest: PvImage_Buffer; blueDest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB888toPlanar8';
function vImageConvert_RGBFFFtoPlanarF(rgbSrc: PvImage_Buffer;
  redDest: PvImage_Buffer; greenDest: PvImage_Buffer; blueDest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBFFFtoPlanarF';
function vImageSelectChannels_ARGB8888(newSrc: PvImage_Buffer;
  origSrc: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageSelectChannels_ARGB8888';
function vImageSelectChannels_ARGBFFFF(newSrc: PvImage_Buffer;
  origSrc: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageSelectChannels_ARGBFFFF';
function vImageOverwriteChannelsWithPixel_ARGB8888(the_pixel: Byte;
  src: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageOverwriteChannelsWithPixel_ARGB8888';
function vImageOverwriteChannelsWithPixel_ARGB16U(the_pixel: Word;
  src: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageOverwriteChannelsWithPixel_ARGB16U';
function vImageOverwriteChannelsWithPixel_ARGBFFFF(the_pixel: Single;
  src: PvImage_Buffer; dest: PvImage_Buffer; copyMask: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageOverwriteChannelsWithPixel_ARGBFFFF';
function vImageConvert_Planar8ToXRGB8888(alpha: Pixel_8; red: PvImage_Buffer;
  green: PvImage_Buffer; blue: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8ToXRGB8888';
function vImageConvert_Planar8ToBGRX8888(blue: PvImage_Buffer;
  green: PvImage_Buffer; red: PvImage_Buffer; alpha: Pixel_8;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8ToBGRX8888';
function vImageConvert_PlanarFToXRGBFFFF(alpha: Pixel_F; red: PvImage_Buffer;
  green: PvImage_Buffer; blue: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFToXRGBFFFF';
function vImageConvert_PlanarFToBGRXFFFF(blue: PvImage_Buffer;
  green: PvImage_Buffer; red: PvImage_Buffer; alpha: Pixel_F;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFToBGRXFFFF';
function vImageConvert_XRGB8888ToPlanar8(src: PvImage_Buffer;
  red: PvImage_Buffer; green: PvImage_Buffer; blue: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_XRGB8888ToPlanar8';
function vImageConvert_BGRX8888ToPlanar8(src: PvImage_Buffer;
  blue: PvImage_Buffer; green: PvImage_Buffer; red: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_BGRX8888ToPlanar8';
function vImageConvert_XRGBFFFFToPlanarF(src: PvImage_Buffer;
  red: PvImage_Buffer; green: PvImage_Buffer; blue: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_XRGBFFFFToPlanarF';
function vImageConvert_BGRXFFFFToPlanarF(src: PvImage_Buffer;
  blue: PvImage_Buffer; green: PvImage_Buffer; red: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_BGRXFFFFToPlanarF';
function vImageConvert_Planar8ToARGBFFFF(alpha: PvImage_Buffer;
  red: PvImage_Buffer; green: PvImage_Buffer; blue: PvImage_Buffer;
  dest: PvImage_Buffer; maxFloat: Single; minFloat: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_Planar8ToARGBFFFF';
function vImageConvert_Planar8ToXRGBFFFF(alpha: Pixel_F; red: PvImage_Buffer;
  green: PvImage_Buffer; blue: PvImage_Buffer; dest: PvImage_Buffer;
  maxFloat: Single; minFloat: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8ToXRGBFFFF';
function vImageConvert_Planar8ToBGRXFFFF(blue: PvImage_Buffer;
  green: PvImage_Buffer; red: PvImage_Buffer; alpha: Pixel_F;
  dest: PvImage_Buffer; maxFloat: Single; minFloat: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_Planar8ToBGRXFFFF';
function vImageConvert_PlanarFToARGB8888(alpha: PvImage_Buffer;
  red: PvImage_Buffer; green: PvImage_Buffer; blue: PvImage_Buffer;
  dest: PvImage_Buffer; maxFloat: Single; minFloat: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_PlanarFToARGB8888';
function vImageConvert_PlanarFToXRGB8888(alpha: Pixel_8; red: PvImage_Buffer;
  green: PvImage_Buffer; blue: PvImage_Buffer; dest: PvImage_Buffer;
  maxFloat: Single; minFloat: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_PlanarFToXRGB8888';
function vImageConvert_PlanarFToBGRX8888(blue: PvImage_Buffer;
  green: PvImage_Buffer; red: PvImage_Buffer; alpha: Pixel_8;
  dest: PvImage_Buffer; maxFloat: Single; minFloat: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_PlanarFToBGRX8888';
function vImageConvert_RGB16UtoARGB16U(rgbSrc: PvImage_Buffer;
  aSrc: PvImage_Buffer; alpha: Pixel_16U; argbDest: PvImage_Buffer;
  premultiply: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB16UtoARGB16U';
function vImageConvert_RGB16UtoRGBA16U(rgbSrc: PvImage_Buffer;
  aSrc: PvImage_Buffer; alpha: Pixel_16U; rgbaDest: PvImage_Buffer;
  premultiply: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB16UtoRGBA16U';
function vImageConvert_RGB16UtoBGRA16U(rgbSrc: PvImage_Buffer;
  aSrc: PvImage_Buffer; alpha: Pixel_16U; bgraDest: PvImage_Buffer;
  premultiply: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB16UtoBGRA16U';
function vImageConvert_ARGB16UtoRGB16U(argbSrc: PvImage_Buffer;
  rgbDest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UtoRGB16U';
function vImageConvert_RGBA16UtoRGB16U(rgbaSrc: PvImage_Buffer;
  rgbDest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA16UtoRGB16U';
function vImageConvert_BGRA16UtoRGB16U(bgraSrc: PvImage_Buffer;
  rgbDest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_BGRA16UtoRGB16U';
function vImageConvert_Planar16UtoARGB16U(aSrc: PvImage_Buffer;
  rSrc: PvImage_Buffer; gSrc: PvImage_Buffer; bSrc: PvImage_Buffer;
  argbDest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16UtoARGB16U';
function vImageConvert_ARGB16UtoPlanar16U(argbSrc: PvImage_Buffer;
  aDest: PvImage_Buffer; rDest: PvImage_Buffer; gDest: PvImage_Buffer;
  bDest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UtoPlanar16U';
function vImageConvert_Planar16UtoRGB16U(rSrc: PvImage_Buffer;
  gSrc: PvImage_Buffer; bSrc: PvImage_Buffer; rgbDest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16UtoRGB16U';
function vImageConvert_RGB16UtoPlanar16U(rgbSrc: PvImage_Buffer;
  rDest: PvImage_Buffer; gDest: PvImage_Buffer; bDest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB16UtoPlanar16U';
function vImageConvert_Planar16UtoPlanar8_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; dither: Integer; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageConvert_Planar16UtoPlanar8_dithered';
function vImageConvert_RGB16UtoRGB888_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; dither: Integer; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageConvert_RGB16UtoRGB888_dithered';
function vImageConvert_ARGB16UtoARGB8888_dithered(src: PvImage_Buffer;
  dest: PvImage_Buffer; dither: Integer; permuteMap: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_ARGB16UtoARGB8888_dithered';
function vImageConvert_ARGB16UToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; copyMask: Byte; backgroundColor: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UToARGB8888';
function vImageConvert_ARGB8888ToARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; copyMask: Byte; backgroundColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888ToARGB16U';
function vImageConvert_RGB16UToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; copyMask: Byte; backgroundColor: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB16UToARGB8888';
function vImageConvert_ARGB8888ToRGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; permuteMap: Byte; copyMask: Byte;
  backgroundColor: Pixel_16U; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888ToRGB16U';
function vImageByteSwap_Planar16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageByteSwap_Planar16U';
function vImageFlatten_ARGB8888(argbSrc: PvImage_Buffer;
  argbDst: PvImage_Buffer; argbBackgroundColorPtr: Byte;
  isImagePremultiplied: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_ARGB8888';
function vImageFlatten_RGBA8888(rgbaSrc: PvImage_Buffer;
  rgbaDst: PvImage_Buffer; rgbaBackgroundColorPtr: Byte;
  isImagePremultiplied: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_RGBA8888';
function vImageFlatten_ARGB16U(argbSrc: PvImage_Buffer; argbDst: PvImage_Buffer;
  argbBackgroundColorPtr: Word; isImagePremultiplied: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_ARGB16U';
function vImageFlatten_RGBA16U(rgbaSrc: PvImage_Buffer; rgbaDst: PvImage_Buffer;
  rgbaBackgroundColorPtr: Word; isImagePremultiplied: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_RGBA16U';
function vImageFlatten_ARGB16Q12(argbSrc: PvImage_Buffer;
  argbDst: PvImage_Buffer; argbBackgroundColorPtr: Int16;
  isImagePremultiplied: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_ARGB16Q12';
function vImageFlatten_RGBA16Q12(argbSrc: PvImage_Buffer;
  argbDst: PvImage_Buffer; argbBackgroundColorPtr: Int16;
  isImagePremultiplied: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_RGBA16Q12';
function vImageFlatten_ARGBFFFF(argbSrc: PvImage_Buffer;
  argbDst: PvImage_Buffer; argbBackgroundColorPtr: Single;
  isImagePremultiplied: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_ARGBFFFF';
function vImageFlatten_RGBAFFFF(rgbaSrc: PvImage_Buffer;
  rgbaDst: PvImage_Buffer; rgbaBackgroundColorPtr: Single;
  isImagePremultiplied: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFlatten_RGBAFFFF';
function vImageConvert_Planar1toPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar1toPlanar8';
function vImageConvert_Planar2toPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar2toPlanar8';
function vImageConvert_Planar4toPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar4toPlanar8';
function vImageConvert_Indexed1toPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; colors: Pixel_8; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageConvert_Indexed1toPlanar8';
function vImageConvert_Indexed2toPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; colors: Pixel_8; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageConvert_Indexed2toPlanar8';
function vImageConvert_Indexed4toPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; colors: Pixel_8; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageConvert_Indexed4toPlanar8';
function vImageConvert_Planar8toPlanar1(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toPlanar1';
function vImageConvert_Planar8toPlanar2(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toPlanar2';
function vImageConvert_Planar8toPlanar4(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toPlanar4';
function vImageConvert_Planar8toIndexed1(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; colors: Pixel_8; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toIndexed1';
function vImageConvert_Planar8toIndexed2(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; colors: Pixel_8; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toIndexed2';
function vImageConvert_Planar8toIndexed4(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; colors: Pixel_8; dither: Integer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar8toIndexed4';
function vImageConvert_8to16Q12(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_8to16Q12';
function vImageConvert_RGB888toPlanar16Q12(src: PvImage_Buffer;
  red: PvImage_Buffer; green: PvImage_Buffer; blue: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGB888toPlanar16Q12';
function vImageConvert_ARGB8888toPlanar16Q12(src: PvImage_Buffer;
  alpha: PvImage_Buffer; red: PvImage_Buffer; green: PvImage_Buffer;
  blue: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888toPlanar16Q12';
function vImageConvert_16Q12to8(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Q12to8';
function vImageConvert_Planar16Q12toRGB888(red: PvImage_Buffer;
  green: PvImage_Buffer; blue: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16Q12toRGB888';
function vImageConvert_Planar16Q12toARGB8888(alpha: PvImage_Buffer;
  red: PvImage_Buffer; green: PvImage_Buffer; blue: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16Q12toARGB8888';
function vImageConvert_16Q12to16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Q12to16F';
function vImageConvert_Planar16Q12toRGB16F(red: PvImage_Buffer;
  green: PvImage_Buffer; blue: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16Q12toRGB16F';
function vImageConvert_Planar16Q12toARGB16F(alpha: PvImage_Buffer;
  red: PvImage_Buffer; green: PvImage_Buffer; blue: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Planar16Q12toARGB16F';
function vImageConvert_16Fto16Q12(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Fto16Q12';
function vImageConvert_16Q12toF(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Q12toF';
function vImageConvert_Fto16Q12(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_Fto16Q12';
function vImageConvert_16Q12to16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Q12to16U';
function vImageConvert_16Uto16Q12(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_16Uto16Q12';
function vImageConvert_YpCbCrToARGB_GenerateConversion
  (matrix: PvImage_YpCbCrToARGBMatrix; pixelRange: PvImage_YpCbCrPixelRange;
  outInfo: PvImage_YpCbCrToARGB; inYpCbCrType: vImageYpCbCrType;
  outARGBType: vImageARGBType; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageConvert_YpCbCrToARGB_GenerateConversion';
function vImageConvert_ARGBToYpCbCr_GenerateConversion
  (matrix: PvImage_ARGBToYpCbCrMatrix; pixelRange: PvImage_YpCbCrPixelRange;
  outInfo: PvImage_ARGBToYpCbCr; inARGBType: vImageARGBType;
  outYpCbCrType: vImageYpCbCrType; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageConvert_ARGBToYpCbCr_GenerateConversion';
function vImageConvert_422YpCbYpCr8ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  alpha: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_422YpCbYpCr8ToARGB8888';
function vImageConvert_ARGB8888To422YpCbYpCr8(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To422YpCbYpCr8';
function vImageConvert_422CbYpCrYp8ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  alpha: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_422CbYpCrYp8ToARGB8888';
function vImageConvert_ARGB8888To422CbYpCrYp8(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To422CbYpCrYp8';
function vImageConvert_422CbYpCrYp8_AA8ToARGB8888(src: PvImage_Buffer;
  srcA: PvImage_Buffer; dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_422CbYpCrYp8_AA8ToARGB8888';
function vImageConvert_ARGB8888To422CbYpCrYp8_AA8(src: PvImage_Buffer;
  dest: PvImage_Buffer; destA: PvImage_Buffer; info: PvImage_ARGBToYpCbCr;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To422CbYpCrYp8_AA8';
function vImageConvert_444AYpCbCr8ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_444AYpCbCr8ToARGB8888';
function vImageConvert_ARGB8888To444AYpCbCr8(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To444AYpCbCr8';
function vImageConvert_444CbYpCrA8ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_444CbYpCrA8ToARGB8888';
function vImageConvert_ARGB8888To444CbYpCrA8(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To444CbYpCrA8';
function vImageConvert_444CrYpCb8ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  alpha: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_444CrYpCb8ToARGB8888';
function vImageConvert_ARGB8888To444CrYpCb8(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To444CrYpCb8';
function vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(srcYp: PvImage_Buffer;
  srcCb: PvImage_Buffer; srcCr: PvImage_Buffer; dest: PvImage_Buffer;
  info: PvImage_YpCbCrToARGB; permuteMap: Byte; alpha: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_420Yp8_Cb8_Cr8ToARGB8888';
function vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(src: PvImage_Buffer;
  destYp: PvImage_Buffer; destCb: PvImage_Buffer; destCr: PvImage_Buffer;
  info: PvImage_ARGBToYpCbCr; permuteMap: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_ARGB8888To420Yp8_Cb8_Cr8';
function vImageConvert_420Yp8_CbCr8ToARGB8888(srcYp: PvImage_Buffer;
  srcCbCr: PvImage_Buffer; dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB;
  permuteMap: Byte; alpha: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_420Yp8_CbCr8ToARGB8888';
function vImageConvert_ARGB8888To420Yp8_CbCr8(src: PvImage_Buffer;
  destYp: PvImage_Buffer; destCbCr: PvImage_Buffer; info: PvImage_ARGBToYpCbCr;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To420Yp8_CbCr8';
function vImageConvert_444AYpCbCr16ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_444AYpCbCr16ToARGB8888';
function vImageConvert_ARGB8888To444AYpCbCr16(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To444AYpCbCr16';
function vImageConvert_444AYpCbCr16ToARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_444AYpCbCr16ToARGB16U';
function vImageConvert_ARGB16UTo444AYpCbCr16(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UTo444AYpCbCr16';
function vImageConvert_444CrYpCb10ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  alpha: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_444CrYpCb10ToARGB8888';
function vImageConvert_ARGB8888To444CrYpCb10(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To444CrYpCb10';
function vImageConvert_444CrYpCb10ToARGB16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  alpha: Pixel_16Q12; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_444CrYpCb10ToARGB16Q12';
function vImageConvert_ARGB16Q12To444CrYpCb10(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16Q12To444CrYpCb10';
function vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888
  (src: PvImage_Buffer; dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB;
  permuteMap: Byte; alpha: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888';
function vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10
  (src: PvImage_Buffer; dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10';
function vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB16Q12
  (src: PvImage_Buffer; dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB;
  permuteMap: Byte; alpha: Pixel_16Q12; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB16Q12';
function vImageConvert_ARGB16Q12To422CrYpCbYpCbYpCbYpCrYpCrYp10
  (src: PvImage_Buffer; dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageConvert_ARGB16Q12To422CrYpCbYpCbYpCbYpCrYpCrYp10';
function vImageConvert_422CbYpCrYp16ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  alpha: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_422CbYpCrYp16ToARGB8888';
function vImageConvert_ARGB8888To422CbYpCrYp16(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888To422CbYpCrYp16';
function vImageConvert_422CbYpCrYp16ToARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_YpCbCrToARGB; permuteMap: Byte;
  alpha: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_422CbYpCrYp16ToARGB16U';
function vImageConvert_ARGB16UTo422CbYpCrYp16(src: PvImage_Buffer;
  dest: PvImage_Buffer; info: PvImage_ARGBToYpCbCr; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UTo422CbYpCrYp16';
function vImageConvert_RGBA1010102ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA1010102ToARGB8888';
function vImageConvert_ARGB8888ToRGBA1010102(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888ToRGBA1010102';
function vImageConvert_RGBA1010102ToARGB16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA1010102ToARGB16Q12';
function vImageConvert_ARGB16Q12ToRGBA1010102(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  RGB101010Min: Int32; RGB101010Max: Int32; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16Q12ToRGBA1010102';
function vImageConvert_RGBA1010102ToARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_RGBA1010102ToARGB16U';
function vImageConvert_ARGB16UToRGBA1010102(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UToRGBA1010102';
function vImagePermuteChannels_RGB888(src: PvImage_Buffer; dest: PvImage_Buffer;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePermuteChannels_RGB888';
function vImageCopyBuffer(src: PvImage_Buffer; dest: PvImage_Buffer;
  pixelSize: LongWord; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageCopyBuffer';
function vImageConvert_XRGB2101010ToARGB8888(src: PvImage_Buffer;
  alpha: Pixel_8; dest: PvImage_Buffer; RGB101010RangeMin: Int32;
  RGB101010RangeMax: Int32; permuteMap: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_XRGB2101010ToARGB8888';
function vImageConvert_ARGB2101010ToARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB2101010ToARGB8888';
function vImageConvert_ARGB8888ToXRGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888ToXRGB2101010';
function vImageConvert_ARGB8888ToARGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB8888ToARGB2101010';
function vImageConvert_XRGB2101010ToARGB16Q12(src: PvImage_Buffer;
  alpha: Pixel_16Q12; dest: PvImage_Buffer; RGB101010RangeMin: Int32;
  RGB101010RangeMax: Int32; permuteMap: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_XRGB2101010ToARGB16Q12';
function vImageConvert_ARGB2101010ToARGB16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB2101010ToARGB16Q12';
function vImageConvert_ARGB16Q12ToXRGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  RGB101010Min: Int32; RGB101010Max: Int32; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16Q12ToXRGB2101010';
function vImageConvert_ARGB16Q12ToARGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  RGB101010Min: Int32; RGB101010Max: Int32; permuteMap: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16Q12ToARGB2101010';
function vImageConvert_XRGB2101010ToARGB16U(src: PvImage_Buffer; alpha: Word;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_XRGB2101010ToARGB16U';
function vImageConvert_ARGB2101010ToARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB2101010ToARGB16U';
function vImageConvert_ARGB16UToXRGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UToXRGB2101010';
function vImageConvert_ARGB16UToARGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB16UToARGB2101010';
function vImageConvert_XRGB2101010ToARGBFFFF(src: PvImage_Buffer;
  alpha: Pixel_F; dest: PvImage_Buffer; RGB101010RangeMin: Int32;
  RGB101010RangeMax: Int32; permuteMap: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConvert_XRGB2101010ToARGBFFFF';
function vImageConvert_ARGB2101010ToARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB2101010ToARGBFFFF';
function vImageConvert_ARGBFFFFToXRGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGBFFFFToXRGB2101010';
function vImageConvert_ARGBFFFFToARGB2101010(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGBFFFFToARGB2101010';
function vImageConvert_XRGB2101010ToARGB16F(src: PvImage_Buffer; alpha: Pixel_F;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_XRGB2101010ToARGB16F';
function vImageConvert_ARGB2101010ToARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; RGB101010RangeMin: Int32; RGB101010RangeMax: Int32;
  permuteMap: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_ARGB2101010ToARGB16F';
function vImageRotate_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Pixel_8;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_Planar8';
function vImageRotate_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Pixel_F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_PlanarF';
function vImageRotate_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_ARGB8888';
function vImageRotate_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_ARGB16U';
function vImageRotate_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Int16;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_ARGB16S';
function vImageRotate_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Single;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_ARGBFFFF';
function vImageRotate_Planar16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Pixel_16F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_Planar16F';
function vImageRotate_CbCr16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_CbCr16F';
function vImageRotate_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; angleInRadians: Single; backColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageRotate_ARGB16F';
function vImageScale_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_Planar8';
function vImageScale_Planar16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_Planar16S';
function vImageScale_Planar16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_Planar16U';
function vImageScale_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_PlanarF';
function vImageScale_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_ARGB8888';
function vImageScale_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_ARGB16U';
function vImageScale_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_ARGB16S';
function vImageScale_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_ARGBFFFF';
function vImageScale_Planar16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_Planar16F';
function vImageScale_CbCr16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_CbCr16F';
function vImageScale_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_ARGB16F';
function vImageScale_CbCr8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_CbCr8';
function vImageScale_CbCr16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_CbCr16U';
function vImageScale_XRGB2101010W(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageScale_XRGB2101010W';
function vImageAffineWarp_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Pixel_8;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_Planar8';
function vImageAffineWarp_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Pixel_F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_PlanarF';
function vImageAffineWarp_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_ARGB8888';
function vImageAffineWarp_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_ARGB16U';
function vImageAffineWarp_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Int16;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_ARGB16S';
function vImageAffineWarp_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Single;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_ARGBFFFF';
function vImageAffineWarp_Planar16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Pixel_16F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_Planar16F';
function vImageAffineWarp_CbCr16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_CbCr16F';
function vImageAffineWarp_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarp_ARGB16F';
function vImageAffineWarpD_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_Planar8';
function vImageAffineWarpD_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_PlanarF';
function vImageAffineWarpD_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_ARGB8888';
function vImageAffineWarpD_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_ARGB16U';
function vImageAffineWarpD_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Int16; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_ARGB16S';
function vImageAffineWarpD_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_ARGBFFFF';
function vImageAffineWarpD_Planar16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Pixel_16F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_Planar16F';
function vImageAffineWarpD_CbCr16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_CbCr16F';
function vImageAffineWarpD_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform_Double;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpD_ARGB16F';
function vImageAffineWarpCG_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Pixel_8;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpCG_Planar8';
function vImageAffineWarpCG_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Pixel_F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpCG_PlanarF';
function vImageAffineWarpCG_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Byte;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpCG_ARGB8888';
function vImageAffineWarpCG_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Word;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpCG_ARGB16U';
function vImageAffineWarpCG_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Int16;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpCG_ARGB16S';
function vImageAffineWarpCG_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; transform: PvImage_AffineTransform; backColor: Single;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageAffineWarpCG_ARGBFFFF';
function vImageGetPerspectiveWarp(srcPoints: array [0 .. 1] of Single;
  destPoints: array [0 .. 1] of Single; transform: PvImage_PerpsectiveTransform;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageGetPerspectiveWarp';
function vImagePerspectiveWarp_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  transform: PvImage_PerpsectiveTransform;
  interpolation: vImage_WarpInterpolation; backColor: Pixel_8;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePerspectiveWarp_Planar8';
function vImagePerspectiveWarp_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  transform: PvImage_PerpsectiveTransform;
  interpolation: vImage_WarpInterpolation; backColor: Byte; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePerspectiveWarp_ARGB8888';
function vImagePerspectiveWarp_Planar16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  transform: PvImage_PerpsectiveTransform;
  interpolation: vImage_WarpInterpolation; backColor: Pixel_16U;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePerspectiveWarp_Planar16U';
function vImagePerspectiveWarp_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  transform: PvImage_PerpsectiveTransform;
  interpolation: vImage_WarpInterpolation; backColor: Word; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePerspectiveWarp_ARGB16U';
function vImagePerspectiveWarp_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  transform: PvImage_PerpsectiveTransform;
  interpolation: vImage_WarpInterpolation; backColor: Pixel_16F;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePerspectiveWarp_Planar16F';
function vImagePerspectiveWarp_ARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  transform: PvImage_PerpsectiveTransform;
  interpolation: vImage_WarpInterpolation; backColor: Word; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImagePerspectiveWarp_ARGB16F';
function vImageHorizontalReflect_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_Planar8';
function vImageHorizontalReflect_Planar16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_Planar16U';
function vImageHorizontalReflect_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_PlanarF';
function vImageHorizontalReflect_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_ARGB8888';
function vImageHorizontalReflect_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_ARGB16U';
function vImageHorizontalReflect_ARGB16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_ARGB16S';
function vImageHorizontalReflect_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_ARGBFFFF';
function vImageHorizontalReflect_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_Planar16F';
function vImageHorizontalReflect_CbCr16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_CbCr16F';
function vImageHorizontalReflect_ARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalReflect_ARGB16F';
function vImageVerticalReflect_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_Planar8';
function vImageVerticalReflect_Planar16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_Planar16U';
function vImageVerticalReflect_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_PlanarF';
function vImageVerticalReflect_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_ARGB8888';
function vImageVerticalReflect_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_ARGB16U';
function vImageVerticalReflect_ARGB16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_ARGB16S';
function vImageVerticalReflect_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_ARGBFFFF';
function vImageVerticalReflect_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_Planar16F';
function vImageVerticalReflect_CbCr16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_CbCr16F';
function vImageVerticalReflect_ARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalReflect_ARGB16F';
function vImageRotate90_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Pixel_8; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageRotate90_Planar8';
function vImageRotate90_Planar16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Pixel_16U; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageRotate90_Planar16U';
function vImageRotate90_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Pixel_F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageRotate90_PlanarF';
function vImageRotate90_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageRotate90_ARGB8888';
function vImageRotate90_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageRotate90_ARGB16U';
function vImageRotate90_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Int16; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageRotate90_ARGB16S';
function vImageRotate90_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Single; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageRotate90_ARGBFFFF';
function vImageRotate90_Planar16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Pixel_16F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageRotate90_Planar16F';
function vImageRotate90_CbCr16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageRotate90_CbCr16F';
function vImageRotate90_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  rotationConstant: Byte; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageRotate90_ARGB16F';
function vImageHorizontalShear_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_8; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_Planar8';
function vImageHorizontalShear_Planar16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_16S; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_Planar16S';
function vImageHorizontalShear_Planar16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_16U; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_Planar16U';
function vImageHorizontalShear_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_PlanarF';
function vImageHorizontalShear_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShear_ARGB8888';
function vImageHorizontalShear_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShear_ARGB16U';
function vImageHorizontalShear_ARGB16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Int16; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_ARGB16S';
function vImageHorizontalShear_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_ARGBFFFF';
function vImageHorizontalShear_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_16F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_Planar16F';
function vImageHorizontalShear_CbCr16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShear_CbCr16F';
function vImageHorizontalShear_ARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShear_ARGB16F';
function vImageVerticalShear_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_Planar8';
function vImageVerticalShear_Planar16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; yTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_16S; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageVerticalShear_Planar16S';
function vImageVerticalShear_Planar16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; yTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_16U; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageVerticalShear_Planar16U';
function vImageVerticalShear_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_PlanarF';
function vImageVerticalShear_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_ARGB8888';
function vImageVerticalShear_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_ARGB16U';
function vImageVerticalShear_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Int16; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_ARGB16S';
function vImageVerticalShear_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_ARGBFFFF';
function vImageVerticalShear_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; yTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_16F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageVerticalShear_Planar16F';
function vImageVerticalShear_CbCr16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_CbCr16F';
function vImageVerticalShear_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_ARGB16F';
function vImageHorizontalShearD_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Pixel_8; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShearD_Planar8';
function vImageHorizontalShearD_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Pixel_F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShearD_PlanarF';
function vImageHorizontalShearD_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShearD_ARGB8888';
function vImageHorizontalShearD_ARGB16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShearD_ARGB16U';
function vImageHorizontalShearD_ARGB16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Int16; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShearD_ARGB16S';
function vImageHorizontalShearD_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShearD_ARGBFFFF';
function vImageHorizontalShearD_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Pixel_16F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShearD_Planar16F';
function vImageHorizontalShearD_CbCr16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShearD_CbCr16F';
function vImageHorizontalShearD_ARGB16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShearD_ARGB16F';
function vImageVerticalShearD_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_Planar8';
function vImageVerticalShearD_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_PlanarF';
function vImageVerticalShearD_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; yTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Byte; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageVerticalShearD_ARGB8888';
function vImageVerticalShearD_ARGB16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_ARGB16U';
function vImageVerticalShearD_ARGB16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Int16; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_ARGB16S';
function vImageVerticalShearD_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; yTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Single; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageVerticalShearD_ARGBFFFF';
function vImageVerticalShearD_Planar16F(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; yTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Pixel_16F; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageVerticalShearD_Planar16F';
function vImageVerticalShearD_CbCr16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_CbCr16F';
function vImageVerticalShearD_ARGB16F(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_ARGB16F';
function vImageHorizontalShear_CbCr8(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  xTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHorizontalShear_CbCr8';
function vImageHorizontalShear_CbCr16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShear_CbCr16U';
function vImageHorizontalShearD_CbCr16U(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Word; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageHorizontalShearD_CbCr16U';
function vImageHorizontalShear_CbCr16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Int16; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_CbCr16S';
function vImageHorizontalShearD_CbCr16S(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Double; shearSlope: Double;
  filter: ResamplingFilter; backColor: Int16; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShearD_CbCr16S';
function vImageVerticalShear_CbCr8(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Byte; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_CbCr8';
function vImageVerticalShear_CbCr16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_CbCr16U';
function vImageVerticalShearD_CbCr16U(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Word; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_CbCr16U';
function vImageVerticalShear_CbCr16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Single; shearSlope: Single; filter: ResamplingFilter;
  backColor: Int16; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShear_CbCr16S';
function vImageVerticalShearD_CbCr16S(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  yTranslate: Double; shearSlope: Double; filter: ResamplingFilter;
  backColor: Int16; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageVerticalShearD_CbCr16S';
function vImageHorizontalShear_XRGB2101010W(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; xTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_32U; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageHorizontalShear_XRGB2101010W';
function vImageVerticalShear_XRGB2101010W(src: PvImage_Buffer;
  dest: PvImage_Buffer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; yTranslate: Single; shearSlope: Single;
  filter: ResamplingFilter; backColor: Pixel_32U; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageVerticalShear_XRGB2101010W';
function vImageNewResamplingFilter(scale: Single; flags: vImage_Flags)
  : ResamplingFilter; cdecl;
  external libAccelerate name _PU + 'vImageNewResamplingFilter';
procedure vImageDestroyResamplingFilter(filter: ResamplingFilter); cdecl;
  external libAccelerate name _PU + 'vImageDestroyResamplingFilter';
function vImageNewResamplingFilterForFunctionUsingBuffer
  (filter: ResamplingFilter; scale: Single; kernelFunc: TAccelerateKernelFunc;
  kernelWidth: Single; userData: Pointer; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageNewResamplingFilterForFunctionUsingBuffer';
function vImageGetResamplingFilterSize(scale: Single;
  kernelFunc: TAccelerateKernelFunc; kernelWidth: Single; flags: vImage_Flags)
  : LongWord; cdecl; external libAccelerate name _PU +
  'vImageGetResamplingFilterSize';
function vImageGetResamplingFilterExtent(filter: ResamplingFilter;
  flags: vImage_Flags): vImagePixelCount; cdecl;
  external libAccelerate name _PU + 'vImageGetResamplingFilterExtent';
function vImageHistogramCalculation_Planar8(src: PvImage_Buffer;
  histogram: PvImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramCalculation_Planar8';
function vImageHistogramCalculation_PlanarF(src: PvImage_Buffer;
  histogram: PvImagePixelCount; histogram_entries: Cardinal; minVal: Pixel_F;
  maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramCalculation_PlanarF';
function vImageHistogramCalculation_ARGB8888(src: PvImage_Buffer;
  histogram: PvImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramCalculation_ARGB8888';
function vImageHistogramCalculation_ARGBFFFF(src: PvImage_Buffer;
  histogram: PvImagePixelCount; histogram_entries: Cardinal; minVal: Pixel_F;
  maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramCalculation_ARGBFFFF';
function vImageEqualization_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEqualization_Planar8';
function vImageEqualization_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; histogram_entries: Cardinal; minVal: Pixel_F;
  maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEqualization_PlanarF';
function vImageEqualization_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEqualization_ARGB8888';
function vImageEqualization_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; histogram_entries: Cardinal; minVal: Pixel_F;
  maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEqualization_ARGBFFFF';
function vImageHistogramSpecification_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; desired_histogram: PvImagePixelCount;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramSpecification_Planar8';
function vImageHistogramSpecification_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  desired_histogram: PvImagePixelCount; histogram_entries: Cardinal;
  minVal: Pixel_F; maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramSpecification_PlanarF';
function vImageHistogramSpecification_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; desired_histogram: PvImagePixelCount;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramSpecification_ARGB8888';
function vImageHistogramSpecification_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer;
  desired_histogram: PvImagePixelCount; histogram_entries: Cardinal;
  minVal: Pixel_F; maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageHistogramSpecification_ARGBFFFF';
function vImageContrastStretch_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageContrastStretch_Planar8';
function vImageContrastStretch_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; histogram_entries: Cardinal;
  minVal: Pixel_F; maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageContrastStretch_PlanarF';
function vImageContrastStretch_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageContrastStretch_ARGB8888';
function vImageContrastStretch_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; histogram_entries: Cardinal;
  minVal: Pixel_F; maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageContrastStretch_ARGBFFFF';
function vImageEndsInContrastStretch_Planar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; percent_low: Cardinal; percent_high: Cardinal;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEndsInContrastStretch_Planar8';
function vImageEndsInContrastStretch_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; percent_low: Cardinal;
  percent_high: Cardinal; histogram_entries: Cardinal; minVal: Pixel_F;
  maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEndsInContrastStretch_PlanarF';
function vImageEndsInContrastStretch_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; percent_low: Cardinal; percent_high: Cardinal;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEndsInContrastStretch_ARGB8888';
function vImageEndsInContrastStretch_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; tempBuffer: Pointer; percent_low: Cardinal;
  percent_high: Cardinal; histogram_entries: Cardinal; minVal: Pixel_F;
  maxVal: Pixel_F; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageEndsInContrastStretch_ARGBFFFF';
function vImageDilate_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PByte; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageDilate_Planar8';
function vImageDilate_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PSingle; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageDilate_PlanarF';
function vImageDilate_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PByte; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageDilate_ARGB8888';
function vImageDilate_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PSingle; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageDilate_ARGBFFFF';
function vImageErode_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PByte; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageErode_Planar8';
function vImageErode_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PSingle; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageErode_PlanarF';
function vImageErode_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PByte; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageErode_ARGB8888';
function vImageErode_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  srcOffsetToROI_X: vImagePixelCount; srcOffsetToROI_Y: vImagePixelCount;
  kernel: PSingle; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageErode_ARGBFFFF';
function vImageMax_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMax_Planar8';
function vImageMax_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMax_PlanarF';
function vImageMax_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMax_ARGB8888';
function vImageMax_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMax_ARGBFFFF';
function vImageMin_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMin_Planar8';
function vImageMin_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMin_PlanarF';
function vImageMin_ARGB8888(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMin_ARGB8888';
function vImageMin_ARGBFFFF(src: PvImage_Buffer; dest: PvImage_Buffer;
  tempBuffer: Pointer; srcOffsetToROI_X: vImagePixelCount;
  srcOffsetToROI_Y: vImagePixelCount; kernel_height: vImagePixelCount;
  kernel_width: vImagePixelCount; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMin_ARGBFFFF';
function vImagePNGDecompressionFilter(buffer: PvImage_Buffer;
  startScanline: vImagePixelCount; scanlineCount: vImagePixelCount;
  bitsPerPixel: LongWord; filterMethodNumber: LongWord; filterType: LongWord;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePNGDecompressionFilter';
function vImageMatrixMultiply_Planar16S(srcs: PvImage_Buffer;
  dests: PvImage_Buffer; src_planes: LongWord; dest_planes: LongWord;
  matrix: Int16; divisor: Int32; pre_bias: PSmallInt; post_bias: PLongInt;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMatrixMultiply_Planar16S';
function vImageMatrixMultiply_Planar8(srcs: PvImage_Buffer;
  dests: PvImage_Buffer; src_planes: LongWord; dest_planes: LongWord;
  matrix: Int16; divisor: Int32; pre_bias: PSmallInt; post_bias: PLongInt;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMatrixMultiply_Planar8';
function vImageMatrixMultiply_PlanarF(srcs: PvImage_Buffer;
  dests: PvImage_Buffer; src_planes: LongWord; dest_planes: LongWord;
  matrix: Single; pre_bias: PSingle; post_bias: PSingle; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageMatrixMultiply_PlanarF';
function vImageMatrixMultiply_ARGB8888(src: PvImage_Buffer;
  dest: PvImage_Buffer; matrix: Int16; divisor: Int32; pre_bias: PSmallInt;
  post_bias: PLongInt; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMatrixMultiply_ARGB8888';
function vImageMatrixMultiply_ARGBFFFF(src: PvImage_Buffer;
  dest: PvImage_Buffer; matrix: Single; pre_bias: PSingle; post_bias: PSingle;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMatrixMultiply_ARGBFFFF';
function vImageMatrixMultiply_ARGB8888ToPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; matrix: Int16; divisor: Int32; pre_bias: Int16;
  post_bias: Int32; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMatrixMultiply_ARGB8888ToPlanar8';
function vImageMatrixMultiply_ARGBFFFFToPlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; matrix: Single; pre_bias: Single; post_bias: Single;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMatrixMultiply_ARGBFFFFToPlanarF';
function vImageCreateGammaFunction(gamma: Single; gamma_type: Integer;
  flags: vImage_Flags): GammaFunction; cdecl;
  external libAccelerate name _PU + 'vImageCreateGammaFunction';
procedure vImageDestroyGammaFunction(F: GammaFunction); cdecl;
  external libAccelerate name _PU + 'vImageDestroyGammaFunction';
function vImageGamma_Planar8toPlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  gamma: GammaFunction; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageGamma_Planar8toPlanarF';
function vImageGamma_PlanarFtoPlanar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  gamma: GammaFunction; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageGamma_PlanarFtoPlanar8';
function vImageGamma_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  gamma: GammaFunction; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageGamma_PlanarF';
function vImagePiecewiseGamma_Planar8(src: PvImage_Buffer; dest: PvImage_Buffer;
  exponentialCoeffs: Single; gamma: Single; linearCoeffs: Single;
  boundary: Pixel_8; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePiecewiseGamma_Planar8';
function vImagePiecewiseGamma_Planar8toPlanar16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; exponentialCoeffs: Single; gamma: Single;
  linearCoeffs: Single; boundary: Pixel_8; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImagePiecewiseGamma_Planar8toPlanar16Q12';
function vImagePiecewiseGamma_Planar16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; exponentialCoeffs: Single; gamma: Single;
  linearCoeffs: Single; boundary: Pixel_16S; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImagePiecewiseGamma_Planar16Q12';
function vImagePiecewiseGamma_Planar16Q12toPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; exponentialCoeffs: Single; gamma: Single;
  linearCoeffs: Single; boundary: Pixel_16S; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImagePiecewiseGamma_Planar16Q12toPlanar8';
function vImagePiecewiseGamma_Planar8toPlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; exponentialCoeffs: Single; gamma: Single;
  linearCoeffs: Single; boundary: Pixel_8; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImagePiecewiseGamma_Planar8toPlanarF';
function vImagePiecewiseGamma_PlanarF(src: PvImage_Buffer; dest: PvImage_Buffer;
  exponentialCoeffs: Single; gamma: Single; linearCoeffs: Single;
  boundary: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePiecewiseGamma_PlanarF';
function vImagePiecewiseGamma_PlanarFtoPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; exponentialCoeffs: Single; gamma: Single;
  linearCoeffs: Single; boundary: Single; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImagePiecewiseGamma_PlanarFtoPlanar8';
function vImageSymmetricPiecewiseGamma_Planar16Q12(src: PvImage_Buffer;
  dest: PvImage_Buffer; exponentialCoeffs: Single; gamma: Single;
  linearCoeffs: Single; boundary: Pixel_16S; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageSymmetricPiecewiseGamma_Planar16Q12';
function vImageSymmetricPiecewiseGamma_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; exponentialCoeffs: Single; gamma: Single;
  linearCoeffs: Single; boundary: Single; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageSymmetricPiecewiseGamma_PlanarF';
function vImagePiecewisePolynomial_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; coefficients: PSingle; boundaries: PSingle;
  order: LongWord; log2segments: LongWord; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImagePiecewisePolynomial_PlanarF';
function vImagePiecewisePolynomial_Planar8toPlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; coefficients: PSingle; boundaries: PSingle;
  order: LongWord; log2segments: LongWord; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImagePiecewisePolynomial_Planar8toPlanarF';
function vImagePiecewisePolynomial_PlanarFtoPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; coefficients: PSingle; boundaries: PSingle;
  order: LongWord; log2segments: LongWord; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImagePiecewisePolynomial_PlanarFtoPlanar8';
function vImageSymmetricPiecewisePolynomial_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; coefficients: PSingle; boundaries: PSingle;
  order: LongWord; log2segments: LongWord; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageSymmetricPiecewisePolynomial_PlanarF';
function vImagePiecewiseRational_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; topCoefficients: PSingle; bottomCoefficients: PSingle;
  boundaries: PSingle; topOrder: LongWord; bottomOrder: LongWord;
  log2segments: LongWord; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImagePiecewiseRational_PlanarF';
function vImageLookupTable_Planar8toPlanar16(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: Pixel_16U; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageLookupTable_Planar8toPlanar16';
function vImageLookupTable_Planar8toPlanar24(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: LongWord; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageLookupTable_Planar8toPlanar24';
function vImageLookupTable_Planar8toPlanar48(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: UInt64; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageLookupTable_Planar8toPlanar48';
function vImageLookupTable_Planar8toPlanar96(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: Pixel_FFFF; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageLookupTable_Planar8toPlanar96';
function vImageLookupTable_Planar8toPlanar128(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: Pixel_FFFF; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU +
  'vImageLookupTable_Planar8toPlanar128';
function vImageLookupTable_Planar8toPlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: Pixel_F; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageLookupTable_Planar8toPlanarF';
function vImageLookupTable_PlanarFtoPlanar8(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: Pixel_8; flags: vImage_Flags): vImage_Error;
  cdecl; external libAccelerate name _PU + 'vImageLookupTable_PlanarFtoPlanar8';
function vImageLookupTable_8to64U(src: PvImage_Buffer; dest: PvImage_Buffer;
  LUT: UInt64; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageLookupTable_8to64U';
function vImageLookupTable_Planar16(src: PvImage_Buffer; dest: PvImage_Buffer;
  table: Pixel_16U; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageLookupTable_Planar16';
function vImageInterpolatedLookupTable_PlanarF(src: PvImage_Buffer;
  dest: PvImage_Buffer; table: PPixel_F; tableEntries: vImagePixelCount;
  maxFloat: Single; minFloat: Single; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageInterpolatedLookupTable_PlanarF';
function vImageMultidimensionalTable_Create(tableData: PWord;
  numSrcChannels: LongWord; numDestChannels: LongWord;
  table_entries_per_dimension: Byte; hint: vImageMDTableUsageHint;
  flags: vImage_Flags; err: PvImage_Error): vImage_MultidimensionalTable; cdecl;
  external libAccelerate name _PU + 'vImageMultidimensionalTable_Create';
function vImageMultidimensionalTable_Retain(table: vImage_MultidimensionalTable)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageMultidimensionalTable_Retain';
function vImageMultidimensionalTable_Release
  (table: vImage_MultidimensionalTable): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageMultidimensionalTable_Release';
function vImageMultiDimensionalInterpolatedLookupTable_PlanarF
  (srcs: vImage_Buffer; dests: vImage_Buffer; tempBuffer: Pointer;
  table: vImage_MultidimensionalTable; method: vImage_InterpolationMethod;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageMultiDimensionalInterpolatedLookupTable_PlanarF';
function vImageMultiDimensionalInterpolatedLookupTable_Planar16Q12
  (srcs: vImage_Buffer; dests: vImage_Buffer; tempBuffer: Pointer;
  table: vImage_MultidimensionalTable; method: vImage_InterpolationMethod;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageMultiDimensionalInterpolatedLookupTable_Planar16Q12';
function vImageFloodFill_Planar8(srcDest: PvImage_Buffer; tempBuffer: Pointer;
  seedX: vImagePixelCount; seedY: vImagePixelCount; newValue: Pixel_8;
  connectivity: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFloodFill_Planar8';
function vImageFloodFill_Planar16U(srcDest: PvImage_Buffer; tempBuffer: Pointer;
  seedX: vImagePixelCount; seedY: vImagePixelCount; newValue: Pixel_16U;
  connectivity: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFloodFill_Planar16U';
function vImageFloodFill_ARGB8888(srcDest: PvImage_Buffer; tempBuffer: Pointer;
  seedX: vImagePixelCount; seedY: vImagePixelCount; newValue: Byte;
  connectivity: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFloodFill_ARGB8888';
function vImageFloodFill_ARGB16U(srcDest: PvImage_Buffer; tempBuffer: Pointer;
  seedX: vImagePixelCount; seedY: vImagePixelCount; newValue: Word;
  connectivity: Integer; flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageFloodFill_ARGB16U';
function vImageBuffer_Init(buf: PvImage_Buffer; height: vImagePixelCount;
  width: vImagePixelCount; pixelBits: LongWord; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU + 'vImageBuffer_Init';
function vImageBuffer_GetSize(buf: PvImage_Buffer): CGSize; cdecl;
  external libAccelerate name _PU + 'vImageBuffer_GetSize';
function vImageCGImageFormat_GetComponentCount(format: PvImage_CGImageFormat)
  : LongWord; cdecl; external libAccelerate name _PU +
  'vImageCGImageFormat_GetComponentCount';
function vImageCGImageFormat_IsEqual(f1: PvImage_CGImageFormat;
  f2: PvImage_CGImageFormat): Boolean; cdecl;
  external libAccelerate name _PU + 'vImageCGImageFormat_IsEqual';
function vImageBuffer_InitWithCGImage(buf: PvImage_Buffer;
  format: PvImage_CGImageFormat; backgroundColor: PCGFloat; image: CGImageRef;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBuffer_InitWithCGImage';
function vImageCreateCGImageFromBuffer(buf: PvImage_Buffer;
  format: PvImage_CGImageFormat; callback: TAccelerateCallback;
  userData: Pointer; flags: vImage_Flags; error: PvImage_Error): CGImageRef;
  cdecl; external libAccelerate name _PU + 'vImageCreateCGImageFromBuffer';
procedure vImageConverter_Retain(converter: vImageConverterRef); cdecl;
  external libAccelerate name _PU + 'vImageConverter_Retain';
procedure vImageConverter_Release(converter: vImageConverterRef); cdecl;
  external libAccelerate name _PU + 'vImageConverter_Release';
function vImageConverter_CreateWithCGImageFormat
  (srcFormat: PvImage_CGImageFormat; destFormat: PvImage_CGImageFormat;
  backgroundColor: PCGFloat; flags: vImage_Flags; error: PvImage_Error)
  : vImageConverterRef; cdecl;
  external libAccelerate name _PU + 'vImageConverter_CreateWithCGImageFormat';
function vImageConverter_CreateWithColorSyncCodeFragment
  (codeFragment: CFTypeRef; srcFormat: PvImage_CGImageFormat;
  destFormat: PvImage_CGImageFormat; backgroundColor: PCGFloat;
  flags: vImage_Flags; error: PvImage_Error): vImageConverterRef; cdecl;
  external libAccelerate name _PU +
  'vImageConverter_CreateWithColorSyncCodeFragment';
function vImageConverter_CreateWithCGColorConversionInfo(colorConversionInfoRef
  : CGColorConversionInfoRef; sFormat: PvImage_CGImageFormat;
  dFormat: PvImage_CGImageFormat; bg: PCGFloat; flags: vImage_Flags;
  error: PvImage_Error): vImageConverterRef; cdecl;
  external libAccelerate name _PU +
  'vImageConverter_CreateWithCGColorConversionInfo';
function vImageConverter_MustOperateOutOfPlace(converter: vImageConverterRef;
  srcs: PvImage_Buffer; dests: PvImage_Buffer; flags: vImage_Flags)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageConverter_MustOperateOutOfPlace';
function vImageConverter_GetNumberOfSourceBuffers(converter: vImageConverterRef)
  : LongWord; cdecl; external libAccelerate name _PU +
  'vImageConverter_GetNumberOfSourceBuffers';
function vImageConverter_GetNumberOfDestinationBuffers
  (converter: vImageConverterRef): LongWord; cdecl;
  external libAccelerate name _PU +
  'vImageConverter_GetNumberOfDestinationBuffers';
function vImageConverter_GetSourceBufferOrder(converter: vImageConverterRef)
  : PvImageBufferTypeCode; cdecl;
  external libAccelerate name _PU + 'vImageConverter_GetSourceBufferOrder';
function vImageConverter_GetDestinationBufferOrder
  (converter: vImageConverterRef): PvImageBufferTypeCode; cdecl;
  external libAccelerate name _PU + 'vImageConverter_GetDestinationBufferOrder';
function vImageConvert_AnyToAny(converter: vImageConverterRef;
  srcs: PvImage_Buffer; dests: PvImage_Buffer; tempBuffer: Pointer;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageConvert_AnyToAny';
function vImageBuffer_InitWithCVPixelBuffer(buffer: PvImage_Buffer;
  desiredFormat: PvImage_CGImageFormat; cvPixelBuffer: CVPixelBufferRef;
  cvImageFormat: vImageCVImageFormatRef; backgroundColor: PCGFloat;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBuffer_InitWithCVPixelBuffer';
function vImageBuffer_CopyToCVPixelBuffer(buffer: PvImage_Buffer;
  bufferFormat: PvImage_CGImageFormat; cvPixelBuffer: CVPixelBufferRef;
  cvImageFormat: vImageCVImageFormatRef; backgroundColor: PCGFloat;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBuffer_CopyToCVPixelBuffer';
function vImageCVImageFormat_CreateWithCVPixelBuffer(buffer: CVPixelBufferRef)
  : vImageCVImageFormatRef; cdecl;
  external libAccelerate name _PU +
  'vImageCVImageFormat_CreateWithCVPixelBuffer';
function vImageCVImageFormat_Create(imageFormatType: LongWord;
  matrix: PvImage_ARGBToYpCbCrMatrix; cvImageBufferChromaLocation: CFStringRef;
  baseColorspace: CGColorSpaceRef; alphaIsOneHint: Integer)
  : vImageCVImageFormatRef; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_Create';
function vImageCVImageFormat_Copy(format: vImageConstCVImageFormatRef)
  : vImageCVImageFormatRef; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_Copy';
procedure vImageCVImageFormat_Retain(fmt: vImageCVImageFormatRef); cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_Retain';
procedure vImageCVImageFormat_Release(fmt: vImageCVImageFormatRef); cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_Release';
function vImageCVImageFormat_GetFormatCode(format: vImageConstCVImageFormatRef)
  : LongWord; cdecl; external libAccelerate name _PU +
  'vImageCVImageFormat_GetFormatCode';
function vImageCVImageFormat_GetChannelCount
  (format: vImageConstCVImageFormatRef): LongWord; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_GetChannelCount';
function vImageCVImageFormat_GetChannelNames
  (format: vImageConstCVImageFormatRef): PvImageBufferTypeCode; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_GetChannelNames';
function vImageCVImageFormat_GetColorSpace(format: vImageConstCVImageFormatRef)
  : CGColorSpaceRef; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_GetColorSpace';
function vImageCVImageFormat_SetColorSpace(format: vImageCVImageFormatRef;
  colorSpace: CGColorSpaceRef): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_SetColorSpace';
function vImageCVImageFormat_GetChromaSiting
  (format: vImageConstCVImageFormatRef): CFStringRef; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_GetChromaSiting';
function vImageCVImageFormat_SetChromaSiting(format: vImageCVImageFormatRef;
  siting: CFStringRef): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_SetChromaSiting';
function vImageCVImageFormat_GetConversionMatrix
  (format: vImageConstCVImageFormatRef; outType: PvImageMatrixType): Pointer;
  cdecl; external libAccelerate name _PU +
  'vImageCVImageFormat_GetConversionMatrix';
function vImageCVImageFormat_CopyConversionMatrix
  (format: vImageCVImageFormatRef; matrix: Pointer; inType: vImageMatrixType)
  : vImage_Error; cdecl; external libAccelerate name _PU +
  'vImageCVImageFormat_CopyConversionMatrix';
function vImageCVImageFormat_GetAlphaHint(format: vImageConstCVImageFormatRef)
  : Integer; cdecl; external libAccelerate name _PU +
  'vImageCVImageFormat_GetAlphaHint';
function vImageCVImageFormat_SetAlphaHint(format: vImageCVImageFormatRef;
  alphaIsOne: Integer): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_SetAlphaHint';
function vImageCVImageFormat_GetChannelDescription
  (format: vImageConstCVImageFormatRef; &type: vImageBufferTypeCode)
  : PvImageChannelDescription; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_GetChannelDescription';
function vImageCVImageFormat_CopyChannelDescription
  (format: vImageCVImageFormatRef; desc: PvImageChannelDescription;
  &type: vImageBufferTypeCode): vImage_Error; cdecl;
  external libAccelerate name _PU +
  'vImageCVImageFormat_CopyChannelDescription';
function vImageCVImageFormat_GetUserData(format: vImageConstCVImageFormatRef)
  : Pointer; cdecl; external libAccelerate name _PU +
  'vImageCVImageFormat_GetUserData';
function vImageCVImageFormat_SetUserData(format: vImageCVImageFormatRef;
  userData: Pointer; userDataReleaseCallback
  : TAccelerateUserDataReleaseCallback): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageCVImageFormat_SetUserData';
function vImageCreateRGBColorSpaceWithPrimariesAndTransferFunction
  (primaries: PvImageRGBPrimaries; tf: PvImageTransferFunction;
  intent: CGColorRenderingIntent; flags: vImage_Flags; error: PvImage_Error)
  : CGColorSpaceRef; cdecl;
  external libAccelerate name _PU +
  'vImageCreateRGBColorSpaceWithPrimariesAndTransferFunction';
function vImageCreateMonochromeColorSpaceWithWhitePointAndTransferFunction
  (whitePoint: PvImageWhitePoint; tf: PvImageTransferFunction;
  intent: CGColorRenderingIntent; flags: vImage_Flags; error: PvImage_Error)
  : CGColorSpaceRef; cdecl;
  external libAccelerate name _PU +
  'vImageCreateMonochromeColorSpaceWithWhitePointAndTransferFunction';
function vImageConverter_CreateForCGToCVImageFormat
  (srcFormat: PvImage_CGImageFormat; destFormat: vImageCVImageFormatRef;
  backgroundColor: PCGFloat; flags: vImage_Flags; error: PvImage_Error)
  : vImageConverterRef; cdecl;
  external libAccelerate name _PU +
  'vImageConverter_CreateForCGToCVImageFormat';
function vImageConverter_CreateForCVToCGImageFormat
  (srcFormat: vImageCVImageFormatRef; destFormat: PvImage_CGImageFormat;
  backgroundColor: PCGFloat; flags: vImage_Flags; error: PvImage_Error)
  : vImageConverterRef; cdecl;
  external libAccelerate name _PU +
  'vImageConverter_CreateForCVToCGImageFormat';
function vImageBuffer_InitForCopyToCVPixelBuffer(buffers: PvImage_Buffer;
  converter: vImageConverterRef; pixelBuffer: CVPixelBufferRef;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBuffer_InitForCopyToCVPixelBuffer';
function vImageBuffer_InitForCopyFromCVPixelBuffer(buffers: PvImage_Buffer;
  converter: vImageConverterRef; pixelBuffer: CVPixelBufferRef;
  flags: vImage_Flags): vImage_Error; cdecl;
  external libAccelerate name _PU + 'vImageBuffer_InitForCopyFromCVPixelBuffer';

implementation

{$IF defined(IOS) and NOT defined(CPUARM)}

uses
  Posix.Dlfcn;

var
  AccelerateModule: THandle;

{$ENDIF IOS}

function kvImage_YpCbCrToARGBMatrix_ITU_R_601_4: Pointer;
begin
  result := CocoaPointerConst(libAccelerate,
    'kvImage_YpCbCrToARGBMatrix_ITU_R_601_4');
end;

function kvImage_YpCbCrToARGBMatrix_ITU_R_709_2: Pointer;
begin
  result := CocoaPointerConst(libAccelerate,
    'kvImage_YpCbCrToARGBMatrix_ITU_R_709_2');
end;

function kvImage_ARGBToYpCbCrMatrix_ITU_R_601_4: Pointer;
begin
  result := CocoaPointerConst(libAccelerate,
    'kvImage_ARGBToYpCbCrMatrix_ITU_R_601_4');
end;

function kvImage_ARGBToYpCbCrMatrix_ITU_R_709_2: Pointer;
begin
  result := CocoaPointerConst(libAccelerate,
    'kvImage_ARGBToYpCbCrMatrix_ITU_R_709_2');
end;

function kvImageDecodeArray_16Q12Format: Pointer;
begin
  result := CocoaPointerConst(libAccelerate, 'kvImageDecodeArray_16Q12Format');
end;

{$IF defined(IOS) and NOT defined(CPUARM)}

initialization

AccelerateModule := dlopen(MarshaledAString(libAccelerate), RTLD_LAZY);

finalization

dlclose(AccelerateModule);
{$ENDIF IOS}

end.
