{ *********************************************************** }
{ }
{ CodeGear Delphi Runtime Library }
{ }
{ Copyright(c) 2012-2014 Embarcadero Technologies, Inc. }
{ }
{ *********************************************************** }

//
// Delphi-Objective-C Bridge
// Interfaces for Cocoa framework UIKit
//

unit iOSapi.UIKit;

interface

uses
  Macapi.CoreFoundation,
  Macapi.CoreServices,
  Macapi.Dispatch,
  Macapi.Mach,
  Macapi.ObjCRuntime,
  Macapi.ObjectiveC,
  iOSapi.CocoaTypes,
  iOSapi.CoreData,
  iOSapi.CoreGraphics,
  iOSapi.CoreImage,
  iOSapi.CoreText,
  iOSapi.Foundation,
  iOSapi.QuartzCore,
  iOSapi.UserNotifications;

const
  UIMenuElementStateOff = 0;
  UIMenuElementStateOn = 1;
  UIMenuElementStateMixed = 2;
  UIMenuElementAttributesDisabled = 1 shl 0;
  UIMenuElementAttributesDestructive = 1 shl 1;
  UIMenuElementAttributesHidden = 1 shl 2;
  UIMenuElementAttributesKeepsMenuPresented = 1 shl 3;
  UIMenuOptionsDisplayInline = 1 shl 0;
  UIMenuOptionsDestructive = 1 shl 1;
  UIMenuOptionsSingleSelection = 1 shl 5;
  UIMenuElementSizeSmall = 0;
  UIMenuElementSizeMedium = 1;
  UIMenuElementSizeLarge = 2;
  UIKeyModifierAlphaShift = 1 shl 16;
  UIKeyModifierShift = 1 shl 17;
  UIKeyModifierControl = 1 shl 18;
  UIKeyModifierAlternate = 1 shl 19;
  UIKeyModifierCommand = 1 shl 20;
  UIKeyModifierNumericPad = 1 shl 21;
  UIEventTypeTouches = 0;
  UIEventTypeMotion = 1;
  UIEventTypeRemoteControl = 2;
  UIEventTypePresses = 3;
  UIEventTypeScroll = 10;
  UIEventTypeHover = 11;
  UIEventTypeTransform = 14;
  UIEventSubtypeNone = 0;
  UIEventSubtypeMotionShake = 1;
  UIEventSubtypeRemoteControlPlay = 100;
  UIEventSubtypeRemoteControlPause = 101;
  UIEventSubtypeRemoteControlStop = 102;
  UIEventSubtypeRemoteControlTogglePlayPause = 103;
  UIEventSubtypeRemoteControlNextTrack = 104;
  UIEventSubtypeRemoteControlPreviousTrack = 105;
  UIEventSubtypeRemoteControlBeginSeekingBackward = 106;
  UIEventSubtypeRemoteControlEndSeekingBackward = 107;
  UIEventSubtypeRemoteControlBeginSeekingForward = 108;
  UIEventSubtypeRemoteControlEndSeekingForward = 109;
  UIEventButtonMaskPrimary = 1 shl 0;
  UIEventButtonMaskSecondary = 1 shl 1;
  UIEditingInteractionConfigurationNone = 0;
  UIEditingInteractionConfigurationDefault = 1;
  UIFontDescriptorTraitItalic = 1 shl 0;
  UIFontDescriptorTraitBold = 1 shl 1;
  UIFontDescriptorTraitExpanded = 1 shl 5;
  UIFontDescriptorTraitCondensed = 1 shl 6;
  UIFontDescriptorTraitMonoSpace = 1 shl 10;
  UIFontDescriptorTraitVertical = 1 shl 11;
  UIFontDescriptorTraitUIOptimized = 1 shl 12;
  UIFontDescriptorTraitTightLeading = 1 shl 15;
  UIFontDescriptorTraitLooseLeading = 1 shl 16;
  UIFontDescriptorClassMask = 4026531840;
  UIFontDescriptorClassUnknown = 0 shl 28;
  UIFontDescriptorClassOldStyleSerifs = 1 shl 28;
  UIFontDescriptorClassTransitionalSerifs = 2 shl 28;
  UIFontDescriptorClassModernSerifs = 3 shl 28;
  UIFontDescriptorClassClarendonSerifs = 4 shl 28;
  UIFontDescriptorClassSlabSerifs = 5 shl 28;
  UIFontDescriptorClassFreeformSerifs = 7 shl 28;
  UIFontDescriptorClassSansSerif = 8 shl 28;
  UIFontDescriptorClassOrnamentals = 9 shl 28;
  UIFontDescriptorClassScripts = 10 shl 28;
  UIFontDescriptorClassSymbolic = 12 shl 28;
  UIBarStyleDefault = 0;
  UIBarStyleBlack = 1;
  UIBarStyleBlackOpaque = 1;
  UIBarStyleBlackTranslucent = 2;
  UIUserInterfaceSizeClassUnspecified = 0;
  UIUserInterfaceSizeClassCompact = 1;
  UIUserInterfaceSizeClassRegular = 2;
  UIUserInterfaceStyleUnspecified = 0;
  UIUserInterfaceStyleLight = 1;
  UIUserInterfaceStyleDark = 2;
  UIUserInterfaceLayoutDirectionLeftToRight = 0;
  UIUserInterfaceLayoutDirectionRightToLeft = 1;
  UITraitEnvironmentLayoutDirectionUnspecified = -1;
  UITraitEnvironmentLayoutDirectionLeftToRight =
    UIUserInterfaceLayoutDirectionLeftToRight;
  UITraitEnvironmentLayoutDirectionRightToLeft =
    UIUserInterfaceLayoutDirectionRightToLeft;
  UIDisplayGamutUnspecified = -1;
  UIDisplayGamutSRGB = 0;
  UIDisplayGamutP3 = 1;
  UIAccessibilityContrastUnspecified = -1;
  UIAccessibilityContrastNormal = 0;
  UIAccessibilityContrastHigh = 1;
  UILegibilityWeightUnspecified = -1;
  UILegibilityWeightRegular = 0;
  UILegibilityWeightBold = 1;
  UIUserInterfaceLevelUnspecified = -1;
  UIUserInterfaceLevelBase = 0;
  UIUserInterfaceLevelElevated = 1;
  UIUserInterfaceActiveAppearanceUnspecified = -1;
  UIUserInterfaceActiveAppearanceInactive = 0;
  UIUserInterfaceActiveAppearanceActive = 1;
  UINSToolbarItemPresentationSizeUnspecified = -1;
  UINSToolbarItemPresentationSizeRegular = 0;
  UINSToolbarItemPresentationSizeSmall = 1;
  UINSToolbarItemPresentationSizeLarge = 3;
  UIDeviceOrientationUnknown = 0;
  UIDeviceOrientationPortrait = 1;
  UIDeviceOrientationPortraitUpsideDown = 2;
  UIDeviceOrientationLandscapeLeft = 3;
  UIDeviceOrientationLandscapeRight = 4;
  UIDeviceOrientationFaceUp = 5;
  UIDeviceOrientationFaceDown = 6;
  UIDeviceBatteryStateUnknown = 0;
  UIDeviceBatteryStateUnplugged = 1;
  UIDeviceBatteryStateCharging = 2;
  UIDeviceBatteryStateFull = 3;
  UIUserInterfaceIdiomUnspecified = -1;
  UIUserInterfaceIdiomPhone = 0;
  UIUserInterfaceIdiomPad = 1;
  UIUserInterfaceIdiomTV = 2;
  UIUserInterfaceIdiomCarPlay = 3;
  UIUserInterfaceIdiomMac = 5;
  UIRectEdgeNone = 0;
  UIRectEdgeTop = 1 shl 0;
  UIRectEdgeLeft = 1 shl 1;
  UIRectEdgeBottom = 1 shl 2;
  UIRectEdgeRight = 1 shl 3;
  UIRectEdgeAll = UIRectEdgeTop or UIRectEdgeLeft or UIRectEdgeBottom or
    UIRectEdgeRight;
  UIRectCornerTopLeft = 1 shl 0;
  UIRectCornerTopRight = 1 shl 1;
  UIRectCornerBottomLeft = 1 shl 2;
  UIRectCornerBottomRight = 1 shl 3;
  UIRectCornerAllCorners = not 0;
  UIAxisNeither = 0;
  UIAxisHorizontal = 1 shl 0;
  UIAxisVertical = 1 shl 1;
  UIAxisBoth = (UIAxisHorizontal or UIAxisVertical);
  NSDirectionalRectEdgeNone = 0;
  NSDirectionalRectEdgeTop = 1 shl 0;
  NSDirectionalRectEdgeLeading = 1 shl 1;
  NSDirectionalRectEdgeBottom = 1 shl 2;
  NSDirectionalRectEdgeTrailing = 1 shl 3;
  NSDirectionalRectEdgeAll = NSDirectionalRectEdgeTop or
    NSDirectionalRectEdgeLeading or NSDirectionalRectEdgeBottom or
    NSDirectionalRectEdgeTrailing;
  UIDirectionalRectEdgeNone = 0;
  UIDirectionalRectEdgeTop = 1 shl 0;
  UIDirectionalRectEdgeLeading = 1 shl 1;
  UIDirectionalRectEdgeBottom = 1 shl 2;
  UIDirectionalRectEdgeTrailing = 1 shl 3;
  UIDirectionalRectEdgeAll = UIDirectionalRectEdgeTop or
    UIDirectionalRectEdgeLeading or UIDirectionalRectEdgeBottom or
    UIDirectionalRectEdgeTrailing;
  NSRectAlignmentNone = 0;
  NSRectAlignmentTop = 1;
  NSRectAlignmentTopLeading = 2;
  NSRectAlignmentLeading = 3;
  NSRectAlignmentBottomLeading = 4;
  NSRectAlignmentBottom = 5;
  NSRectAlignmentBottomTrailing = 6;
  NSRectAlignmentTrailing = 7;
  NSRectAlignmentTopTrailing = 8;
  UIDynamicItemCollisionBoundsTypeRectangle = 0;
  UIDynamicItemCollisionBoundsTypeEllipse = 1;
  UIDynamicItemCollisionBoundsTypePath = 2;
  NSLayoutRelationLessThanOrEqual = -1;
  NSLayoutRelationEqual = 0;
  NSLayoutRelationGreaterThanOrEqual = 1;
  NSLayoutAttributeLeft = 1;
  NSLayoutAttributeRight = 2;
  NSLayoutAttributeTop = 3;
  NSLayoutAttributeBottom = 4;
  NSLayoutAttributeLeading = 5;
  NSLayoutAttributeTrailing = 6;
  NSLayoutAttributeWidth = 7;
  NSLayoutAttributeHeight = 8;
  NSLayoutAttributeCenterX = 9;
  NSLayoutAttributeCenterY = 10;
  NSLayoutAttributeLastBaseline = 11;
  NSLayoutAttributeBaseline = NSLayoutAttributeLastBaseline;
  NSLayoutAttributeFirstBaseline = 12;
  NSLayoutAttributeLeftMargin = 13;
  NSLayoutAttributeRightMargin = 14;
  NSLayoutAttributeTopMargin = 15;
  NSLayoutAttributeBottomMargin = 16;
  NSLayoutAttributeLeadingMargin = 17;
  NSLayoutAttributeTrailingMargin = 18;
  NSLayoutAttributeCenterXWithinMargins = 19;
  NSLayoutAttributeCenterYWithinMargins = 20;
  NSLayoutAttributeNotAnAttribute = 0;
  NSLayoutFormatAlignAllLeft = (1 shl NSLayoutAttributeLeft);
  NSLayoutFormatAlignAllRight = (1 shl NSLayoutAttributeRight);
  NSLayoutFormatAlignAllTop = (1 shl NSLayoutAttributeTop);
  NSLayoutFormatAlignAllBottom = (1 shl NSLayoutAttributeBottom);
  NSLayoutFormatAlignAllLeading = (1 shl NSLayoutAttributeLeading);
  NSLayoutFormatAlignAllTrailing = (1 shl NSLayoutAttributeTrailing);
  NSLayoutFormatAlignAllCenterX = (1 shl NSLayoutAttributeCenterX);
  NSLayoutFormatAlignAllCenterY = (1 shl NSLayoutAttributeCenterY);
  NSLayoutFormatAlignAllLastBaseline = (1 shl NSLayoutAttributeLastBaseline);
  NSLayoutFormatAlignAllFirstBaseline = (1 shl NSLayoutAttributeFirstBaseline);
  NSLayoutFormatAlignAllBaseline = NSLayoutFormatAlignAllLastBaseline;
  NSLayoutFormatAlignmentMask = 65535;
  NSLayoutFormatDirectionLeadingToTrailing = 0 shl 16;
  NSLayoutFormatDirectionLeftToRight = 1 shl 16;
  NSLayoutFormatDirectionRightToLeft = 2 shl 16;
  NSLayoutFormatDirectionMask = 3 shl 16;
  NSLayoutFormatSpacingEdgeToEdge = 0 shl 19;
  NSLayoutFormatSpacingBaselineToBaseline = 1 shl 19;
  NSLayoutFormatSpacingMask = 1 shl 19;
  UITouchPhaseBegan = 0;
  UITouchPhaseMoved = 1;
  UITouchPhaseStationary = 2;
  UITouchPhaseEnded = 3;
  UITouchPhaseCancelled = 4;
  UITouchPhaseRegionEntered = 5;
  UITouchPhaseRegionMoved = 6;
  UITouchPhaseRegionExited = 7;
  UIForceTouchCapabilityUnknown = 0;
  UIForceTouchCapabilityUnavailable = 1;
  UIForceTouchCapabilityAvailable = 2;
  UITouchTypeDirect = 0;
  UITouchTypeIndirect = 1;
  UITouchTypePencil = 2;
  UITouchTypeStylus = UITouchTypePencil;
  UITouchTypeIndirectPointer = 3;
  UITouchPropertyForce = (1 shl 0);
  UITouchPropertyAzimuth = (1 shl 1);
  UITouchPropertyAltitude = (1 shl 2);
  UITouchPropertyLocation = (1 shl 3);
  UIFocusHeadingNone = 0;
  UIFocusHeadingUp = 1 shl 0;
  UIFocusHeadingDown = 1 shl 1;
  UIFocusHeadingLeft = 1 shl 2;
  UIFocusHeadingRight = 1 shl 3;
  UIFocusHeadingNext = 1 shl 4;
  UIFocusHeadingPrevious = 1 shl 5;
  UIFocusHeadingFirst = 1 shl 8;
  UIFocusHeadingLast = 1 shl 9;
  UIViewAnimationCurveEaseInOut = 0;
  UIViewAnimationCurveEaseIn = 1;
  UIViewAnimationCurveEaseOut = 2;
  UIViewAnimationCurveLinear = 3;
  UIViewContentModeScaleToFill = 0;
  UIViewContentModeScaleAspectFit = 1;
  UIViewContentModeScaleAspectFill = 2;
  UIViewContentModeRedraw = 3;
  UIViewContentModeCenter = 4;
  UIViewContentModeTop = 5;
  UIViewContentModeBottom = 6;
  UIViewContentModeLeft = 7;
  UIViewContentModeRight = 8;
  UIViewContentModeTopLeft = 9;
  UIViewContentModeTopRight = 10;
  UIViewContentModeBottomLeft = 11;
  UIViewContentModeBottomRight = 12;
  UIViewAnimationTransitionNone = 0;
  UIViewAnimationTransitionFlipFromLeft = 1;
  UIViewAnimationTransitionFlipFromRight = 2;
  UIViewAnimationTransitionCurlUp = 3;
  UIViewAnimationTransitionCurlDown = 4;
  UIViewAutoresizingNone = 0;
  UIViewAutoresizingFlexibleLeftMargin = 1 shl 0;
  UIViewAutoresizingFlexibleWidth = 1 shl 1;
  UIViewAutoresizingFlexibleRightMargin = 1 shl 2;
  UIViewAutoresizingFlexibleTopMargin = 1 shl 3;
  UIViewAutoresizingFlexibleHeight = 1 shl 4;
  UIViewAutoresizingFlexibleBottomMargin = 1 shl 5;
  UIViewAnimationOptionLayoutSubviews = 1 shl 0;
  UIViewAnimationOptionAllowUserInteraction = 1 shl 1;
  UIViewAnimationOptionBeginFromCurrentState = 1 shl 2;
  UIViewAnimationOptionRepeat = 1 shl 3;
  UIViewAnimationOptionAutoreverse = 1 shl 4;
  UIViewAnimationOptionOverrideInheritedDuration = 1 shl 5;
  UIViewAnimationOptionOverrideInheritedCurve = 1 shl 6;
  UIViewAnimationOptionAllowAnimatedContent = 1 shl 7;
  UIViewAnimationOptionShowHideTransitionViews = 1 shl 8;
  UIViewAnimationOptionOverrideInheritedOptions = 1 shl 9;
  UIViewAnimationOptionCurveEaseInOut = 0 shl 16;
  UIViewAnimationOptionCurveEaseIn = 1 shl 16;
  UIViewAnimationOptionCurveEaseOut = 2 shl 16;
  UIViewAnimationOptionCurveLinear = 3 shl 16;
  UIViewAnimationOptionTransitionNone = 0 shl 20;
  UIViewAnimationOptionTransitionFlipFromLeft = 1 shl 20;
  UIViewAnimationOptionTransitionFlipFromRight = 2 shl 20;
  UIViewAnimationOptionTransitionCurlUp = 3 shl 20;
  UIViewAnimationOptionTransitionCurlDown = 4 shl 20;
  UIViewAnimationOptionTransitionCrossDissolve = 5 shl 20;
  UIViewAnimationOptionTransitionFlipFromTop = 6 shl 20;
  UIViewAnimationOptionTransitionFlipFromBottom = 7 shl 20;
  UIViewAnimationOptionPreferredFramesPerSecondDefault = 0 shl 24;
  UIViewAnimationOptionPreferredFramesPerSecond60 = 3 shl 24;
  UIViewAnimationOptionPreferredFramesPerSecond30 = 7 shl 24;
  UIViewKeyframeAnimationOptionLayoutSubviews =
    UIViewAnimationOptionLayoutSubviews;
  UIViewKeyframeAnimationOptionAllowUserInteraction =
    UIViewAnimationOptionAllowUserInteraction;
  UIViewKeyframeAnimationOptionBeginFromCurrentState =
    UIViewAnimationOptionBeginFromCurrentState;
  UIViewKeyframeAnimationOptionRepeat = UIViewAnimationOptionRepeat;
  UIViewKeyframeAnimationOptionAutoreverse = UIViewAnimationOptionAutoreverse;
  UIViewKeyframeAnimationOptionOverrideInheritedDuration =
    UIViewAnimationOptionOverrideInheritedDuration;
  UIViewKeyframeAnimationOptionOverrideInheritedOptions =
    UIViewAnimationOptionOverrideInheritedOptions;
  UIViewKeyframeAnimationOptionCalculationModeLinear = 0 shl 10;
  UIViewKeyframeAnimationOptionCalculationModeDiscrete = 1 shl 10;
  UIViewKeyframeAnimationOptionCalculationModePaced = 2 shl 10;
  UIViewKeyframeAnimationOptionCalculationModeCubic = 3 shl 10;
  UIViewKeyframeAnimationOptionCalculationModeCubicPaced = 4 shl 10;
  UISystemAnimationDelete = 0;
  UIViewTintAdjustmentModeAutomatic = 0;
  UIViewTintAdjustmentModeNormal = 1;
  UIViewTintAdjustmentModeDimmed = 2;
  UISemanticContentAttributeUnspecified = 0;
  UISemanticContentAttributePlayback = 1;
  UISemanticContentAttributeSpatial = 2;
  UISemanticContentAttributeForceLeftToRight = 3;
  UISemanticContentAttributeForceRightToLeft = 4;
  UILayoutConstraintAxisHorizontal = 0;
  UILayoutConstraintAxisVertical = 1;
  UIContextMenuConfigurationElementOrderAutomatic = 0;
  UIContextMenuConfigurationElementOrderPriority = 1;
  UIContextMenuConfigurationElementOrderFixed = 2;
  UIContextMenuInteractionCommitStyleDismiss = 0;
  UIContextMenuInteractionCommitStylePop = 1;
  UIContextMenuInteractionAppearanceUnknown = 0;
  UIContextMenuInteractionAppearanceRich = 1;
  UIContextMenuInteractionAppearanceCompact = 2;
  UIControlEventTouchDown = 1 shl 0;
  UIControlEventTouchDownRepeat = 1 shl 1;
  UIControlEventTouchDragInside = 1 shl 2;
  UIControlEventTouchDragOutside = 1 shl 3;
  UIControlEventTouchDragEnter = 1 shl 4;
  UIControlEventTouchDragExit = 1 shl 5;
  UIControlEventTouchUpInside = 1 shl 6;
  UIControlEventTouchUpOutside = 1 shl 7;
  UIControlEventTouchCancel = 1 shl 8;
  UIControlEventValueChanged = 1 shl 12;
  UIControlEventPrimaryActionTriggered = 1 shl 13;
  UIControlEventMenuActionTriggered = 1 shl 14;
  UIControlEventEditingDidBegin = 1 shl 16;
  UIControlEventEditingChanged = 1 shl 17;
  UIControlEventEditingDidEnd = 1 shl 18;
  UIControlEventEditingDidEndOnExit = 1 shl 19;
  UIControlEventAllTouchEvents = 4095;
  UIControlEventAllEditingEvents = 983040;
  UIControlEventApplicationReserved = 251658240;
  UIControlEventSystemReserved = 4026531840;
  UIControlEventAllEvents = 4294967295;
  UIControlContentVerticalAlignmentCenter = 0;
  UIControlContentVerticalAlignmentTop = 1;
  UIControlContentVerticalAlignmentBottom = 2;
  UIControlContentVerticalAlignmentFill = 3;
  UIControlContentHorizontalAlignmentCenter = 0;
  UIControlContentHorizontalAlignmentLeft = 1;
  UIControlContentHorizontalAlignmentRight = 2;
  UIControlContentHorizontalAlignmentFill = 3;
  UIControlContentHorizontalAlignmentLeading = 4;
  UIControlContentHorizontalAlignmentTrailing = 5;
  UIControlStateNormal = 0;
  UIControlStateHighlighted = 1 shl 0;
  UIControlStateDisabled = 1 shl 1;
  UIControlStateSelected = 1 shl 2;
  UIControlStateFocused = 1 shl 3;
  UIControlStateApplication = 16711680;
  UIControlStateReserved = 4278190080;
  NSTextAlignmentLeft = 0;
  NSTextAlignmentCenter = 1;
  NSTextAlignmentRight = 2;
  NSTextAlignmentJustified = 3;
  NSTextAlignmentNatural = 4;
  NSWritingDirectionNatural = -1;
  NSWritingDirectionLeftToRight = 0;
  NSWritingDirectionRightToLeft = 1;
  NSLineBreakByWordWrapping = 0;
  NSLineBreakByCharWrapping = 1;
  NSLineBreakByClipping = 2;
  NSLineBreakByTruncatingHead = 3;
  NSLineBreakByTruncatingTail = 4;
  NSLineBreakByTruncatingMiddle = 5;
  NSLineBreakStrategyNone = 0;
  NSLineBreakStrategyPushOut = 1 shl 0;
  NSLineBreakStrategyHangulWordPriority = 1 shl 1;
  NSLineBreakStrategyStandard = 65535;
  UILineBreakModeWordWrap = 0;
  UILineBreakModeCharacterWrap = 1;
  UILineBreakModeClip = 2;
  UILineBreakModeHeadTruncation = 3;
  UILineBreakModeTailTruncation = 4;
  UILineBreakModeMiddleTruncation = 5;
  UITextAlignmentLeft = 0;
  UITextAlignmentCenter = 1;
  UITextAlignmentRight = 2;
  UIBaselineAdjustmentAlignBaselines = 0;
  UIBaselineAdjustmentAlignCenters = 1;
  UIBaselineAdjustmentNone = 2;
  UIDropOperationCancel = 0;
  UIDropOperationForbidden = 1;
  UIDropOperationCopy = 2;
  UIDropOperationMove = 3;
  UIViewAnimatingStateInactive = 0;
  UIViewAnimatingStateActive = 1;
  UIViewAnimatingStateStopped = 2;
  UIViewAnimatingPositionEnd = 0;
  UIViewAnimatingPositionStart = 1;
  UIViewAnimatingPositionCurrent = 2;
  UITextAutocapitalizationTypeNone = 0;
  UITextAutocapitalizationTypeWords = 1;
  UITextAutocapitalizationTypeSentences = 2;
  UITextAutocapitalizationTypeAllCharacters = 3;
  UITextAutocorrectionTypeDefault = 0;
  UITextAutocorrectionTypeNo = 1;
  UITextAutocorrectionTypeYes = 2;
  UITextSpellCheckingTypeDefault = 0;
  UITextSpellCheckingTypeNo = 1;
  UITextSpellCheckingTypeYes = 2;
  UITextSmartQuotesTypeDefault = 0;
  UITextSmartQuotesTypeNo = 1;
  UITextSmartQuotesTypeYes = 2;
  UITextSmartDashesTypeDefault = 0;
  UITextSmartDashesTypeNo = 1;
  UITextSmartDashesTypeYes = 2;
  UITextSmartInsertDeleteTypeDefault = 0;
  UITextSmartInsertDeleteTypeNo = 1;
  UITextSmartInsertDeleteTypeYes = 2;
  UIKeyboardTypeDefault = 0;
  UIKeyboardTypeASCIICapable = 1;
  UIKeyboardTypeNumbersAndPunctuation = 2;
  UIKeyboardTypeURL = 3;
  UIKeyboardTypeNumberPad = 4;
  UIKeyboardTypePhonePad = 5;
  UIKeyboardTypeNamePhonePad = 6;
  UIKeyboardTypeEmailAddress = 7;
  UIKeyboardTypeDecimalPad = 8;
  UIKeyboardTypeTwitter = 9;
  UIKeyboardTypeWebSearch = 10;
  UIKeyboardTypeASCIICapableNumberPad = 11;
  UIKeyboardTypeAlphabet = UIKeyboardTypeASCIICapable;
  UIKeyboardAppearanceDefault = 0;
  UIKeyboardAppearanceDark = 1;
  UIKeyboardAppearanceLight = 2;
  UIKeyboardAppearanceAlert = UIKeyboardAppearanceDark;
  UIReturnKeyDefault = 0;
  UIReturnKeyGo = 1;
  UIReturnKeyGoogle = 2;
  UIReturnKeyJoin = 3;
  UIReturnKeyNext = 4;
  UIReturnKeyRoute = 5;
  UIReturnKeySearch = 6;
  UIReturnKeySend = 7;
  UIReturnKeyYahoo = 8;
  UIReturnKeyDone = 9;
  UIReturnKeyEmergencyCall = 10;
  UIReturnKeyContinue = 11;
  UITextStorageDirectionForward = 0;
  UITextStorageDirectionBackward = 1;
  UITextLayoutDirectionRight = 2;
  UITextLayoutDirectionLeft = 3;
  UITextLayoutDirectionUp = 4;
  UITextLayoutDirectionDown = 5;
  UITextGranularityCharacter = 0;
  UITextGranularityWord = 1;
  UITextGranularitySentence = 2;
  UITextGranularityParagraph = 3;
  UITextGranularityLine = 4;
  UITextGranularityDocument = 5;
  UITextAlternativeStyleNone = 0;
  UITextAlternativeStyleLowConfidence = 1;
  UITextDragOptionsNone = 0;
  UITextDragOptionStripTextColorFromPreviews = (1 shl 0);
  UITextDropActionInsert = 0;
  UITextDropActionReplaceSelection = 1;
  UITextDropActionReplaceAll = 2;
  UITextDropProgressModeSystem = 0;
  UITextDropProgressModeCustom = 1;
  UITextDropPerformerView = 0;
  UITextDropPerformerDelegate = 1;
  UITextDropEditabilityNo = 0;
  UITextDropEditabilityTemporary = 1;
  UITextDropEditabilityYes = 2;
  UITextBorderStyleNone = 0;
  UITextBorderStyleLine = 1;
  UITextBorderStyleBezel = 2;
  UITextBorderStyleRoundedRect = 3;
  UITextFieldViewModeNever = 0;
  UITextFieldViewModeWhileEditing = 1;
  UITextFieldViewModeUnlessEditing = 2;
  UITextFieldViewModeAlways = 3;
  UITextFieldDidEndEditingReasonCommitted = 0;
  UITextFieldDidEndEditingReasonCancelled = 1;
  UIActionSheetStyleAutomatic = -1;
  UIActionSheetStyleDefault = UIBarStyleDefault;
  UIActionSheetStyleBlackTranslucent = UIBarStyleBlackTranslucent;
  UIActionSheetStyleBlackOpaque = UIBarStyleBlackOpaque;
  UIAlertViewStyleDefault = 0;
  UIAlertViewStyleSecureTextInput = 1;
  UIAlertViewStylePlainTextInput = 2;
  UIAlertViewStyleLoginAndPasswordInput = 3;
  UISceneActivationStateUnattached = -1;
  UISceneActivationStateForegroundActive = 0;
  UISceneActivationStateForegroundInactive = 1;
  UISceneActivationStateBackground = 2;
  UISceneErrorCodeMultipleScenesNotSupported = 0;
  UISceneErrorCodeRequestDenied = 1;
  UISceneErrorCodeGeometryRequestUnsupported = 100;
  UISceneErrorCodeGeometryRequestDenied = 101;
  UIStatusBarStyleDefault = 0;
  UIStatusBarStyleLightContent = 1;
  UIStatusBarStyleDarkContent = 3;
  UIStatusBarStyleBlackTranslucent = 1;
  UIStatusBarStyleBlackOpaque = 2;
  UIStatusBarAnimationNone = 0;
  UIStatusBarAnimationFade = 1;
  UIStatusBarAnimationSlide = 2;
  UIInterfaceOrientationUnknown = UIDeviceOrientationUnknown;
  UIInterfaceOrientationPortrait = UIDeviceOrientationPortrait;
  UIInterfaceOrientationPortraitUpsideDown =
    UIDeviceOrientationPortraitUpsideDown;
  UIInterfaceOrientationLandscapeLeft = UIDeviceOrientationLandscapeRight;
  UIInterfaceOrientationLandscapeRight = UIDeviceOrientationLandscapeLeft;
  UIInterfaceOrientationMaskPortrait = (1 shl UIInterfaceOrientationPortrait);
  UIInterfaceOrientationMaskLandscapeLeft =
    (1 shl UIInterfaceOrientationLandscapeLeft);
  UIInterfaceOrientationMaskLandscapeRight =
    (1 shl UIInterfaceOrientationLandscapeRight);
  UIInterfaceOrientationMaskPortraitUpsideDown =
    (1 shl UIInterfaceOrientationPortraitUpsideDown);
  UIInterfaceOrientationMaskLandscape =
    (UIInterfaceOrientationMaskLandscapeLeft or
    UIInterfaceOrientationMaskLandscapeRight);
  UIInterfaceOrientationMaskAll = (UIInterfaceOrientationMaskPortrait or
    UIInterfaceOrientationMaskLandscapeLeft or
    UIInterfaceOrientationMaskLandscapeRight or
    UIInterfaceOrientationMaskPortraitUpsideDown);
  UIInterfaceOrientationMaskAllButUpsideDown =
    (UIInterfaceOrientationMaskPortrait or
    UIInterfaceOrientationMaskLandscapeLeft or
    UIInterfaceOrientationMaskLandscapeRight);
  UIRemoteNotificationTypeNone = 0;
  UIRemoteNotificationTypeBadge = 1 shl 0;
  UIRemoteNotificationTypeSound = 1 shl 1;
  UIRemoteNotificationTypeAlert = 1 shl 2;
  UIRemoteNotificationTypeNewsstandContentAvailability = 1 shl 3;
  UIBackgroundFetchResultNewData = 0;
  UIBackgroundFetchResultNoData = 1;
  UIBackgroundFetchResultFailed = 2;
  UIBackgroundRefreshStatusRestricted = 0;
  UIBackgroundRefreshStatusDenied = 1;
  UIBackgroundRefreshStatusAvailable = 2;
  UIApplicationStateActive = 0;
  UIApplicationStateInactive = 1;
  UIApplicationStateBackground = 2;
  UIModalTransitionStyleCoverVertical = 0;
  UIModalTransitionStyleFlipHorizontal = 1;
  UIModalTransitionStyleCrossDissolve = 2;
  UIModalTransitionStylePartialCurl = 3;
  UIModalPresentationFullScreen = 0;
  UIModalPresentationPageSheet = 1;
  UIModalPresentationFormSheet = 2;
  UIModalPresentationCurrentContext = 3;
  UIModalPresentationCustom = 4;
  UIModalPresentationOverFullScreen = 5;
  UIModalPresentationOverCurrentContext = 6;
  UIModalPresentationPopover = 7;
  UIModalPresentationBlurOverFullScreen = 8;
  UIModalPresentationNone = -1;
  UIModalPresentationAutomatic = -2;
  UIPreviewActionStyleDefault = 0;
  UIPreviewActionStyleSelected = 1;
  UIPreviewActionStyleDestructive = 2;
  UITimingCurveTypeBuiltin = 0;
  UITimingCurveTypeCubic = 1;
  UITimingCurveTypeSpring = 2;
  UITimingCurveTypeComposed = 3;
  UIDocumentBrowserErrorGeneric = 1;
  UIDocumentBrowserErrorNoLocationAvailable = 2;
  UIDocumentBrowserImportModeNone = 0;
  UIDocumentBrowserImportModeCopy = 1;
  UIDocumentBrowserImportModeMove = 2;
  UIDocumentBrowserUserInterfaceStyleWhite = 0;
  UIDocumentBrowserUserInterfaceStyleLight = 1;
  UIDocumentBrowserUserInterfaceStyleDark = 2;
  UIDocumentBrowserActionAvailabilityMenu = 1;
  UIDocumentBrowserActionAvailabilityNavigationBar = 1 shl 1;
  NSUnderlineStyleNone = 0;
  NSUnderlineStyleSingle = 1;
  NSUnderlineStyleThick = 2;
  NSUnderlineStyleDouble = 9;
  NSUnderlineStylePatternSolid = 0;
  NSUnderlineStylePatternDot = 256;
  NSUnderlineStylePatternDash = 512;
  NSUnderlineStylePatternDashDot = 768;
  NSUnderlineStylePatternDashDotDot = 1024;
  NSUnderlineStyleByWord = 32768;
  NSWritingDirectionEmbedding = (0 shl 1);
  NSWritingDirectionOverride = (1 shl 1);
  NSTextScalingStandard = 0;
  NSTextScalingiOS = 1;
  NSTextWritingDirectionEmbedding = (0 shl 1);
  NSTextWritingDirectionOverride = (1 shl 1);
  UIPreferredPresentationStyleUnspecified = 0;
  UIPreferredPresentationStyleInline = 1;
  UIPreferredPresentationStyleAttachment = 2;
  NSTextStorageEditedAttributes = (1 shl 0);
  NSTextStorageEditedCharacters = (1 shl 1);
  NSTextLayoutOrientationHorizontal = 0;
  NSTextLayoutOrientationVertical = 1;
  NSGlyphPropertyNull = (1 shl 0);
  NSGlyphPropertyControlCharacter = (1 shl 1);
  NSGlyphPropertyElastic = (1 shl 2);
  NSGlyphPropertyNonBaseCharacter = (1 shl 3);
  NSControlCharacterActionZeroAdvancement = (1 shl 0);
  NSControlCharacterActionWhitespace = (1 shl 1);
  NSControlCharacterActionHorizontalTab = (1 shl 2);
  NSControlCharacterActionLineBreak = (1 shl 3);
  NSControlCharacterActionParagraphBreak = (1 shl 4);
  NSControlCharacterActionContainerBreak = (1 shl 5);
  NSControlCharacterZeroAdvancementAction =
    NSControlCharacterActionZeroAdvancement;
  NSControlCharacterWhitespaceAction = NSControlCharacterActionWhitespace;
  NSControlCharacterHorizontalTabAction = NSControlCharacterActionHorizontalTab;
  NSControlCharacterLineBreakAction = NSControlCharacterActionLineBreak;
  NSControlCharacterParagraphBreakAction =
    NSControlCharacterActionParagraphBreak;
  NSControlCharacterContainerBreakAction =
    NSControlCharacterActionContainerBreak;
  NSStringDrawingUsesLineFragmentOrigin = 1 shl 0;
  NSStringDrawingUsesFontLeading = 1 shl 1;
  NSStringDrawingUsesDeviceMetrics = 1 shl 3;
  NSStringDrawingTruncatesLastVisibleLine = 1 shl 5;
  NSAttachmentCharacter = 65532;
  NSTextContentManagerEnumerationOptionsNone = 0;
  NSTextContentManagerEnumerationOptionsReverse = (1 shl 0);
  NSTextLayoutFragmentEnumerationOptionsNone = 0;
  NSTextLayoutFragmentEnumerationOptionsReverse = (1 shl 0);
  NSTextLayoutFragmentEnumerationOptionsEstimatesSize = (1 shl 1);
  NSTextLayoutFragmentEnumerationOptionsEnsuresLayout = (1 shl 2);
  NSTextLayoutFragmentEnumerationOptionsEnsuresExtraLineFragment = (1 shl 3);
  NSTextLayoutFragmentStateNone = 0;
  NSTextLayoutFragmentStateEstimatedUsageBounds = 1;
  NSTextLayoutFragmentStateCalculatedUsageBounds = 2;
  NSTextLayoutFragmentStateLayoutAvailable = 3;
  NSTextLayoutManagerSegmentTypeStandard = 0;
  NSTextLayoutManagerSegmentTypeSelection = 1;
  NSTextLayoutManagerSegmentTypeHighlight = 2;
  NSTextLayoutManagerSegmentOptionsNone = 0;
  NSTextLayoutManagerSegmentOptionsRangeNotRequired = (1 shl 0);
  NSTextLayoutManagerSegmentOptionsMiddleFragmentsExcluded = (1 shl 1);
  NSTextLayoutManagerSegmentOptionsHeadSegmentExtended = (1 shl 2);
  NSTextLayoutManagerSegmentOptionsTailSegmentExtended = (1 shl 3);
  NSTextLayoutManagerSegmentOptionsUpstreamAffinity = (1 shl 4);
  NSTextListPrependEnclosingMarker = (1 shl 0);
  NSTextSelectionGranularityCharacter = 0;
  NSTextSelectionGranularityWord = 1;
  NSTextSelectionGranularityParagraph = 2;
  NSTextSelectionGranularityLine = 3;
  NSTextSelectionGranularitySentence = 4;
  NSTextSelectionAffinityUpstream = 0;
  NSTextSelectionAffinityDownstream = 1;
  NSTextSelectionNavigationDirectionForward = 0;
  NSTextSelectionNavigationDirectionBackward = 1;
  NSTextSelectionNavigationDirectionRight = 2;
  NSTextSelectionNavigationDirectionLeft = 3;
  NSTextSelectionNavigationDirectionUp = 4;
  NSTextSelectionNavigationDirectionDown = 5;
  NSTextSelectionNavigationDestinationCharacter = 0;
  NSTextSelectionNavigationDestinationWord = 1;
  NSTextSelectionNavigationDestinationLine = 2;
  NSTextSelectionNavigationDestinationSentence = 3;
  NSTextSelectionNavigationDestinationParagraph = 4;
  NSTextSelectionNavigationDestinationContainer = 5;
  NSTextSelectionNavigationDestinationDocument = 6;
  NSTextSelectionNavigationModifierExtend = (1 shl 0);
  NSTextSelectionNavigationModifierVisual = (1 shl 1);
  NSTextSelectionNavigationModifierMultiple = (1 shl 2);
  NSTextSelectionNavigationWritingDirectionLeftToRight = 0;
  NSTextSelectionNavigationWritingDirectionRightToLeft = 1;
  NSTextSelectionNavigationLayoutOrientationHorizontal = 0;
  NSTextSelectionNavigationLayoutOrientationVertical = 1;
  UIPrinterJobTypeUnknown = 0;
  UIPrinterJobTypeDocument = 1 shl 0;
  UIPrinterJobTypeEnvelope = 1 shl 1;
  UIPrinterJobTypeLabel = 1 shl 2;
  UIPrinterJobTypePhoto = 1 shl 3;
  UIPrinterJobTypeReceipt = 1 shl 4;
  UIPrinterJobTypeRoll = 1 shl 5;
  UIPrinterJobTypeLargeFormat = 1 shl 6;
  UIPrinterJobTypePostcard = 1 shl 7;
  UIPrintingNotAvailableError = 1;
  UIPrintNoContentError = 2;
  UIPrintUnknownImageFormatError = 3;
  UIPrintJobFailedError = 4;
  UIPrintInfoOutputGeneral = 0;
  UIPrintInfoOutputPhoto = 1;
  UIPrintInfoOutputGrayscale = 2;
  UIPrintInfoOutputPhotoGrayscale = 3;
  UIPrintInfoOrientationPortrait = 0;
  UIPrintInfoOrientationLandscape = 1;
  UIPrintInfoDuplexNone = 0;
  UIPrintInfoDuplexLongEdge = 1;
  UIPrintInfoDuplexShortEdge = 2;
  UIPrinterCutterBehaviorNoCut = 0;
  UIPrinterCutterBehaviorPrinterDefault = 1;
  UIPrinterCutterBehaviorCutAfterEachPage = 2;
  UIPrinterCutterBehaviorCutAfterEachCopy = 3;
  UIPrinterCutterBehaviorCutAfterEachJob = 4;
  UIPrintRenderingQualityBest = 0;
  UIPrintRenderingQualityResponsive = 1;
  UIActivityCategoryAction = 0;
  UIActivityCategoryShare = 1;
  UIScrollViewIndicatorStyleDefault = 0;
  UIScrollViewIndicatorStyleBlack = 1;
  UIScrollViewIndicatorStyleWhite = 2;
  UIScrollViewKeyboardDismissModeNone = 0;
  UIScrollViewKeyboardDismissModeOnDrag = 1;
  UIScrollViewKeyboardDismissModeInteractive = 2;
  UIScrollViewKeyboardDismissModeOnDragWithAccessory = 3;
  UIScrollViewKeyboardDismissModeInteractiveWithAccessory = 4;
  UIScrollViewIndexDisplayModeAutomatic = 0;
  UIScrollViewIndexDisplayModeAlwaysHidden = 1;
  UIScrollViewContentInsetAdjustmentAutomatic = 0;
  UIScrollViewContentInsetAdjustmentScrollableAxes = 1;
  UIScrollViewContentInsetAdjustmentNever = 2;
  UIScrollViewContentInsetAdjustmentAlways = 3;
  UIAccessibilityNavigationStyleAutomatic = 0;
  UIAccessibilityNavigationStyleSeparate = 1;
  UIAccessibilityNavigationStyleCombined = 2;
  UIAccessibilityContainerTypeNone = 0;
  UIAccessibilityContainerTypeDataTable = 1;
  UIAccessibilityContainerTypeList = 2;
  UIAccessibilityContainerTypeLandmark = 3;
  UIAccessibilityContainerTypeSemanticGroup = 4;
  UIImageOrientationUp = 0;
  UIImageOrientationDown = 1;
  UIImageOrientationLeft = 2;
  UIImageOrientationRight = 3;
  UIImageOrientationUpMirrored = 4;
  UIImageOrientationDownMirrored = 5;
  UIImageOrientationLeftMirrored = 6;
  UIImageOrientationRightMirrored = 7;
  UIImageResizingModeTile = 0;
  UIImageResizingModeStretch = 1;
  UIImageRenderingModeAutomatic = 0;
  UIImageRenderingModeAlwaysOriginal = 1;
  UIImageRenderingModeAlwaysTemplate = 2;
  UIAccessibilityCustomRotorDirectionPrevious = 0;
  UIAccessibilityCustomRotorDirectionNext = 1;
  UIAccessibilityCustomSystemRotorTypeNone = 0;
  UIAccessibilityCustomSystemRotorTypeLink = 1;
  UIAccessibilityCustomSystemRotorTypeVisitedLink = 2;
  UIAccessibilityCustomSystemRotorTypeHeading = 3;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel1 = 4;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel2 = 5;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel3 = 6;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel4 = 7;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel5 = 8;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel6 = 9;
  UIAccessibilityCustomSystemRotorTypeBoldText = 10;
  UIAccessibilityCustomSystemRotorTypeItalicText = 11;
  UIAccessibilityCustomSystemRotorTypeUnderlineText = 12;
  UIAccessibilityCustomSystemRotorTypeMisspelledWord = 13;
  UIAccessibilityCustomSystemRotorTypeImage = 14;
  UIAccessibilityCustomSystemRotorTypeTextField = 15;
  UIAccessibilityCustomSystemRotorTypeTable = 16;
  UIAccessibilityCustomSystemRotorTypeList = 17;
  UIAccessibilityCustomSystemRotorTypeLandmark = 18;
  UIAlertActionStyleDefault = 0;
  UIAlertActionStyleCancel = 1;
  UIAlertActionStyleDestructive = 2;
  UIAlertControllerStyleActionSheet = 0;
  UIAlertControllerStyleAlert = 1;
  UIAlertControllerSeverityDefault = 0;
  UIAlertControllerSeverityCritical = 1;
  UIAccessibilityZoomTypeInsertionPoint = 0;
  UIGuidedAccessErrorPermissionDenied = 0;
  UIGuidedAccessErrorFailed = 2147483647;
  UIGuidedAccessRestrictionStateAllow = 0;
  UIGuidedAccessRestrictionStateDeny = 1;
  UIGuidedAccessAccessibilityFeatureVoiceOver = 1 shl 0;
  UIGuidedAccessAccessibilityFeatureZoom = 1 shl 1;
  UIGuidedAccessAccessibilityFeatureAssistiveTouch = 1 shl 2;
  UIGuidedAccessAccessibilityFeatureInvertColors = 1 shl 3;
  UIGuidedAccessAccessibilityFeatureGrayscaleDisplay = 1 shl 4;
  UIAccessibilityScrollDirectionRight = 1;
  UIAccessibilityScrollDirectionLeft = 2;
  UIAccessibilityScrollDirectionUp = 3;
  UIAccessibilityScrollDirectionDown = 4;
  UIAccessibilityScrollDirectionNext = 5;
  UIAccessibilityScrollDirectionPrevious = 6;
  UIAccessibilityHearingDeviceEarNone = 0;
  UIAccessibilityHearingDeviceEarLeft = 1 shl 1;
  UIAccessibilityHearingDeviceEarRight = 1 shl 2;
  UIAccessibilityHearingDeviceEarBoth = UIAccessibilityHearingDeviceEarLeft or
    UIAccessibilityHearingDeviceEarRight;
  UIButtonConfigurationSizeMedium = 0;
  UIButtonConfigurationSizeSmall = 1;
  UIButtonConfigurationSizeMini = 2;
  UIButtonConfigurationSizeLarge = 3;
  UIButtonConfigurationTitleAlignmentAutomatic = 0;
  UIButtonConfigurationTitleAlignmentLeading = 1;
  UIButtonConfigurationTitleAlignmentCenter = 2;
  UIButtonConfigurationTitleAlignmentTrailing = 3;
  UIButtonConfigurationCornerStyleFixed = -1;
  UIButtonConfigurationCornerStyleDynamic = 0;
  UIButtonConfigurationCornerStyleSmall = 1;
  UIButtonConfigurationCornerStyleMedium = 2;
  UIButtonConfigurationCornerStyleLarge = 3;
  UIButtonConfigurationCornerStyleCapsule = 4;
  UIButtonConfigurationMacIdiomStyleAutomatic = 0;
  UIButtonConfigurationMacIdiomStyleBordered = 1;
  UIButtonConfigurationMacIdiomStyleBorderless = 2;
  UIButtonConfigurationMacIdiomStyleBorderlessTinted = 3;
  UIButtonConfigurationIndicatorAutomatic = 0;
  UIButtonConfigurationIndicatorNone = 1;
  UIButtonConfigurationIndicatorPopup = 2;
  UIButtonTypeCustom = 0;
  UIButtonTypeSystem = 1;
  UIButtonTypeDetailDisclosure = 2;
  UIButtonTypeInfoLight = 3;
  UIButtonTypeInfoDark = 4;
  UIButtonTypeContactAdd = 5;
  UIButtonTypePlain = 6;
  UIButtonTypeClose = 7;
  UIButtonTypeRoundedRect = UIButtonTypeSystem;
  UIButtonRoleNormal = 0;
  UIButtonRolePrimary = 1;
  UIButtonRoleCancel = 2;
  UIButtonRoleDestructive = 3;
  UIActivityIndicatorViewStyleMedium = 100;
  UIActivityIndicatorViewStyleLarge = 101;
  UIActivityIndicatorViewStyleWhiteLarge = 0;
  UIActivityIndicatorViewStyleWhite = 1;
  UIActivityIndicatorViewStyleGray = 2;
  UIApplicationShortcutIconTypeCompose = 0;
  UIApplicationShortcutIconTypePlay = 1;
  UIApplicationShortcutIconTypePause = 2;
  UIApplicationShortcutIconTypeAdd = 3;
  UIApplicationShortcutIconTypeLocation = 4;
  UIApplicationShortcutIconTypeSearch = 5;
  UIApplicationShortcutIconTypeShare = 6;
  UIApplicationShortcutIconTypeProhibit = 7;
  UIApplicationShortcutIconTypeContact = 8;
  UIApplicationShortcutIconTypeHome = 9;
  UIApplicationShortcutIconTypeMarkLocation = 10;
  UIApplicationShortcutIconTypeFavorite = 11;
  UIApplicationShortcutIconTypeLove = 12;
  UIApplicationShortcutIconTypeCloud = 13;
  UIApplicationShortcutIconTypeInvitation = 14;
  UIApplicationShortcutIconTypeConfirmation = 15;
  UIApplicationShortcutIconTypeMail = 16;
  UIApplicationShortcutIconTypeMessage = 17;
  UIApplicationShortcutIconTypeDate = 18;
  UIApplicationShortcutIconTypeTime = 19;
  UIApplicationShortcutIconTypeCapturePhoto = 20;
  UIApplicationShortcutIconTypeCaptureVideo = 21;
  UIApplicationShortcutIconTypeTask = 22;
  UIApplicationShortcutIconTypeTaskCompleted = 23;
  UIApplicationShortcutIconTypeAlarm = 24;
  UIApplicationShortcutIconTypeBookmark = 25;
  UIApplicationShortcutIconTypeShuffle = 26;
  UIApplicationShortcutIconTypeAudio = 27;
  UIApplicationShortcutIconTypeUpdate = 28;
  UIAttachmentBehaviorTypeItems = 0;
  UIAttachmentBehaviorTypeAnchor = 1;
  UIBandSelectionInteractionStatePossible = 0;
  UIBandSelectionInteractionStateBegan = 1;
  UIBandSelectionInteractionStateSelecting = 2;
  UIBandSelectionInteractionStateEnded = 3;
  UIBarMetricsDefault = 0;
  UIBarMetricsCompact = 1;
  UIBarMetricsDefaultPrompt = 101;
  UIBarMetricsCompactPrompt = 102;
  UIBarMetricsLandscapePhone = UIBarMetricsCompact;
  UIBarMetricsLandscapePhonePrompt = UIBarMetricsCompactPrompt;
  UIBarPositionAny = 0;
  UIBarPositionBottom = 1;
  UIBarPositionTop = 2;
  UIBarPositionTopAttached = 3;
  UIBarButtonItemStylePlain = 0;
  UIBarButtonItemStyleBordered = 1;
  UIBarButtonItemStyleDone = 2;
  UIBarButtonSystemItemDone = 0;
  UIBarButtonSystemItemCancel = 1;
  UIBarButtonSystemItemEdit = 2;
  UIBarButtonSystemItemSave = 3;
  UIBarButtonSystemItemAdd = 4;
  UIBarButtonSystemItemFlexibleSpace = 5;
  UIBarButtonSystemItemFixedSpace = 6;
  UIBarButtonSystemItemCompose = 7;
  UIBarButtonSystemItemReply = 8;
  UIBarButtonSystemItemAction = 9;
  UIBarButtonSystemItemOrganize = 10;
  UIBarButtonSystemItemBookmarks = 11;
  UIBarButtonSystemItemSearch = 12;
  UIBarButtonSystemItemRefresh = 13;
  UIBarButtonSystemItemStop = 14;
  UIBarButtonSystemItemCamera = 15;
  UIBarButtonSystemItemTrash = 16;
  UIBarButtonSystemItemPlay = 17;
  UIBarButtonSystemItemPause = 18;
  UIBarButtonSystemItemRewind = 19;
  UIBarButtonSystemItemFastForward = 20;
  UIBarButtonSystemItemUndo = 21;
  UIBarButtonSystemItemRedo = 22;
  UIBarButtonSystemItemPageCurl = 23;
  UIBarButtonSystemItemClose = 24;
  UIBehavioralStyleAutomatic = 0;
  UIBehavioralStylePad = 1;
  UIBehavioralStyleMac = 2;
  UIBlurEffectStyleExtraLight = 0;
  UIBlurEffectStyleLight = 1;
  UIBlurEffectStyleDark = 2;
  UIBlurEffectStyleExtraDark = 3;
  UIBlurEffectStyleRegular = 4;
  UIBlurEffectStyleProminent = 5;
  UIBlurEffectStyleSystemUltraThinMaterial = 6;
  UIBlurEffectStyleSystemThinMaterial = 7;
  UIBlurEffectStyleSystemMaterial = 8;
  UIBlurEffectStyleSystemThickMaterial = 9;
  UIBlurEffectStyleSystemChromeMaterial = 10;
  UIBlurEffectStyleSystemUltraThinMaterialLight = 11;
  UIBlurEffectStyleSystemThinMaterialLight = 12;
  UIBlurEffectStyleSystemMaterialLight = 13;
  UIBlurEffectStyleSystemThickMaterialLight = 14;
  UIBlurEffectStyleSystemChromeMaterialLight = 15;
  UIBlurEffectStyleSystemUltraThinMaterialDark = 16;
  UIBlurEffectStyleSystemThinMaterialDark = 17;
  UIBlurEffectStyleSystemMaterialDark = 18;
  UIBlurEffectStyleSystemThickMaterialDark = 19;
  UIBlurEffectStyleSystemChromeMaterialDark = 20;
  UICalendarViewDecorationSizeSmall = 0;
  UICalendarViewDecorationSizeMedium = 1;
  UICalendarViewDecorationSizeLarge = 2;
  UICellAccessoryDisplayedAlways = 0;
  UICellAccessoryDisplayedWhenEditing = 1;
  UICellAccessoryDisplayedWhenNotEditing = 2;
  UICellAccessoryOutlineDisclosureStyleAutomatic = 0;
  UICellAccessoryOutlineDisclosureStyleHeader = 1;
  UICellAccessoryOutlineDisclosureStyleCell = 2;
  UICellAccessoryPlacementLeading = 0;
  UICellAccessoryPlacementTrailing = 1;
  UICellConfigurationDragStateNone = 0;
  UICellConfigurationDragStateLifting = 1;
  UICellConfigurationDragStateDragging = 2;
  UICellConfigurationDropStateNone = 0;
  UICellConfigurationDropStateNotTargeted = 1;
  UICellConfigurationDropStateTargeted = 2;
  UICloudSharingPermissionStandard = 0;
  UICloudSharingPermissionAllowPublic = 1 shl 0;
  UICloudSharingPermissionAllowPrivate = 1 shl 1;
  UICloudSharingPermissionAllowReadOnly = 1 shl 2;
  UICloudSharingPermissionAllowReadWrite = 1 shl 3;
  UICollectionUpdateActionInsert = 0;
  UICollectionUpdateActionDelete = 1;
  UICollectionUpdateActionReload = 2;
  UICollectionUpdateActionMove = 3;
  UICollectionUpdateActionNone = 4;
  UICollectionViewScrollDirectionVertical = 0;
  UICollectionViewScrollDirectionHorizontal = 1;
  UICollectionElementCategoryCell = 0;
  UICollectionElementCategorySupplementaryView = 1;
  UICollectionElementCategoryDecorationView = 2;
  UIContentInsetsReferenceAutomatic = 0;
  UIContentInsetsReferenceNone = 1;
  UIContentInsetsReferenceSafeArea = 2;
  UIContentInsetsReferenceLayoutMargins = 3;
  UIContentInsetsReferenceReadableContent = 4;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorNone = 0;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorContinuous = 1;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorContinuousGroupLeadingBoundary =
    2;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorPaging = 3;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorGroupPaging = 4;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorGroupPagingCentered = 5;
  UICollectionLayoutListAppearancePlain = 0;
  UICollectionLayoutListAppearanceGrouped = 1;
  UICollectionLayoutListAppearanceInsetGrouped = 2;
  UICollectionLayoutListAppearanceSidebar = 3;
  UICollectionLayoutListAppearanceSidebarPlain = 4;
  UICollectionLayoutListHeaderModeNone = 0;
  UICollectionLayoutListHeaderModeSupplementary = 1;
  UICollectionLayoutListHeaderModeFirstItemInSection = 2;
  UICollectionLayoutListFooterModeNone = 0;
  UICollectionLayoutListFooterModeSupplementary = 1;
  UICollectionViewScrollPositionNone = 0;
  UICollectionViewScrollPositionTop = 1 shl 0;
  UICollectionViewScrollPositionCenteredVertically = 1 shl 1;
  UICollectionViewScrollPositionBottom = 1 shl 2;
  UICollectionViewScrollPositionLeft = 1 shl 3;
  UICollectionViewScrollPositionCenteredHorizontally = 1 shl 4;
  UICollectionViewScrollPositionRight = 1 shl 5;
  UICollectionViewReorderingCadenceImmediate = 0;
  UICollectionViewReorderingCadenceFast = 1;
  UICollectionViewReorderingCadenceSlow = 2;
  UICollectionViewSelfSizingInvalidationDisabled = 0;
  UICollectionViewSelfSizingInvalidationEnabled = 1;
  UICollectionViewSelfSizingInvalidationEnabledIncludingConstraints = 2;
  UICollectionViewDropIntentUnspecified = 0;
  UICollectionViewDropIntentInsertAtDestinationIndexPath = 1;
  UICollectionViewDropIntentInsertIntoDestinationIndexPath = 2;
  UICollectionViewCellDragStateNone = 0;
  UICollectionViewCellDragStateLifting = 1;
  UICollectionViewCellDragStateDragging = 2;
  UICollectionViewFlowLayoutSectionInsetFromContentInset = 0;
  UICollectionViewFlowLayoutSectionInsetFromSafeArea = 1;
  UICollectionViewFlowLayoutSectionInsetFromLayoutMargins = 2;
  UICollisionBehaviorModeItems = 1 shl 0;
  UICollisionBehaviorModeBoundaries = 1 shl 1;
  UICollisionBehaviorModeEverything = 4294967295;
  UIContextualActionStyleNormal = 0;
  UIContextualActionStyleDestructive = 1;
  UIDataDetectorTypePhoneNumber = 1 shl 0;
  UIDataDetectorTypeLink = 1 shl 1;
  UIDataDetectorTypeAddress = 1 shl 2;
  UIDataDetectorTypeCalendarEvent = 1 shl 3;
  UIDataDetectorTypeShipmentTrackingNumber = 1 shl 4;
  UIDataDetectorTypeFlightNumber = 1 shl 5;
  UIDataDetectorTypeLookupSuggestion = 1 shl 6;
  UIDataDetectorTypeMoney = 1 shl 7;
  UIDataDetectorTypePhysicalValue = 1 shl 8;
  UIDataDetectorTypeNone = 0;
  UIDataDetectorTypeAll = 4294967295;
  UIDatePickerModeTime = 0;
  UIDatePickerModeDate = 1;
  UIDatePickerModeDateAndTime = 2;
  UIDatePickerModeCountDownTimer = 3;
  UIDatePickerStyleAutomatic = 0;
  UIDatePickerStyleWheels = 1;
  UIDatePickerStyleCompact = 2;
  UIDatePickerStyleInline = 3;
  UIGestureRecognizerStatePossible = 0;
  UIGestureRecognizerStateBegan = 1;
  UIGestureRecognizerStateChanged = 2;
  UIGestureRecognizerStateEnded = 3;
  UIGestureRecognizerStateCancelled = 4;
  UIGestureRecognizerStateFailed = 5;
  UIGestureRecognizerStateRecognized = UIGestureRecognizerStateEnded;
  UISwipeGestureRecognizerDirectionRight = 1 shl 0;
  UISwipeGestureRecognizerDirectionLeft = 1 shl 1;
  UISwipeGestureRecognizerDirectionUp = 1 shl 2;
  UISwipeGestureRecognizerDirectionDown = 1 shl 3;
  UITableViewCellStyleDefault = 0;
  UITableViewCellStyleValue1 = 1;
  UITableViewCellStyleValue2 = 2;
  UITableViewCellStyleSubtitle = 3;
  UITableViewCellSeparatorStyleNone = 0;
  UITableViewCellSeparatorStyleSingleLine = 1;
  UITableViewCellSeparatorStyleSingleLineEtched = 2;
  UITableViewCellSelectionStyleNone = 0;
  UITableViewCellSelectionStyleBlue = 1;
  UITableViewCellSelectionStyleGray = 2;
  UITableViewCellSelectionStyleDefault = 3;
  UITableViewCellFocusStyleDefault = 0;
  UITableViewCellFocusStyleCustom = 1;
  UITableViewCellEditingStyleNone = 0;
  UITableViewCellEditingStyleDelete = 1;
  UITableViewCellEditingStyleInsert = 2;
  UITableViewCellAccessoryNone = 0;
  UITableViewCellAccessoryDisclosureIndicator = 1;
  UITableViewCellAccessoryDetailDisclosureButton = 2;
  UITableViewCellAccessoryCheckmark = 3;
  UITableViewCellAccessoryDetailButton = 4;
  UITableViewCellStateDefaultMask = 0;
  UITableViewCellStateShowingEditControlMask = 1 shl 0;
  UITableViewCellStateShowingDeleteConfirmationMask = 1 shl 1;
  UITableViewCellDragStateNone = 0;
  UITableViewCellDragStateLifting = 1;
  UITableViewCellDragStateDragging = 2;
  UITableViewStylePlain = 0;
  UITableViewStyleGrouped = 1;
  UITableViewStyleInsetGrouped = 2;
  UITableViewScrollPositionNone = 0;
  UITableViewScrollPositionTop = 1;
  UITableViewScrollPositionMiddle = 2;
  UITableViewScrollPositionBottom = 3;
  UITableViewRowAnimationFade = 0;
  UITableViewRowAnimationRight = 1;
  UITableViewRowAnimationLeft = 2;
  UITableViewRowAnimationTop = 3;
  UITableViewRowAnimationBottom = 4;
  UITableViewRowAnimationNone = 5;
  UITableViewRowAnimationMiddle = 6;
  UITableViewRowAnimationAutomatic = 100;
  UITableViewRowActionStyleDefault = 0;
  UITableViewRowActionStyleDestructive = UITableViewRowActionStyleDefault;
  UITableViewRowActionStyleNormal = 1;
  UITableViewSeparatorInsetFromCellEdges = 0;
  UITableViewSeparatorInsetFromAutomaticInsets = 1;
  UITableViewSelfSizingInvalidationDisabled = 0;
  UITableViewSelfSizingInvalidationEnabled = 1;
  UITableViewSelfSizingInvalidationEnabledIncludingConstraints = 2;
  UITableViewDropIntentUnspecified = 0;
  UITableViewDropIntentInsertAtDestinationIndexPath = 1;
  UITableViewDropIntentInsertIntoDestinationIndexPath = 2;
  UITableViewDropIntentAutomatic = 3;
  UIDocumentChangeDone = 0;
  UIDocumentChangeUndone = 1;
  UIDocumentChangeRedone = 2;
  UIDocumentChangeCleared = 3;
  UIDocumentSaveForCreating = 0;
  UIDocumentSaveForOverwriting = 1;
  UIDocumentStateNormal = 0;
  UIDocumentStateClosed = 1 shl 0;
  UIDocumentStateInConflict = 1 shl 1;
  UIDocumentStateSavingError = 1 shl 2;
  UIDocumentStateEditingDisabled = 1 shl 3;
  UIDocumentStateProgressAvailable = 1 shl 4;
  UIDocumentPickerModeImport = 0;
  UIDocumentPickerModeOpen = 1;
  UIDocumentPickerModeExportToService = 2;
  UIDocumentPickerModeMoveToService = 3;
  UIDocumentMenuOrderFirst = 0;
  UIDocumentMenuOrderLast = 1;
  UIDropSessionProgressIndicatorStyleNone = 0;
  UIDropSessionProgressIndicatorStyleDefault = 1;
  UIEditMenuArrowDirectionAutomatic = 0;
  UIEditMenuArrowDirectionUp = 1;
  UIEditMenuArrowDirectionDown = 2;
  UIEditMenuArrowDirectionLeft = 3;
  UIEditMenuArrowDirectionRight = 4;
  UITextSearchFoundTextStyleNormal = 0;
  UITextSearchFoundTextStyleFound = 1;
  UITextSearchFoundTextStyleHighlighted = 2;
  UIFindSessionSearchResultDisplayStyleCurrentAndTotal = 0;
  UIFindSessionSearchResultDisplayStyleTotal = 1;
  UIFindSessionSearchResultDisplayStyleNone = 2;
  UITextSearchMatchMethodContains = 0;
  UITextSearchMatchMethodStartsWith = 1;
  UITextSearchMatchMethodFullWord = 2;
  UIFocusHaloEffectPositionAutomatic = 0;
  UIFocusHaloEffectPositionOutside = 1;
  UIFocusHaloEffectPositionInside = 2;
  UISceneCollectionJoinBehaviorAutomatic = 0;
  UISceneCollectionJoinBehaviorPreferred = 1;
  UISceneCollectionJoinBehaviorDisallowed = 2;
  UISceneCollectionJoinBehaviorPreferredWithoutActivating = 3;
  UIWindowSceneDismissalAnimationStandard = 1;
  UIWindowSceneDismissalAnimationCommit = 2;
  UIWindowSceneDismissalAnimationDecline = 3;
  UIGraphicsImageRendererFormatRangeUnspecified = -1;
  UIGraphicsImageRendererFormatRangeAutomatic = 0;
  UIGraphicsImageRendererFormatRangeExtended = 1;
  UIGraphicsImageRendererFormatRangeStandard = 2;
  UIScrollTypeDiscrete = 0;
  UIScrollTypeContinuous = 1;
  UIScrollTypeMaskDiscrete = 1 shl UIScrollTypeDiscrete;
  UIScrollTypeMaskContinuous = 1 shl UIScrollTypeContinuous;
  UIScrollTypeMaskAll = UIScrollTypeMaskDiscrete or UIScrollTypeMaskContinuous;
  UINavigationControllerOperationNone = 0;
  UINavigationControllerOperationPush = 1;
  UINavigationControllerOperationPop = 2;
  UIImagePickerControllerSourceTypePhotoLibrary = 0;
  UIImagePickerControllerSourceTypeCamera = 1;
  UIImagePickerControllerSourceTypeSavedPhotosAlbum = 2;
  UIImagePickerControllerQualityTypeHigh = 0;
  UIImagePickerControllerQualityTypeMedium = 1;
  UIImagePickerControllerQualityTypeLow = 2;
  UIImagePickerControllerQualityType640x480 = 3;
  UIImagePickerControllerQualityTypeIFrame1280x720 = 4;
  UIImagePickerControllerQualityTypeIFrame960x540 = 5;
  UIImagePickerControllerCameraCaptureModePhoto = 0;
  UIImagePickerControllerCameraCaptureModeVideo = 1;
  UIImagePickerControllerCameraDeviceRear = 0;
  UIImagePickerControllerCameraDeviceFront = 1;
  UIImagePickerControllerCameraFlashModeOff = -1;
  UIImagePickerControllerCameraFlashModeAuto = 0;
  UIImagePickerControllerCameraFlashModeOn = 1;
  UIImagePickerControllerImageURLExportPresetCompatible = 0;
  UIImagePickerControllerImageURLExportPresetCurrent = 1;
  UIImageSymbolScaleDefault = -1;
  UIImageSymbolScaleUnspecified = 0;
  UIImageSymbolScaleSmall = 1;
  UIImageSymbolScaleMedium = 2;
  UIImageSymbolScaleLarge = 3;
  UIImageSymbolWeightUnspecified = 0;
  UIImageSymbolWeightUltraLight = 1;
  UIImageSymbolWeightThin = 2;
  UIImageSymbolWeightLight = 3;
  UIImageSymbolWeightRegular = 4;
  UIImageSymbolWeightMedium = 5;
  UIImageSymbolWeightSemibold = 6;
  UIImageSymbolWeightBold = 7;
  UIImageSymbolWeightHeavy = 8;
  UIImageSymbolWeightBlack = 9;
  UIImpactFeedbackStyleLight = 0;
  UIImpactFeedbackStyleMedium = 1;
  UIImpactFeedbackStyleHeavy = 2;
  UIImpactFeedbackStyleSoft = 3;
  UIImpactFeedbackStyleRigid = 4;
  UIInputViewStyleDefault = 0;
  UIInputViewStyleKeyboard = 1;
  UIKeyboardHIDUsageKeyboardErrorRollOver = 1;
  UIKeyboardHIDUsageKeyboardPOSTFail = 2;
  UIKeyboardHIDUsageKeyboardErrorUndefined = 3;
  UIKeyboardHIDUsageKeyboardA = 4;
  UIKeyboardHIDUsageKeyboardB = 5;
  UIKeyboardHIDUsageKeyboardC = 6;
  UIKeyboardHIDUsageKeyboardD = 7;
  UIKeyboardHIDUsageKeyboardE = 8;
  UIKeyboardHIDUsageKeyboardF = 9;
  UIKeyboardHIDUsageKeyboardG = 10;
  UIKeyboardHIDUsageKeyboardH = 11;
  UIKeyboardHIDUsageKeyboardI = 12;
  UIKeyboardHIDUsageKeyboardJ = 13;
  UIKeyboardHIDUsageKeyboardK = 14;
  UIKeyboardHIDUsageKeyboardL = 15;
  UIKeyboardHIDUsageKeyboardM = 16;
  UIKeyboardHIDUsageKeyboardN = 17;
  UIKeyboardHIDUsageKeyboardO = 18;
  UIKeyboardHIDUsageKeyboardP = 19;
  UIKeyboardHIDUsageKeyboardQ = 20;
  UIKeyboardHIDUsageKeyboardR = 21;
  UIKeyboardHIDUsageKeyboardS = 22;
  UIKeyboardHIDUsageKeyboardT = 23;
  UIKeyboardHIDUsageKeyboardU = 24;
  UIKeyboardHIDUsageKeyboardV = 25;
  UIKeyboardHIDUsageKeyboardW = 26;
  UIKeyboardHIDUsageKeyboardX = 27;
  UIKeyboardHIDUsageKeyboardY = 28;
  UIKeyboardHIDUsageKeyboardZ = 29;
  UIKeyboardHIDUsageKeyboard1 = 30;
  UIKeyboardHIDUsageKeyboard2 = 31;
  UIKeyboardHIDUsageKeyboard3 = 32;
  UIKeyboardHIDUsageKeyboard4 = 33;
  UIKeyboardHIDUsageKeyboard5 = 34;
  UIKeyboardHIDUsageKeyboard6 = 35;
  UIKeyboardHIDUsageKeyboard7 = 36;
  UIKeyboardHIDUsageKeyboard8 = 37;
  UIKeyboardHIDUsageKeyboard9 = 38;
  UIKeyboardHIDUsageKeyboard0 = 39;
  UIKeyboardHIDUsageKeyboardReturnOrEnter = 40;
  UIKeyboardHIDUsageKeyboardEscape = 41;
  UIKeyboardHIDUsageKeyboardDeleteOrBackspace = 42;
  UIKeyboardHIDUsageKeyboardTab = 43;
  UIKeyboardHIDUsageKeyboardSpacebar = 44;
  UIKeyboardHIDUsageKeyboardHyphen = 45;
  UIKeyboardHIDUsageKeyboardEqualSign = 46;
  UIKeyboardHIDUsageKeyboardOpenBracket = 47;
  UIKeyboardHIDUsageKeyboardCloseBracket = 48;
  UIKeyboardHIDUsageKeyboardBackslash = 49;
  UIKeyboardHIDUsageKeyboardNonUSPound = 50;
  UIKeyboardHIDUsageKeyboardSemicolon = 51;
  UIKeyboardHIDUsageKeyboardQuote = 52;
  UIKeyboardHIDUsageKeyboardGraveAccentAndTilde = 53;
  UIKeyboardHIDUsageKeyboardComma = 54;
  UIKeyboardHIDUsageKeyboardPeriod = 55;
  UIKeyboardHIDUsageKeyboardSlash = 56;
  UIKeyboardHIDUsageKeyboardCapsLock = 57;
  UIKeyboardHIDUsageKeyboardF1 = 58;
  UIKeyboardHIDUsageKeyboardF2 = 59;
  UIKeyboardHIDUsageKeyboardF3 = 60;
  UIKeyboardHIDUsageKeyboardF4 = 61;
  UIKeyboardHIDUsageKeyboardF5 = 62;
  UIKeyboardHIDUsageKeyboardF6 = 63;
  UIKeyboardHIDUsageKeyboardF7 = 64;
  UIKeyboardHIDUsageKeyboardF8 = 65;
  UIKeyboardHIDUsageKeyboardF9 = 66;
  UIKeyboardHIDUsageKeyboardF10 = 67;
  UIKeyboardHIDUsageKeyboardF11 = 68;
  UIKeyboardHIDUsageKeyboardF12 = 69;
  UIKeyboardHIDUsageKeyboardPrintScreen = 70;
  UIKeyboardHIDUsageKeyboardScrollLock = 71;
  UIKeyboardHIDUsageKeyboardPause = 72;
  UIKeyboardHIDUsageKeyboardInsert = 73;
  UIKeyboardHIDUsageKeyboardHome = 74;
  UIKeyboardHIDUsageKeyboardPageUp = 75;
  UIKeyboardHIDUsageKeyboardDeleteForward = 76;
  UIKeyboardHIDUsageKeyboardEnd = 77;
  UIKeyboardHIDUsageKeyboardPageDown = 78;
  UIKeyboardHIDUsageKeyboardRightArrow = 79;
  UIKeyboardHIDUsageKeyboardLeftArrow = 80;
  UIKeyboardHIDUsageKeyboardDownArrow = 81;
  UIKeyboardHIDUsageKeyboardUpArrow = 82;
  UIKeyboardHIDUsageKeypadNumLock = 83;
  UIKeyboardHIDUsageKeypadSlash = 84;
  UIKeyboardHIDUsageKeypadAsterisk = 85;
  UIKeyboardHIDUsageKeypadHyphen = 86;
  UIKeyboardHIDUsageKeypadPlus = 87;
  UIKeyboardHIDUsageKeypadEnter = 88;
  UIKeyboardHIDUsageKeypad1 = 89;
  UIKeyboardHIDUsageKeypad2 = 90;
  UIKeyboardHIDUsageKeypad3 = 91;
  UIKeyboardHIDUsageKeypad4 = 92;
  UIKeyboardHIDUsageKeypad5 = 93;
  UIKeyboardHIDUsageKeypad6 = 94;
  UIKeyboardHIDUsageKeypad7 = 95;
  UIKeyboardHIDUsageKeypad8 = 96;
  UIKeyboardHIDUsageKeypad9 = 97;
  UIKeyboardHIDUsageKeypad0 = 98;
  UIKeyboardHIDUsageKeypadPeriod = 99;
  UIKeyboardHIDUsageKeyboardNonUSBackslash = 100;
  UIKeyboardHIDUsageKeyboardApplication = 101;
  UIKeyboardHIDUsageKeyboardPower = 102;
  UIKeyboardHIDUsageKeypadEqualSign = 103;
  UIKeyboardHIDUsageKeyboardF13 = 104;
  UIKeyboardHIDUsageKeyboardF14 = 105;
  UIKeyboardHIDUsageKeyboardF15 = 106;
  UIKeyboardHIDUsageKeyboardF16 = 107;
  UIKeyboardHIDUsageKeyboardF17 = 108;
  UIKeyboardHIDUsageKeyboardF18 = 109;
  UIKeyboardHIDUsageKeyboardF19 = 110;
  UIKeyboardHIDUsageKeyboardF20 = 111;
  UIKeyboardHIDUsageKeyboardF21 = 112;
  UIKeyboardHIDUsageKeyboardF22 = 113;
  UIKeyboardHIDUsageKeyboardF23 = 114;
  UIKeyboardHIDUsageKeyboardF24 = 115;
  UIKeyboardHIDUsageKeyboardExecute = 116;
  UIKeyboardHIDUsageKeyboardHelp = 117;
  UIKeyboardHIDUsageKeyboardMenu = 118;
  UIKeyboardHIDUsageKeyboardSelect = 119;
  UIKeyboardHIDUsageKeyboardStop = 120;
  UIKeyboardHIDUsageKeyboardAgain = 121;
  UIKeyboardHIDUsageKeyboardUndo = 122;
  UIKeyboardHIDUsageKeyboardCut = 123;
  UIKeyboardHIDUsageKeyboardCopy = 124;
  UIKeyboardHIDUsageKeyboardPaste = 125;
  UIKeyboardHIDUsageKeyboardFind = 126;
  UIKeyboardHIDUsageKeyboardMute = 127;
  UIKeyboardHIDUsageKeyboardVolumeUp = 128;
  UIKeyboardHIDUsageKeyboardVolumeDown = 129;
  UIKeyboardHIDUsageKeyboardLockingCapsLock = 130;
  UIKeyboardHIDUsageKeyboardLockingNumLock = 131;
  UIKeyboardHIDUsageKeyboardLockingScrollLock = 132;
  UIKeyboardHIDUsageKeypadComma = 133;
  UIKeyboardHIDUsageKeypadEqualSignAS400 = 134;
  UIKeyboardHIDUsageKeyboardInternational1 = 135;
  UIKeyboardHIDUsageKeyboardInternational2 = 136;
  UIKeyboardHIDUsageKeyboardInternational3 = 137;
  UIKeyboardHIDUsageKeyboardInternational4 = 138;
  UIKeyboardHIDUsageKeyboardInternational5 = 139;
  UIKeyboardHIDUsageKeyboardInternational6 = 140;
  UIKeyboardHIDUsageKeyboardInternational7 = 141;
  UIKeyboardHIDUsageKeyboardInternational8 = 142;
  UIKeyboardHIDUsageKeyboardInternational9 = 143;
  UIKeyboardHIDUsageKeyboardLANG1 = 144;
  UIKeyboardHIDUsageKeyboardLANG2 = 145;
  UIKeyboardHIDUsageKeyboardLANG3 = 146;
  UIKeyboardHIDUsageKeyboardLANG4 = 147;
  UIKeyboardHIDUsageKeyboardLANG5 = 148;
  UIKeyboardHIDUsageKeyboardLANG6 = 149;
  UIKeyboardHIDUsageKeyboardLANG7 = 150;
  UIKeyboardHIDUsageKeyboardLANG8 = 151;
  UIKeyboardHIDUsageKeyboardLANG9 = 152;
  UIKeyboardHIDUsageKeyboardAlternateErase = 153;
  UIKeyboardHIDUsageKeyboardSysReqOrAttention = 154;
  UIKeyboardHIDUsageKeyboardCancel = 155;
  UIKeyboardHIDUsageKeyboardClear = 156;
  UIKeyboardHIDUsageKeyboardPrior = 157;
  UIKeyboardHIDUsageKeyboardReturn = 158;
  UIKeyboardHIDUsageKeyboardSeparator = 159;
  UIKeyboardHIDUsageKeyboardOut = 160;
  UIKeyboardHIDUsageKeyboardOper = 161;
  UIKeyboardHIDUsageKeyboardClearOrAgain = 162;
  UIKeyboardHIDUsageKeyboardCrSelOrProps = 163;
  UIKeyboardHIDUsageKeyboardExSel = 164;
  UIKeyboardHIDUsageKeyboardLeftControl = 224;
  UIKeyboardHIDUsageKeyboardLeftShift = 225;
  UIKeyboardHIDUsageKeyboardLeftAlt = 226;
  UIKeyboardHIDUsageKeyboardLeftGUI = 227;
  UIKeyboardHIDUsageKeyboardRightControl = 228;
  UIKeyboardHIDUsageKeyboardRightShift = 229;
  UIKeyboardHIDUsageKeyboardRightAlt = 230;
  UIKeyboardHIDUsageKeyboardRightGUI = 231;
  UIKeyboardHIDUsageKeyboard_Reserved = 65535;
  UIKeyboardHIDUsageKeyboardHangul = UIKeyboardHIDUsageKeyboardLANG1;
  UIKeyboardHIDUsageKeyboardHanja = UIKeyboardHIDUsageKeyboardLANG2;
  UIKeyboardHIDUsageKeyboardKanaSwitch = UIKeyboardHIDUsageKeyboardLANG1;
  UIKeyboardHIDUsageKeyboardAlphanumericSwitch =
    UIKeyboardHIDUsageKeyboardLANG2;
  UIKeyboardHIDUsageKeyboardKatakana = UIKeyboardHIDUsageKeyboardLANG3;
  UIKeyboardHIDUsageKeyboardHiragana = UIKeyboardHIDUsageKeyboardLANG4;
  UIKeyboardHIDUsageKeyboardZenkakuHankakuKanji =
    UIKeyboardHIDUsageKeyboardLANG5;
  UIListSeparatorVisibilityAutomatic = 0;
  UIListSeparatorVisibilityVisible = 1;
  UIListSeparatorVisibilityHidden = 2;
  UIListContentTextAlignmentNatural = 0;
  UIListContentTextAlignmentCenter = 1;
  UIListContentTextAlignmentJustified = 2;
  UIListContentTextTransformNone = 0;
  UIListContentTextTransformUppercase = 1;
  UIListContentTextTransformLowercase = 2;
  UIListContentTextTransformCapitalized = 3;
  UIVibrancyEffectStyleLabel = 0;
  UIVibrancyEffectStyleSecondaryLabel = 1;
  UIVibrancyEffectStyleTertiaryLabel = 2;
  UIVibrancyEffectStyleQuaternaryLabel = 3;
  UIVibrancyEffectStyleFill = 4;
  UIVibrancyEffectStyleSecondaryFill = 5;
  UIVibrancyEffectStyleTertiaryFill = 6;
  UIVibrancyEffectStyleSeparator = 7;
  UIUserNotificationTypeNone = 0;
  UIUserNotificationTypeBadge = 1 shl 0;
  UIUserNotificationTypeSound = 1 shl 1;
  UIUserNotificationTypeAlert = 1 shl 2;
  UIUserNotificationActionBehaviorDefault = 0;
  UIUserNotificationActionBehaviorTextInput = 1;
  UIUserNotificationActivationModeForeground = 0;
  UIUserNotificationActivationModeBackground = 1;
  UIUserNotificationActionContextDefault = 0;
  UIUserNotificationActionContextMinimal = 1;
  UIMenuControllerArrowDefault = 0;
  UIMenuControllerArrowUp = 1;
  UIMenuControllerArrowDown = 2;
  UIMenuControllerArrowLeft = 3;
  UIMenuControllerArrowRight = 4;
  UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis = 0;
  UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis = 1;
  UINavigationItemLargeTitleDisplayModeAutomatic = 0;
  UINavigationItemLargeTitleDisplayModeAlways = 1;
  UINavigationItemLargeTitleDisplayModeNever = 2;
  UINavigationItemBackButtonDisplayModeDefault = 0;
  UINavigationItemBackButtonDisplayModeGeneric = 1;
  UINavigationItemBackButtonDisplayModeMinimal = 2;
  UINavigationItemSearchBarPlacementAutomatic = 0;
  UINavigationItemSearchBarPlacementInline = 1;
  UINavigationItemSearchBarPlacementStacked = 2;
  UINavigationItemStyleNavigator = 0;
  UINavigationItemStyleBrowser = 1;
  UINavigationItemStyleEditor = 2;
  UINavigationBarNSToolbarSectionNone = 0;
  UINavigationBarNSToolbarSectionSidebar = 1;
  UINavigationBarNSToolbarSectionSupplementary = 2;
  UINavigationBarNSToolbarSectionContent = 3;
  UIPageControlInteractionStateNone = 0;
  UIPageControlInteractionStateDiscrete = 1;
  UIPageControlInteractionStateContinuous = 2;
  UIPageControlBackgroundStyleAutomatic = 0;
  UIPageControlBackgroundStyleProminent = 1;
  UIPageControlBackgroundStyleMinimal = 2;
  UIPageControlDirectionNatural = 0;
  UIPageControlDirectionLeftToRight = 1;
  UIPageControlDirectionRightToLeft = 2;
  UIPageControlDirectionTopToBottom = 3;
  UIPageControlDirectionBottomToTop = 4;
  UIPageViewControllerNavigationOrientationHorizontal = 0;
  UIPageViewControllerNavigationOrientationVertical = 1;
  UIPageViewControllerSpineLocationNone = 0;
  UIPageViewControllerSpineLocationMin = 1;
  UIPageViewControllerSpineLocationMid = 2;
  UIPageViewControllerSpineLocationMax = 3;
  UIPageViewControllerNavigationDirectionForward = 0;
  UIPageViewControllerNavigationDirectionReverse = 1;
  UIPageViewControllerTransitionStylePageCurl = 0;
  UIPageViewControllerTransitionStyleScroll = 1;
  UIPasteControlDisplayModeIconAndLabel = 0;
  UIPasteControlDisplayModeIconOnly = 1;
  UIPasteControlDisplayModeLabelOnly = 2;
  UIPopoverArrowDirectionUp = 1 shl 0;
  UIPopoverArrowDirectionDown = 1 shl 1;
  UIPopoverArrowDirectionLeft = 1 shl 2;
  UIPopoverArrowDirectionRight = 1 shl 3;
  UIPopoverArrowDirectionAny = UIPopoverArrowDirectionUp or
    UIPopoverArrowDirectionDown or UIPopoverArrowDirectionLeft or
    UIPopoverArrowDirectionRight;
  UIPopoverArrowDirectionUnknown = 4294967295;
  UIPressPhaseBegan = 0;
  UIPressPhaseChanged = 1;
  UIPressPhaseStationary = 2;
  UIPressPhaseEnded = 3;
  UIPressPhaseCancelled = 4;
  UIPressTypeUpArrow = 0;
  UIPressTypeDownArrow = 1;
  UIPressTypeLeftArrow = 2;
  UIPressTypeRightArrow = 3;
  UIPressTypeSelect = 4;
  UIPressTypeMenu = 5;
  UIPressTypePlayPause = 6;
  UIPressTypePageUp = 30;
  UIPressTypePageDown = 31;
  UIProgressViewStyleDefault = 0;
  UIProgressViewStyleBar = 1;
  UIScreenOverscanCompensationScale = 0;
  UIScreenOverscanCompensationInsetBounds = 1;
  UIScreenOverscanCompensationNone = 2;
  UIScreenOverscanCompensationInsetApplicationFrame = 2;
  UIScreenReferenceDisplayModeStatusNotSupported = 0;
  UIScreenReferenceDisplayModeStatusNotEnabled = 1;
  UIScreenReferenceDisplayModeStatusLimited = 2;
  UIScreenReferenceDisplayModeStatusEnabled = 3;
  UISearchBarIconSearch = 0;
  UISearchBarIconClear = 1;
  UISearchBarIconBookmark = 2;
  UISearchBarIconResultsList = 3;
  UISearchBarStyleDefault = 0;
  UISearchBarStyleProminent = 1;
  UISearchBarStyleMinimal = 2;
  UISearchControllerScopeBarActivationAutomatic = 0;
  UISearchControllerScopeBarActivationManual = 1;
  UISearchControllerScopeBarActivationOnTextEntry = 2;
  UISearchControllerScopeBarActivationOnSearchActivation = 3;
  UISegmentedControlStylePlain = 0;
  UISegmentedControlStyleBordered = 1;
  UISegmentedControlStyleBar = 2;
  UISegmentedControlStyleBezeled = 3;
  UISegmentedControlNoSegment = -1;
  UISegmentedControlSegmentAny = 0;
  UISegmentedControlSegmentLeft = 1;
  UISegmentedControlSegmentCenter = 2;
  UISegmentedControlSegmentRight = 3;
  UISegmentedControlSegmentAlone = 4;
  UISplitViewControllerDisplayModeAutomatic = 0;
  UISplitViewControllerDisplayModeSecondaryOnly = 1;
  UISplitViewControllerDisplayModeOneBesideSecondary = 2;
  UISplitViewControllerDisplayModeOneOverSecondary = 3;
  UISplitViewControllerDisplayModeTwoBesideSecondary = 4;
  __AVAILABILITY_INTERNAL__IPHONE_14_0 = 5;
  UISplitViewControllerDisplayModeTwoOverSecondary = 6;
  UISplitViewControllerDisplayModeTwoDisplaceSecondary = 0;
  UISplitViewControllerDisplayModePrimaryHidden =
    UISplitViewControllerDisplayModeSecondaryOnly;
  UISplitViewControllerDisplayModeAllVisible =
    UISplitViewControllerDisplayModeOneBesideSecondary;
  UISplitViewControllerDisplayModePrimaryOverlay =
    UISplitViewControllerDisplayModeOneOverSecondary;
  UISplitViewControllerPrimaryEdgeLeading = 0;
  UISplitViewControllerPrimaryEdgeTrailing = 1;
  UISplitViewControllerBackgroundStyleNone = 0;
  UISplitViewControllerBackgroundStyleSidebar = 1;
  UISplitViewControllerStyleUnspecified = 0;
  UISplitViewControllerStyleDoubleColumn = 1;
  UISplitViewControllerStyleTripleColumn = 2;
  UISplitViewControllerColumnPrimary = 0;
  UISplitViewControllerColumnSupplementary = 1;
  UISplitViewControllerColumnSecondary = 2;
  UISplitViewControllerColumnCompact = 3;
  UISplitViewControllerSplitBehaviorAutomatic = 0;
  UISplitViewControllerSplitBehaviorTile = 1;
  UISplitViewControllerSplitBehaviorOverlay = 2;
  UISplitViewControllerSplitBehaviorDisplace = 3;
  UISplitViewControllerDisplayModeButtonVisibilityAutomatic = 0;
  UISplitViewControllerDisplayModeButtonVisibilityNever = 1;
  UISplitViewControllerDisplayModeButtonVisibilityAlways = 2;
  UISwitchStyleAutomatic = 0;
  UISwitchStyleCheckbox = 1;
  UISwitchStyleSliding = 2;
  UITabBarItemPositioningAutomatic = 0;
  UITabBarItemPositioningFill = 1;
  UITabBarItemPositioningCentered = 2;
  UITabBarSystemItemMore = 0;
  UITabBarSystemItemFavorites = 1;
  UITabBarSystemItemFeatured = 2;
  UITabBarSystemItemTopRated = 3;
  UITabBarSystemItemRecents = 4;
  UITabBarSystemItemContacts = 5;
  UITabBarSystemItemHistory = 6;
  UITabBarSystemItemBookmarks = 7;
  UITabBarSystemItemSearch = 8;
  UITabBarSystemItemDownloads = 9;
  UITabBarSystemItemMostRecent = 10;
  UITabBarSystemItemMostViewed = 11;
  UITextItemInteractionInvokeDefaultAction = 0;
  UITextItemInteractionPresentActions = 1;
  UITextItemInteractionPreview = 2;
  UIWebViewNavigationTypeLinkClicked = 0;
  UIWebViewNavigationTypeFormSubmitted = 1;
  UIWebViewNavigationTypeBackForward = 2;
  UIWebViewNavigationTypeReload = 3;
  UIWebViewNavigationTypeFormResubmitted = 4;
  UIWebViewNavigationTypeOther = 5;
  UIWebPaginationModeUnpaginated = 0;
  UIWebPaginationModeLeftToRight = 1;
  UIWebPaginationModeTopToBottom = 2;
  UIWebPaginationModeBottomToTop = 3;
  UIWebPaginationModeRightToLeft = 4;
  UIWebPaginationBreakingModePage = 0;
  UIWebPaginationBreakingModeColumn = 1;
  UISpringLoadedInteractionEffectStateInactive = 0;
  UISpringLoadedInteractionEffectStatePossible = 1;
  UISpringLoadedInteractionEffectStateActivating = 2;
  UISpringLoadedInteractionEffectStateActivated = 3;
  UITabBarItemAppearanceStyleStacked = 0;
  UITabBarItemAppearanceStyleInline = 1;
  UITabBarItemAppearanceStyleCompactInline = 2;
  UIStackViewDistributionFill = 0;
  UIStackViewDistributionFillEqually = 1;
  UIStackViewDistributionFillProportionally = 2;
  UIStackViewDistributionEqualSpacing = 3;
  UIStackViewDistributionEqualCentering = 4;
  UIStackViewAlignmentFill = 0;
  UIStackViewAlignmentLeading = 1;
  UIStackViewAlignmentTop = UIStackViewAlignmentLeading;
  UIStackViewAlignmentFirstBaseline = 2;
  UIStackViewAlignmentCenter = 3;
  UIStackViewAlignmentTrailing = 4;
  UIStackViewAlignmentBottom = UIStackViewAlignmentTrailing;
  UIStackViewAlignmentLastBaseline = 5;
  UIPushBehaviorModeContinuous = 0;
  UIPushBehaviorModeInstantaneous = 1;
  UINotificationFeedbackTypeSuccess = 0;
  UINotificationFeedbackTypeWarning = 1;
  UINotificationFeedbackTypeError = 2;
  UITextInteractionModeEditable = 0;
  UITextInteractionModeNonEditable = 1;
  UIPencilPreferredActionIgnore = 0;
  UIPencilPreferredActionSwitchEraser = 1;
  UIPencilPreferredActionSwitchPrevious = 2;
  UIPencilPreferredActionShowColorPalette = 3;
  UIPencilPreferredActionShowInkAttributes = 4;
  UIPointerEffectTintModeNone = 0;
  UIPointerEffectTintModeOverlay = 1;
  UIPointerEffectTintModeUnderlay = 2;
  UIWindowScenePresentationStyleAutomatic = 0;
  UIWindowScenePresentationStyleStandard = 1;
  UIWindowScenePresentationStyleProminent = 2;

type

  // ===== Forward declarations =====
{$M+}
  UIImage = interface;
  UIMenuElement = interface;
  UIMenu = interface;
  UIPopoverPresentationControllerSourceItem = interface;
  UIMenuLeaf = interface;
  UICommand = interface;
  UICommandAlternate = interface;
  UIWindow = interface;
  UIView = interface;
  UIGestureRecognizer = interface;
  UITouch = interface;
  UIEvent = interface;
  UIKeyCommand = interface;
  UIPasteConfiguration = interface;
  UIPasteConfigurationSupporting = interface;
  UIUserActivityRestoring = interface;
  UIMenuBuilder = interface;
  UIPress = interface;
  UIPressesEvent = interface;
  UIResponderStandardEditActions = interface;
  UIResponder = interface;
  UIInputViewController = interface;
  UITextInputMode = interface;
  UITextInputAssistantItem = interface;
  UITraitCollection = interface;
  UIColor = interface;
  UIKitAdditions = interface;
  UIFontDescriptor = interface;
  UIFont = interface;
  UIDevice = interface;
  UIInputViewAudioFeedback = interface;
  UIAppearanceContainer = interface;
  UIAppearance = interface;
  NSValueUIGeometryExtensions = interface;
  UIGeometryKeyedCoding = interface;
  UIDynamicAnimator = interface;
  UIBezierPath = interface;
  UIDynamicItem = interface;
  UIDynamicItemGroup = interface;
  UIDynamicBehavior = interface;
  NSLayoutAnchor = interface;
  NSLayoutConstraint = interface;
  NSLayoutYAxisAnchor = interface;
  NSLayoutDimension = interface;
  UILayoutSupport = interface;
  UITraitEnvironment = interface;
  UIImageConfiguration = interface;
  NSLayoutXAxisAnchor = interface;
  UILayoutGuide = interface;
  UIFocusEnvironment = interface;
  UIFocusGuide = interface;
  UIFocusAnimationContext = interface;
  UIFocusAnimationCoordinator = interface;
  UIFocusUpdateContext = interface;
  UIFocusMovementHint = interface;
  UIFocusEffect = interface;
  UICoordinateSpace = interface;
  UIFocusItemContainer = interface;
  UIFocusItem = interface;
  UIFocusItemScrollableContainer = interface;
  UIViewController = interface;
  UIMotionEffect = interface;
  UIKeyboardLayoutGuide = interface;
  UIInteraction = interface;
  UIAction = interface;
  UIKeyInput = interface;
  UIContextMenuConfiguration = interface;
  UITargetedPreview = interface;
  UIContextMenuInteractionDelegate = interface;
  UIContextMenuInteraction = interface;
  UIContextMenuInteractionAnimating = interface;
  UIContextMenuInteractionCommitAnimating = interface;
  UIToolTipInteraction = interface;
  UIControl = interface;
  NSTextList = interface;
  NSTextTab = interface;
  NSParagraphStyle = interface;
  NSMutableParagraphStyle = interface;
  UIStringDrawing = interface;
  UIDragAnimating = interface;
  UIDropInteractionDelegate = interface;
  UIDropSession = interface;
  UIDragItem = interface;
  UITargetedDragPreview = interface;
  UIDropInteraction = interface;
  UIDropProposal = interface;
  UIViewAnimating = interface;
  UITimingCurveProvider = interface;
  UIViewImplicitlyAnimating = interface;
  UIDragInteractionDelegate = interface;
  UIDragSession = interface;
  UIDragInteraction = interface;
  UITextInputPasswordRules = interface;
  UITextInputTraits = interface;
  UITextPosition = interface;
  UITextRange = interface;
  UITextSelectionRect = interface;
  UIBarButtonItemGroup = interface;
  UITextInputTokenizer = interface;
  UITextInputDelegate = interface;
  UIEditMenuInteractionAnimating = interface;
  UIDictationPhrase = interface;
  UITextPlaceholder = interface;
  UITextInput = interface;
  UITextInputStringTokenizer = interface;
  UITextDragDelegate = interface;
  UITextDraggable = interface;
  UITextDragRequest = interface;
  UITextDropProposal = interface;
  UITextPasteConfigurationSupporting = interface;
  UITextPasteItem = interface;
  NSTextAttachment = interface;
  UITextPasteDelegate = interface;
  UITextDropDelegate = interface;
  UITextDroppable = interface;
  UITextDropRequest = interface;
  UIContentSizeCategoryAdjusting = interface;
  UIImageView = interface;
  UILabel = interface;
  UIButton = interface;
  UIPopoverController = interface;
  UITextFieldDelegate = interface;
  UITextSelecting = interface;
  UITextField = interface;
  UIActionSheetDelegate = interface;
  UIToolbar = interface;
  UITabBar = interface;
  UIBarButtonItem = interface;
  UIActionSheet = interface;
  UIAlertViewDelegate = interface;
  UIAlertView = interface;
  UILocalNotification = interface;
  UIApplicationDelegate = interface;
  UIScene = interface;
  UIWindowScene = interface;
  UISceneSession = interface;
  UISceneConfiguration = interface;
  UISceneConnectionOptions = interface;
  UISceneActivationRequestOptions = interface;
  UISceneDestructionRequestOptions = interface;
  UIApplication = interface;
  UIUserNotificationSettings = interface;
  UIApplicationShortcutItem = interface;
  UIStateRestoring = interface;
  UIViewControllerRestoration = interface;
  UIDataSourceModelAssociation = interface;
  UIObjectRestoration = interface;
  UIOpenURLContext = interface;
  UISceneOpenExternalURLOptions = interface;
  UISceneActivationConditions = interface;
  UISceneDelegate = interface;
  UIPointerLockState = interface;
  UINavigationItem = interface;
  UITabBarItem = interface;
  UISearchDisplayController = interface;
  UIStoryboard = interface;
  UIStoryboardSegue = interface;
  UIStoryboardUnwindSegueSource = interface;
  UIScrollView = interface;
  UIViewControllerTransitionCoordinator = interface;
  UIContentContainer = interface;
  UIViewControllerTransitioningDelegate = interface;
  UIPresentationController = interface;
  UISheetPresentationController = interface;
  UIPopoverPresentationController = interface;
  UIViewControllerPreviewingDelegate = interface;
  UIViewControllerPreviewing = interface;
  UIPreviewActionItem = interface;
  UIPreviewAction = interface;
  UIPreviewActionGroup = interface;
  UIViewControllerTransitionCoordinatorContext = interface;
  UICubicTimingParameters = interface;
  UISpringTimingParameters = interface;
  UIViewControllerContextTransitioning = interface;
  UIViewControllerAnimatedTransitioning = interface;
  UIViewControllerInteractiveTransitioning = interface;
  UIPercentDrivenInteractiveTransition = interface;
  UIDocumentBrowserViewControllerDelegate = interface;
  UIActivity = interface;
  UIActivityViewController = interface;
  UIDocumentBrowserAction = interface;
  UIDocumentBrowserTransitionController = interface;
  UIDocumentBrowserViewController = interface;
  NSAttributedStringAttributeFixing = interface;
  NSAttributedStringDocumentFormats = interface;
  NSMutableAttributedStringDocumentFormats = interface;
  NSAttributedStringKitAdditions = interface;
  NSAttributedString_ItemProvider = interface;
  NSDeprecatedKitAdditions = interface;
  NSDataAsset = interface;
  NSDiffableDataSourceSectionSnapshot = interface;
  UIItemProviderPresentationSizeProviding = interface;
  NSLayoutManager = interface;
  NSTextStorageDelegate = interface;
  NSTextStorageObserving = interface;
  NSTextStorage = interface;
  NSTextContainer = interface;
  NSLayoutManagerDelegate = interface;
  NSTextLayoutOrientationProvider = interface;
  NSShadow = interface;
  NSStringDrawingContext = interface;
  NSStringDrawing = interface;
  NSExtendedStringDrawing = interface;
  NSTextAttachmentViewProvider = interface;
  NSTextLayoutManager = interface;
  NSTextLocation = interface;
  NSTextAttachmentContainer = interface;
  NSTextAttachmentLayout = interface;
  NSAttributedStringAttachmentConveniences = interface;
  NSTextRange = interface;
  NSTextElement = interface;
  NSTextParagraph = interface;
  NSTextContentStorage = interface;
  NSTextContentManagerDelegate = interface;
  NSTextElementProvider = interface;
  NSTextContentManager = interface;
  NSTextContentStorageDelegate = interface;
  NSTextLineFragment = interface;
  NSTextLayoutFragment = interface;
  NSTextSelection = interface;
  NSTextSelectionNavigation = interface;
  NSTextViewportLayoutController = interface;
  NSTextLayoutManagerDelegate = interface;
  NSTextSelectionDataSource = interface;
  NSTextListElement = interface;
  NSTextViewportLayoutControllerDelegate = interface;
  NSItemProvider = interface;
  UIPrinter = interface;
  UIPrinterPickerController = interface;
  UIPrinterPickerControllerDelegate = interface;
  UIPrintPageRenderer = interface;
  UIPrintFormatter = interface;
  UISimpleTextPrintFormatter = interface;
  UIMarkupTextPrintFormatter = interface;
  UIViewPrintFormatter = interface;
  UIPrintInfo = interface;
  UIPrintInteractionController = interface;
  UIPrintPaper = interface;
  UIPrintInteractionControllerDelegate = interface;
  UIPrinterDestination = interface;
  UIPrintServiceExtension = interface;
  UIActivityItemSource = interface;
  UIActivityItemProvider = interface;
  UIActivityItemsConfigurationReading = interface;
  UIDocumentInteractionControllerDelegate = interface;
  UIDocumentInteractionController = interface;
  UIAccelerometerDelegate = interface;
  UIAcceleration = interface;
  UIAccelerometer = interface;
  UIPickerViewDataSource = interface;
  UIPickerViewDelegate = interface;
  UIPickerView = interface;
  UIRefreshControl = interface;
  UIPanGestureRecognizer = interface;
  UIPinchGestureRecognizer = interface;
  UIScrollViewDelegate = interface;
  UIPickerViewAccessibilityDelegate = interface;
  UIScrollViewAccessibilityDelegate = interface;
  UIAccessibilityContainer = interface;
  UIAccessibilityContainerDataTableCell = interface;
  UIAccessibilityContainerDataTable = interface;
  UIImageAsset = interface;
  UIGraphicsImageRendererFormat = interface;
  UIScreen = interface;
  UIImageSymbolConfiguration = interface;
  UIAccessibilityCustomAction = interface;
  UIAccessibilityCustomRotor = interface;
  UIAccessibilityCustomRotorItemResult = interface;
  UIAccessibilityCustomRotorSearchPredicate = interface;
  UIBarItem = interface;
  UISpringLoadedInteractionSupporting = interface;
  UIAlertAction = interface;
  UIAlertController = interface;
  UIAccessibilityIdentification = interface;
  UIAccessibilityElement = interface;
  UIGuidedAccessRestrictionDelegate = interface;
  UIAccessibilityLocationDescriptor = interface;
  UIAccessibility = interface;
  UIAccessibilityFocus = interface;
  UIAccessibilityAction = interface;
  UIAccessibilityReadingContent = interface;
  UIAccessibilityDragging = interface;
  UIConfigurationState = interface;
  UIVisualEffect = interface;
  UIBackgroundConfiguration = interface;
  UIButtonConfiguration = interface;
  UIPointerStyle = interface;
  UIPointerEffect = interface;
  UIPointerShape = interface;
  UIAccessibilityContentSizeCategoryImageAdjusting = interface;
  UIActivityIndicatorView = interface;
  UIActivityItemsConfigurationProviding = interface;
  UIActivityItemsConfiguration = interface;
  UIApplicationShortcutIcon = interface;
  UIMutableApplicationShortcutItem = interface;
  UIAttachmentBehavior = interface;
  UIBandSelectionInteraction = interface;
  UIBlurEffect = interface;
  UIBarAppearance = interface;
  UIBarPositioning = interface;
  UIBarPositioningDelegate = interface;
  UIBarButtonItemStateAppearance = interface;
  UIBarButtonItemAppearance = interface;
  UISlider = interface;
  UICalendarSelection = interface;
  UICalendarSelectionMultiDateDelegate = interface;
  UICalendarSelectionMultiDate = interface;
  UICalendarSelectionSingleDateDelegate = interface;
  UICalendarSelectionSingleDate = interface;
  UICalendarViewDelegate = interface;
  UICalendarViewDecoration = interface;
  UICalendarView = interface;
  UICellAccessory = interface;
  UICellAccessoryDisclosureIndicator = interface;
  UICellAccessoryDetail = interface;
  UICellAccessoryCheckmark = interface;
  UICellAccessoryDelete = interface;
  UICellAccessoryInsert = interface;
  UICellAccessoryReorder = interface;
  UICellAccessoryMultiselect = interface;
  UICellAccessoryOutlineDisclosure = interface;
  UICellAccessoryPopUpMenu = interface;
  UICellAccessoryLabel = interface;
  UICellAccessoryCustomView = interface;
  UIViewConfigurationState = interface;
  UICellConfigurationState = interface;
  UICloudSharingController = interface;
  UICloudSharingControllerDelegate = interface;
  UICollectionViewUpdateItem = interface;
  UICollectionViewLayoutAttributes = interface;
  UICollectionView = interface;
  UINib = interface;
  UICollectionViewLayoutInvalidationContext = interface;
  UICollectionViewLayout = interface;
  NSCollectionLayoutSection = interface;
  NSCollectionLayoutGroup = interface;
  NSCollectionLayoutItem = interface;
  NSCollectionLayoutSupplementaryItem = interface;
  NSCollectionLayoutBoundarySupplementaryItem = interface;
  NSCollectionLayoutDecorationItem = interface;
  NSCollectionLayoutSize = interface;
  NSCollectionLayoutDimension = interface;
  NSCollectionLayoutSpacing = interface;
  NSCollectionLayoutEdgeSpacing = interface;
  NSCollectionLayoutAnchor = interface;
  NSCollectionLayoutEnvironment = interface;
  NSCollectionLayoutContainer = interface;
  NSCollectionLayoutVisibleItem = interface;
  UICollectionViewCompositionalLayoutConfiguration = interface;
  UICollectionViewCompositionalLayout = interface;
  NSCollectionLayoutGroupCustomItem = interface;
  UISwipeActionsConfiguration = interface;
  UIListSeparatorConfiguration = interface;
  UICollectionLayoutListConfiguration = interface;
  UIDataSourceTranslating = interface;
  UICollectionReusableView = interface;
  UICollectionViewCell = interface;
  UICollectionViewTransitionLayout = interface;
  UIDragPreviewParameters = interface;
  UIDragPreviewTarget = interface;
  UICollectionViewDropProposal = interface;
  UICollectionViewPlaceholder = interface;
  UICollectionViewDropPlaceholder = interface;
  UICollectionViewCellRegistration = interface;
  UICollectionViewSupplementaryRegistration = interface;
  UIWindowSceneActivationConfiguration = interface;
  UISpringLoadedInteractionContext = interface;
  UICollectionViewDragDelegate = interface;
  UICollectionViewDropDelegate = interface;
  UICollectionViewDropCoordinator = interface;
  UICollectionViewDropItem = interface;
  UICollectionViewDropPlaceholderContext = interface;
  UICollectionViewFocusUpdateContext = interface;
  UICollectionViewDataSource = interface;
  UICollectionViewDataSourcePrefetching = interface;
  UICollectionViewDelegate = interface;
  UILongPressGestureRecognizer = interface;
  UIContentConfiguration = interface;
  UICollectionViewController = interface;
  UICollectionViewFlowLayoutInvalidationContext = interface;
  UICollectionViewDelegateFlowLayout = interface;
  UICollectionViewFlowLayout = interface;
  UIListContentConfiguration = interface;
  UICollectionViewListCell = interface;
  UICollisionBehavior = interface;
  UICollisionBehaviorDelegate = interface;
  UIColorPickerViewController = interface;
  UIColorPickerViewControllerDelegate = interface;
  UIColorWell = interface;
  UIContentView = interface;
  UIContextualAction = interface;
  UIDatePicker = interface;
  UIDeferredMenuElement = interface;
  UIGestureRecognizerDelegate = interface;
  UISwipeGestureRecognizer = interface;
  UITableView = interface;
  UITableViewCell = interface;
  UITableViewHeaderFooterView = interface;
  UITableViewDataSource = interface;
  UITableViewDataSourcePrefetching = interface;
  UITableViewDropProposal = interface;
  UITableViewPlaceholder = interface;
  UITableViewDropPlaceholder = interface;
  UITableViewDragDelegate = interface;
  UITableViewDropDelegate = interface;
  UITableViewDropCoordinator = interface;
  UITableViewDropItem = interface;
  UITableViewDropPlaceholderContext = interface;
  UITableViewRowAction = interface;
  UITableViewFocusUpdateContext = interface;
  UITableViewDelegate = interface;
  NSDiffableDataSourceSnapshot = interface;
  NSDiffableDataSourceSectionTransaction = interface;
  NSDiffableDataSourceTransaction = interface;
  UICollectionViewDiffableDataSourceReorderingHandlers = interface;
  UICollectionViewDiffableDataSourceSectionSnapshotHandlers = interface;
  UICollectionViewDiffableDataSource = interface;
  UITableViewDiffableDataSource = interface;
  UIDocument = interface;
  UIDocumentPickerViewController = interface;
  UIDocumentMenuViewController = interface;
  UIDocumentPickerDelegate = interface;
  UIDocumentMenuDelegate = interface;
  UIDocumentPickerExtensionViewController = interface;
  UIDocumentProperties = interface;
  UIDragPreview = interface;
  UIPreviewParameters = interface;
  UIDragDropSession = interface;
  UIDynamicAnimatorDelegate = interface;
  UIDynamicItemBehavior = interface;
  UIEditMenuInteractionDelegate = interface;
  UIEditMenuConfiguration = interface;
  UIEditMenuInteraction = interface;
  UIEventAttribution = interface;
  UIEventAttributionView = interface;
  UIFeedbackGenerator = interface;
  UIRegion = interface;
  UIFieldBehavior = interface;
  UITextSearchOptions = interface;
  UITextSearchAggregator = interface;
  UITextSearching = interface;
  UIFindSession = interface;
  UITextSearchingFindSession = interface;
  UIFindInteraction = interface;
  UIFindInteractionDelegate = interface;
  UIFocusSystem = interface;
  UIFocusDebuggerOutput = interface;
  UIFocusDebugger = interface;
  UIFocusHaloEffect = interface;
  UISceneOpenURLOptions = interface;
  UISceneSizeRestrictions = interface;
  UISceneWindowingBehaviors = interface;
  UIWindowSceneGeometry = interface;
  UIWindowSceneGeometryPreferences = interface;
  UIWindowSceneDelegate = interface;
  UIWindowSceneDestructionRequestOptions = interface;
  UIFontMetrics = interface;
  UIFontPickerViewControllerConfiguration = interface;
  UIFontPickerViewController = interface;
  UIFontPickerViewControllerDelegate = interface;
  UIGraphicsRendererFormat = interface;
  UIGraphicsRendererContext = interface;
  UIGraphicsRenderer = interface;
  UIGraphicsImageRendererContext = interface;
  UIGraphicsImageRenderer = interface;
  UIGraphicsPDFRendererContext = interface;
  UIGraphicsPDFRendererFormat = interface;
  UIGraphicsPDFRenderer = interface;
  UIGravityBehavior = interface;
  UIHoverGestureRecognizer = interface;
  UITapGestureRecognizer = interface;
  UINavigationBar = interface;
  UINavigationControllerDelegate = interface;
  UINavigationController = interface;
  UIImagePickerControllerDelegate = interface;
  UIImagePickerController = interface;
  UIImpactFeedbackGenerator = interface;
  UIIndirectScribbleInteractionDelegate = interface;
  UIIndirectScribbleInteraction = interface;
  UIInputView = interface;
  UILexicon = interface;
  UITextDocumentProxy = interface;
  UIKey = interface;
  UITrackingLayoutGuide = interface;
  UIListContentImageProperties = interface;
  UIListContentTextProperties = interface;
  UIListContentView = interface;
  UIVibrancyEffect = interface;
  UIVisualEffectView = interface;
  UILexiconEntry = interface;
  UILargeContentViewerInteractionDelegate = interface;
  UILargeContentViewerItem = interface;
  UILargeContentViewerInteraction = interface;
  UIUserNotificationCategory = interface;
  UIUserNotificationAction = interface;
  UIMutableUserNotificationCategory = interface;
  UIMutableUserNotificationAction = interface;
  UILocalizedIndexedCollation = interface;
  UIManagedDocument = interface;
  UIMenuItem = interface;
  UIMenuController = interface;
  UIInterpolatingMotionEffect = interface;
  UIMotionEffectGroup = interface;
  UISearchController = interface;
  UINavigationBarAppearance = interface;
  UINavigationItemRenameDelegate = interface;
  UINavigationBarDelegate = interface;
  UINibLoadingAdditions = interface;
  UIPageControl = interface;
  UIPageViewControllerDelegate = interface;
  UIPageViewControllerDataSource = interface;
  UIPageViewController = interface;
  UIPasteboard = interface;
  UIPasteControlConfiguration = interface;
  UIPasteControl = interface;
  UIPopoverControllerDelegate = interface;
  UIPopoverBackgroundViewMethods = interface;
  UIPopoverBackgroundView = interface;
  UIProgressView = interface;
  UIReferenceLibraryViewController = interface;
  UIRotationGestureRecognizer = interface;
  UIScreenMode = interface;
  UIScreenEdgePanGestureRecognizer = interface;
  UISearchBarDelegate = interface;
  UISearchTextField = interface;
  UISearchBar = interface;
  UISearchContainerViewController = interface;
  UIAdaptivePresentationControllerDelegate = interface;
  UISearchControllerDelegate = interface;
  UISearchSuggestion = interface;
  UISearchResultsUpdating = interface;
  UISearchDisplayDelegate = interface;
  UISearchToken = interface;
  UISearchTextFieldDelegate = interface;
  UISearchTextFieldPasteItem = interface;
  UISegmentedControl = interface;
  UISplitViewControllerDelegate = interface;
  UISplitViewController = interface;
  UIStepper = interface;
  UIStoryboardPopoverSegue = interface;
  UISwitch = interface;
  UITabBarAppearance = interface;
  UITabBarDelegate = interface;
  UITabBarControllerDelegate = interface;
  UITabBarController = interface;
  UITableViewController = interface;
  UITextChecker = interface;
  UITextInputContext = interface;
  UITextView = interface;
  UITextViewDelegate = interface;
  UIToolbarAppearance = interface;
  UIToolbarDelegate = interface;
  UIVideoEditorControllerDelegate = interface;
  UIVideoEditorController = interface;
  UIWebViewDelegate = interface;
  UIWebView = interface;
  UILayoutGuideAspectFitting = interface;
  UIPreviewTarget = interface;
  UISpringLoadedInteractionBehavior = interface;
  UISpringLoadedInteractionEffect = interface;
  UISpringLoadedInteraction = interface;
  UITabBarItemStateAppearance = interface;
  UITabBarItemAppearance = interface;
  UISearchSuggestionItem = interface;
  UIScribbleInteractionDelegate = interface;
  UIScribbleInteraction = interface;
  UIStackView = interface;
  UIPreviewInteractionDelegate = interface;
  UIPreviewInteraction = interface;
  UISheetPresentationControllerDetentResolutionContext = interface;
  UISheetPresentationControllerDetent = interface;
  UISheetPresentationControllerDelegate = interface;
  UIPopoverPresentationControllerDelegate = interface;
  UIPushBehavior = interface;
  UISnapBehavior = interface;
  UITextDragPreviewRenderer = interface;
  UIViewPropertyAnimator = interface;
  UISelectionFeedbackGenerator = interface;
  UINotificationFeedbackGenerator = interface;
  UITextInteraction = interface;
  UITextInteractionDelegate = interface;
  UIPencilInteractionDelegate = interface;
  UIPencilInteraction = interface;
  UIWindowSceneGeometryPreferencesMac = interface;
  UIWindowSceneGeometryPreferencesIOS = interface;
  UIStatusBarManager = interface;
  UIScreenshotServiceDelegate = interface;
  UIScreenshotService = interface;
  UIMenuSystem = interface;
  UITextFormattingCoordinatorDelegate = interface;
  UITextFormattingCoordinator = interface;
  UIPointerRegion = interface;
  UIPointerAccessory = interface;
  UIPointerHighlightEffect = interface;
  UIPointerLiftEffect = interface;
  UIPointerHoverEffect = interface;
  UIPointerRegionRequest = interface;
  UIPointerInteractionDelegate = interface;
  UIPointerInteractionAnimating = interface;
  UIPointerInteraction = interface;
  UIWindowSceneActivationRequestOptions = interface;
  UIWindowSceneActivationAction = interface;
  UIWindowSceneActivationInteraction = interface;
  UIToolTipInteractionDelegate = interface;
  UIToolTipConfiguration = interface;

  // ===== Framework typedefs =====
{$M+}
  NSInteger = Integer;
  PNSInteger = ^NSInteger;

  UIMenuElementState = NSInteger;
  NSUInteger = Cardinal;
  PNSUInteger = ^NSUInteger;

  UIMenuElementAttributes = NSUInteger;
  UIMenuIdentifier = NSString;
  PUIMenuIdentifier = ^UIMenuIdentifier;
  UIMenuOptions = NSUInteger;
  UIMenuElementSize = NSInteger;
  UIKeyModifierFlags = NSInteger;
  SEL = SEL *;
  PSEL = ^SEL;
  UIEventType = NSInteger;
  UIEventSubtype = NSInteger;
  UIEventButtonMask = NSInteger;
  NSTimeInterval = Double;
  PNSTimeInterval = ^NSTimeInterval;

  UITextAttributesConversionHandler = function(param1: NSDictionary)
    : NSDictionary; cdecl;
  UIEditingInteractionConfiguration = NSInteger;
  CGFloat = Single;
  PCGFloat = ^CGFloat;

  CGColorRef = Pointer;
  PCGColorRef = ^CGColorRef;
  TUIKitDynamicProvider = function(param1: UITraitCollection): UIColor; cdecl;
  UIFontDescriptorSymbolicTraits = LongWord;
  _UIFontDescriptorClass = NSUInteger;
  P_UIFontDescriptorClass = ^_UIFontDescriptorClass;
  UIFontTextStyle = NSString;
  PUIFontTextStyle = ^UIFontTextStyle;
  UIFontDescriptorAttributeName = NSString;
  PUIFontDescriptorAttributeName = ^UIFontDescriptorAttributeName;
  UIFontDescriptorTraitKey = NSString;
  PUIFontDescriptorTraitKey = ^UIFontDescriptorTraitKey;
  UIFontDescriptorFeatureKey = NSString;
  PUIFontDescriptorFeatureKey = ^UIFontDescriptorFeatureKey;
  UIFontWeight = CGFloat;
  PUIFontWeight = ^UIFontWeight;
  UIFontWidth = CGFloat;
  PUIFontWidth = ^UIFontWidth;
  UIFontDescriptorSystemDesign = NSString;
  PUIFontDescriptorSystemDesign = ^UIFontDescriptorSystemDesign;

  CGAffineTransform = record
    a: CGFloat;
    b: CGFloat;
    c: CGFloat;
    d: CGFloat;
    tx: CGFloat;
    ty: CGFloat;
  end;

  PCGAffineTransform = ^CGAffineTransform;

  UIBarStyle = NSInteger;
  UIUserInterfaceSizeClass = NSInteger;
  UIUserInterfaceStyle = NSInteger;
  UIUserInterfaceLayoutDirection = NSInteger;
  UITraitEnvironmentLayoutDirection = NSInteger;
  UIDisplayGamut = NSInteger;
  UIAccessibilityContrast = NSInteger;
  UILegibilityWeight = NSInteger;
  UIUserInterfaceLevel = NSInteger;
  UIUserInterfaceActiveAppearance = NSInteger;
  UINSToolbarItemPresentationSize = NSInteger;
  UIDeviceOrientation = NSInteger;
  UIDeviceBatteryState = NSInteger;
  UIUserInterfaceIdiom = NSInteger;
  NSNotificationName = NSString;
  PNSNotificationName = ^NSNotificationName;

  UIEdgeInsets = record
    top: CGFloat;
    left: CGFloat;
    bottom: CGFloat;
    right: CGFloat;
  end;

  PUIEdgeInsets = ^UIEdgeInsets;

  NSDirectionalEdgeInsets = record
    top: CGFloat;
    leading: CGFloat;
    bottom: CGFloat;
    trailing: CGFloat;
  end;

  PNSDirectionalEdgeInsets = ^NSDirectionalEdgeInsets;

  UIOffset = record
    horizontal: CGFloat;
    vertical: CGFloat;
  end;

  PUIOffset = ^UIOffset;

  UIRectEdge = NSUInteger;
  UIRectCorner = NSUInteger;
  UIAxis = NSUInteger;
  NSDirectionalRectEdge = NSUInteger;
  UIDirectionalRectEdge = NSUInteger;
  NSRectAlignment = NSInteger;

  CGPoint = record
    x: CGFloat;
    y: CGFloat;
  end;

  PCGPoint = ^CGPoint;

  CGSize = record
    width: CGFloat;
    height: CGFloat;
  end;

  PCGSize = ^CGSize;

  CGRect = record
    origin: CGPoint;
    size: CGSize;
  end;

  PCGRect = ^CGRect;

  CGVector = record
    dx: CGFloat;
    dy: CGFloat;
  end;

  PCGVector = ^CGVector;

  UIDynamicItemCollisionBoundsType = NSUInteger;
  TUIKitAction = procedure() of object;
  UILayoutPriority = Single;
  PUILayoutPriority = ^UILayoutPriority;

  NSLayoutRelation = NSInteger;
  NSLayoutAttribute = NSInteger;
  NSLayoutFormatOptions = NSUInteger;
  UITouchPhase = NSInteger;
  UIForceTouchCapability = NSInteger;
  UITouchType = NSInteger;
  UITouchProperties = NSInteger;
  UIContentSizeCategory = NSString;
  PUIContentSizeCategory = ^UIContentSizeCategory;
  NSComparisonResult = NSInteger;
  TUIKitAnimations = procedure(param1: Pointer) of object;
  UIFocusHeading = NSUInteger;
  UIFocusSoundIdentifier = NSString;
  PUIFocusSoundIdentifier = ^UIFocusSoundIdentifier;
  UIFocusGroupPriority = NSInteger;
  PUIFocusGroupPriority = ^UIFocusGroupPriority;
  UIViewAnimationCurve = NSInteger;
  UIViewContentMode = NSInteger;
  UIViewAnimationTransition = NSInteger;
  UIViewAutoresizing = NSUInteger;
  UIViewAnimationOptions = NSUInteger;
  UIViewKeyframeAnimationOptions = NSUInteger;
  UISystemAnimation = NSUInteger;
  UIViewTintAdjustmentMode = NSInteger;
  UISemanticContentAttribute = NSInteger;

  CATransform3D = record
    m11: CGFloat;
    m12: CGFloat;
    m13: CGFloat;
    m14: CGFloat;
    m21: CGFloat;
    m22: CGFloat;
    m23: CGFloat;
    m24: CGFloat;
    m31: CGFloat;
    m32: CGFloat;
    m33: CGFloat;
    m34: CGFloat;
    m41: CGFloat;
    m42: CGFloat;
    m43: CGFloat;
    m44: CGFloat;
  end;

  PCATransform3D = ^CATransform3D;

  TUIKitCompletion = procedure(param1: Boolean) of object;
  UILayoutConstraintAxis = NSInteger;
  UIActionIdentifier = NSString;
  PUIActionIdentifier = ^UIActionIdentifier;
  UIActionHandler = procedure(param1: UIAction) of object;
  UIContextMenuConfigurationElementOrder = NSInteger;
  UIContextMenuActionProvider = function(param1: NSArray): UIMenu; cdecl;
  UIContextMenuContentPreviewProvider = function(): UIViewController; cdecl;
  UIContextMenuInteractionCommitStyle = NSInteger;
  UIContextMenuInteractionAppearance = NSInteger;
  TUIKitBlock = function(param1: UIMenu): UIMenu; cdecl;
  UIControlEvents = NSUInteger;
  UIControlContentVerticalAlignment = NSInteger;
  UIControlContentHorizontalAlignment = NSInteger;
  UIControlState = NSUInteger;
  TUIKitIterator = procedure(param1: UIAction; param2: Pointer; param3: SEL;
    param4: UIControlEvents; param5: PBoolean) of object;
  NSTextAlignment = NSInteger;
  NSWritingDirection = NSInteger;
  CTTextAlignment = Byte;
  NSLineBreakMode = NSInteger;
  NSLineBreakStrategy = NSUInteger;
  NSTextTabOptionKey = NSString;
  PNSTextTabOptionKey = ^NSTextTabOptionKey;
  UILineBreakMode = NSInteger;
  UITextAlignment = NSInteger;
  UIBaselineAdjustment = NSInteger;
  UIDropOperation = NSUInteger;
  UIViewAnimatingState = NSInteger;
  UIViewAnimatingPosition = NSInteger;
  TUIKitCompletion1 = procedure(param1: UIViewAnimatingPosition) of object;
  UITextAutocapitalizationType = NSInteger;
  UITextAutocorrectionType = NSInteger;
  UITextSpellCheckingType = NSInteger;
  UITextSmartQuotesType = NSInteger;
  UITextSmartDashesType = NSInteger;
  UITextSmartInsertDeleteType = NSInteger;
  UIKeyboardType = NSInteger;
  UIKeyboardAppearance = NSInteger;
  UIReturnKeyType = NSInteger;
  UITextContentType = NSString;
  PUITextContentType = ^UITextContentType;
  UITextStorageDirection = NSInteger;
  UITextLayoutDirection = NSInteger;
  UITextDirection = NSInteger;
  PUITextDirection = ^UITextDirection;
  UITextGranularity = NSInteger;
  UITextAlternativeStyle = NSInteger;

  _NSRange = record
    location: NSUInteger;
    length: NSUInteger;
  end;

  P_NSRange = ^_NSRange;
  NSRange = _NSRange;
  PNSRange = ^NSRange;

  UITextWritingDirection = NSWritingDirection;
  PUITextWritingDirection = ^UITextWritingDirection;
  UITextDragOptions = NSInteger;
  UITextDropAction = NSUInteger;
  UITextDropProgressMode = NSUInteger;
  UITextDropPerformer = NSUInteger;
  UITextDropEditability = NSUInteger;
  UITextBorderStyle = NSInteger;
  UITextFieldViewMode = NSInteger;
  UITextFieldDidEndEditingReason = NSInteger;
  UIActionSheetStyle = NSInteger;
  UIAlertViewStyle = NSInteger;
  UISceneActivationState = NSInteger;
  UISceneSessionRole = NSString;
  PUISceneSessionRole = ^UISceneSessionRole;
  NSErrorDomain = NSString;
  PNSErrorDomain = ^NSErrorDomain;
  UISceneErrorCode = NSInteger;
  UIStatusBarStyle = NSInteger;
  UIStatusBarAnimation = NSInteger;
  UIInterfaceOrientation = NSInteger;
  NSExceptionName = NSString;
  PNSExceptionName = ^NSExceptionName;
  UIInterfaceOrientationMask = NSUInteger;
  UIRemoteNotificationType = NSUInteger;
  UIBackgroundFetchResult = NSUInteger;
  UIBackgroundRefreshStatus = NSInteger;
  UIApplicationState = NSInteger;
  UIBackgroundTaskIdentifier = NSUInteger;
  PUIBackgroundTaskIdentifier = ^UIBackgroundTaskIdentifier;
  UIApplicationOpenExternalURLOptionsKey = NSString;
  PUIApplicationOpenExternalURLOptionsKey = ^
    UIApplicationOpenExternalURLOptionsKey;
  TUIKitErrorHandler = procedure(param1: NSError) of object;
  UIApplicationLaunchOptionsKey = NSString;
  PUIApplicationLaunchOptionsKey = ^UIApplicationLaunchOptionsKey;
  TUIKitFetchCompletionHandler = procedure(param1: UIBackgroundFetchResult)
    of object;
  TUIKitReply = procedure(param1: NSDictionary) of object;
  TUIKitCompletionHandler = procedure(param1: INIntentResponse) of object;
  UIApplicationExtensionPointIdentifier = NSString;
  PUIApplicationExtensionPointIdentifier = ^
    UIApplicationExtensionPointIdentifier;
  TUIKitRestorationHandler = procedure(param1: NSArray) of object;
  UIApplicationOpenURLOptionsKey = NSString;
  PUIApplicationOpenURLOptionsKey = ^UIApplicationOpenURLOptionsKey;
  NSRunLoopMode = NSString;
  PNSRunLoopMode = ^NSRunLoopMode;
  UIModalTransitionStyle = NSInteger;
  UIModalPresentationStyle = NSInteger;
  UIPreviewActionStyle = NSInteger;
  TUIKitHandler = procedure(param1: Pointer; param2: UIViewController)
    of object;
  TUIKitHandler1 = procedure(param1: UIPreviewAction; param2: UIViewController)
    of object;
  UITransitionContextViewControllerKey = NSString;
  PUITransitionContextViewControllerKey = ^UITransitionContextViewControllerKey;
  UITransitionContextViewKey = NSString;
  PUITransitionContextViewKey = ^UITransitionContextViewKey;
  UITimingCurveType = NSInteger;
  UIDocumentBrowserErrorCode = NSInteger;
  UIDocumentBrowserImportMode = NSUInteger;
  UIDocumentBrowserUserInterfaceStyle = NSUInteger;
  TUIKitCompletion2 = procedure(param1: NSURL; param2: NSError) of object;
  TUIKitDidRequestDocumentCreationWithHandler = procedure(param1: NSURL;
    param2: UIDocumentBrowserImportMode) of object;
  UIDocumentBrowserActionAvailability = NSInteger;
  NSAttributedStringKey = NSString;
  PNSAttributedStringKey = ^NSAttributedStringKey;
  NSUnderlineStyle = NSInteger;
  NSWritingDirectionFormatType = NSInteger;
  NSTextEffectStyle = NSString;
  PNSTextEffectStyle = ^NSTextEffectStyle;
  NSAttributedStringDocumentType = NSString;
  PNSAttributedStringDocumentType = ^NSAttributedStringDocumentType;
  NSTextLayoutSectionKey = NSString;
  PNSTextLayoutSectionKey = ^NSTextLayoutSectionKey;
  NSTextScalingType = NSInteger;
  NSAttributedStringDocumentAttributeKey = NSString;
  PNSAttributedStringDocumentAttributeKey = ^
    NSAttributedStringDocumentAttributeKey;
  NSAttributedStringDocumentReadingOptionKey = NSString;
  PNSAttributedStringDocumentReadingOptionKey = ^
    NSAttributedStringDocumentReadingOptionKey;
  NSTextWritingDirection = NSInteger;
  NSDataAssetName = NSString;
  PNSDataAssetName = ^NSDataAssetName;
  ItemIdentifierType = Pointer;
  PItemIdentifierType = ^ItemIdentifierType;
  UIPreferredPresentationStyle = NSInteger;
  NSTextStorageEditActions = NSUInteger;
  NSTextLayoutOrientation = NSInteger;
  NSGlyphProperty = NSInteger;
  NSControlCharacterAction = NSInteger;
  CGFontIndex = Word;
  PCGFontIndex = ^CGFontIndex;

  CGGlyph = CGFontIndex;
  PCGGlyph = ^CGGlyph;
  TUIKitUsingBlock = procedure(param1: CGRect; param2: CGRect;
    param3: NSTextContainer; param4: NSRange; param5: PBoolean) of object;
  TUIKitUsingBlock1 = procedure(param1: CGRect; param2: PBoolean) of object;
  CGContextRef = Pointer;
  PCGContextRef = ^CGContextRef;
  NSStringDrawingOptions = NSInteger;
  NSTextContentManagerEnumerationOptions = NSUInteger;
  TUIKitUsingBlock2 = function(param1: NSTextElement): Boolean; cdecl;
  NSTextLayoutFragmentEnumerationOptions = NSUInteger;
  NSTextLayoutFragmentState = NSUInteger;
  NSTextLayoutManagerSegmentType = NSInteger;
  NSTextLayoutManagerSegmentOptions = NSUInteger;
  TUIKitUsingBlock3 = function(param1: NSTextLayoutFragment): Boolean; cdecl;
  TUIKitUsingBlock4 = function(param1: NSTextLayoutManager;
    param2: NSDictionary; param3: NSTextRange): Boolean; cdecl;
  TUIKitRenderingAttributesValidator = procedure(param1: NSTextLayoutManager;
    param2: NSTextLayoutFragment) of object;
  TUIKitUsingBlock5 = function(param1: NSTextRange; param2: CGRect;
    param3: CGFloat; param4: NSTextContainer): Boolean; cdecl;
  NSTextListOptions = NSUInteger;
  NSTextListMarkerFormat = NSString;
  PNSTextListMarkerFormat = ^NSTextListMarkerFormat;
  NSTextSelectionGranularity = NSInteger;
  NSTextSelectionAffinity = NSInteger;
  NSTextSelectionNavigationDirection = NSInteger;
  NSTextSelectionNavigationDestination = NSInteger;
  NSTextSelectionNavigationModifier = NSUInteger;
  NSTextSelectionNavigationWritingDirection = NSInteger;
  NSTextSelectionNavigationLayoutOrientation = NSInteger;
  NSStringEnumerationOptions = NSUInteger;
  TUIKitUsingBlock6 = procedure(param1: NSString; param2: NSTextRange;
    param3: NSTextRange; param4: PBoolean) of object;
  TUIKitUsingBlock7 = procedure(param1: CGFloat; param2: Pointer;
    param3: Boolean; param4: PBoolean) of object;
  TUIKitUsingBlock8 = procedure(param1: Pointer; param2: PBoolean) of object;
  UIPrinterJobTypes = NSInteger;
  UIPrinterPickerCompletionHandler = procedure
    (param1: UIPrinterPickerController; param2: Boolean; param3: NSError)
    of object;
  UIPrintErrorCode = NSInteger;
  UIPrintInfoOutputType = NSInteger;
  UIPrintInfoOrientation = NSInteger;
  UIPrintInfoDuplex = NSInteger;
  UIPrintInteractionCompletionHandler = procedure
    (param1: UIPrintInteractionController; param2: Boolean; param3: NSError)
    of object;
  UIPrinterCutterBehavior = NSInteger;
  UIPrintRenderingQuality = NSInteger;
  UIActivityType = NSString;
  PUIActivityType = ^UIActivityType;
  UIActivityCategory = NSInteger;
  UIActivityViewControllerCompletionHandler = procedure(param1: UIActivityType;
    param2: Boolean) of object;
  UIActivityViewControllerCompletionWithItemsHandler = procedure
    (param1: UIActivityType; param2: Boolean; param3: NSArray; param4: NSError)
    of object;
  UIAccelerationValue = Double;
  PUIAccelerationValue = ^UIAccelerationValue;

  CGPathRef = Pointer;
  PCGPathRef = ^CGPathRef;
  CGLineCap = Int32;
  CGLineJoin = Int32;
  CGBlendMode = Int32;
  UIScrollViewIndicatorStyle = NSInteger;
  UIScrollViewKeyboardDismissMode = NSInteger;
  UIScrollViewIndexDisplayMode = NSInteger;
  UIScrollViewContentInsetAdjustmentBehavior = NSInteger;
  UIScrollViewDecelerationRate = CGFloat;
  PUIScrollViewDecelerationRate = ^UIScrollViewDecelerationRate;
  UIAccessibilityTraits = UInt64;
  PUIAccessibilityTraits = ^UIAccessibilityTraits;
  UIAccessibilityNotifications = LongWord;
  PUIAccessibilityNotifications = ^UIAccessibilityNotifications;
  UIAccessibilityAssistiveTechnologyIdentifier = NSString;
  PUIAccessibilityAssistiveTechnologyIdentifier = ^
    UIAccessibilityAssistiveTechnologyIdentifier;
  UIAccessibilityNavigationStyle = NSInteger;
  UIAccessibilityContainerType = NSInteger;
  UIAccessibilityTextualContext = NSString;
  PUIAccessibilityTextualContext = ^UIAccessibilityTextualContext;
  UIImageOrientation = NSInteger;
  UIImageResizingMode = NSInteger;
  UIImageRenderingMode = NSInteger;
  CGImageRef = Pointer;
  PCGImageRef = ^CGImageRef;
  TUIKitCompletionHandler1 = procedure(param1: UIImage) of object;
  UIAccessibilityCustomActionHandler = function
    (param1: UIAccessibilityCustomAction): Boolean; cdecl;
  UIAccessibilityCustomRotorDirection = NSInteger;
  UIAccessibilityCustomSystemRotorType = NSInteger;
  UIAccessibilityCustomRotorSearch = function
    (param1: UIAccessibilityCustomRotorSearchPredicate)
    : UIAccessibilityCustomRotorItemResult; cdecl;
  UIAlertActionStyle = NSInteger;
  UIAlertControllerStyle = NSInteger;
  UIAlertControllerSeverity = NSInteger;
  TUIKitHandler2 = procedure(param1: UIAlertAction) of object;
  TUIKitConfigurationHandler = procedure(param1: UITextField) of object;
  UIAccessibilityZoomType = NSInteger;
  UIGuidedAccessErrorCode = NSInteger;
  UIGuidedAccessRestrictionState = NSInteger;
  UIGuidedAccessAccessibilityFeature = NSUInteger;
  TUIKitCompletion3 = procedure(param1: Boolean; param2: NSError) of object;
  UIAccessibilityScrollDirection = NSInteger;
  UIAccessibilityHearingDeviceEar = NSUInteger;
  UIConfigurationColorTransformer = function(param1: UIColor): UIColor; cdecl;
  UIConfigurationTextAttributesTransformer = function(param1: NSDictionary)
    : NSDictionary; cdecl;
  UIButtonConfigurationSize = NSInteger;
  UIButtonConfigurationTitleAlignment = NSInteger;
  UIButtonConfigurationCornerStyle = NSInteger;
  UIButtonConfigurationMacIdiomStyle = NSInteger;
  UIButtonConfigurationIndicator = NSInteger;
  UIButtonType = NSInteger;
  UIButtonRole = NSInteger;
  UIButtonPointerStyleProvider = function(param1: UIButton;
    param2: UIPointerEffect; param3: UIPointerShape): UIPointerStyle; cdecl;
  UIButtonConfigurationUpdateHandler = procedure(param1: UIButton) of object;
  UIActivityIndicatorViewStyle = NSInteger;
  UIActivityItemsConfigurationMetadataKey = NSString;
  PUIActivityItemsConfigurationMetadataKey = ^
    UIActivityItemsConfigurationMetadataKey;
  UIActivityItemsConfigurationPreviewIntent = NSString;
  PUIActivityItemsConfigurationPreviewIntent = ^
    UIActivityItemsConfigurationPreviewIntent;
  UIActivityItemsConfigurationInteraction = NSString;
  PUIActivityItemsConfigurationInteraction = ^
    UIActivityItemsConfigurationInteraction;
  TUIKitMetadataProvider = function
    (param1: UIActivityItemsConfigurationMetadataKey): Pointer; cdecl;
  TUIKitPerItemMetadataProvider = function(param1: NSInteger;
    param2: UIActivityItemsConfigurationMetadataKey): Pointer; cdecl;
  TUIKitPreviewProvider = function(param1: NSInteger;
    param2: UIActivityItemsConfigurationPreviewIntent; param3: CGSize)
    : NSItemProvider; cdecl;
  TUIKitApplicationActivitiesProvider = function(): NSArray; cdecl;
  UIApplicationShortcutIconType = NSInteger;
  UIAttachmentBehaviorType = NSInteger;

  UIFloatRange = record
    minimum: CGFloat;
    maximum: CGFloat;
  end;

  PUIFloatRange = ^UIFloatRange;

  UIBandSelectionInteractionState = NSInteger;
  TUIKitShouldBeginHandler = function(param1: UIBandSelectionInteraction;
    param2: CGPoint): Boolean; cdecl;
  TUIKitSelectionHandler = procedure(param1: UIBandSelectionInteraction)
    of object;
  UIBarMetrics = NSInteger;
  UIBarPosition = NSInteger;
  UIBarButtonItemStyle = NSInteger;
  UIBarButtonSystemItem = NSInteger;
  UIBehavioralStyle = NSUInteger;
  UIBlurEffectStyle = NSInteger;
  UICalendarViewDecorationSize = NSInteger;
  TUIKitCustomViewProvider = function(): UIView; cdecl;
  UICellAccessoryDisplayedState = NSInteger;
  UICellAccessoryOutlineDisclosureStyle = NSInteger;
  TUIKitSelectedElementDidChangeHandler = procedure(param1: UIMenu) of object;
  UICellAccessoryPlacement = NSInteger;
  UICellAccessoryPosition = function(param1: NSArray): NSUInteger; cdecl;
  UIConfigurationStateCustomKey = NSString;
  PUIConfigurationStateCustomKey = ^UIConfigurationStateCustomKey;
  UICellConfigurationDragState = NSInteger;
  UICellConfigurationDropState = NSInteger;
  UICloudSharingPermissionOptions = NSUInteger;
  TUIKitBlock1 = procedure(param1: CKShare; param2: CKContainer;
    param3: NSError) of object;
  TUIKitPreparationHandler = procedure(param1: UICloudSharingController;
    param2: TUIKitBlock1) of object;
  UICollectionUpdateAction = NSInteger;
  UICollectionViewScrollDirection = NSInteger;
  UICollectionElementCategory = NSUInteger;
  UIContentInsetsReference = NSInteger;
  UICollectionViewCompositionalLayoutSectionProvider = function
    (param1: NSInteger; param2: Pointer): NSCollectionLayoutSection; cdecl;
  UICollectionLayoutSectionOrthogonalScrollingBehavior = NSInteger;
  NSCollectionLayoutSectionVisibleItemsInvalidationHandler = procedure
    (param1: NSArray; param2: CGPoint; param3: Pointer) of object;
  NSCollectionLayoutGroupCustomItemProvider = function(param1: Pointer)
    : NSArray; cdecl;
  UICollectionLayoutListAppearance = NSInteger;
  UICollectionLayoutListHeaderMode = NSInteger;
  UICollectionLayoutListFooterMode = NSInteger;
  UICollectionLayoutListSwipeActionsConfigurationProvider = function
    (param1: NSIndexPath): UISwipeActionsConfiguration; cdecl;
  UICollectionLayoutListItemSeparatorHandler = function(param1: NSIndexPath;
    param2: UIListSeparatorConfiguration): UIListSeparatorConfiguration; cdecl;
  UICollectionViewScrollPosition = NSUInteger;
  UICollectionViewReorderingCadence = NSInteger;
  UICollectionViewSelfSizingInvalidation = NSInteger;
  UICollectionViewLayoutInteractiveTransitionCompletion = procedure
    (param1: Boolean; param2: Boolean) of object;
  UICollectionViewDropIntent = NSInteger;
  TUIKitCellUpdateHandler = procedure(param1: UICollectionViewCell) of object;
  TUIKitPreviewParametersProvider = function(param1: UICollectionViewCell)
    : UIDragPreviewParameters; cdecl;
  TUIKitDataSourceUpdates = procedure(param1: NSIndexPath) of object;
  UICollectionViewCellDragState = NSInteger;
  UICollectionViewCellConfigurationUpdateHandler = procedure
    (param1: UICollectionViewCell; param2: UICellConfigurationState) of object;
  UICollectionViewFlowLayoutSectionInsetReference = NSInteger;
  UICollectionViewCellRegistrationConfigurationHandler = procedure
    (param1: UICollectionViewCell; param2: NSIndexPath; param3: Pointer)
    of object;
  UICollectionViewSupplementaryRegistrationConfigurationHandler = procedure
    (param1: UICollectionReusableView; param2: NSString; param3: NSIndexPath)
    of object;
  UICollisionBehaviorMode = NSUInteger;
  UIContextualActionHandler = procedure(param1: UIContextualAction;
    param2: UIView; param3: TUIKitCompletion) of object;
  UIContextualActionStyle = NSInteger;
  UIDataDetectorTypes = NSUInteger;
  UIDatePickerMode = NSInteger;
  UIDatePickerStyle = NSInteger;
  TUIKitElementProvider = procedure(param1: TUIKitRestorationHandler) of object;
  UIGestureRecognizerState = NSInteger;
  UISwipeGestureRecognizerDirection = NSUInteger;
  UITableViewCellStyle = NSInteger;
  UITableViewCellSeparatorStyle = NSInteger;
  UITableViewCellSelectionStyle = NSInteger;
  UITableViewCellFocusStyle = NSInteger;
  UITableViewCellEditingStyle = NSInteger;
  UITableViewCellAccessoryType = NSInteger;
  UITableViewCellStateMask = NSUInteger;
  UITableViewCellDragState = NSInteger;
  UITableViewCellConfigurationUpdateHandler = procedure(param1: UITableViewCell;
    param2: UICellConfigurationState) of object;
  UITableViewStyle = NSInteger;
  UITableViewScrollPosition = NSInteger;
  UITableViewRowAnimation = NSInteger;
  UITableViewRowActionStyle = NSInteger;
  TUIKitHandler3 = procedure(param1: UITableViewRowAction; param2: NSIndexPath)
    of object;
  UITableViewSeparatorInsetReference = NSInteger;
  UITableViewSelfSizingInvalidation = NSInteger;
  UITableViewDropIntent = NSInteger;
  TUIKitCellUpdateHandler1 = procedure(param1: UITableViewCell) of object;
  TUIKitPreviewParametersProvider1 = function(param1: UITableViewCell)
    : UIDragPreviewParameters; cdecl;
  SectionIdentifierType = Pointer;
  PSectionIdentifierType = ^SectionIdentifierType;
  UICollectionViewDiffableDataSourceCellProvider = function
    (param1: UICollectionView; param2: NSIndexPath; param3: Pointer)
    : UICollectionViewCell; cdecl;
  UICollectionViewDiffableDataSourceSupplementaryViewProvider = function
    (param1: UICollectionView; param2: NSString; param3: NSIndexPath)
    : UICollectionReusableView; cdecl;
  ItemType = Pointer;
  PItemType = ^ItemType;
  TUIKitCanReorderItemHandler = function(param1: ItemType): Boolean; cdecl;
  TUIKitWillReorderHandler = procedure(param1: NSDiffableDataSourceTransaction)
    of object;
  TUIKitWillExpandItemHandler = procedure(param1: ItemType) of object;
  TUIKitSnapshotForExpandingParentItemHandler = function(param1: ItemType;
    param2: NSDiffableDataSourceSectionSnapshot)
    : NSDiffableDataSourceSectionSnapshot; cdecl;
  UITableViewDiffableDataSourceCellProvider = function(param1: UITableView;
    param2: NSIndexPath; param3: Pointer): UITableViewCell; cdecl;
  UIDocumentChangeKind = NSInteger;
  UIDocumentSaveOperation = NSInteger;
  UIDocumentState = NSUInteger;
  UIDocumentPickerMode = NSUInteger;
  UIDocumentMenuOrder = NSUInteger;
  TUIKitDragItemsProvider = function(param1: Pointer): NSArray; cdecl;
  TUIKitActivityViewControllerProvider = function()
    : UIActivityViewController; cdecl;
  TUIKitPreviewProvider1 = function(): UIDragPreview; cdecl;
  UIDropSessionProgressIndicatorStyle = NSUInteger;
  UIEditMenuArrowDirection = NSInteger;
  TUIKitBlock2 = function(param1: UIFieldBehavior; param2: CGPoint;
    param3: CGVector; param4: CGFloat; param5: CGFloat; param6: NSTimeInterval)
    : CGVector; cdecl;
  UITextSearchDocumentIdentifier = Pointer;
  PUITextSearchDocumentIdentifier = ^UITextSearchDocumentIdentifier;
  UITextSearchFoundTextStyle = NSInteger;
  UIFindSessionSearchResultDisplayStyle = NSInteger;
  UITextSearchMatchMethod = NSInteger;
  NSStringCompareOptions = NSUInteger;
  TUIKitOptionsMenuProvider = function(param1: NSArray): UIMenu; cdecl;
  UIFocusHaloEffectPosition = NSInteger;
  CALayerCornerCurve = NSString;
  PCALayerCornerCurve = ^CALayerCornerCurve;
  UISceneCollectionJoinBehavior = NSInteger;
  UIWindowSceneDismissalAnimation = NSInteger;
  UIGraphicsImageDrawingActions = procedure
    (param1: UIGraphicsImageRendererContext) of object;
  UIGraphicsImageRendererFormatRange = NSInteger;
  UIGraphicsPDFDrawingActions = procedure(param1: UIGraphicsPDFRendererContext)
    of object;
  UIGraphicsDrawingActions = procedure(param1: UIGraphicsRendererContext)
    of object;
  UIScrollType = NSUInteger;
  UIScrollTypeMask = NSInteger;
  UINavigationControllerOperation = NSInteger;
  UIImagePickerControllerSourceType = NSInteger;
  UIImagePickerControllerQualityType = NSInteger;
  UIImagePickerControllerCameraCaptureMode = NSInteger;
  UIImagePickerControllerCameraDevice = NSInteger;
  UIImagePickerControllerCameraFlashMode = NSInteger;
  UIImagePickerControllerImageURLExportPreset = NSInteger;
  UIImagePickerControllerInfoKey = NSString;
  PUIImagePickerControllerInfoKey = ^UIImagePickerControllerInfoKey;
  UIImageSymbolScale = NSInteger;
  UIImageSymbolWeight = NSInteger;
  UIImpactFeedbackStyle = NSInteger;
  UIScribbleElementIdentifier = Pointer;
  PUIScribbleElementIdentifier = ^UIScribbleElementIdentifier;
  TUIKitCompletion4 = procedure(param1: UIResponder) of object;
  UIInputViewStyle = NSInteger;
  TUIKitCompletionHandler2 = procedure(param1: UILexicon) of object;
  CFIndex = LongInt;
  PCFIndex = ^CFIndex;

  UIKeyboardHIDUsage = CFIndex;
  NSCalendarUnit = NSUInteger;
  UIListSeparatorVisibility = NSInteger;
  UIListContentTextAlignment = NSInteger;
  UIListContentTextTransform = NSInteger;
  UIVibrancyEffectStyle = NSInteger;
  UIUserNotificationType = NSUInteger;
  UIUserNotificationActionBehavior = NSUInteger;
  UIUserNotificationActivationMode = NSUInteger;
  UIUserNotificationActionContext = NSUInteger;
  UIMenuControllerArrowDirection = NSInteger;
  UIInterpolatingMotionEffectType = NSInteger;
  UINavigationItemLargeTitleDisplayMode = NSInteger;
  UINavigationItemBackButtonDisplayMode = NSInteger;
  UINavigationItemSearchBarPlacement = NSInteger;
  UINavigationItemStyle = NSInteger;
  UINavigationBarNSToolbarSection = NSInteger;
  UINibOptionsKey = NSString;
  PUINibOptionsKey = ^UINibOptionsKey;
  UIPageControlInteractionState = NSInteger;
  UIPageControlBackgroundStyle = NSInteger;
  UIPageControlDirection = NSInteger;
  UIPageViewControllerNavigationOrientation = NSInteger;
  UIPageViewControllerSpineLocation = NSInteger;
  UIPageViewControllerNavigationDirection = NSInteger;
  UIPageViewControllerTransitionStyle = NSInteger;
  UIPageViewControllerOptionsKey = NSString;
  PUIPageViewControllerOptionsKey = ^UIPageViewControllerOptionsKey;
  UIPasteboardName = NSString;
  PUIPasteboardName = ^UIPasteboardName;
  UIPasteboardDetectionPattern = NSString;
  PUIPasteboardDetectionPattern = ^UIPasteboardDetectionPattern;
  TUIKitCompletionHandler3 = procedure(param1: NSSet; param2: NSError)
    of object;
  TUIKitCompletionHandler4 = procedure(param1: NSArray; param2: NSError)
    of object;
  TUIKitCompletionHandler5 = procedure(param1: NSDictionary; param2: NSError)
    of object;
  UIPasteboardOption = NSString;
  PUIPasteboardOption = ^UIPasteboardOption;
  UIPasteControlDisplayMode = NSUInteger;
  UIPopoverArrowDirection = NSUInteger;
  UIPressPhase = NSInteger;
  UIPressType = NSInteger;
  UIProgressViewStyle = NSInteger;
  UIScreenOverscanCompensation = NSInteger;
  UIScreenReferenceDisplayModeStatus = NSInteger;
  CFTimeInterval = Double;
  PCFTimeInterval = ^CFTimeInterval;

  UISearchBarIcon = NSInteger;
  UISearchBarStyle = NSUInteger;
  UISearchControllerScopeBarActivation = NSInteger;
  UISegmentedControlStyle = NSInteger;
  UISegmentedControlSegment = NSInteger;
  UISplitViewControllerDisplayMode = NSInteger;
  UISplitViewControllerPrimaryEdge = NSInteger;
  UISplitViewControllerBackgroundStyle = NSInteger;
  UISplitViewControllerStyle = NSInteger;
  UISplitViewControllerColumn = NSInteger;
  UISplitViewControllerSplitBehavior = NSInteger;
  UISplitViewControllerDisplayModeButtonVisibility = NSInteger;
  UIStoryboardViewControllerCreator = function(param1: NSCoder)
    : UIViewController; cdecl;
  UISwitchStyle = NSInteger;
  UITabBarItemPositioning = NSInteger;
  UITabBarSystemItem = NSInteger;
  UITableViewHeaderFooterViewConfigurationUpdateHandler = procedure
    (param1: UITableViewHeaderFooterView; param2: UIViewConfigurationState)
    of object;
  UITextItemInteraction = NSInteger;
  UIWebViewNavigationType = NSInteger;
  UIWebPaginationMode = NSInteger;
  UIWebPaginationBreakingMode = NSInteger;
  UIWindowLevel = CGFloat;
  PUIWindowLevel = ^UIWindowLevel;
  UISpringLoadedInteractionEffectState = NSInteger;
  TUIKitActivationHandler = procedure(param1: UISpringLoadedInteraction;
    param2: Pointer) of object;
  UITabBarItemAppearanceStyle = NSInteger;
  UIStackViewDistribution = NSInteger;
  UIStackViewAlignment = NSInteger;
  UISheetPresentationControllerDetentIdentifier = NSString;
  PUISheetPresentationControllerDetentIdentifier = ^
    UISheetPresentationControllerDetentIdentifier;
  TUIKitResolver = function(param1: Pointer): CGFloat; cdecl;
  UIPushBehaviorMode = NSInteger;
  UINotificationFeedbackType = NSInteger;
  UITextInteractionMode = NSInteger;
  UIPencilPreferredAction = NSInteger;
  TUIKitGeneratePDFRepresentationWithCompletion = procedure(param1: NSData;
    param2: NSInteger; param3: CGRect) of object;
  TUIKitFromChildrenBlock = function(param1: NSArray): NSArray; cdecl;
  UIPointerEffectTintMode = NSInteger;

  UIPointerAccessoryPosition = record
    offset: CGFloat;
    angle: CGFloat;
  end;

  PUIPointerAccessoryPosition = ^UIPointerAccessoryPosition;

  UIWindowScenePresentationStyle = NSUInteger;
  UIWindowSceneActivationActionConfigurationProvider = function
    (param1: UIWindowSceneActivationAction)
    : UIWindowSceneActivationConfiguration; cdecl;
  UIWindowSceneActivationInteractionConfigurationProvider = function
    (param1: UIWindowSceneActivationInteraction; param2: CGPoint)
    : UIWindowSceneActivationConfiguration; cdecl;
  // ===== Interface declarations =====

  UIImageClass = interface(NSObjectClass)
    ['{EEC8DC20-93F2-4385-9614-783B33495F1D}']
    [MethodName('systemImageNamed:')]
    { class } function systemImageNamed(name: NSString): UIImage; cdecl;
    [MethodName('systemImageNamed:withConfiguration:')]
    { class } function systemImageNamedWithConfiguration(name: NSString;
      withConfiguration: UIImageConfiguration): UIImage; cdecl;
    [MethodName('systemImageNamed:compatibleWithTraitCollection:')]
    { class } function systemImageNamedCompatibleWithTraitCollection
      (name: NSString; compatibleWithTraitCollection: UITraitCollection)
      : UIImage; cdecl;
    [MethodName('systemImageNamed:variableValue:withConfiguration:')]
    { class } function systemImageNamedVariableValueWithConfiguration
      (name: NSString; variableValue: Double;
      withConfiguration: UIImageConfiguration): UIImage; cdecl;
    [MethodName('imageNamed:')]
    { class } function imageNamed(name: NSString): UIImage; cdecl;
    [MethodName('imageNamed:inBundle:withConfiguration:')]
    { class } function imageNamedInBundleWithConfiguration(name: NSString;
      inBundle: NSBundle; withConfiguration: UIImageConfiguration)
      : UIImage; cdecl;
    [MethodName('imageNamed:inBundle:compatibleWithTraitCollection:')]
    { class } function imageNamedInBundleCompatibleWithTraitCollection
      (name: NSString; inBundle: NSBundle;
      compatibleWithTraitCollection: UITraitCollection): UIImage; cdecl;
    [MethodName('imageNamed:inBundle:variableValue:withConfiguration:')]
    { class } function imageNamedInBundleVariableValueWithConfiguration
      (name: NSString; inBundle: NSBundle; variableValue: Double;
      withConfiguration: UIImageConfiguration): UIImage; cdecl;
    { class } function imageWithContentsOfFile(path: NSString): UIImage; cdecl;
    [MethodName('imageWithData:')]
    { class } function imageWithData(data: NSData): UIImage; cdecl;
    [MethodName('imageWithData:scale:')]
    { class } function imageWithDataScale(data: NSData; scale: CGFloat)
      : UIImage; cdecl;
    [MethodName('imageWithCGImage:')]
    { class } function imageWithCGImage(cgImage: CGImageRef): UIImage; cdecl;
    [MethodName('imageWithCGImage:scale:orientation:')]
    { class } function imageWithCGImageScaleOrientation(cgImage: CGImageRef;
      scale: CGFloat; orientation: UIImageOrientation): UIImage; cdecl;
    [MethodName('imageWithCIImage:')]
    { class } function imageWithCIImage(ciImage: ciImage): UIImage; cdecl;
    [MethodName('imageWithCIImage:scale:orientation:')]
    { class } function imageWithCIImageScaleOrientation(ciImage: ciImage;
      scale: CGFloat; orientation: UIImageOrientation): UIImage; cdecl;
    { class } function animatedImageNamed(name: NSString;
      duration: NSTimeInterval): UIImage; cdecl;
    [MethodName('animatedResizableImageNamed:capInsets:duration:')]
    { class } function animatedResizableImageNamedCapInsetsDuration
      (name: NSString; capInsets: UIEdgeInsets; duration: NSTimeInterval)
      : UIImage; cdecl;
    [MethodName('animatedResizableImageNamed:capInsets:resizingMode:duration:')]
    { class } function animatedResizableImageNamedCapInsetsResizingModeDuration
      (name: NSString; capInsets: UIEdgeInsets;
      resizingMode: UIImageResizingMode; duration: NSTimeInterval)
      : UIImage; cdecl;
    { class } function animatedImageWithImages(images: NSArray;
      duration: NSTimeInterval): UIImage; cdecl;
  end;

  UIImage = interface(NSObject)
    ['{7FF5FF8E-343F-485A-96E9-A7934F101266}']
    function initWithContentsOfFile(path: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithData:')]
    function initWithData(data: NSData): Pointer { instancetype }; cdecl;
    [MethodName('initWithData:scale:')]
    function initWithDataScale(data: NSData; scale: CGFloat)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithCGImage:')]
    function initWithCGImage(cgImage: CGImageRef)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithCGImage:scale:orientation:')]
    function initWithCGImageScaleOrientation(cgImage: CGImageRef;
      scale: CGFloat; orientation: UIImageOrientation)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithCIImage:')]
    function initWithCIImage(ciImage: ciImage): Pointer { instancetype }; cdecl;
    [MethodName('initWithCIImage:scale:orientation:')]
    function initWithCIImageScaleOrientation(ciImage: ciImage; scale: CGFloat;
      orientation: UIImageOrientation): Pointer { instancetype }; cdecl;
    function size: CGSize; cdecl;
    function cgImage: CGImageRef; cdecl;
    function ciImage: ciImage; cdecl;
    function imageOrientation: UIImageOrientation; cdecl;
    function scale: CGFloat; cdecl;
    function isSymbolImage: Boolean; cdecl;
    function images: NSArray; cdecl;
    function duration: NSTimeInterval; cdecl;
    [MethodName('drawAtPoint:')]
    procedure drawAtPoint(point: CGPoint); cdecl;
    [MethodName('drawAtPoint:blendMode:alpha:')]
    procedure drawAtPointBlendModeAlpha(point: CGPoint; blendMode: CGBlendMode;
      alpha: CGFloat); cdecl;
    [MethodName('drawInRect:')]
    procedure drawInRect(rect: CGRect); cdecl;
    [MethodName('drawInRect:blendMode:alpha:')]
    procedure drawInRectBlendModeAlpha(rect: CGRect; blendMode: CGBlendMode;
      alpha: CGFloat); cdecl;
    procedure drawAsPatternInRect(rect: CGRect); cdecl;
    [MethodName('resizableImageWithCapInsets:')]
    function resizableImageWithCapInsets(capInsets: UIEdgeInsets)
      : UIImage; cdecl;
    [MethodName('resizableImageWithCapInsets:resizingMode:')]
    function resizableImageWithCapInsetsResizingMode(capInsets: UIEdgeInsets;
      resizingMode: UIImageResizingMode): UIImage; cdecl;
    function capInsets: UIEdgeInsets; cdecl;
    function resizingMode: UIImageResizingMode; cdecl;
    function imageWithAlignmentRectInsets(alignmentInsets: UIEdgeInsets)
      : UIImage; cdecl;
    function alignmentRectInsets: UIEdgeInsets; cdecl;
    function imageWithRenderingMode(renderingMode: UIImageRenderingMode)
      : UIImage; cdecl;
    function renderingMode: UIImageRenderingMode; cdecl;
    function imageRendererFormat: UIGraphicsImageRendererFormat; cdecl;
    function traitCollection: UITraitCollection; cdecl;
    function imageAsset: UIImageAsset; cdecl;
    function imageFlippedForRightToLeftLayoutDirection: UIImage; cdecl;
    function flipsForRightToLeftLayoutDirection: Boolean; cdecl;
    function imageWithHorizontallyFlippedOrientation: UIImage; cdecl;
    function baselineOffsetFromBottom: CGFloat; cdecl;
    function hasBaseline: Boolean; cdecl;
    function imageWithBaselineOffsetFromBottom(baselineOffset: CGFloat)
      : UIImage; cdecl;
    function imageWithoutBaseline: UIImage; cdecl;
    function configuration: UIImageConfiguration; cdecl;
    function imageWithConfiguration(configuration: UIImageConfiguration)
      : UIImage; cdecl;
    function symbolConfiguration: UIImageSymbolConfiguration; cdecl;
    function imageByApplyingSymbolConfiguration(configuration
      : UIImageSymbolConfiguration): UIImage; cdecl;
    [MethodName('imageWithTintColor:')]
    function imageWithTintColor(color: UIColor): UIImage; cdecl;
    [MethodName('imageWithTintColor:renderingMode:')]
    function imageWithTintColorRenderingMode(color: UIColor;
      renderingMode: UIImageRenderingMode): UIImage; cdecl;
    function imageByPreparingForDisplay: UIImage; cdecl;
    procedure prepareForDisplayWithCompletionHandler(completionHandler
      : TUIKitCompletionHandler1); cdecl;
    function imageByPreparingThumbnailOfSize(size: CGSize): UIImage; cdecl;
    procedure prepareThumbnailOfSize(size: CGSize;
      completionHandler: TUIKitCompletionHandler1); cdecl;
    procedure setActionsImage(actionsImage: UIImage); cdecl;
    function actionsImage: UIImage; cdecl;
    procedure setAddImage(addImage: UIImage); cdecl;
    function addImage: UIImage; cdecl;
    procedure setRemoveImage(removeImage: UIImage); cdecl;
    function removeImage: UIImage; cdecl;
    procedure setCheckmarkImage(checkmarkImage: UIImage); cdecl;
    function checkmarkImage: UIImage; cdecl;
    procedure setStrokedCheckmarkImage(strokedCheckmarkImage: UIImage); cdecl;
    function strokedCheckmarkImage: UIImage; cdecl;
    function stretchableImageWithLeftCapWidth(leftCapWidth: NSInteger;
      topCapHeight: NSInteger): UIImage; cdecl;
    function leftCapWidth: NSInteger; cdecl;
    function topCapHeight: NSInteger; cdecl;
  end;

  TUIImage = class(TOCGenericImport<UIImageClass, UIImage>)
  end;

  PUIImage = Pointer;

  UIMenuElementClass = interface(NSObjectClass)
    ['{63EBE565-6E3A-409D-85FA-A8157E2FF013}']
  end;

  UIMenuElement = interface(NSObject)
    ['{B31E1D27-8737-43F7-BF44-E1EF58A3FA3B}']
    function title: NSString; cdecl;
    procedure setSubtitle(subtitle: NSString); cdecl;
    function subtitle: NSString; cdecl;
    function image: UIImage; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUIMenuElement = class(TOCGenericImport<UIMenuElementClass, UIMenuElement>)
  end;

  PUIMenuElement = Pointer;

  UIMenuClass = interface(UIMenuElementClass)
    ['{4BC38879-FA01-461F-AF0B-A5404CA3666B}']
    { class } function menuWithChildren(children: NSArray): UIMenu; cdecl;
    [MethodName('menuWithTitle:children:')]
    { class } function menuWithTitleChildren(title: NSString; children: NSArray)
      : UIMenu; cdecl;
    [MethodName('menuWithTitle:image:identifier:options:children:')]
    { class } function menuWithTitleImageIdentifierOptionsChildren
      (title: NSString; image: UIImage; identifier: UIMenuIdentifier;
      options: UIMenuOptions; children: NSArray): UIMenu; cdecl;
  end;

  UIMenu = interface(UIMenuElement)
    ['{436204F9-1D9C-45A2-8247-E14761EE2D19}']
    function identifier: UIMenuIdentifier; cdecl;
    function options: UIMenuOptions; cdecl;
    procedure setPreferredElementSize(preferredElementSize
      : UIMenuElementSize); cdecl;
    function preferredElementSize: UIMenuElementSize; cdecl;
    function children: NSArray; cdecl;
    function selectedElements: NSArray; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function menuByReplacingChildren(newChildren: NSArray): UIMenu; cdecl;
  end;

  TUIMenu = class(TOCGenericImport<UIMenuClass, UIMenu>)
  end;

  PUIMenu = Pointer;

  UICommandClass = interface(UIMenuElementClass)
    ['{971D6AF0-3CFF-4427-B4B6-8415EA8ABC41}']
    [MethodName('commandWithTitle:image:action:propertyList:')]
    { class } function commandWithTitleImageActionPropertyList(title: NSString;
      image: UIImage; action: SEL; propertyList: Pointer)
      : Pointer { instancetype }; cdecl;
    [MethodName('commandWithTitle:image:action:propertyList:alternates:')]
    { class } function commandWithTitleImageActionPropertyListAlternates
      (title: NSString; image: UIImage; action: SEL; propertyList: Pointer;
      alternates: NSArray): Pointer { instancetype }; cdecl;
  end;

  UICommand = interface(UIMenuElement)
    ['{3667ECB3-8793-4280-976A-56AF36BCFFAA}']
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    function discoverabilityTitle: NSString; cdecl;
    function action: SEL; cdecl;
    function propertyList: Pointer; cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    function attributes: UIMenuElementAttributes; cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    function state: UIMenuElementState; cdecl;
    function alternates: NSArray; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUICommand = class(TOCGenericImport<UICommandClass, UICommand>)
  end;

  PUICommand = Pointer;

  UICommandAlternateClass = interface(NSObjectClass)
    ['{E380F76D-4CF4-47BB-8F12-C66F176821D9}']
    { class } function alternateWithTitle(title: NSString; action: SEL;
      modifierFlags: UIKeyModifierFlags): Pointer { instancetype }; cdecl;
  end;

  UICommandAlternate = interface(NSObject)
    ['{168E6B62-15AF-405C-BD1A-625B3162915C}']
    function title: NSString; cdecl;
    function action: SEL; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUICommandAlternate = class(TOCGenericImport<UICommandAlternateClass,
    UICommandAlternate>)
  end;

  PUICommandAlternate = Pointer;

  UIResponderClass = interface(NSObjectClass)
    ['{DA84A8AC-E5E1-4EDC-AD88-DE103DA5018C}']
    { class } procedure clearTextInputContextIdentifier
      (identifier: NSString); cdecl;
  end;

  UIResponder = interface(NSObject)
    ['{A4C3E46D-F9BD-4573-8EBC-0D054535B11B}']
    function nextResponder: UIResponder; cdecl;
    function canBecomeFirstResponder: Boolean; cdecl;
    function becomeFirstResponder: Boolean; cdecl;
    function canResignFirstResponder: Boolean; cdecl;
    function resignFirstResponder: Boolean; cdecl;
    function isFirstResponder: Boolean; cdecl;
    procedure touchesBegan(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesMoved(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEnded(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesCancelled(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEstimatedPropertiesUpdated(touches: NSSet); cdecl;
    procedure pressesBegan(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesChanged(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesEnded(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesCancelled(presses: NSSet;
      withEvent: UIPressesEvent); cdecl;
    procedure motionBegan(motion: UIEventSubtype; withEvent: UIEvent); cdecl;
    procedure motionEnded(motion: UIEventSubtype; withEvent: UIEvent); cdecl;
    procedure motionCancelled(motion: UIEventSubtype;
      withEvent: UIEvent); cdecl;
    procedure remoteControlReceivedWithEvent(event: UIEvent); cdecl;
    function canPerformAction(action: SEL; withSender: Pointer): Boolean; cdecl;
    function targetForAction(action: SEL; withSender: Pointer): Pointer; cdecl;
    procedure buildMenuWithBuilder(builder: Pointer); cdecl;
    procedure validateCommand(command: UICommand); cdecl;
    function undoManager: NSUndoManager; cdecl;
    function editingInteractionConfiguration
      : UIEditingInteractionConfiguration; cdecl;
    function keyCommands: NSArray; cdecl;
    function inputView: UIView; cdecl;
    function inputAccessoryView: UIView; cdecl;
    function inputAssistantItem: UITextInputAssistantItem; cdecl;
    function inputViewController: UIInputViewController; cdecl;
    function inputAccessoryViewController: UIInputViewController; cdecl;
    function textInputMode: UITextInputMode; cdecl;
    function textInputContextIdentifier: NSString; cdecl;
    procedure reloadInputViews; cdecl;
    procedure setUserActivity(userActivity: NSUserActivity); cdecl;
    function userActivity: NSUserActivity; cdecl;
    procedure updateUserActivityState(activity: NSUserActivity); cdecl;
    procedure restoreUserActivityState(activity: NSUserActivity); cdecl;
    procedure captureTextFromCamera(sender: Pointer); cdecl;
    procedure setActivityItemsConfiguration(activityItemsConfiguration
      : Pointer); cdecl;
    function activityItemsConfiguration: Pointer; cdecl;
  end;

  TUIResponder = class(TOCGenericImport<UIResponderClass, UIResponder>)
  end;

  PUIResponder = Pointer;

  UIViewClass = interface(UIResponderClass)
    ['{BF24303E-1089-4C96-B124-91452C11F74C}']
    [MethodName('userInterfaceLayoutDirectionForSemanticContentAttribute:')]
    { class } function userInterfaceLayoutDirectionForSemanticContentAttribute
      (attribute: UISemanticContentAttribute)
      : UIUserInterfaceLayoutDirection; cdecl;
    [MethodName
      ('userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:')
      ]
    { class } function
      userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection
      (semanticContentAttribute: UISemanticContentAttribute;
      relativeToLayoutDirection: UIUserInterfaceLayoutDirection)
      : UIUserInterfaceLayoutDirection; cdecl;
    { class } procedure setAnimationsEnabled(enabled: Boolean); cdecl;
    { class } procedure performWithoutAnimation(actionsWithoutAnimation
      : TUIKitAction); cdecl;
    [MethodName('animateWithDuration:delay:options:animations:completion:')]
    { class } procedure animateWithDurationDelayOptionsAnimationsCompletion
      (duration: NSTimeInterval; delay: NSTimeInterval;
      options: UIViewAnimationOptions; animations: TUIKitAction;
      completion: TUIKitCompletion); cdecl;
    [MethodName('animateWithDuration:animations:completion:')]
    { class } procedure animateWithDurationAnimationsCompletion
      (duration: NSTimeInterval; animations: TUIKitAction;
      completion: TUIKitCompletion); cdecl;
    [MethodName('animateWithDuration:animations:')]
    { class } procedure animateWithDurationAnimations(duration: NSTimeInterval;
      animations: TUIKitAction); cdecl;
    [MethodName
      ('animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:')
      ]
    { class } procedure
      animateWithDurationDelayUsingSpringWithDampingInitialSpringVelocityOptionsAnimationsCompletion
      (duration: NSTimeInterval; delay: NSTimeInterval;
      usingSpringWithDamping: CGFloat; initialSpringVelocity: CGFloat;
      options: UIViewAnimationOptions; animations: TUIKitAction;
      completion: TUIKitCompletion); cdecl;
    { class } procedure transitionWithView(view: UIView;
      duration: NSTimeInterval; options: UIViewAnimationOptions;
      animations: TUIKitAction; completion: TUIKitCompletion); cdecl;
    { class } procedure transitionFromView(fromView: UIView; toView: UIView;
      duration: NSTimeInterval; options: UIViewAnimationOptions;
      completion: TUIKitCompletion); cdecl;
    { class } procedure performSystemAnimation(animation: UISystemAnimation;
      onViews: NSArray; options: UIViewAnimationOptions;
      animations: TUIKitAction; completion: TUIKitCompletion); cdecl;
    { class } procedure modifyAnimationsWithRepeatCount(count: CGFloat;
      autoreverses: Boolean; animations: TUIKitAction); cdecl;
    { class } procedure animateKeyframesWithDuration(duration: NSTimeInterval;
      delay: NSTimeInterval; options: UIViewKeyframeAnimationOptions;
      animations: TUIKitAction; completion: TUIKitCompletion); cdecl;
    { class } procedure addKeyframeWithRelativeStartTime(frameStartTime: Double;
      relativeDuration: Double; animations: TUIKitAction); cdecl;
    { class } procedure beginAnimations(animationID: NSString;
      context: Pointer); cdecl;
    { class } procedure commitAnimations; cdecl;
    { class } procedure setAnimationDelegate(delegate: Pointer); cdecl;
    { class } procedure setAnimationWillStartSelector(selector: SEL); cdecl;
    { class } procedure setAnimationDidStopSelector(selector: SEL); cdecl;
    { class } procedure setAnimationDuration(duration: NSTimeInterval); cdecl;
    { class } procedure setAnimationDelay(delay: NSTimeInterval); cdecl;
    { class } procedure setAnimationStartDate(startDate: NSDate); cdecl;
    { class } procedure setAnimationCurve(curve: UIViewAnimationCurve); cdecl;
    { class } procedure setAnimationRepeatCount(repeatCount: Single); cdecl;
    { class } procedure setAnimationRepeatAutoreverses(repeatAutoreverses
      : Boolean); cdecl;
    { class } procedure setAnimationBeginsFromCurrentState(fromCurrentState
      : Boolean); cdecl;
    { class } procedure setAnimationTransition
      (transition: UIViewAnimationTransition; forView: UIView;
      cache: Boolean); cdecl;
  end;

  UIView = interface(UIResponder)
    ['{C18FD74A-7428-4D67-95B0-641BCDCFB2BC}']
    procedure setLayerClass(layerClass: Pointer); cdecl;
    function layerClass: Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    procedure setTag(tag: NSInteger); cdecl;
    function tag: NSInteger; cdecl;
    function layer: CALayer; cdecl;
    function canBecomeFocused: Boolean; cdecl;
    function isFocused: Boolean; cdecl;
    procedure setFocusGroupIdentifier(focusGroupIdentifier: NSString); cdecl;
    function focusGroupIdentifier: NSString; cdecl;
    procedure setFocusGroupPriority(focusGroupPriority
      : UIFocusGroupPriority); cdecl;
    function focusGroupPriority: UIFocusGroupPriority; cdecl;
    procedure setFocusEffect(focusEffect: UIFocusEffect); cdecl;
    function focusEffect: UIFocusEffect; cdecl;
    procedure setSemanticContentAttribute(semanticContentAttribute
      : UISemanticContentAttribute); cdecl;
    function semanticContentAttribute: UISemanticContentAttribute; cdecl;
    function effectiveUserInterfaceLayoutDirection
      : UIUserInterfaceLayoutDirection; cdecl;
    procedure setFrame(frame: CGRect); cdecl;
    function frame: CGRect; cdecl;
    procedure setBounds(bounds: CGRect); cdecl;
    function bounds: CGRect; cdecl;
    procedure setCenter(center: CGPoint); cdecl;
    function center: CGPoint; cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    function transform: CGAffineTransform; cdecl;
    procedure setTransform3D(transform3D: CATransform3D); cdecl;
    function transform3D: CATransform3D; cdecl;
    procedure setContentScaleFactor(contentScaleFactor: CGFloat); cdecl;
    function contentScaleFactor: CGFloat; cdecl;
    procedure setAnchorPoint(anchorPoint: CGPoint); cdecl;
    function anchorPoint: CGPoint; cdecl;
    procedure setMultipleTouchEnabled(multipleTouchEnabled: Boolean); cdecl;
    function isMultipleTouchEnabled: Boolean; cdecl;
    procedure setExclusiveTouch(exclusiveTouch: Boolean); cdecl;
    function isExclusiveTouch: Boolean; cdecl;
    function hitTest(point: CGPoint; withEvent: UIEvent): UIView; cdecl;
    function pointInside(point: CGPoint; withEvent: UIEvent): Boolean; cdecl;
    [MethodName('convertPoint:toView:')]
    function convertPointToView(point: CGPoint; toView: UIView): CGPoint; cdecl;
    [MethodName('convertPoint:fromView:')]
    function convertPointFromView(point: CGPoint; fromView: UIView)
      : CGPoint; cdecl;
    [MethodName('convertRect:toView:')]
    function convertRectToView(rect: CGRect; toView: UIView): CGRect; cdecl;
    [MethodName('convertRect:fromView:')]
    function convertRectFromView(rect: CGRect; fromView: UIView): CGRect; cdecl;
    procedure setAutoresizesSubviews(autoresizesSubviews: Boolean); cdecl;
    function autoresizesSubviews: Boolean; cdecl;
    procedure setAutoresizingMask(autoresizingMask: UIViewAutoresizing); cdecl;
    function autoresizingMask: UIViewAutoresizing; cdecl;
    function sizeThatFits(size: CGSize): CGSize; cdecl;
    procedure sizeToFit; cdecl;
    function superview: UIView; cdecl;
    function subviews: NSArray; cdecl;
    function window: UIWindow; cdecl;
    procedure removeFromSuperview; cdecl;
    [MethodName('insertSubview:atIndex:')]
    procedure insertSubviewAtIndex(view: UIView; atIndex: NSInteger); cdecl;
    procedure exchangeSubviewAtIndex(index1: NSInteger;
      withSubviewAtIndex: NSInteger); cdecl;
    procedure addSubview(view: UIView); cdecl;
    [MethodName('insertSubview:belowSubview:')]
    procedure insertSubviewBelowSubview(view: UIView;
      belowSubview: UIView); cdecl;
    [MethodName('insertSubview:aboveSubview:')]
    procedure insertSubviewAboveSubview(view: UIView;
      aboveSubview: UIView); cdecl;
    procedure bringSubviewToFront(view: UIView); cdecl;
    procedure sendSubviewToBack(view: UIView); cdecl;
    procedure didAddSubview(subview: UIView); cdecl;
    procedure willRemoveSubview(subview: UIView); cdecl;
    procedure willMoveToSuperview(newSuperview: UIView); cdecl;
    procedure didMoveToSuperview; cdecl;
    procedure willMoveToWindow(newWindow: UIWindow); cdecl;
    procedure didMoveToWindow; cdecl;
    function isDescendantOfView(view: UIView): Boolean; cdecl;
    function viewWithTag(tag: NSInteger): UIView; cdecl;
    procedure setNeedsLayout; cdecl;
    procedure layoutIfNeeded; cdecl;
    procedure layoutSubviews; cdecl;
    procedure setLayoutMargins(layoutMargins: UIEdgeInsets); cdecl;
    function layoutMargins: UIEdgeInsets; cdecl;
    procedure setDirectionalLayoutMargins(directionalLayoutMargins
      : NSDirectionalEdgeInsets); cdecl;
    function directionalLayoutMargins: NSDirectionalEdgeInsets; cdecl;
    procedure setPreservesSuperviewLayoutMargins(preservesSuperviewLayoutMargins
      : Boolean); cdecl;
    function preservesSuperviewLayoutMargins: Boolean; cdecl;
    procedure setInsetsLayoutMarginsFromSafeArea(insetsLayoutMarginsFromSafeArea
      : Boolean); cdecl;
    function insetsLayoutMarginsFromSafeArea: Boolean; cdecl;
    procedure layoutMarginsDidChange; cdecl;
    function safeAreaInsets: UIEdgeInsets; cdecl;
    procedure safeAreaInsetsDidChange; cdecl;
    function layoutMarginsGuide: UILayoutGuide; cdecl;
    function readableContentGuide: UILayoutGuide; cdecl;
    function safeAreaLayoutGuide: UILayoutGuide; cdecl;
    function keyboardLayoutGuide: UIKeyboardLayoutGuide; cdecl;
    [MethodName('drawRect:')]
    procedure drawRect(rect: CGRect); cdecl;
    procedure setNeedsDisplay; cdecl;
    procedure setNeedsDisplayInRect(rect: CGRect); cdecl;
    procedure setClipsToBounds(clipsToBounds: Boolean); cdecl;
    function clipsToBounds: Boolean; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setAlpha(alpha: CGFloat); cdecl;
    function alpha: CGFloat; cdecl;
    procedure setOpaque(opaque: Boolean); cdecl;
    function isOpaque: Boolean; cdecl;
    procedure setClearsContextBeforeDrawing(clearsContextBeforeDrawing
      : Boolean); cdecl;
    function clearsContextBeforeDrawing: Boolean; cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    function isHidden: Boolean; cdecl;
    procedure setContentMode(contentMode: UIViewContentMode); cdecl;
    function contentMode: UIViewContentMode; cdecl;
    procedure setContentStretch(contentStretch: CGRect); cdecl;
    function contentStretch: CGRect; cdecl;
    procedure setMaskView(maskView: UIView); cdecl;
    function maskView: UIView; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setTintAdjustmentMode(tintAdjustmentMode
      : UIViewTintAdjustmentMode); cdecl;
    function tintAdjustmentMode: UIViewTintAdjustmentMode; cdecl;
    procedure tintColorDidChange; cdecl;
    procedure setAreAnimationsEnabled(areAnimationsEnabled: Boolean); cdecl;
    function areAnimationsEnabled: Boolean; cdecl;
    procedure setInheritedAnimationDuration(inheritedAnimationDuration
      : NSTimeInterval); cdecl;
    function inheritedAnimationDuration: NSTimeInterval; cdecl;
    procedure setGestureRecognizers(gestureRecognizers: NSArray); cdecl;
    function gestureRecognizers: NSArray; cdecl;
    procedure addGestureRecognizer(gestureRecognizer
      : UIGestureRecognizer); cdecl;
    procedure removeGestureRecognizer(gestureRecognizer
      : UIGestureRecognizer); cdecl;
    function gestureRecognizerShouldBegin(gestureRecognizer
      : UIGestureRecognizer): Boolean; cdecl;
    procedure addMotionEffect(effect: UIMotionEffect); cdecl;
    procedure removeMotionEffect(effect: UIMotionEffect); cdecl;
    procedure setMotionEffects(motionEffects: NSArray); cdecl;
    function motionEffects: NSArray; cdecl;
    function constraints: NSArray; cdecl;
    procedure addConstraint(constraint: NSLayoutConstraint); cdecl;
    procedure addConstraints(constraints: NSArray); cdecl;
    procedure removeConstraint(constraint: NSLayoutConstraint); cdecl;
    procedure removeConstraints(constraints: NSArray); cdecl;
    procedure updateConstraintsIfNeeded; cdecl;
    procedure updateConstraints; cdecl;
    function needsUpdateConstraints: Boolean; cdecl;
    procedure setNeedsUpdateConstraints; cdecl;
    procedure setTranslatesAutoresizingMaskIntoConstraints
      (translatesAutoresizingMaskIntoConstraints: Boolean); cdecl;
    function translatesAutoresizingMaskIntoConstraints: Boolean; cdecl;
    procedure setRequiresConstraintBasedLayout(requiresConstraintBasedLayout
      : Boolean); cdecl;
    function requiresConstraintBasedLayout: Boolean; cdecl;
    function alignmentRectForFrame(frame: CGRect): CGRect; cdecl;
    function frameForAlignmentRect(alignmentRect: CGRect): CGRect; cdecl;
    function alignmentRectInsets: UIEdgeInsets; cdecl;
    function viewForBaselineLayout: UIView; cdecl;
    function viewForFirstBaselineLayout: UIView; cdecl;
    function viewForLastBaselineLayout: UIView; cdecl;
    function intrinsicContentSize: CGSize; cdecl;
    procedure invalidateIntrinsicContentSize; cdecl;
    function contentHuggingPriorityForAxis(axis: UILayoutConstraintAxis)
      : UILayoutPriority; cdecl;
    procedure setContentHuggingPriority(priority: UILayoutPriority;
      forAxis: UILayoutConstraintAxis); cdecl;
    function contentCompressionResistancePriorityForAxis
      (axis: UILayoutConstraintAxis): UILayoutPriority; cdecl;
    procedure setContentCompressionResistancePriority
      (priority: UILayoutPriority; forAxis: UILayoutConstraintAxis); cdecl;
    [MethodName('systemLayoutSizeFittingSize:')]
    function systemLayoutSizeFittingSize(targetSize: CGSize): CGSize; cdecl;
    [MethodName
      ('systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:')
      ]
    function systemLayoutSizeFittingSizeWithHorizontalFittingPriorityVerticalFittingPriority
      (targetSize: CGSize; withHorizontalFittingPriority: UILayoutPriority;
      verticalFittingPriority: UILayoutPriority): CGSize; cdecl;
    function layoutGuides: NSArray; cdecl;
    procedure addLayoutGuide(layoutGuide: UILayoutGuide); cdecl;
    procedure removeLayoutGuide(layoutGuide: UILayoutGuide); cdecl;
    function leadingAnchor: NSLayoutXAxisAnchor; cdecl;
    function trailingAnchor: NSLayoutXAxisAnchor; cdecl;
    function leftAnchor: NSLayoutXAxisAnchor; cdecl;
    function rightAnchor: NSLayoutXAxisAnchor; cdecl;
    function topAnchor: NSLayoutYAxisAnchor; cdecl;
    function bottomAnchor: NSLayoutYAxisAnchor; cdecl;
    function widthAnchor: NSLayoutDimension; cdecl;
    function heightAnchor: NSLayoutDimension; cdecl;
    function centerXAnchor: NSLayoutXAxisAnchor; cdecl;
    function centerYAnchor: NSLayoutYAxisAnchor; cdecl;
    function firstBaselineAnchor: NSLayoutYAxisAnchor; cdecl;
    function lastBaselineAnchor: NSLayoutYAxisAnchor; cdecl;
    function constraintsAffectingLayoutForAxis(axis: UILayoutConstraintAxis)
      : NSArray; cdecl;
    function hasAmbiguousLayout: Boolean; cdecl;
    procedure exerciseAmbiguityInLayout; cdecl;
    procedure setRestorationIdentifier(restorationIdentifier: NSString); cdecl;
    function restorationIdentifier: NSString; cdecl;
    procedure encodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure decodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    function snapshotViewAfterScreenUpdates(afterUpdates: Boolean)
      : UIView; cdecl;
    function resizableSnapshotViewFromRect(rect: CGRect;
      afterScreenUpdates: Boolean; withCapInsets: UIEdgeInsets): UIView; cdecl;
    function drawViewHierarchyInRect(rect: CGRect; afterScreenUpdates: Boolean)
      : Boolean; cdecl;
    procedure setOverrideUserInterfaceStyle(overrideUserInterfaceStyle
      : UIUserInterfaceStyle); cdecl;
    function overrideUserInterfaceStyle: UIUserInterfaceStyle; cdecl;
    procedure setMinimumContentSizeCategory(minimumContentSizeCategory
      : UIContentSizeCategory); cdecl;
    function minimumContentSizeCategory: UIContentSizeCategory; cdecl;
    procedure setMaximumContentSizeCategory(maximumContentSizeCategory
      : UIContentSizeCategory); cdecl;
    function maximumContentSizeCategory: UIContentSizeCategory; cdecl;
    function appliedContentSizeCategoryLimitsDescription: NSString; cdecl;
    procedure addInteraction(interaction: Pointer); cdecl;
    procedure removeInteraction(interaction: Pointer); cdecl;
    procedure setInteractions(interactions: NSArray); cdecl;
    function interactions: NSArray; cdecl;
    function endEditing(force: Boolean): Boolean; cdecl;
    function viewPrintFormatter: UIViewPrintFormatter; cdecl;
    [MethodName('drawRect:forViewPrintFormatter:')]
    procedure drawRectForViewPrintFormatter(rect: CGRect;
      forViewPrintFormatter: UIViewPrintFormatter); cdecl;
    procedure setAccessibilityIgnoresInvertColors
      (accessibilityIgnoresInvertColors: Boolean); cdecl;
    function accessibilityIgnoresInvertColors: Boolean; cdecl;
    procedure setShowsLargeContentViewer(showsLargeContentViewer
      : Boolean); cdecl;
    function showsLargeContentViewer: Boolean; cdecl;
    procedure setLargeContentTitle(largeContentTitle: NSString); cdecl;
    function largeContentTitle: NSString; cdecl;
    procedure setLargeContentImage(largeContentImage: UIImage); cdecl;
    function largeContentImage: UIImage; cdecl;
    procedure setScalesLargeContentImage(scalesLargeContentImage
      : Boolean); cdecl;
    function scalesLargeContentImage: Boolean; cdecl;
    procedure setLargeContentImageInsets(largeContentImageInsets
      : UIEdgeInsets); cdecl;
    function largeContentImageInsets: UIEdgeInsets; cdecl;
  end;

  TUIView = class(TOCGenericImport<UIViewClass, UIView>)
  end;

  PUIView = Pointer;

  UIWindowClass = interface(UIViewClass)
    ['{2466E473-A81D-4608-80F3-9B4CB9AC5BD1}']
  end;

  UIWindow = interface(UIView)
    ['{FE52CE79-CEA0-472D-A3E8-E0F22B9F1B86}']
    function initWithWindowScene(windowScene: UIWindowScene)
      : Pointer { instancetype }; cdecl;
    procedure setWindowScene(windowScene: UIWindowScene); cdecl;
    function windowScene: UIWindowScene; cdecl;
    procedure setCanResizeToFitContent(canResizeToFitContent: Boolean); cdecl;
    function canResizeToFitContent: Boolean; cdecl;
    function screen: UIScreen; cdecl;
    procedure setScreen(screen: UIScreen); cdecl;
    procedure setWindowLevel(windowLevel: UIWindowLevel); cdecl;
    function windowLevel: UIWindowLevel; cdecl;
    function isKeyWindow: Boolean; cdecl;
    function canBecomeKeyWindow: Boolean; cdecl;
    procedure becomeKeyWindow; cdecl;
    procedure resignKeyWindow; cdecl;
    procedure makeKeyWindow; cdecl;
    procedure makeKeyAndVisible; cdecl;
    procedure setRootViewController(rootViewController
      : UIViewController); cdecl;
    function rootViewController: UIViewController; cdecl;
    procedure sendEvent(event: UIEvent); cdecl;
    [MethodName('convertPoint:toWindow:')]
    function convertPointToWindow(point: CGPoint; toWindow: UIWindow)
      : CGPoint; cdecl;
    [MethodName('convertPoint:fromWindow:')]
    function convertPointFromWindow(point: CGPoint; fromWindow: UIWindow)
      : CGPoint; cdecl;
    [MethodName('convertRect:toWindow:')]
    function convertRectToWindow(rect: CGRect; toWindow: UIWindow)
      : CGRect; cdecl;
    [MethodName('convertRect:fromWindow:')]
    function convertRectFromWindow(rect: CGRect; fromWindow: UIWindow)
      : CGRect; cdecl;
    function safeAreaAspectFitLayoutGuide: UILayoutGuide; cdecl;
  end;

  TUIWindow = class(TOCGenericImport<UIWindowClass, UIWindow>)
  end;

  PUIWindow = Pointer;

  UIGestureRecognizerClass = interface(NSObjectClass)
    ['{E55A4455-5009-4A91-9EE1-A4F3344213B3}']
  end;

  UIGestureRecognizer = interface(NSObject)
    ['{1975ED38-9152-4946-93BF-D6528B3C9BD4}']
    function initWithTarget(target: Pointer; action: SEL)
      : Pointer { instancetype }; cdecl;
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure addTarget(target: Pointer; action: SEL); cdecl;
    procedure removeTarget(target: Pointer; action: SEL); cdecl;
    function state: UIGestureRecognizerState; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    function view: UIView; cdecl;
    procedure setCancelsTouchesInView(cancelsTouchesInView: Boolean); cdecl;
    function cancelsTouchesInView: Boolean; cdecl;
    procedure setDelaysTouchesBegan(delaysTouchesBegan: Boolean); cdecl;
    function delaysTouchesBegan: Boolean; cdecl;
    procedure setDelaysTouchesEnded(delaysTouchesEnded: Boolean); cdecl;
    function delaysTouchesEnded: Boolean; cdecl;
    procedure setAllowedTouchTypes(allowedTouchTypes: NSArray); cdecl;
    function allowedTouchTypes: NSArray; cdecl;
    procedure setAllowedPressTypes(allowedPressTypes: NSArray); cdecl;
    function allowedPressTypes: NSArray; cdecl;
    procedure setRequiresExclusiveTouchType(requiresExclusiveTouchType
      : Boolean); cdecl;
    function requiresExclusiveTouchType: Boolean; cdecl;
    procedure requireGestureRecognizerToFail(otherGestureRecognizer
      : UIGestureRecognizer); cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    function numberOfTouches: NSUInteger; cdecl;
    function locationOfTouch(touchIndex: NSUInteger; inView: UIView)
      : CGPoint; cdecl;
    procedure setName(name: NSString); cdecl;
    function name: NSString; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function buttonMask: UIEventButtonMask; cdecl;
    procedure setState(state: UIGestureRecognizerState); cdecl;
    procedure ignoreTouch(touch: UITouch; forEvent: UIEvent); cdecl;
    procedure ignorePress(button: UIPress; forEvent: UIPressesEvent); cdecl;
    procedure reset; cdecl;
    function canPreventGestureRecognizer(preventedGestureRecognizer
      : UIGestureRecognizer): Boolean; cdecl;
    function canBePreventedByGestureRecognizer(preventingGestureRecognizer
      : UIGestureRecognizer): Boolean; cdecl;
    function shouldRequireFailureOfGestureRecognizer(otherGestureRecognizer
      : UIGestureRecognizer): Boolean; cdecl;
    function shouldBeRequiredToFailByGestureRecognizer(otherGestureRecognizer
      : UIGestureRecognizer): Boolean; cdecl;
    function shouldReceiveEvent(event: UIEvent): Boolean; cdecl;
    procedure touchesBegan(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesMoved(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEnded(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesCancelled(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEstimatedPropertiesUpdated(touches: NSSet); cdecl;
    procedure pressesBegan(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesChanged(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesEnded(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesCancelled(presses: NSSet;
      withEvent: UIPressesEvent); cdecl;
  end;

  TUIGestureRecognizer = class(TOCGenericImport<UIGestureRecognizerClass,
    UIGestureRecognizer>)
  end;

  PUIGestureRecognizer = Pointer;

  UITouchClass = interface(NSObjectClass)
    ['{115D0834-7A16-47CE-99A4-B53A39F28D1B}']
  end;

  UITouch = interface(NSObject)
    ['{04373795-DA46-407C-8FAE-A91A3358FC43}']
    function timestamp: NSTimeInterval; cdecl;
    function phase: UITouchPhase; cdecl;
    function tapCount: NSUInteger; cdecl;
    function &type: UITouchType; cdecl;
    function majorRadius: CGFloat; cdecl;
    function majorRadiusTolerance: CGFloat; cdecl;
    function window: UIWindow; cdecl;
    function view: UIView; cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    function previousLocationInView(view: UIView): CGPoint; cdecl;
    function preciseLocationInView(view: UIView): CGPoint; cdecl;
    function precisePreviousLocationInView(view: UIView): CGPoint; cdecl;
    function force: CGFloat; cdecl;
    function maximumPossibleForce: CGFloat; cdecl;
    function azimuthAngleInView(view: UIView): CGFloat; cdecl;
    function azimuthUnitVectorInView(view: UIView): CGVector; cdecl;
    function altitudeAngle: CGFloat; cdecl;
    function estimationUpdateIndex: NSNumber; cdecl;
    function estimatedProperties: UITouchProperties; cdecl;
    function estimatedPropertiesExpectingUpdates: UITouchProperties; cdecl;
  end;

  TUITouch = class(TOCGenericImport<UITouchClass, UITouch>)
  end;

  PUITouch = Pointer;

  UIEventClass = interface(NSObjectClass)
    ['{C705BF1A-1402-4336-9BD3-04DB31A05531}']
  end;

  UIEvent = interface(NSObject)
    ['{544DA1D6-80AA-4F83-9474-B5B32C63A636}']
    function &type: UIEventType; cdecl;
    function subtype: UIEventSubtype; cdecl;
    function timestamp: NSTimeInterval; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function buttonMask: UIEventButtonMask; cdecl;
    function allTouches: NSSet; cdecl;
    function touchesForWindow(window: UIWindow): NSSet; cdecl;
    function touchesForView(view: UIView): NSSet; cdecl;
    function touchesForGestureRecognizer(gesture: UIGestureRecognizer)
      : NSSet; cdecl;
    function coalescedTouchesForTouch(touch: UITouch): NSArray; cdecl;
    function predictedTouchesForTouch(touch: UITouch): NSArray; cdecl;
  end;

  TUIEvent = class(TOCGenericImport<UIEventClass, UIEvent>)
  end;

  PUIEvent = Pointer;

  UIKeyCommandClass = interface(UICommandClass)
    ['{99012983-4E74-4059-B629-0B8EBDBE2C25}']
    [MethodName
      ('commandWithTitle:image:action:input:modifierFlags:propertyList:')]
    { class } function commandWithTitleImageActionInputModifierFlagsPropertyList
      (title: NSString; image: UIImage; action: SEL; input: NSString;
      modifierFlags: UIKeyModifierFlags; propertyList: Pointer)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('commandWithTitle:image:action:input:modifierFlags:propertyList:alternates:')
      ]
    { class } function
      commandWithTitleImageActionInputModifierFlagsPropertyListAlternates
      (title: NSString; image: UIImage; action: SEL; input: NSString;
      modifierFlags: UIKeyModifierFlags; propertyList: Pointer;
      alternates: NSArray): Pointer { instancetype }; cdecl;
    [MethodName('keyCommandWithInput:modifierFlags:action:')]
    { class } function keyCommandWithInputModifierFlagsAction(input: NSString;
      modifierFlags: UIKeyModifierFlags; action: SEL)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('keyCommandWithInput:modifierFlags:action:discoverabilityTitle:')]
    { class } function
      keyCommandWithInputModifierFlagsActionDiscoverabilityTitle
      (input: NSString; modifierFlags: UIKeyModifierFlags; action: SEL;
      discoverabilityTitle: NSString): Pointer { instancetype }; cdecl;
  end;

  UIKeyCommand = interface(UICommand)
    ['{08A9A157-4F63-4C07-8738-265F38EFF0EB}']
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    function discoverabilityTitle: NSString; cdecl;
    function action: SEL; cdecl;
    function input: NSString; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function propertyList: Pointer; cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    function attributes: UIMenuElementAttributes; cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    function state: UIMenuElementState; cdecl;
    function alternates: NSArray; cdecl;
    procedure setWantsPriorityOverSystemBehavior(wantsPriorityOverSystemBehavior
      : Boolean); cdecl;
    function wantsPriorityOverSystemBehavior: Boolean; cdecl;
    procedure setAllowsAutomaticLocalization(allowsAutomaticLocalization
      : Boolean); cdecl;
    function allowsAutomaticLocalization: Boolean; cdecl;
    procedure setAllowsAutomaticMirroring(allowsAutomaticMirroring
      : Boolean); cdecl;
    function allowsAutomaticMirroring: Boolean; cdecl;
  end;

  TUIKeyCommand = class(TOCGenericImport<UIKeyCommandClass, UIKeyCommand>)
  end;

  PUIKeyCommand = Pointer;

  UIPasteConfigurationClass = interface(NSObjectClass)
    ['{74089C4F-4DEB-4683-857A-B0BE26FC1F55}']
  end;

  UIPasteConfiguration = interface(NSObject)
    ['{974793E2-4B8C-4EE1-A764-8854A6568022}']
    procedure setAcceptableTypeIdentifiers(acceptableTypeIdentifiers
      : NSArray); cdecl;
    function acceptableTypeIdentifiers: NSArray; cdecl;
    function init: Pointer { instancetype }; cdecl;
    function initWithAcceptableTypeIdentifiers(acceptableTypeIdentifiers
      : NSArray): Pointer { instancetype }; cdecl;
    procedure addAcceptableTypeIdentifiers(acceptableTypeIdentifiers
      : NSArray); cdecl;
    function initWithTypeIdentifiersForAcceptingClass(aClass: Pointer)
      : Pointer { instancetype }; cdecl;
    procedure addTypeIdentifiersForAcceptingClass(aClass: Pointer); cdecl;
  end;

  TUIPasteConfiguration = class(TOCGenericImport<UIPasteConfigurationClass,
    UIPasteConfiguration>)
  end;

  PUIPasteConfiguration = Pointer;

  UIPressClass = interface(NSObjectClass)
    ['{D048636E-2C07-437E-A8CD-12771273C2B8}']
  end;

  UIPress = interface(NSObject)
    ['{B18F740A-38AA-44B7-95E6-8596F8AB5FE4}']
    function timestamp: NSTimeInterval; cdecl;
    function phase: UIPressPhase; cdecl;
    function &type: UIPressType; cdecl;
    function window: UIWindow; cdecl;
    function responder: UIResponder; cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function force: CGFloat; cdecl;
    function key: UIKey; cdecl;
  end;

  TUIPress = class(TOCGenericImport<UIPressClass, UIPress>)
  end;

  PUIPress = Pointer;

  UIPressesEventClass = interface(UIEventClass)
    ['{3884CA38-E547-4227-89B3-AB480AE82103}']
  end;

  UIPressesEvent = interface(UIEvent)
    ['{E8EC633F-FAE3-4325-A225-FFEC2836861E}']
    function allPresses: NSSet; cdecl;
    function pressesForGestureRecognizer(gesture: UIGestureRecognizer)
      : NSSet; cdecl;
  end;

  TUIPressesEvent = class(TOCGenericImport<UIPressesEventClass, UIPressesEvent>)
  end;

  PUIPressesEvent = Pointer;

  UIViewControllerClass = interface(UIResponderClass)
    ['{E1D61D79-308B-4F7F-9C37-B8BCE9B4E094}']
    { class } procedure attemptRotationToDeviceOrientation; cdecl;
  end;

  UIViewController = interface(UIResponder)
    ['{71C4EDB3-7B8C-4EFF-8623-2C619051B9A9}']
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setView(view: UIView); cdecl;
    function view: UIView; cdecl;
    procedure loadView; cdecl;
    procedure loadViewIfNeeded; cdecl;
    function viewIfLoaded: UIView; cdecl;
    procedure viewWillUnload; cdecl;
    procedure viewDidUnload; cdecl;
    procedure viewDidLoad; cdecl;
    function isViewLoaded: Boolean; cdecl;
    function nibName: NSString; cdecl;
    function nibBundle: NSBundle; cdecl;
    function storyboard: UIStoryboard; cdecl;
    procedure performSegueWithIdentifier(identifier: NSString;
      sender: Pointer); cdecl;
    function shouldPerformSegueWithIdentifier(identifier: NSString;
      sender: Pointer): Boolean; cdecl;
    procedure prepareForSegue(segue: UIStoryboardSegue; sender: Pointer); cdecl;
    [MethodName('canPerformUnwindSegueAction:fromViewController:sender:')]
    function canPerformUnwindSegueActionFromViewControllerSender(action: SEL;
      fromViewController: UIViewController; sender: Pointer): Boolean; cdecl;
    [MethodName('canPerformUnwindSegueAction:fromViewController:withSender:')]
    function canPerformUnwindSegueActionFromViewControllerWithSender
      (action: SEL; fromViewController: UIViewController; withSender: Pointer)
      : Boolean; cdecl;
    function allowedChildViewControllersForUnwindingFromSource
      (source: UIStoryboardUnwindSegueSource): NSArray; cdecl;
    function childViewControllerContainingSegueSource
      (source: UIStoryboardUnwindSegueSource): UIViewController; cdecl;
    function viewControllerForUnwindSegueAction(action: SEL;
      fromViewController: UIViewController; withSender: Pointer)
      : UIViewController; cdecl;
    procedure unwindForSegue(unwindSegue: UIStoryboardSegue;
      towardsViewController: UIViewController); cdecl;
    function segueForUnwindingToViewController(toViewController
      : UIViewController; fromViewController: UIViewController;
      identifier: NSString): UIStoryboardSegue; cdecl;
    procedure viewWillAppear(animated: Boolean); cdecl;
    procedure viewDidAppear(animated: Boolean); cdecl;
    procedure viewWillDisappear(animated: Boolean); cdecl;
    procedure viewDidDisappear(animated: Boolean); cdecl;
    procedure viewWillLayoutSubviews; cdecl;
    procedure viewDidLayoutSubviews; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure didReceiveMemoryWarning; cdecl;
    function parentViewController: UIViewController; cdecl;
    function modalViewController: UIViewController; cdecl;
    function presentedViewController: UIViewController; cdecl;
    function presentingViewController: UIViewController; cdecl;
    procedure setDefinesPresentationContext(definesPresentationContext
      : Boolean); cdecl;
    function definesPresentationContext: Boolean; cdecl;
    procedure setProvidesPresentationContextTransitionStyle
      (providesPresentationContextTransitionStyle: Boolean); cdecl;
    function providesPresentationContextTransitionStyle: Boolean; cdecl;
    procedure setRestoresFocusAfterTransition(restoresFocusAfterTransition
      : Boolean); cdecl;
    function restoresFocusAfterTransition: Boolean; cdecl;
    procedure setFocusGroupIdentifier(focusGroupIdentifier: NSString); cdecl;
    function focusGroupIdentifier: NSString; cdecl;
    procedure setInteractionActivityTrackingBaseName
      (interactionActivityTrackingBaseName: NSString); cdecl;
    function interactionActivityTrackingBaseName: NSString; cdecl;
    function isBeingPresented: Boolean; cdecl;
    function isBeingDismissed: Boolean; cdecl;
    function isMovingToParentViewController: Boolean; cdecl;
    function isMovingFromParentViewController: Boolean; cdecl;
    procedure presentViewController(viewControllerToPresent: UIViewController;
      animated: Boolean; completion: TUIKitAction); cdecl;
    procedure dismissViewControllerAnimated(flag: Boolean;
      completion: TUIKitAction); cdecl;
    procedure presentModalViewController(modalViewController: UIViewController;
      animated: Boolean); cdecl;
    procedure dismissModalViewControllerAnimated(animated: Boolean); cdecl;
    procedure setModalTransitionStyle(modalTransitionStyle
      : UIModalTransitionStyle); cdecl;
    function modalTransitionStyle: UIModalTransitionStyle; cdecl;
    procedure setModalPresentationStyle(modalPresentationStyle
      : UIModalPresentationStyle); cdecl;
    function modalPresentationStyle: UIModalPresentationStyle; cdecl;
    procedure setModalPresentationCapturesStatusBarAppearance
      (modalPresentationCapturesStatusBarAppearance: Boolean); cdecl;
    function modalPresentationCapturesStatusBarAppearance: Boolean; cdecl;
    function disablesAutomaticKeyboardDismissal: Boolean; cdecl;
    procedure setWantsFullScreenLayout(wantsFullScreenLayout: Boolean); cdecl;
    function wantsFullScreenLayout: Boolean; cdecl;
    procedure setEdgesForExtendedLayout(edgesForExtendedLayout
      : UIRectEdge); cdecl;
    function edgesForExtendedLayout: UIRectEdge; cdecl;
    procedure setExtendedLayoutIncludesOpaqueBars
      (extendedLayoutIncludesOpaqueBars: Boolean); cdecl;
    function extendedLayoutIncludesOpaqueBars: Boolean; cdecl;
    procedure setAutomaticallyAdjustsScrollViewInsets
      (automaticallyAdjustsScrollViewInsets: Boolean); cdecl;
    function automaticallyAdjustsScrollViewInsets: Boolean; cdecl;
    procedure setContentScrollView(scrollView: UIScrollView;
      forEdge: NSDirectionalRectEdge); cdecl;
    function contentScrollViewForEdge(edge: NSDirectionalRectEdge)
      : UIScrollView; cdecl;
    procedure setPreferredContentSize(preferredContentSize: CGSize); cdecl;
    function preferredContentSize: CGSize; cdecl;
    function preferredStatusBarStyle: UIStatusBarStyle; cdecl;
    function prefersStatusBarHidden: Boolean; cdecl;
    function preferredStatusBarUpdateAnimation: UIStatusBarAnimation; cdecl;
    procedure setNeedsStatusBarAppearanceUpdate; cdecl;
    function targetViewControllerForAction(action: SEL; sender: Pointer)
      : UIViewController; cdecl;
    procedure showViewController(vc: UIViewController; sender: Pointer); cdecl;
    procedure showDetailViewController(vc: UIViewController;
      sender: Pointer); cdecl;
    function preferredUserInterfaceStyle: UIUserInterfaceStyle; cdecl;
    procedure setNeedsUserInterfaceAppearanceUpdate; cdecl;
    procedure setOverrideUserInterfaceStyle(overrideUserInterfaceStyle
      : UIUserInterfaceStyle); cdecl;
    function overrideUserInterfaceStyle: UIUserInterfaceStyle; cdecl;
    function previewActionItems: NSArray; cdecl;
    function shouldAutorotateToInterfaceOrientation(toInterfaceOrientation
      : UIInterfaceOrientation): Boolean; cdecl;
    function shouldAutorotate: Boolean; cdecl;
    function supportedInterfaceOrientations: UIInterfaceOrientationMask; cdecl;
    function preferredInterfaceOrientationForPresentation
      : UIInterfaceOrientation; cdecl;
    procedure setNeedsUpdateOfSupportedInterfaceOrientations; cdecl;
    function rotatingHeaderView: UIView; cdecl;
    function rotatingFooterView: UIView; cdecl;
    function interfaceOrientation: UIInterfaceOrientation; cdecl;
    procedure willRotateToInterfaceOrientation(toInterfaceOrientation
      : UIInterfaceOrientation; duration: NSTimeInterval); cdecl;
    procedure didRotateFromInterfaceOrientation(fromInterfaceOrientation
      : UIInterfaceOrientation); cdecl;
    procedure willAnimateRotationToInterfaceOrientation(toInterfaceOrientation
      : UIInterfaceOrientation; duration: NSTimeInterval); cdecl;
    procedure willAnimateFirstHalfOfRotationToInterfaceOrientation
      (toInterfaceOrientation: UIInterfaceOrientation;
      duration: NSTimeInterval); cdecl;
    procedure didAnimateFirstHalfOfRotationToInterfaceOrientation
      (toInterfaceOrientation: UIInterfaceOrientation); cdecl;
    procedure willAnimateSecondHalfOfRotationFromInterfaceOrientation
      (fromInterfaceOrientation: UIInterfaceOrientation;
      duration: NSTimeInterval); cdecl;
    [MethodName('setEditing:')]
    procedure setEditing(editing: Boolean); cdecl;
    function isEditing: Boolean; cdecl;
    [MethodName('setEditing:animated:')]
    procedure setEditingAnimated(editing: Boolean; animated: Boolean); cdecl;
    function editButtonItem: UIBarButtonItem; cdecl;
    function searchDisplayController: UISearchDisplayController; cdecl;
    function childViewControllers: NSArray; cdecl;
    procedure addChildViewController(childController: UIViewController); cdecl;
    procedure removeFromParentViewController; cdecl;
    procedure transitionFromViewController(fromViewController: UIViewController;
      toViewController: UIViewController; duration: NSTimeInterval;
      options: UIViewAnimationOptions; animations: TUIKitAction;
      completion: TUIKitCompletion); cdecl;
    procedure beginAppearanceTransition(isAppearing: Boolean;
      animated: Boolean); cdecl;
    procedure endAppearanceTransition; cdecl;
    function childViewControllerForStatusBarStyle: UIViewController; cdecl;
    function childViewControllerForStatusBarHidden: UIViewController; cdecl;
    procedure setOverrideTraitCollection(collection: UITraitCollection;
      forChildViewController: UIViewController); cdecl;
    function overrideTraitCollectionForChildViewController(childViewController
      : UIViewController): UITraitCollection; cdecl;
    function childViewControllerForUserInterfaceStyle: UIViewController; cdecl;
    function automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers
      : Boolean; cdecl;
    function shouldAutomaticallyForwardRotationMethods: Boolean; cdecl;
    function shouldAutomaticallyForwardAppearanceMethods: Boolean; cdecl;
    procedure willMoveToParentViewController(parent: UIViewController); cdecl;
    procedure didMoveToParentViewController(parent: UIViewController); cdecl;
    procedure setRestorationIdentifier(restorationIdentifier: NSString); cdecl;
    function restorationIdentifier: NSString; cdecl;
    procedure setRestorationClass(restorationClass: Pointer); cdecl;
    function restorationClass: Pointer; cdecl;
    procedure encodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure decodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure applicationFinishedRestoringState; cdecl;
    procedure updateViewConstraints; cdecl;
    procedure setTransitioningDelegate(transitioningDelegate: Pointer); cdecl;
    function transitioningDelegate: Pointer; cdecl;
    function topLayoutGuide: Pointer; cdecl;
    function bottomLayoutGuide: Pointer; cdecl;
    procedure setAdditionalSafeAreaInsets(additionalSafeAreaInsets
      : UIEdgeInsets); cdecl;
    function additionalSafeAreaInsets: UIEdgeInsets; cdecl;
    function systemMinimumLayoutMargins: NSDirectionalEdgeInsets; cdecl;
    procedure setViewRespectsSystemMinimumLayoutMargins
      (viewRespectsSystemMinimumLayoutMargins: Boolean); cdecl;
    function viewRespectsSystemMinimumLayoutMargins: Boolean; cdecl;
    procedure viewLayoutMarginsDidChange; cdecl;
    procedure viewSafeAreaInsetsDidChange; cdecl;
    procedure addKeyCommand(keyCommand: UIKeyCommand); cdecl;
    procedure removeKeyCommand(keyCommand: UIKeyCommand); cdecl;
    function performsActionsWhilePresentingModally: Boolean; cdecl;
    function extensionContext: NSExtensionContext; cdecl;
    function presentationController: UIPresentationController; cdecl;
    function sheetPresentationController: UISheetPresentationController; cdecl;
    function popoverPresentationController
      : UIPopoverPresentationController; cdecl;
    function activePresentationController: UIPresentationController; cdecl;
    procedure setModalInPresentation(modalInPresentation: Boolean); cdecl;
    function isModalInPresentation: Boolean; cdecl;
    function registerForPreviewingWithDelegate(delegate: Pointer;
      sourceView: UIView): Pointer; cdecl;
    procedure unregisterForPreviewingWithContext(previewing: Pointer); cdecl;
    function childViewControllerForScreenEdgesDeferringSystemGestures
      : UIViewController; cdecl;
    function preferredScreenEdgesDeferringSystemGestures: UIRectEdge; cdecl;
    procedure setNeedsUpdateOfScreenEdgesDeferringSystemGestures; cdecl;
    function childViewControllerForHomeIndicatorAutoHidden
      : UIViewController; cdecl;
    function prefersHomeIndicatorAutoHidden: Boolean; cdecl;
    procedure setNeedsUpdateOfHomeIndicatorAutoHidden; cdecl;
    function childViewControllerForPointerLock: UIViewController; cdecl;
    function prefersPointerLocked: Boolean; cdecl;
    procedure setNeedsUpdateOfPrefersPointerLocked; cdecl;
    function transitionCoordinator: Pointer; cdecl;
    function navigationItem: UINavigationItem; cdecl;
    procedure setHidesBottomBarWhenPushed(hidesBottomBarWhenPushed
      : Boolean); cdecl;
    function hidesBottomBarWhenPushed: Boolean; cdecl;
    function navigationController: UINavigationController; cdecl;
    [MethodName('setToolbarItems:')]
    procedure setToolbarItems(toolbarItems: NSArray); cdecl;
    function toolbarItems: NSArray; cdecl;
    [MethodName('setToolbarItems:animated:')]
    procedure setToolbarItemsAnimated(toolbarItems: NSArray;
      animated: Boolean); cdecl;
    procedure setModalInPopover(modalInPopover: Boolean); cdecl;
    function isModalInPopover: Boolean; cdecl;
    procedure setContentSizeForViewInPopover(contentSizeForViewInPopover
      : CGSize); cdecl;
    function contentSizeForViewInPopover: CGSize; cdecl;
    function splitViewController: UISplitViewController; cdecl;
    procedure collapseSecondaryViewController(secondaryViewController
      : UIViewController; forSplitViewController: UISplitViewController); cdecl;
    function separateSecondaryViewControllerForSplitViewController
      (splitViewController: UISplitViewController): UIViewController; cdecl;
    procedure setTabBarItem(tabBarItem: UITabBarItem); cdecl;
    function tabBarItem: UITabBarItem; cdecl;
    function tabBarController: UITabBarController; cdecl;
    procedure setTabBarObservedScrollView(tabBarObservedScrollView
      : UIScrollView); cdecl;
    function tabBarObservedScrollView: UIScrollView; cdecl;
  end;

  TUIViewController = class(TOCGenericImport<UIViewControllerClass,
    UIViewController>)
  end;

  PUIViewController = Pointer;

  UIInputViewControllerClass = interface(UIViewControllerClass)
    ['{458743A2-E8D2-4D87-AA38-3017C52E666A}']
  end;

  UIInputViewController = interface(UIViewController)
    ['{AF81C7A0-0C39-463C-9F7B-447095DC3E32}']
    procedure setInputView(inputView: UIInputView); cdecl;
    function inputView: UIInputView; cdecl;
    function textDocumentProxy: Pointer; cdecl;
    procedure setPrimaryLanguage(primaryLanguage: NSString); cdecl;
    function primaryLanguage: NSString; cdecl;
    procedure setHasDictationKey(hasDictationKey: Boolean); cdecl;
    function hasDictationKey: Boolean; cdecl;
    function hasFullAccess: Boolean; cdecl;
    function needsInputModeSwitchKey: Boolean; cdecl;
    procedure dismissKeyboard; cdecl;
    procedure advanceToNextInputMode; cdecl;
    procedure handleInputModeListFromView(view: UIView;
      withEvent: UIEvent); cdecl;
    procedure requestSupplementaryLexiconWithCompletion(completionHandler
      : TUIKitCompletionHandler2); cdecl;
  end;

  TUIInputViewController = class(TOCGenericImport<UIInputViewControllerClass,
    UIInputViewController>)
  end;

  PUIInputViewController = Pointer;

  UITextInputModeClass = interface(NSObjectClass)
    ['{57EB5201-383A-49DC-B8E8-CB415BBD7191}']
    { class } function currentInputMode: UITextInputMode; cdecl;
  end;

  UITextInputMode = interface(NSObject)
    ['{188E176C-E757-46F7-B365-38C6A169FF2E}']
    function primaryLanguage: NSString; cdecl;
    procedure setActiveInputModes(activeInputModes: NSArray); cdecl;
    function activeInputModes: NSArray; cdecl;
  end;

  TUITextInputMode = class(TOCGenericImport<UITextInputModeClass,
    UITextInputMode>)
  end;

  PUITextInputMode = Pointer;

  UITextInputAssistantItemClass = interface(NSObjectClass)
    ['{A3161FAE-D51E-4999-A740-0534B7805FD8}']
  end;

  UITextInputAssistantItem = interface(NSObject)
    ['{E912CF35-9F47-4B69-863F-F47622547A3E}']
    procedure setAllowsHidingShortcuts(allowsHidingShortcuts: Boolean); cdecl;
    function allowsHidingShortcuts: Boolean; cdecl;
    procedure setLeadingBarButtonGroups(leadingBarButtonGroups: NSArray); cdecl;
    function leadingBarButtonGroups: NSArray; cdecl;
    procedure setTrailingBarButtonGroups(trailingBarButtonGroups
      : NSArray); cdecl;
    function trailingBarButtonGroups: NSArray; cdecl;
  end;

  TUITextInputAssistantItem = class
    (TOCGenericImport<UITextInputAssistantItemClass, UITextInputAssistantItem>)
  end;

  PUITextInputAssistantItem = Pointer;

  UITraitCollectionClass = interface(NSObjectClass)
    ['{6C4A3397-2F71-4353-9D16-6A5438E5C2B7}']
    { class } function traitCollectionWithTraitsFromCollections(traitCollections
      : NSArray): UITraitCollection; cdecl;
    { class } function traitCollectionWithUserInterfaceIdiom
      (idiom: UIUserInterfaceIdiom): UITraitCollection; cdecl;
    { class } function traitCollectionWithUserInterfaceStyle(userInterfaceStyle
      : UIUserInterfaceStyle): UITraitCollection; cdecl;
    { class } function traitCollectionWithLayoutDirection(layoutDirection
      : UITraitEnvironmentLayoutDirection): UITraitCollection; cdecl;
    { class } function traitCollectionWithDisplayScale(scale: CGFloat)
      : UITraitCollection; cdecl;
    { class } function traitCollectionWithHorizontalSizeClass
      (horizontalSizeClass: UIUserInterfaceSizeClass): UITraitCollection; cdecl;
    { class } function traitCollectionWithVerticalSizeClass(verticalSizeClass
      : UIUserInterfaceSizeClass): UITraitCollection; cdecl;
    { class } function traitCollectionWithForceTouchCapability
      (capability: UIForceTouchCapability): UITraitCollection; cdecl;
    { class } function traitCollectionWithPreferredContentSizeCategory
      (preferredContentSizeCategory: UIContentSizeCategory)
      : UITraitCollection; cdecl;
    { class } function traitCollectionWithDisplayGamut
      (displayGamut: UIDisplayGamut): UITraitCollection; cdecl;
    { class } function traitCollectionWithAccessibilityContrast
      (accessibilityContrast: UIAccessibilityContrast)
      : UITraitCollection; cdecl;
    { class } function traitCollectionWithUserInterfaceLevel(userInterfaceLevel
      : UIUserInterfaceLevel): UITraitCollection; cdecl;
    { class } function traitCollectionWithLegibilityWeight(legibilityWeight
      : UILegibilityWeight): UITraitCollection; cdecl;
    { class } function traitCollectionWithActiveAppearance
      (userInterfaceActiveAppearance: UIUserInterfaceActiveAppearance)
      : UITraitCollection; cdecl;
    { class } function traitCollectionWithToolbarItemPresentationSize
      (toolbarItemPresentationSize: UINSToolbarItemPresentationSize)
      : UITraitCollection; cdecl;
  end;

  UITraitCollection = interface(NSObject)
    ['{B8B9AB0D-DF94-4586-9801-A25E0398B508}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function containsTraitsInCollection(trait: UITraitCollection)
      : Boolean; cdecl;
    function userInterfaceIdiom: UIUserInterfaceIdiom; cdecl;
    function userInterfaceStyle: UIUserInterfaceStyle; cdecl;
    function layoutDirection: UITraitEnvironmentLayoutDirection; cdecl;
    function displayScale: CGFloat; cdecl;
    function horizontalSizeClass: UIUserInterfaceSizeClass; cdecl;
    function verticalSizeClass: UIUserInterfaceSizeClass; cdecl;
    function forceTouchCapability: UIForceTouchCapability; cdecl;
    function preferredContentSizeCategory: UIContentSizeCategory; cdecl;
    function displayGamut: UIDisplayGamut; cdecl;
    function accessibilityContrast: UIAccessibilityContrast; cdecl;
    function userInterfaceLevel: UIUserInterfaceLevel; cdecl;
    function legibilityWeight: UILegibilityWeight; cdecl;
    function activeAppearance: UIUserInterfaceActiveAppearance; cdecl;
    function toolbarItemPresentationSize
      : UINSToolbarItemPresentationSize; cdecl;
    procedure setCurrentTraitCollection(currentTraitCollection
      : UITraitCollection); cdecl;
    function currentTraitCollection: UITraitCollection; cdecl;
    procedure performAsCurrentTraitCollection(actions: TUIKitAction); cdecl;
    function hasDifferentColorAppearanceComparedToTraitCollection
      (traitCollection: UITraitCollection): Boolean; cdecl;
    function imageConfiguration: UIImageConfiguration; cdecl;
  end;

  TUITraitCollection = class(TOCGenericImport<UITraitCollectionClass,
    UITraitCollection>)
  end;

  PUITraitCollection = Pointer;

  UIColorClass = interface(NSObjectClass)
    ['{7CC89BB6-AD50-4B36-9AA0-0C40880A60FC}']
    { class } function colorWithWhite(white: CGFloat; alpha: CGFloat)
      : UIColor; cdecl;
    { class } function colorWithHue(hue: CGFloat; saturation: CGFloat;
      brightness: CGFloat; alpha: CGFloat): UIColor; cdecl;
    { class } function colorWithRed(red: CGFloat; green: CGFloat; blue: CGFloat;
      alpha: CGFloat): UIColor; cdecl;
    { class } function colorWithDisplayP3Red(displayP3Red: CGFloat;
      green: CGFloat; blue: CGFloat; alpha: CGFloat): UIColor; cdecl;
    { class } function colorWithCGColor(cgColor: CGColorRef): UIColor; cdecl;
    { class } function colorWithPatternImage(image: UIImage): UIColor; cdecl;
    { class } function colorWithCIColor(ciColor: ciColor): UIColor; cdecl;
    [MethodName('colorNamed:')]
    { class } function colorNamed(name: NSString): UIColor; cdecl;
    [MethodName('colorNamed:inBundle:compatibleWithTraitCollection:')]
    { class } function colorNamedInBundleCompatibleWithTraitCollection
      (name: NSString; inBundle: NSBundle;
      compatibleWithTraitCollection: UITraitCollection): UIColor; cdecl;
    { class } function colorWithDynamicProvider(dynamicProvider
      : TUIKitDynamicProvider): UIColor; cdecl;
  end;

  UIColor = interface(NSObject)
    ['{F79BAF38-C645-41C6-8302-A95E81F477B4}']
    function initWithWhite(white: CGFloat; alpha: CGFloat): UIColor; cdecl;
    function initWithHue(hue: CGFloat; saturation: CGFloat; brightness: CGFloat;
      alpha: CGFloat): UIColor; cdecl;
    function initWithRed(red: CGFloat; green: CGFloat; blue: CGFloat;
      alpha: CGFloat): UIColor; cdecl;
    function initWithDisplayP3Red(displayP3Red: CGFloat; green: CGFloat;
      blue: CGFloat; alpha: CGFloat): UIColor; cdecl;
    function initWithCGColor(cgColor: CGColorRef): UIColor; cdecl;
    function initWithPatternImage(image: UIImage): UIColor; cdecl;
    function initWithCIColor(ciColor: ciColor): UIColor; cdecl;
    procedure setBlackColor(blackColor: UIColor); cdecl;
    function blackColor: UIColor; cdecl;
    procedure setDarkGrayColor(darkGrayColor: UIColor); cdecl;
    function darkGrayColor: UIColor; cdecl;
    procedure setLightGrayColor(lightGrayColor: UIColor); cdecl;
    function lightGrayColor: UIColor; cdecl;
    procedure setWhiteColor(whiteColor: UIColor); cdecl;
    function whiteColor: UIColor; cdecl;
    procedure setGrayColor(grayColor: UIColor); cdecl;
    function grayColor: UIColor; cdecl;
    procedure setRedColor(redColor: UIColor); cdecl;
    function redColor: UIColor; cdecl;
    procedure setGreenColor(greenColor: UIColor); cdecl;
    function greenColor: UIColor; cdecl;
    procedure setBlueColor(blueColor: UIColor); cdecl;
    function blueColor: UIColor; cdecl;
    procedure setCyanColor(cyanColor: UIColor); cdecl;
    function cyanColor: UIColor; cdecl;
    procedure setYellowColor(yellowColor: UIColor); cdecl;
    function yellowColor: UIColor; cdecl;
    procedure setMagentaColor(magentaColor: UIColor); cdecl;
    function magentaColor: UIColor; cdecl;
    procedure setOrangeColor(orangeColor: UIColor); cdecl;
    function orangeColor: UIColor; cdecl;
    procedure setPurpleColor(purpleColor: UIColor); cdecl;
    function purpleColor: UIColor; cdecl;
    procedure setBrownColor(brownColor: UIColor); cdecl;
    function brownColor: UIColor; cdecl;
    procedure setClearColor(clearColor: UIColor); cdecl;
    function clearColor: UIColor; cdecl;
    procedure &set; cdecl;
    procedure setFill; cdecl;
    procedure setStroke; cdecl;
    function getWhite(white: PCGFloat; alpha: PCGFloat): Boolean; cdecl;
    function getHue(hue: PCGFloat; saturation: PCGFloat; brightness: PCGFloat;
      alpha: PCGFloat): Boolean; cdecl;
    function getRed(red: PCGFloat; green: PCGFloat; blue: PCGFloat;
      alpha: PCGFloat): Boolean; cdecl;
    function colorWithAlphaComponent(alpha: CGFloat): UIColor; cdecl;
    function cgColor: CGColorRef; cdecl;
    function ciColor: ciColor; cdecl;
    function initWithDynamicProvider(dynamicProvider: TUIKitDynamicProvider)
      : UIColor; cdecl;
    function resolvedColorWithTraitCollection(traitCollection
      : UITraitCollection): UIColor; cdecl;
    procedure setSystemRedColor(systemRedColor: UIColor); cdecl;
    function systemRedColor: UIColor; cdecl;
    procedure setSystemGreenColor(systemGreenColor: UIColor); cdecl;
    function systemGreenColor: UIColor; cdecl;
    procedure setSystemBlueColor(systemBlueColor: UIColor); cdecl;
    function systemBlueColor: UIColor; cdecl;
    procedure setSystemOrangeColor(systemOrangeColor: UIColor); cdecl;
    function systemOrangeColor: UIColor; cdecl;
    procedure setSystemYellowColor(systemYellowColor: UIColor); cdecl;
    function systemYellowColor: UIColor; cdecl;
    procedure setSystemPinkColor(systemPinkColor: UIColor); cdecl;
    function systemPinkColor: UIColor; cdecl;
    procedure setSystemPurpleColor(systemPurpleColor: UIColor); cdecl;
    function systemPurpleColor: UIColor; cdecl;
    procedure setSystemTealColor(systemTealColor: UIColor); cdecl;
    function systemTealColor: UIColor; cdecl;
    procedure setSystemIndigoColor(systemIndigoColor: UIColor); cdecl;
    function systemIndigoColor: UIColor; cdecl;
    procedure setSystemBrownColor(systemBrownColor: UIColor); cdecl;
    function systemBrownColor: UIColor; cdecl;
    procedure setSystemMintColor(systemMintColor: UIColor); cdecl;
    function systemMintColor: UIColor; cdecl;
    procedure setSystemCyanColor(systemCyanColor: UIColor); cdecl;
    function systemCyanColor: UIColor; cdecl;
    procedure setSystemGrayColor(systemGrayColor: UIColor); cdecl;
    function systemGrayColor: UIColor; cdecl;
    procedure setSystemGray2Color(systemGray2Color: UIColor); cdecl;
    function systemGray2Color: UIColor; cdecl;
    procedure setSystemGray3Color(systemGray3Color: UIColor); cdecl;
    function systemGray3Color: UIColor; cdecl;
    procedure setSystemGray4Color(systemGray4Color: UIColor); cdecl;
    function systemGray4Color: UIColor; cdecl;
    procedure setSystemGray5Color(systemGray5Color: UIColor); cdecl;
    function systemGray5Color: UIColor; cdecl;
    procedure setSystemGray6Color(systemGray6Color: UIColor); cdecl;
    function systemGray6Color: UIColor; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setLabelColor(labelColor: UIColor); cdecl;
    function labelColor: UIColor; cdecl;
    procedure setSecondaryLabelColor(secondaryLabelColor: UIColor); cdecl;
    function secondaryLabelColor: UIColor; cdecl;
    procedure setTertiaryLabelColor(tertiaryLabelColor: UIColor); cdecl;
    function tertiaryLabelColor: UIColor; cdecl;
    procedure setQuaternaryLabelColor(quaternaryLabelColor: UIColor); cdecl;
    function quaternaryLabelColor: UIColor; cdecl;
    procedure setLinkColor(linkColor: UIColor); cdecl;
    function linkColor: UIColor; cdecl;
    procedure setPlaceholderTextColor(placeholderTextColor: UIColor); cdecl;
    function placeholderTextColor: UIColor; cdecl;
    procedure setSeparatorColor(separatorColor: UIColor); cdecl;
    function separatorColor: UIColor; cdecl;
    procedure setOpaqueSeparatorColor(opaqueSeparatorColor: UIColor); cdecl;
    function opaqueSeparatorColor: UIColor; cdecl;
    procedure setSystemBackgroundColor(systemBackgroundColor: UIColor); cdecl;
    function systemBackgroundColor: UIColor; cdecl;
    procedure setSecondarySystemBackgroundColor(secondarySystemBackgroundColor
      : UIColor); cdecl;
    function secondarySystemBackgroundColor: UIColor; cdecl;
    procedure setTertiarySystemBackgroundColor(tertiarySystemBackgroundColor
      : UIColor); cdecl;
    function tertiarySystemBackgroundColor: UIColor; cdecl;
    procedure setSystemGroupedBackgroundColor(systemGroupedBackgroundColor
      : UIColor); cdecl;
    function systemGroupedBackgroundColor: UIColor; cdecl;
    procedure setSecondarySystemGroupedBackgroundColor
      (secondarySystemGroupedBackgroundColor: UIColor); cdecl;
    function secondarySystemGroupedBackgroundColor: UIColor; cdecl;
    procedure setTertiarySystemGroupedBackgroundColor
      (tertiarySystemGroupedBackgroundColor: UIColor); cdecl;
    function tertiarySystemGroupedBackgroundColor: UIColor; cdecl;
    procedure setSystemFillColor(systemFillColor: UIColor); cdecl;
    function systemFillColor: UIColor; cdecl;
    procedure setSecondarySystemFillColor(secondarySystemFillColor
      : UIColor); cdecl;
    function secondarySystemFillColor: UIColor; cdecl;
    procedure setTertiarySystemFillColor(tertiarySystemFillColor
      : UIColor); cdecl;
    function tertiarySystemFillColor: UIColor; cdecl;
    procedure setQuaternarySystemFillColor(quaternarySystemFillColor
      : UIColor); cdecl;
    function quaternarySystemFillColor: UIColor; cdecl;
    procedure setLightTextColor(lightTextColor: UIColor); cdecl;
    function lightTextColor: UIColor; cdecl;
    procedure setDarkTextColor(darkTextColor: UIColor); cdecl;
    function darkTextColor: UIColor; cdecl;
    procedure setGroupTableViewBackgroundColor(groupTableViewBackgroundColor
      : UIColor); cdecl;
    function groupTableViewBackgroundColor: UIColor; cdecl;
    procedure setViewFlipsideBackgroundColor(viewFlipsideBackgroundColor
      : UIColor); cdecl;
    function viewFlipsideBackgroundColor: UIColor; cdecl;
    procedure setScrollViewTexturedBackgroundColor
      (scrollViewTexturedBackgroundColor: UIColor); cdecl;
    function scrollViewTexturedBackgroundColor: UIColor; cdecl;
    procedure setUnderPageBackgroundColor(underPageBackgroundColor
      : UIColor); cdecl;
    function underPageBackgroundColor: UIColor; cdecl;
    function accessibilityName: NSString; cdecl;
  end;

  TUIColor = class(TOCGenericImport<UIColorClass, UIColor>)
  end;

  PUIColor = Pointer;

  UIKitAdditions = interface(IObjectiveC)
    ['{6329C76C-295E-44B1-8AB1-4991C7CF71F8}']
    function initWithColor(color: UIColor): Pointer { instancetype }; cdecl;
    function indexPathForRow(row: NSInteger; inSection: NSInteger)
      : Pointer { instancetype }; cdecl;
    function indexPathForItem(item: NSInteger; inSection: NSInteger)
      : Pointer { instancetype }; cdecl;
    function section: NSInteger; cdecl;
    function row: NSInteger; cdecl;
    function item: NSInteger; cdecl;
    procedure setTeamData(teamData: NSData); cdecl;
    function teamData: NSData; cdecl;
    procedure setPreferredPresentationSize(preferredPresentationSize
      : CGSize); cdecl;
    function preferredPresentationSize: CGSize; cdecl;
    procedure setPreferredPresentationStyle(preferredPresentationStyle
      : UIPreferredPresentationStyle); cdecl;
    function preferredPresentationStyle: UIPreferredPresentationStyle; cdecl;
    [MethodName('initWithImage:')]
    function initWithImage(image: UIImage): Pointer { instancetype }; cdecl;
    [MethodName('initWithImage:options:')]
    function initWithImageOptions(image: UIImage; options: NSDictionary)
      : Pointer { instancetype }; cdecl;
    function targetScene: UIScene; cdecl;
  end;

  UIFontDescriptorClass = interface(NSObjectClass)
    ['{65E209EE-52E1-46CD-9CEB-809BF37CEC3D}']
    { class } function fontDescriptorWithFontAttributes
      (attributes: NSDictionary): UIFontDescriptor; cdecl;
    [MethodName('fontDescriptorWithName:size:')]
    { class } function fontDescriptorWithNameSize(fontName: NSString;
      size: CGFloat): UIFontDescriptor; cdecl;
    [MethodName('fontDescriptorWithName:matrix:')]
    { class } function fontDescriptorWithNameMatrix(fontName: NSString;
      matrix: CGAffineTransform): UIFontDescriptor; cdecl;
    [MethodName('preferredFontDescriptorWithTextStyle:')]
    { class } function preferredFontDescriptorWithTextStyle
      (style: UIFontTextStyle): UIFontDescriptor; cdecl;
    [MethodName
      ('preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:')]
    { class } function
      preferredFontDescriptorWithTextStyleCompatibleWithTraitCollection
      (style: UIFontTextStyle; compatibleWithTraitCollection: UITraitCollection)
      : UIFontDescriptor; cdecl;
  end;

  UIFontDescriptor = interface(NSObject)
    ['{5D2886E3-9150-4E40-B07E-459B66EBF289}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function postscriptName: NSString; cdecl;
    function pointSize: CGFloat; cdecl;
    function matrix: CGAffineTransform; cdecl;
    function symbolicTraits: UIFontDescriptorSymbolicTraits; cdecl;
    function objectForKey(anAttribute: UIFontDescriptorAttributeName)
      : Pointer; cdecl;
    function fontAttributes: NSDictionary; cdecl;
    function matchingFontDescriptorsWithMandatoryKeys(mandatoryKeys: NSSet)
      : NSArray; cdecl;
    function initWithFontAttributes(attributes: NSDictionary)
      : Pointer { instancetype }; cdecl;
    function fontDescriptorByAddingAttributes(attributes: NSDictionary)
      : UIFontDescriptor; cdecl;
    function fontDescriptorWithSize(newPointSize: CGFloat)
      : UIFontDescriptor; cdecl;
    function fontDescriptorWithMatrix(matrix: CGAffineTransform)
      : UIFontDescriptor; cdecl;
    function fontDescriptorWithFace(newFace: NSString): UIFontDescriptor; cdecl;
    function fontDescriptorWithFamily(newFamily: NSString)
      : UIFontDescriptor; cdecl;
    function fontDescriptorWithSymbolicTraits(symbolicTraits
      : UIFontDescriptorSymbolicTraits): UIFontDescriptor; cdecl;
    function fontDescriptorWithDesign(design: UIFontDescriptorSystemDesign)
      : UIFontDescriptor; cdecl;
  end;

  TUIFontDescriptor = class(TOCGenericImport<UIFontDescriptorClass,
    UIFontDescriptor>)
  end;

  PUIFontDescriptor = Pointer;

  UIFontClass = interface(NSObjectClass)
    ['{85C8C26D-9818-430B-87BA-A94118757086}']
    [MethodName('preferredFontForTextStyle:')]
    { class } function preferredFontForTextStyle(style: UIFontTextStyle)
      : UIFont; cdecl;
    [MethodName('preferredFontForTextStyle:compatibleWithTraitCollection:')]
    { class } function preferredFontForTextStyleCompatibleWithTraitCollection
      (style: UIFontTextStyle; compatibleWithTraitCollection: UITraitCollection)
      : UIFont; cdecl;
    { class } function fontWithName(fontName: NSString; size: CGFloat)
      : UIFont; cdecl;
    { class } function fontNamesForFamilyName(familyName: NSString)
      : NSArray; cdecl;
    [MethodName('systemFontOfSize:')]
    { class } function systemFontOfSize(fontSize: CGFloat): UIFont; cdecl;
    { class } function boldSystemFontOfSize(fontSize: CGFloat): UIFont; cdecl;
    { class } function italicSystemFontOfSize(fontSize: CGFloat): UIFont; cdecl;
    [MethodName('systemFontOfSize:weight:')]
    { class } function systemFontOfSizeWeight(fontSize: CGFloat;
      weight: UIFontWeight): UIFont; cdecl;
    { class } function monospacedDigitSystemFontOfSize(fontSize: CGFloat;
      weight: UIFontWeight): UIFont; cdecl;
    [MethodName('systemFontOfSize:weight:width:')]
    { class } function systemFontOfSizeWeightWidth(fontSize: CGFloat;
      weight: UIFontWeight; width: UIFontWidth): UIFont; cdecl;
    { class } function monospacedSystemFontOfSize(fontSize: CGFloat;
      weight: UIFontWeight): UIFont; cdecl;
    { class } function fontWithDescriptor(descriptor: UIFontDescriptor;
      size: CGFloat): UIFont; cdecl;
  end;

  UIFont = interface(NSObject)
    ['{A64ABF3F-D91E-45B7-B359-5FDA6F3C9771}']
    procedure setFamilyNames(familyNames: NSArray); cdecl;
    function familyNames: NSArray; cdecl;
    function familyName: NSString; cdecl;
    function fontName: NSString; cdecl;
    function pointSize: CGFloat; cdecl;
    function ascender: CGFloat; cdecl;
    function descender: CGFloat; cdecl;
    function capHeight: CGFloat; cdecl;
    function xHeight: CGFloat; cdecl;
    function lineHeight: CGFloat; cdecl;
    function leading: CGFloat; cdecl;
    function fontWithSize(fontSize: CGFloat): UIFont; cdecl;
    function fontDescriptor: UIFontDescriptor; cdecl;
    procedure setLabelFontSize(labelFontSize: CGFloat); cdecl;
    function labelFontSize: CGFloat; cdecl;
    procedure setButtonFontSize(buttonFontSize: CGFloat); cdecl;
    function buttonFontSize: CGFloat; cdecl;
    procedure setSmallSystemFontSize(smallSystemFontSize: CGFloat); cdecl;
    function smallSystemFontSize: CGFloat; cdecl;
    procedure setSystemFontSize(systemFontSize: CGFloat); cdecl;
    function systemFontSize: CGFloat; cdecl;
    procedure setDefaultFontSize(defaultFontSize: CGFloat); cdecl;
    function defaultFontSize: CGFloat; cdecl;
    procedure setSystemMinimumFontSize(systemMinimumFontSize: CGFloat); cdecl;
    function systemMinimumFontSize: CGFloat; cdecl;
  end;

  TUIFont = class(TOCGenericImport<UIFontClass, UIFont>)
  end;

  PUIFont = Pointer;

  UIDeviceClass = interface(NSObjectClass)
    ['{CB10B7FF-81DA-4966-90DA-574DD3612DF8}']
  end;

  UIDevice = interface(NSObject)
    ['{03513F40-1E76-4995-828A-51277351178A}']
    procedure setCurrentDevice(currentDevice: UIDevice); cdecl;
    function currentDevice: UIDevice; cdecl;
    function name: NSString; cdecl;
    function model: NSString; cdecl;
    function localizedModel: NSString; cdecl;
    function systemName: NSString; cdecl;
    function systemVersion: NSString; cdecl;
    function orientation: UIDeviceOrientation; cdecl;
    function identifierForVendor: NSUUID; cdecl;
    function isGeneratingDeviceOrientationNotifications: Boolean; cdecl;
    procedure beginGeneratingDeviceOrientationNotifications; cdecl;
    procedure endGeneratingDeviceOrientationNotifications; cdecl;
    procedure setBatteryMonitoringEnabled(batteryMonitoringEnabled
      : Boolean); cdecl;
    function isBatteryMonitoringEnabled: Boolean; cdecl;
    function batteryState: UIDeviceBatteryState; cdecl;
    function batteryLevel: Single; cdecl;
    procedure setProximityMonitoringEnabled(proximityMonitoringEnabled
      : Boolean); cdecl;
    function isProximityMonitoringEnabled: Boolean; cdecl;
    function proximityState: Boolean; cdecl;
    function isMultitaskingSupported: Boolean; cdecl;
    function userInterfaceIdiom: UIUserInterfaceIdiom; cdecl;
    procedure playInputClick; cdecl;
  end;

  TUIDevice = class(TOCGenericImport<UIDeviceClass, UIDevice>)
  end;

  PUIDevice = Pointer;

  NSValueUIGeometryExtensions = interface(IObjectiveC)
    ['{911DFAD2-CFE6-441F-A175-6E9960F9E916}']
    function valueWithCGPoint(point: CGPoint): NSValue; cdecl;
    function valueWithCGVector(vector: CGVector): NSValue; cdecl;
    function valueWithCGSize(size: CGSize): NSValue; cdecl;
    function valueWithCGRect(rect: CGRect): NSValue; cdecl;
    function valueWithCGAffineTransform(transform: CGAffineTransform)
      : NSValue; cdecl;
    function valueWithUIEdgeInsets(insets: UIEdgeInsets): NSValue; cdecl;
    function valueWithDirectionalEdgeInsets(insets: NSDirectionalEdgeInsets)
      : NSValue; cdecl;
    function valueWithUIOffset(insets: UIOffset): NSValue; cdecl;
    function CGPointValue: CGPoint; cdecl;
    function CGVectorValue: CGVector; cdecl;
    function CGSizeValue: CGSize; cdecl;
    function CGRectValue: CGRect; cdecl;
    function CGAffineTransformValue: CGAffineTransform; cdecl;
    function UIEdgeInsetsValue: UIEdgeInsets; cdecl;
    function directionalEdgeInsetsValue: NSDirectionalEdgeInsets; cdecl;
    function UIOffsetValue: UIOffset; cdecl;
  end;

  UIGeometryKeyedCoding = interface(IObjectiveC)
    ['{66DD7F2D-4176-4807-BEA3-A43B23A28CA0}']
    procedure encodeCGPoint(point: CGPoint; forKey: NSString); cdecl;
    procedure encodeCGVector(vector: CGVector; forKey: NSString); cdecl;
    procedure encodeCGSize(size: CGSize; forKey: NSString); cdecl;
    procedure encodeCGRect(rect: CGRect; forKey: NSString); cdecl;
    procedure encodeCGAffineTransform(transform: CGAffineTransform;
      forKey: NSString); cdecl;
    procedure encodeUIEdgeInsets(insets: UIEdgeInsets; forKey: NSString); cdecl;
    procedure encodeDirectionalEdgeInsets(insets: NSDirectionalEdgeInsets;
      forKey: NSString); cdecl;
    procedure encodeUIOffset(offset: UIOffset; forKey: NSString); cdecl;
    function decodeCGPointForKey(key: NSString): CGPoint; cdecl;
    function decodeCGVectorForKey(key: NSString): CGVector; cdecl;
    function decodeCGSizeForKey(key: NSString): CGSize; cdecl;
    function decodeCGRectForKey(key: NSString): CGRect; cdecl;
    function decodeCGAffineTransformForKey(key: NSString)
      : CGAffineTransform; cdecl;
    function decodeUIEdgeInsetsForKey(key: NSString): UIEdgeInsets; cdecl;
    function decodeDirectionalEdgeInsetsForKey(key: NSString)
      : NSDirectionalEdgeInsets; cdecl;
    function decodeUIOffsetForKey(key: NSString): UIOffset; cdecl;
  end;

  UIDynamicAnimatorClass = interface(NSObjectClass)
    ['{39399AAD-4725-463B-AEC0-F445777C41AC}']
  end;

  UIDynamicAnimator = interface(NSObject)
    ['{D7FF3471-921F-48AA-A776-6984C40B0367}']
    function initWithReferenceView(view: UIView)
      : Pointer { instancetype }; cdecl;
    procedure addBehavior(behavior: UIDynamicBehavior); cdecl;
    procedure removeBehavior(behavior: UIDynamicBehavior); cdecl;
    procedure removeAllBehaviors; cdecl;
    function referenceView: UIView; cdecl;
    function behaviors: NSArray; cdecl;
    function itemsInRect(rect: CGRect): NSArray; cdecl;
    procedure updateItemUsingCurrentState(item: Pointer); cdecl;
    function isRunning: Boolean; cdecl;
    function elapsedTime: NSTimeInterval; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function initWithCollectionViewLayout(layout: UICollectionViewLayout)
      : Pointer { instancetype }; cdecl;
    function layoutAttributesForCellAtIndexPath(indexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForSupplementaryViewOfKind(kind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForDecorationViewOfKind(decorationViewKind
      : NSString; atIndexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
  end;

  TUIDynamicAnimator = class(TOCGenericImport<UIDynamicAnimatorClass,
    UIDynamicAnimator>)
  end;

  PUIDynamicAnimator = Pointer;

  UIBezierPathClass = interface(NSObjectClass)
    ['{67AF031E-2BCF-4047-A516-071578ABECA3}']
    { class } function bezierPath: Pointer { instancetype }; cdecl;
    { class } function bezierPathWithRect(rect: CGRect)
      : Pointer { instancetype }; cdecl;
    { class } function bezierPathWithOvalInRect(rect: CGRect)
      : Pointer { instancetype }; cdecl;
    [MethodName('bezierPathWithRoundedRect:cornerRadius:')]
    { class } function bezierPathWithRoundedRectCornerRadius(rect: CGRect;
      cornerRadius: CGFloat): Pointer { instancetype }; cdecl;
    [MethodName('bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:')]
    { class } function bezierPathWithRoundedRectByRoundingCornersCornerRadii
      (rect: CGRect; byRoundingCorners: UIRectCorner; cornerRadii: CGSize)
      : Pointer { instancetype }; cdecl;
    { class } function bezierPathWithArcCenter(center: CGPoint; radius: CGFloat;
      startAngle: CGFloat; endAngle: CGFloat; clockwise: Boolean)
      : Pointer { instancetype }; cdecl;
    { class } function bezierPathWithCGPath(CGPath: CGPathRef)
      : Pointer { instancetype }; cdecl;
  end;

  UIBezierPath = interface(NSObject)
    ['{4C07470A-EF2F-4CBB-A532-0F49B4474272}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setCGPath(CGPath: CGPathRef); cdecl;
    function CGPath: CGPathRef; cdecl;
    procedure moveToPoint(point: CGPoint); cdecl;
    procedure addLineToPoint(point: CGPoint); cdecl;
    procedure addCurveToPoint(endPoint: CGPoint; controlPoint1: CGPoint;
      controlPoint2: CGPoint); cdecl;
    procedure addQuadCurveToPoint(endPoint: CGPoint;
      controlPoint: CGPoint); cdecl;
    procedure addArcWithCenter(center: CGPoint; radius: CGFloat;
      startAngle: CGFloat; endAngle: CGFloat; clockwise: Boolean); cdecl;
    procedure closePath; cdecl;
    procedure removeAllPoints; cdecl;
    procedure appendPath(bezierPath: UIBezierPath); cdecl;
    function bezierPathByReversingPath: UIBezierPath; cdecl;
    procedure applyTransform(transform: CGAffineTransform); cdecl;
    function isEmpty: Boolean; cdecl;
    function bounds: CGRect; cdecl;
    function currentPoint: CGPoint; cdecl;
    function containsPoint(point: CGPoint): Boolean; cdecl;
    procedure setLineWidth(lineWidth: CGFloat); cdecl;
    function lineWidth: CGFloat; cdecl;
    procedure setLineCapStyle(lineCapStyle: CGLineCap); cdecl;
    function lineCapStyle: CGLineCap; cdecl;
    procedure setLineJoinStyle(lineJoinStyle: CGLineJoin); cdecl;
    function lineJoinStyle: CGLineJoin; cdecl;
    procedure setMiterLimit(miterLimit: CGFloat); cdecl;
    function miterLimit: CGFloat; cdecl;
    procedure setFlatness(flatness: CGFloat); cdecl;
    function flatness: CGFloat; cdecl;
    procedure setUsesEvenOddFillRule(usesEvenOddFillRule: Boolean); cdecl;
    function usesEvenOddFillRule: Boolean; cdecl;
    procedure setLineDash(pattern: PCGFloat; count: NSInteger;
      phase: CGFloat); cdecl;
    procedure getLineDash(pattern: PCGFloat; count: PNSInteger;
      phase: PCGFloat); cdecl;
    procedure fill; cdecl;
    procedure stroke; cdecl;
    procedure fillWithBlendMode(blendMode: CGBlendMode; alpha: CGFloat); cdecl;
    procedure strokeWithBlendMode(blendMode: CGBlendMode;
      alpha: CGFloat); cdecl;
    procedure addClip; cdecl;
  end;

  TUIBezierPath = class(TOCGenericImport<UIBezierPathClass, UIBezierPath>)
  end;

  PUIBezierPath = Pointer;

  UIDynamicItemGroupClass = interface(NSObjectClass)
    ['{E410C174-D28F-4307-9CC3-E34DA656EE9B}']
  end;

  UIDynamicItemGroup = interface(NSObject)
    ['{E36E8D0C-F2CD-4121-91B9-2E154FF16D34}']
    function initWithItems(items: NSArray): Pointer { instancetype }; cdecl;
    function items: NSArray; cdecl;
  end;

  TUIDynamicItemGroup = class(TOCGenericImport<UIDynamicItemGroupClass,
    UIDynamicItemGroup>)
  end;

  PUIDynamicItemGroup = Pointer;

  UIDynamicBehaviorClass = interface(NSObjectClass)
    ['{8B4D055C-D049-4883-B201-0F76A4770F69}']
  end;

  UIDynamicBehavior = interface(NSObject)
    ['{75307AFE-5EEE-4E9E-8A96-38937B412B40}']
    procedure addChildBehavior(behavior: UIDynamicBehavior); cdecl;
    procedure removeChildBehavior(behavior: UIDynamicBehavior); cdecl;
    function childBehaviors: NSArray; cdecl;
    procedure setAction(action: TUIKitAction); cdecl;
    function action: TUIKitAction; cdecl;
    procedure willMoveToAnimator(dynamicAnimator: UIDynamicAnimator); cdecl;
    function dynamicAnimator: UIDynamicAnimator; cdecl;
  end;

  TUIDynamicBehavior = class(TOCGenericImport<UIDynamicBehaviorClass,
    UIDynamicBehavior>)
  end;

  PUIDynamicBehavior = Pointer;

  NSLayoutAnchorClass = interface(NSObjectClass)
    ['{E01B3B12-FD7F-4980-ADC6-B91A64B14E70}']
  end;

  NSLayoutAnchor = interface(NSObject)
    ['{46FB4F29-6FF7-4C81-8B62-FB5D56A69634}']
    [MethodName('constraintEqualToAnchor:')]
    function constraintEqualToAnchor(anchor: NSLayoutAnchor)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintGreaterThanOrEqualToAnchor:')]
    function constraintGreaterThanOrEqualToAnchor(anchor: NSLayoutAnchor)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintLessThanOrEqualToAnchor:')]
    function constraintLessThanOrEqualToAnchor(anchor: NSLayoutAnchor)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintEqualToAnchor:constant:')]
    function constraintEqualToAnchorConstant(anchor: NSLayoutAnchor;
      constant: CGFloat): NSLayoutConstraint; cdecl;
    [MethodName('constraintGreaterThanOrEqualToAnchor:constant:')]
    function constraintGreaterThanOrEqualToAnchorConstant
      (anchor: NSLayoutAnchor; constant: CGFloat): NSLayoutConstraint; cdecl;
    [MethodName('constraintLessThanOrEqualToAnchor:constant:')]
    function constraintLessThanOrEqualToAnchorConstant(anchor: NSLayoutAnchor;
      constant: CGFloat): NSLayoutConstraint; cdecl;
    function name: NSString; cdecl;
    function item: Pointer; cdecl;
    function hasAmbiguousLayout: Boolean; cdecl;
    function constraintsAffectingLayout: NSArray; cdecl;
  end;

  TNSLayoutAnchor = class(TOCGenericImport<NSLayoutAnchorClass, NSLayoutAnchor>)
  end;

  PNSLayoutAnchor = Pointer;

  NSLayoutConstraintClass = interface(NSObjectClass)
    ['{22A8E7B5-8573-4959-B808-3252164832DD}']
    { class } function constraintsWithVisualFormat(format: NSString;
      options: NSLayoutFormatOptions; metrics: NSDictionary;
      views: NSDictionary): NSArray; cdecl;
    [MethodName
      ('constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:')
      ]
    { class } function constraintWithItem(view1: Pointer;
      attribute: NSLayoutAttribute; relatedBy: NSLayoutRelation;
      toItem: Pointer; attribute1: NSLayoutAttribute; multiplier: CGFloat;
      constant: CGFloat): Pointer { instancetype }; cdecl;
    { class } procedure activateConstraints(constraints: NSArray); cdecl;
    { class } procedure deactivateConstraints(constraints: NSArray); cdecl;
  end;

  NSLayoutConstraint = interface(NSObject)
    ['{454C4E05-86B3-41C5-9907-4BC141D329DA}']
    procedure setPriority(priority: UILayoutPriority); cdecl;
    function priority: UILayoutPriority; cdecl;
    procedure setShouldBeArchived(shouldBeArchived: Boolean); cdecl;
    function shouldBeArchived: Boolean; cdecl;
    function firstItem: Pointer; cdecl;
    function secondItem: Pointer; cdecl;
    function firstAttribute: NSLayoutAttribute; cdecl;
    function secondAttribute: NSLayoutAttribute; cdecl;
    function firstAnchor: NSLayoutAnchor; cdecl;
    function secondAnchor: NSLayoutAnchor; cdecl;
    function relation: NSLayoutRelation; cdecl;
    function multiplier: CGFloat; cdecl;
    procedure setConstant(constant: CGFloat); cdecl;
    function constant: CGFloat; cdecl;
    procedure setActive(active: Boolean); cdecl;
    function isActive: Boolean; cdecl;
    procedure setIdentifier(identifier: NSString); cdecl;
    function identifier: NSString; cdecl;
  end;

  TNSLayoutConstraint = class(TOCGenericImport<NSLayoutConstraintClass,
    NSLayoutConstraint>)
  end;

  PNSLayoutConstraint = Pointer;

  NSLayoutYAxisAnchorClass = interface(NSLayoutAnchorClass)
    ['{538EE3BB-798E-4193-967B-541F35F921C3}']
  end;

  NSLayoutYAxisAnchor = interface(NSLayoutAnchor)
    ['{6B1E8BA4-A3CB-4AA1-8C6D-9EB49ABA6E18}']
    function anchorWithOffsetToAnchor(otherAnchor: NSLayoutYAxisAnchor)
      : NSLayoutDimension; cdecl;
    function constraintEqualToSystemSpacingBelowAnchor
      (anchor: NSLayoutYAxisAnchor; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
    function constraintGreaterThanOrEqualToSystemSpacingBelowAnchor
      (anchor: NSLayoutYAxisAnchor; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
    function constraintLessThanOrEqualToSystemSpacingBelowAnchor
      (anchor: NSLayoutYAxisAnchor; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
  end;

  TNSLayoutYAxisAnchor = class(TOCGenericImport<NSLayoutYAxisAnchorClass,
    NSLayoutYAxisAnchor>)
  end;

  PNSLayoutYAxisAnchor = Pointer;

  NSLayoutDimensionClass = interface(NSLayoutAnchorClass)
    ['{4600B078-8241-4E58-A28D-A49D9B5C8C7A}']
  end;

  NSLayoutDimension = interface(NSLayoutAnchor)
    ['{51162E8A-18BF-4432-BB6F-53CA1850DF1E}']
    function constraintEqualToConstant(c: CGFloat): NSLayoutConstraint; cdecl;
    function constraintGreaterThanOrEqualToConstant(c: CGFloat)
      : NSLayoutConstraint; cdecl;
    function constraintLessThanOrEqualToConstant(c: CGFloat)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintEqualToAnchor:multiplier:')]
    function constraintEqualToAnchorMultiplier(anchor: NSLayoutDimension;
      multiplier: CGFloat): NSLayoutConstraint; cdecl;
    [MethodName('constraintGreaterThanOrEqualToAnchor:multiplier:')]
    function constraintGreaterThanOrEqualToAnchorMultiplier
      (anchor: NSLayoutDimension; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintLessThanOrEqualToAnchor:multiplier:')]
    function constraintLessThanOrEqualToAnchorMultiplier
      (anchor: NSLayoutDimension; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintEqualToAnchor:multiplier:constant:')]
    function constraintEqualToAnchorMultiplierConstant
      (anchor: NSLayoutDimension; multiplier: CGFloat; constant: CGFloat)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintGreaterThanOrEqualToAnchor:multiplier:constant:')]
    function constraintGreaterThanOrEqualToAnchorMultiplierConstant
      (anchor: NSLayoutDimension; multiplier: CGFloat; constant: CGFloat)
      : NSLayoutConstraint; cdecl;
    [MethodName('constraintLessThanOrEqualToAnchor:multiplier:constant:')]
    function constraintLessThanOrEqualToAnchorMultiplierConstant
      (anchor: NSLayoutDimension; multiplier: CGFloat; constant: CGFloat)
      : NSLayoutConstraint; cdecl;
  end;

  TNSLayoutDimension = class(TOCGenericImport<NSLayoutDimensionClass,
    NSLayoutDimension>)
  end;

  PNSLayoutDimension = Pointer;

  UIImageConfigurationClass = interface(NSObjectClass)
    ['{E1E97F0D-5784-4A84-A744-03F9159C27C8}']
  end;

  UIImageConfiguration = interface(NSObject)
    ['{EA48DC7D-7BA2-438F-A9A6-EB7B82A9D45C}']
    function traitCollection: UITraitCollection; cdecl;
    function configurationWithTraitCollection(traitCollection
      : UITraitCollection): Pointer { instancetype }; cdecl;
    function configurationByApplyingConfiguration(otherConfiguration
      : UIImageConfiguration): Pointer { instancetype }; cdecl;
  end;

  TUIImageConfiguration = class(TOCGenericImport<UIImageConfigurationClass,
    UIImageConfiguration>)
  end;

  PUIImageConfiguration = Pointer;

  NSLayoutXAxisAnchorClass = interface(NSLayoutAnchorClass)
    ['{90D7F6DB-375D-4BB6-AE99-A424CB5570BA}']
  end;

  NSLayoutXAxisAnchor = interface(NSLayoutAnchor)
    ['{62000D55-EDAB-4BBC-AC41-23603FDD6A29}']
    function anchorWithOffsetToAnchor(otherAnchor: NSLayoutXAxisAnchor)
      : NSLayoutDimension; cdecl;
    function constraintEqualToSystemSpacingAfterAnchor
      (anchor: NSLayoutXAxisAnchor; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
    function constraintGreaterThanOrEqualToSystemSpacingAfterAnchor
      (anchor: NSLayoutXAxisAnchor; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
    function constraintLessThanOrEqualToSystemSpacingAfterAnchor
      (anchor: NSLayoutXAxisAnchor; multiplier: CGFloat)
      : NSLayoutConstraint; cdecl;
  end;

  TNSLayoutXAxisAnchor = class(TOCGenericImport<NSLayoutXAxisAnchorClass,
    NSLayoutXAxisAnchor>)
  end;

  PNSLayoutXAxisAnchor = Pointer;

  UILayoutGuideClass = interface(NSObjectClass)
    ['{46E707D5-2B39-4C0E-A003-9D7621DA621F}']
  end;

  UILayoutGuide = interface(NSObject)
    ['{3752512D-AAF6-415A-8838-EA0E702B1766}']
    function layoutFrame: CGRect; cdecl;
    procedure setOwningView(owningView: UIView); cdecl;
    function owningView: UIView; cdecl;
    procedure setIdentifier(identifier: NSString); cdecl;
    function identifier: NSString; cdecl;
    function leadingAnchor: NSLayoutXAxisAnchor; cdecl;
    function trailingAnchor: NSLayoutXAxisAnchor; cdecl;
    function leftAnchor: NSLayoutXAxisAnchor; cdecl;
    function rightAnchor: NSLayoutXAxisAnchor; cdecl;
    function topAnchor: NSLayoutYAxisAnchor; cdecl;
    function bottomAnchor: NSLayoutYAxisAnchor; cdecl;
    function widthAnchor: NSLayoutDimension; cdecl;
    function heightAnchor: NSLayoutDimension; cdecl;
    function centerXAnchor: NSLayoutXAxisAnchor; cdecl;
    function centerYAnchor: NSLayoutYAxisAnchor; cdecl;
    function constraintsAffectingLayoutForAxis(axis: UILayoutConstraintAxis)
      : NSArray; cdecl;
    function hasAmbiguousLayout: Boolean; cdecl;
  end;

  TUILayoutGuide = class(TOCGenericImport<UILayoutGuideClass, UILayoutGuide>)
  end;

  PUILayoutGuide = Pointer;

  UIFocusGuideClass = interface(UILayoutGuideClass)
    ['{E239E676-75A1-4541-9905-D11CEA1E44F0}']
  end;

  UIFocusGuide = interface(UILayoutGuide)
    ['{7A8E6831-AD0D-46D1-B202-3555F2EB57B6}']
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setPreferredFocusEnvironments(preferredFocusEnvironments
      : NSArray); cdecl;
    function preferredFocusEnvironments: NSArray; cdecl;
    procedure setPreferredFocusedView(preferredFocusedView: UIView); cdecl;
    function preferredFocusedView: UIView; cdecl;
  end;

  TUIFocusGuide = class(TOCGenericImport<UIFocusGuideClass, UIFocusGuide>)
  end;

  PUIFocusGuide = Pointer;

  UIFocusAnimationCoordinatorClass = interface(NSObjectClass)
    ['{2D31C8EB-B519-41F2-85E3-66D37EAFC27C}']
  end;

  UIFocusAnimationCoordinator = interface(NSObject)
    ['{26B1D6B6-9CC6-4C59-B816-A027125D2306}']
    procedure addCoordinatedAnimations(animations: TUIKitAction;
      completion: TUIKitAction); cdecl;
    procedure addCoordinatedFocusingAnimations(animations: TUIKitAnimations;
      completion: TUIKitAction); cdecl;
    procedure addCoordinatedUnfocusingAnimations(animations: TUIKitAnimations;
      completion: TUIKitAction); cdecl;
  end;

  TUIFocusAnimationCoordinator = class
    (TOCGenericImport<UIFocusAnimationCoordinatorClass,
    UIFocusAnimationCoordinator>)
  end;

  PUIFocusAnimationCoordinator = Pointer;

  UIFocusUpdateContextClass = interface(NSObjectClass)
    ['{2D49189B-AFF8-41C1-9912-AA0059F4856C}']
  end;

  UIFocusUpdateContext = interface(NSObject)
    ['{0D2AC749-36C8-4468-9E6B-7CFDEA4E2CC0}']
    function previouslyFocusedItem: Pointer; cdecl;
    function nextFocusedItem: Pointer; cdecl;
    function previouslyFocusedView: UIView; cdecl;
    function nextFocusedView: UIView; cdecl;
    function focusHeading: UIFocusHeading; cdecl;
  end;

  TUIFocusUpdateContext = class(TOCGenericImport<UIFocusUpdateContextClass,
    UIFocusUpdateContext>)
  end;

  PUIFocusUpdateContext = Pointer;

  UIFocusMovementHintClass = interface(NSObjectClass)
    ['{47AA69FB-D4C5-4018-B51F-8CF24CF3E4FE}']
  end;

  UIFocusMovementHint = interface(NSObject)
    ['{12440110-0581-44E7-A92A-75C97EA65595}']
    function movementDirection: CGVector; cdecl;
    function perspectiveTransform: CATransform3D; cdecl;
    function rotation: CGVector; cdecl;
    function translation: CGVector; cdecl;
    function interactionTransform: CATransform3D; cdecl;
  end;

  TUIFocusMovementHint = class(TOCGenericImport<UIFocusMovementHintClass,
    UIFocusMovementHint>)
  end;

  PUIFocusMovementHint = Pointer;

  UIFocusEffectClass = interface(NSObjectClass)
    ['{0137791C-F4F1-4956-BBB9-46082A538121}']
    { class } function effect: Pointer { instancetype }; cdecl;
  end;

  UIFocusEffect = interface(NSObject)
    ['{BA2AB6DC-08B9-4F10-8A37-A719FF9E53A8}']
  end;

  TUIFocusEffect = class(TOCGenericImport<UIFocusEffectClass, UIFocusEffect>)
  end;

  PUIFocusEffect = Pointer;

  UIMotionEffectClass = interface(NSObjectClass)
    ['{E5840980-8167-4C63-830B-87817A9B800E}']
  end;

  UIMotionEffect = interface(NSObject)
    ['{205DAD04-049C-46E5-AA14-4BCB5B4DBCC5}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function keyPathsAndRelativeValuesForViewerOffset(viewerOffset: UIOffset)
      : NSDictionary; cdecl;
  end;

  TUIMotionEffect = class(TOCGenericImport<UIMotionEffectClass, UIMotionEffect>)
  end;

  PUIMotionEffect = Pointer;

  UITrackingLayoutGuideClass = interface(UILayoutGuideClass)
    ['{B86F06F2-F848-4E9E-A26E-3634E6B16FFA}']
  end;

  UITrackingLayoutGuide = interface(UILayoutGuide)
    ['{8F52A83D-86C8-4372-AAC1-6C747D5E0B21}']
    [MethodName('setConstraints:activeWhenNearEdge:')]
    procedure setConstraintsActiveWhenNearEdge(trackingConstraints: NSArray;
      activeWhenNearEdge: NSDirectionalRectEdge); cdecl;
    function constraintsActiveWhenNearEdge(edge: NSDirectionalRectEdge)
      : NSArray; cdecl;
    [MethodName('setConstraints:activeWhenAwayFromEdge:')]
    procedure setConstraintsActiveWhenAwayFromEdge(trackingConstraints: NSArray;
      activeWhenAwayFromEdge: NSDirectionalRectEdge); cdecl;
    function constraintsActiveWhenAwayFromEdge(edge: NSDirectionalRectEdge)
      : NSArray; cdecl;
    procedure removeAllTrackedConstraints; cdecl;
  end;

  TUITrackingLayoutGuide = class(TOCGenericImport<UITrackingLayoutGuideClass,
    UITrackingLayoutGuide>)
  end;

  PUITrackingLayoutGuide = Pointer;

  UIKeyboardLayoutGuideClass = interface(UITrackingLayoutGuideClass)
    ['{F51D82EB-2DA2-4636-99CA-FD1472C176AA}']
  end;

  UIKeyboardLayoutGuide = interface(UITrackingLayoutGuide)
    ['{3B1C4FF2-2574-4549-80F2-7E01D12CEE06}']
    procedure setFollowsUndockedKeyboard(followsUndockedKeyboard
      : Boolean); cdecl;
    function followsUndockedKeyboard: Boolean; cdecl;
  end;

  TUIKeyboardLayoutGuide = class(TOCGenericImport<UIKeyboardLayoutGuideClass,
    UIKeyboardLayoutGuide>)
  end;

  PUIKeyboardLayoutGuide = Pointer;

  UIActionClass = interface(UIMenuElementClass)
    ['{016B7EF5-F5DC-42C0-88B9-E19DEFEFD1D6}']
    { class } function actionWithHandler(handler: UIActionHandler)
      : Pointer { instancetype }; cdecl;
    { class } function actionWithTitle(title: NSString; image: UIImage;
      identifier: UIActionIdentifier; handler: UIActionHandler)
      : Pointer { instancetype }; cdecl;
    { class } function captureTextFromCameraActionForResponder
      (responder: UIResponder; identifier: UIActionIdentifier)
      : Pointer { instancetype }; cdecl;
  end;

  UIAction = interface(UIMenuElement)
    ['{B345FC57-13C5-4C59-89D1-DBB4AEBED0CD}']
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    function discoverabilityTitle: NSString; cdecl;
    function identifier: UIActionIdentifier; cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    function attributes: UIMenuElementAttributes; cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    function state: UIMenuElementState; cdecl;
    function sender: Pointer; cdecl;
  end;

  TUIAction = class(TOCGenericImport<UIActionClass, UIAction>)
  end;

  PUIAction = Pointer;

  UIContextMenuConfigurationClass = interface(NSObjectClass)
    ['{FFC20528-9C4B-47BB-BB83-CA925635A821}']
    { class } function configurationWithIdentifier(identifier: Pointer;
      previewProvider: UIContextMenuContentPreviewProvider;
      actionProvider: UIContextMenuActionProvider)
      : Pointer { instancetype }; cdecl;
  end;

  UIContextMenuConfiguration = interface(NSObject)
    ['{74A10A23-4C37-47C8-9CF8-074A532F2F33}']
    function identifier: Pointer; cdecl;
    procedure setSecondaryItemIdentifiers(secondaryItemIdentifiers
      : NSSet); cdecl;
    function secondaryItemIdentifiers: NSSet; cdecl;
    procedure setBadgeCount(badgeCount: NSInteger); cdecl;
    function badgeCount: NSInteger; cdecl;
    procedure setPreferredMenuElementOrder(preferredMenuElementOrder
      : UIContextMenuConfigurationElementOrder); cdecl;
    function preferredMenuElementOrder
      : UIContextMenuConfigurationElementOrder; cdecl;
  end;

  TUIContextMenuConfiguration = class
    (TOCGenericImport<UIContextMenuConfigurationClass,
    UIContextMenuConfiguration>)
  end;

  PUIContextMenuConfiguration = Pointer;

  UITargetedPreviewClass = interface(NSObjectClass)
    ['{912A0333-615B-4CCD-8E56-F439B247E586}']
  end;

  UITargetedPreview = interface(NSObject)
    ['{B5590284-5539-4EF6-8F19-926777561238}']
    [MethodName('initWithView:parameters:target:')]
    function initWithViewParametersTarget(view: UIView;
      parameters: UIPreviewParameters; target: UIPreviewTarget)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithView:parameters:')]
    function initWithViewParameters(view: UIView;
      parameters: UIPreviewParameters): Pointer { instancetype }; cdecl;
    [MethodName('initWithView:')]
    function initWithView(view: UIView): Pointer { instancetype }; cdecl;
    function target: UIPreviewTarget; cdecl;
    function view: UIView; cdecl;
    function parameters: UIPreviewParameters; cdecl;
    function size: CGSize; cdecl;
    function retargetedPreviewWithTarget(newTarget: UIPreviewTarget)
      : UITargetedPreview; cdecl;
  end;

  TUITargetedPreview = class(TOCGenericImport<UITargetedPreviewClass,
    UITargetedPreview>)
  end;

  PUITargetedPreview = Pointer;

  UIContextMenuInteractionClass = interface(NSObjectClass)
    ['{B9ED9C63-A42E-469D-9D28-A6257A8628D9}']
  end;

  UIContextMenuInteraction = interface(NSObject)
    ['{C8AB84A7-B71D-488C-B06C-7F53338865F9}']
    function delegate: Pointer; cdecl;
    function menuAppearance: UIContextMenuInteractionAppearance; cdecl;
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    procedure updateVisibleMenuWithBlock(block: TUIKitBlock); cdecl;
    procedure dismissMenu; cdecl;
  end;

  TUIContextMenuInteraction = class
    (TOCGenericImport<UIContextMenuInteractionClass, UIContextMenuInteraction>)
  end;

  PUIContextMenuInteraction = Pointer;

  UIToolTipInteractionClass = interface(NSObjectClass)
    ['{650FAA41-730F-49A4-8D7D-04099DA796B6}']
  end;

  UIToolTipInteraction = interface(NSObject)
    ['{F5E1AE08-9C5E-4410-B2A2-DE09B0A97191}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setDefaultToolTip(defaultToolTip: NSString); cdecl;
    function defaultToolTip: NSString; cdecl;
    function init: Pointer { instancetype }; cdecl;
    function initWithDefaultToolTip(defaultToolTip: NSString)
      : Pointer { instancetype }; cdecl;
  end;

  TUIToolTipInteraction = class(TOCGenericImport<UIToolTipInteractionClass,
    UIToolTipInteraction>)
  end;

  PUIToolTipInteraction = Pointer;

  UIControlClass = interface(UIViewClass)
    ['{D592D232-DD38-434A-BBE0-36543CECD764}']
  end;

  UIControl = interface(UIView)
    ['{EB4B7D5D-7D24-45C5-84BA-F43AE8CE81A5}']
    [MethodName('initWithFrame:')]
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    [MethodName('initWithFrame:primaryAction:')]
    function initWithFramePrimaryAction(frame: CGRect; primaryAction: UIAction)
      : Pointer { instancetype }; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    function isSelected: Boolean; cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    function isHighlighted: Boolean; cdecl;
    procedure setContentVerticalAlignment(contentVerticalAlignment
      : UIControlContentVerticalAlignment); cdecl;
    function contentVerticalAlignment: UIControlContentVerticalAlignment; cdecl;
    procedure setContentHorizontalAlignment(contentHorizontalAlignment
      : UIControlContentHorizontalAlignment); cdecl;
    function contentHorizontalAlignment
      : UIControlContentHorizontalAlignment; cdecl;
    function effectiveContentHorizontalAlignment
      : UIControlContentHorizontalAlignment; cdecl;
    function state: UIControlState; cdecl;
    function isTracking: Boolean; cdecl;
    function isTouchInside: Boolean; cdecl;
    function beginTrackingWithTouch(touch: UITouch; withEvent: UIEvent)
      : Boolean; cdecl;
    function continueTrackingWithTouch(touch: UITouch; withEvent: UIEvent)
      : Boolean; cdecl;
    procedure endTrackingWithTouch(touch: UITouch; withEvent: UIEvent); cdecl;
    procedure cancelTrackingWithEvent(event: UIEvent); cdecl;
    procedure addTarget(target: Pointer; action: SEL;
      forControlEvents: UIControlEvents); cdecl;
    procedure removeTarget(target: Pointer; action: SEL;
      forControlEvents: UIControlEvents); cdecl;
    procedure addAction(action: UIAction;
      forControlEvents: UIControlEvents); cdecl;
    procedure removeAction(action: UIAction;
      forControlEvents: UIControlEvents); cdecl;
    procedure removeActionForIdentifier(actionIdentifier: UIActionIdentifier;
      forControlEvents: UIControlEvents); cdecl;
    function allTargets: NSSet; cdecl;
    function allControlEvents: UIControlEvents; cdecl;
    function actionsForTarget(target: Pointer; forControlEvent: UIControlEvents)
      : NSArray; cdecl;
    procedure enumerateEventHandlers(iterator: TUIKitIterator); cdecl;
    [MethodName('sendAction:to:forEvent:')]
    procedure sendActionToForEvent(action: SEL; &to: Pointer;
      forEvent: UIEvent); cdecl;
    [MethodName('sendAction:')]
    procedure sendAction(action: UIAction); cdecl;
    procedure sendActionsForControlEvents(controlEvents
      : UIControlEvents); cdecl;
    [MethodName('contextMenuInteraction')]
    function contextMenuInteraction: UIContextMenuInteraction; cdecl;
    procedure setContextMenuInteractionEnabled(contextMenuInteractionEnabled
      : Boolean); cdecl;
    function isContextMenuInteractionEnabled: Boolean; cdecl;
    procedure setShowsMenuAsPrimaryAction(showsMenuAsPrimaryAction
      : Boolean); cdecl;
    function showsMenuAsPrimaryAction: Boolean; cdecl;
    function menuAttachmentPointForConfiguration(configuration
      : UIContextMenuConfiguration): CGPoint; cdecl;
    procedure setToolTip(toolTip: NSString); cdecl;
    function toolTip: NSString; cdecl;
    function toolTipInteraction: UIToolTipInteraction; cdecl;
    [MethodName('contextMenuInteraction:configurationForMenuAtLocation:')]
    function contextMenuInteractionConfigurationForMenuAtLocation
      (interaction: UIContextMenuInteraction;
      configurationForMenuAtLocation: CGPoint)
      : UIContextMenuConfiguration; cdecl;
    [MethodName
      ('contextMenuInteraction:previewForHighlightingMenuWithConfiguration:')]
    function contextMenuInteractionPreviewForHighlightingMenuWithConfiguration
      (interaction: UIContextMenuInteraction;
      previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration)
      : UITargetedPreview; cdecl;
    [MethodName
      ('contextMenuInteraction:previewForDismissingMenuWithConfiguration:')]
    function contextMenuInteractionPreviewForDismissingMenuWithConfiguration
      (interaction: UIContextMenuInteraction;
      previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration)
      : UITargetedPreview; cdecl;
    [MethodName
      ('contextMenuInteraction:willDisplayMenuForConfiguration:animator:')]
    procedure contextMenuInteractionWillDisplayMenuForConfigurationAnimator
      (interaction: UIContextMenuInteraction;
      willDisplayMenuForConfiguration: UIContextMenuConfiguration;
      animator: Pointer); cdecl;
    [MethodName('contextMenuInteraction:willEndForConfiguration:animator:')]
    procedure contextMenuInteractionWillEndForConfigurationAnimator
      (interaction: UIContextMenuInteraction;
      willEndForConfiguration: UIContextMenuConfiguration;
      animator: Pointer); cdecl;
  end;

  TUIControl = class(TOCGenericImport<UIControlClass, UIControl>)
  end;

  PUIControl = Pointer;

  NSTextListClass = interface(NSObjectClass)
    ['{BEEAAB98-ADCB-4486-B7F3-0BE94264B18F}']
  end;

  NSTextList = interface(NSObject)
    ['{754C3A34-FC88-4EF6-B4B0-1511A6C41331}']
    [MethodName('initWithMarkerFormat:options:startingItemNumber:')]
    function initWithMarkerFormatOptionsStartingItemNumber
      (markerFormat: NSTextListMarkerFormat; options: NSTextListOptions;
      startingItemNumber: NSInteger): Pointer { instancetype }; cdecl;
    [MethodName('initWithMarkerFormat:options:')]
    function initWithMarkerFormatOptions(markerFormat: NSTextListMarkerFormat;
      options: NSUInteger): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function markerFormat: NSTextListMarkerFormat; cdecl;
    function listOptions: NSTextListOptions; cdecl;
    procedure setStartingItemNumber(startingItemNumber: NSInteger); cdecl;
    function startingItemNumber: NSInteger; cdecl;
    function isOrdered: Boolean; cdecl;
    function markerForItemNumber(itemNumber: NSInteger): NSString; cdecl;
  end;

  TNSTextList = class(TOCGenericImport<NSTextListClass, NSTextList>)
  end;

  PNSTextList = Pointer;

  NSTextTabClass = interface(NSObjectClass)
    ['{9093692C-2E7A-4B29-8BD4-6709AD19BD55}']
    { class } function columnTerminatorsForLocale(aLocale: NSLocale)
      : NSCharacterSet; cdecl;
  end;

  NSTextTab = interface(NSObject)
    ['{0D324C44-A83D-4821-AE63-F8FF06E762BC}']
    function initWithTextAlignment(alignment: NSTextAlignment;
      location: CGFloat; options: NSDictionary)
      : Pointer { instancetype }; cdecl;
    function alignment: NSTextAlignment; cdecl;
    function location: CGFloat; cdecl;
    function options: NSDictionary; cdecl;
  end;

  TNSTextTab = class(TOCGenericImport<NSTextTabClass, NSTextTab>)
  end;

  PNSTextTab = Pointer;

  NSParagraphStyleClass = interface(NSObjectClass)
    ['{995DF590-A7C2-42A1-97A0-0BDCE82D4491}']
    { class } function defaultWritingDirectionForLanguage
      (languageName: NSString): NSWritingDirection; cdecl;
  end;

  NSParagraphStyle = interface(NSObject)
    ['{C1B9D942-AA27-4668-8A4C-67E79D20F4A0}']
    procedure setDefaultParagraphStyle(defaultParagraphStyle
      : NSParagraphStyle); cdecl;
    function defaultParagraphStyle: NSParagraphStyle; cdecl;
    function lineSpacing: CGFloat; cdecl;
    function paragraphSpacing: CGFloat; cdecl;
    function alignment: NSTextAlignment; cdecl;
    function headIndent: CGFloat; cdecl;
    function tailIndent: CGFloat; cdecl;
    function firstLineHeadIndent: CGFloat; cdecl;
    function minimumLineHeight: CGFloat; cdecl;
    function maximumLineHeight: CGFloat; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    function baseWritingDirection: NSWritingDirection; cdecl;
    function lineHeightMultiple: CGFloat; cdecl;
    function paragraphSpacingBefore: CGFloat; cdecl;
    function hyphenationFactor: Single; cdecl;
    function usesDefaultHyphenation: Boolean; cdecl;
    function tabStops: NSArray; cdecl;
    function defaultTabInterval: CGFloat; cdecl;
    function textLists: NSArray; cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    function lineBreakStrategy: NSLineBreakStrategy; cdecl;
  end;

  TNSParagraphStyle = class(TOCGenericImport<NSParagraphStyleClass,
    NSParagraphStyle>)
  end;

  PNSParagraphStyle = Pointer;

  NSMutableParagraphStyleClass = interface(NSParagraphStyleClass)
    ['{BD54B947-1F60-4EDF-AE17-AE90F16C0C76}']
  end;

  NSMutableParagraphStyle = interface(NSParagraphStyle)
    ['{F3FACCD7-DEBB-4890-8E66-D167456AA5D8}']
    procedure setLineSpacing(lineSpacing: CGFloat); cdecl;
    function lineSpacing: CGFloat; cdecl;
    procedure setParagraphSpacing(paragraphSpacing: CGFloat); cdecl;
    function paragraphSpacing: CGFloat; cdecl;
    procedure setAlignment(alignment: NSTextAlignment); cdecl;
    function alignment: NSTextAlignment; cdecl;
    procedure setFirstLineHeadIndent(firstLineHeadIndent: CGFloat); cdecl;
    function firstLineHeadIndent: CGFloat; cdecl;
    procedure setHeadIndent(headIndent: CGFloat); cdecl;
    function headIndent: CGFloat; cdecl;
    procedure setTailIndent(tailIndent: CGFloat); cdecl;
    function tailIndent: CGFloat; cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    procedure setMinimumLineHeight(minimumLineHeight: CGFloat); cdecl;
    function minimumLineHeight: CGFloat; cdecl;
    procedure setMaximumLineHeight(maximumLineHeight: CGFloat); cdecl;
    function maximumLineHeight: CGFloat; cdecl;
    procedure setBaseWritingDirection(baseWritingDirection
      : NSWritingDirection); cdecl;
    function baseWritingDirection: NSWritingDirection; cdecl;
    procedure setLineHeightMultiple(lineHeightMultiple: CGFloat); cdecl;
    function lineHeightMultiple: CGFloat; cdecl;
    procedure setParagraphSpacingBefore(paragraphSpacingBefore: CGFloat); cdecl;
    function paragraphSpacingBefore: CGFloat; cdecl;
    procedure setHyphenationFactor(hyphenationFactor: Single); cdecl;
    function hyphenationFactor: Single; cdecl;
    procedure setUsesDefaultHyphenation(usesDefaultHyphenation: Boolean); cdecl;
    function usesDefaultHyphenation: Boolean; cdecl;
    procedure setTabStops(tabStops: NSArray); cdecl;
    function tabStops: NSArray; cdecl;
    procedure setDefaultTabInterval(defaultTabInterval: CGFloat); cdecl;
    function defaultTabInterval: CGFloat; cdecl;
    procedure setAllowsDefaultTighteningForTruncation
      (allowsDefaultTighteningForTruncation: Boolean); cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    procedure setLineBreakStrategy(lineBreakStrategy
      : NSLineBreakStrategy); cdecl;
    function lineBreakStrategy: NSLineBreakStrategy; cdecl;
    procedure setTextLists(textLists: NSArray); cdecl;
    function textLists: NSArray; cdecl;
    procedure addTabStop(anObject: NSTextTab); cdecl;
    procedure removeTabStop(anObject: NSTextTab); cdecl;
    procedure setParagraphStyle(obj: NSParagraphStyle); cdecl;
  end;

  TNSMutableParagraphStyle = class
    (TOCGenericImport<NSMutableParagraphStyleClass, NSMutableParagraphStyle>)
  end;

  PNSMutableParagraphStyle = Pointer;

  UIStringDrawing = interface(IObjectiveC)
    ['{90FD5488-4F3B-45ED-A281-F0FCC2B7324B}']
    [MethodName('sizeWithFont:')]
    function sizeWithFont(font: UIFont): CGSize; cdecl;
    [MethodName('sizeWithFont:forWidth:lineBreakMode:')]
    function sizeWithFontForWidthLineBreakMode(font: UIFont; forWidth: CGFloat;
      lineBreakMode: NSLineBreakMode): CGSize; cdecl;
    [MethodName('drawAtPoint:withFont:')]
    function drawAtPointWithFont(point: CGPoint; withFont: UIFont)
      : CGSize; cdecl;
    [MethodName('drawAtPoint:forWidth:withFont:lineBreakMode:')]
    function drawAtPointForWidthWithFontLineBreakMode(point: CGPoint;
      forWidth: CGFloat; withFont: UIFont; lineBreakMode: NSLineBreakMode)
      : CGSize; cdecl;
    [MethodName('sizeWithFont:constrainedToSize:')]
    function sizeWithFontConstrainedToSize(font: UIFont;
      constrainedToSize: CGSize): CGSize; cdecl;
    [MethodName('sizeWithFont:constrainedToSize:lineBreakMode:')]
    function sizeWithFontConstrainedToSizeLineBreakMode(font: UIFont;
      constrainedToSize: CGSize; lineBreakMode: NSLineBreakMode): CGSize; cdecl;
    [MethodName('drawInRect:withFont:')]
    function drawInRectWithFont(rect: CGRect; withFont: UIFont): CGSize; cdecl;
    [MethodName('drawInRect:withFont:lineBreakMode:')]
    function drawInRectWithFontLineBreakMode(rect: CGRect; withFont: UIFont;
      lineBreakMode: NSLineBreakMode): CGSize; cdecl;
    [MethodName('drawInRect:withFont:lineBreakMode:alignment:')]
    function drawInRectWithFontLineBreakModeAlignment(rect: CGRect;
      withFont: UIFont; lineBreakMode: NSLineBreakMode;
      alignment: NSTextAlignment): CGSize; cdecl;
    [MethodName
      ('sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:')]
    function sizeWithFontMinFontSizeActualFontSizeForWidthLineBreakMode
      (font: UIFont; minFontSize: CGFloat; actualFontSize: PCGFloat;
      forWidth: CGFloat; lineBreakMode: NSLineBreakMode): CGSize; cdecl;
    [MethodName
      ('drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:')
      ]
    function drawAtPointForWidthWithFontFontSizeLineBreakModeBaselineAdjustment
      (point: CGPoint; forWidth: CGFloat; withFont: UIFont; fontSize: CGFloat;
      lineBreakMode: NSLineBreakMode; baselineAdjustment: UIBaselineAdjustment)
      : CGSize; cdecl;
    [MethodName
      ('drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:')
      ]
    function drawAtPointForWidthWithFontMinFontSizeActualFontSizeLineBreakModeBaselineAdjustment
      (point: CGPoint; forWidth: CGFloat; withFont: UIFont;
      minFontSize: CGFloat; actualFontSize: PCGFloat;
      lineBreakMode: NSLineBreakMode; baselineAdjustment: UIBaselineAdjustment)
      : CGSize; cdecl;
  end;

  UIDragItemClass = interface(NSObjectClass)
    ['{D5264044-70FF-4E3D-9E3F-8F12D5EBC5A7}']
  end;

  UIDragItem = interface(NSObject)
    ['{7F3C0C8A-DD87-48FF-88B4-AA261FDE5C47}']
    function initWithItemProvider(itemProvider: NSItemProvider)
      : Pointer { instancetype }; cdecl;
    function itemProvider: NSItemProvider; cdecl;
    procedure setLocalObject(localObject: Pointer); cdecl;
    function localObject: Pointer; cdecl;
    procedure setPreviewProvider(previewProvider
      : TUIKitPreviewProvider1); cdecl;
    function previewProvider: TUIKitPreviewProvider1; cdecl;
  end;

  TUIDragItem = class(TOCGenericImport<UIDragItemClass, UIDragItem>)
  end;

  PUIDragItem = Pointer;

  UITargetedDragPreviewClass = interface(UITargetedPreviewClass)
    ['{46A62C34-E2C5-4309-A2AD-4AC16D83CE86}']
    [MethodName('previewForURL:target:')]
    { class } function previewForURLTarget(url: NSURL;
      target: UIDragPreviewTarget): Pointer { instancetype }; cdecl;
    [MethodName('previewForURL:title:target:')]
    { class } function previewForURLTitleTarget(url: NSURL; title: NSString;
      target: UIDragPreviewTarget): Pointer { instancetype }; cdecl;
  end;

  UITargetedDragPreview = interface(UITargetedPreview)
    ['{70CE5378-732F-49E6-B60D-AAFDD9339BE4}']
    function retargetedPreviewWithTarget(newTarget: UIDragPreviewTarget)
      : UITargetedDragPreview; cdecl;
  end;

  TUITargetedDragPreview = class(TOCGenericImport<UITargetedDragPreviewClass,
    UITargetedDragPreview>)
  end;

  PUITargetedDragPreview = Pointer;

  UIDropInteractionClass = interface(NSObjectClass)
    ['{4F107FB5-5D6A-40B1-86C7-42B0DE1BF7EC}']
  end;

  UIDropInteraction = interface(NSObject)
    ['{19DD64E1-B448-4FA3-A40D-00872E71FEAD}']
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    function delegate: Pointer; cdecl;
    procedure setAllowsSimultaneousDropSessions(allowsSimultaneousDropSessions
      : Boolean); cdecl;
    function allowsSimultaneousDropSessions: Boolean; cdecl;
  end;

  TUIDropInteraction = class(TOCGenericImport<UIDropInteractionClass,
    UIDropInteraction>)
  end;

  PUIDropInteraction = Pointer;

  UIDropProposalClass = interface(NSObjectClass)
    ['{F1F7E41A-D289-419C-AEC6-DE33AB8D6DC1}']
  end;

  UIDropProposal = interface(NSObject)
    ['{099C98EA-B4C1-442C-8193-E29D323A29B9}']
    function initWithDropOperation(operation: UIDropOperation)
      : Pointer { instancetype }; cdecl;
    function operation: UIDropOperation; cdecl;
    procedure setPrecise(precise: Boolean); cdecl;
    function isPrecise: Boolean; cdecl;
    procedure setPrefersFullSizePreview(prefersFullSizePreview: Boolean); cdecl;
    function prefersFullSizePreview: Boolean; cdecl;
  end;

  TUIDropProposal = class(TOCGenericImport<UIDropProposalClass, UIDropProposal>)
  end;

  PUIDropProposal = Pointer;

  UIDragInteractionClass = interface(NSObjectClass)
    ['{4188D443-5FFE-4B39-95E0-7C046D22064D}']
  end;

  UIDragInteraction = interface(NSObject)
    ['{4DEC0C65-2599-4794-9DEA-C6E5AA1758B6}']
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    function delegate: Pointer; cdecl;
    procedure setAllowsSimultaneousRecognitionDuringLift
      (allowsSimultaneousRecognitionDuringLift: Boolean); cdecl;
    function allowsSimultaneousRecognitionDuringLift: Boolean; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setEnabledByDefault(enabledByDefault: Boolean); cdecl;
    function enabledByDefault: Boolean; cdecl;
  end;

  TUIDragInteraction = class(TOCGenericImport<UIDragInteractionClass,
    UIDragInteraction>)
  end;

  PUIDragInteraction = Pointer;

  UITextInputPasswordRulesClass = interface(NSObjectClass)
    ['{3ABD42B6-4E16-422D-8972-062978519CEC}']
    { class } function passwordRulesWithDescriptor(passwordRulesDescriptor
      : NSString): Pointer { instancetype }; cdecl;
  end;

  UITextInputPasswordRules = interface(NSObject)
    ['{F3A65AC7-CA75-4220-B736-F0F01C81B8B5}']
    function passwordRulesDescriptor: NSString; cdecl;
  end;

  TUITextInputPasswordRules = class
    (TOCGenericImport<UITextInputPasswordRulesClass, UITextInputPasswordRules>)
  end;

  PUITextInputPasswordRules = Pointer;

  UITextPositionClass = interface(NSObjectClass)
    ['{327534BC-D98C-4D4B-89FF-ECD2D9D5AACD}']
  end;

  UITextPosition = interface(NSObject)
    ['{16501C48-D2EE-4CB8-AA4C-DF6BF07F55F7}']
  end;

  TUITextPosition = class(TOCGenericImport<UITextPositionClass, UITextPosition>)
  end;

  PUITextPosition = Pointer;

  UITextRangeClass = interface(NSObjectClass)
    ['{54933F0C-D474-423C-8FFC-B5BB6AB6A4AF}']
  end;

  UITextRange = interface(NSObject)
    ['{AD3FA1A5-B4F2-4944-A363-110B7655BC8C}']
    function isEmpty: Boolean; cdecl;
    function start: UITextPosition; cdecl;
    function &end: UITextPosition; cdecl;
  end;

  TUITextRange = class(TOCGenericImport<UITextRangeClass, UITextRange>)
  end;

  PUITextRange = Pointer;

  UITextSelectionRectClass = interface(NSObjectClass)
    ['{82DACFCE-0629-4FA5-83A0-AB5639F22BA2}']
  end;

  UITextSelectionRect = interface(NSObject)
    ['{0C51665D-A1A4-4BAF-B9C7-6B4949686927}']
    function rect: CGRect; cdecl;
    function writingDirection: NSWritingDirection; cdecl;
    function containsStart: Boolean; cdecl;
    function containsEnd: Boolean; cdecl;
    function isVertical: Boolean; cdecl;
  end;

  TUITextSelectionRect = class(TOCGenericImport<UITextSelectionRectClass,
    UITextSelectionRect>)
  end;

  PUITextSelectionRect = Pointer;

  UIBarButtonItemGroupClass = interface(NSObjectClass)
    ['{77578130-1EAC-4B57-ACF7-44945DC06F37}']
    { class } function fixedGroupWithRepresentativeItem(representativeItem
      : UIBarButtonItem; items: NSArray): UIBarButtonItemGroup; cdecl;
    { class } function movableGroupWithCustomizationIdentifier
      (customizationIdentifier: NSString; representativeItem: UIBarButtonItem;
      items: NSArray): UIBarButtonItemGroup; cdecl;
    { class } function optionalGroupWithCustomizationIdentifier
      (customizationIdentifier: NSString; inDefaultCustomization: Boolean;
      representativeItem: UIBarButtonItem; items: NSArray)
      : UIBarButtonItemGroup; cdecl;
  end;

  UIBarButtonItemGroup = interface(NSObject)
    ['{911EEC32-CB8E-4C62-BBBA-CDE5AAC4B2E5}']
    function initWithBarButtonItems(barButtonItems: NSArray;
      representativeItem: UIBarButtonItem): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setBarButtonItems(barButtonItems: NSArray); cdecl;
    function barButtonItems: NSArray; cdecl;
    procedure setRepresentativeItem(representativeItem: UIBarButtonItem); cdecl;
    function representativeItem: UIBarButtonItem; cdecl;
    function isDisplayingRepresentativeItem: Boolean; cdecl;
    procedure setAlwaysAvailable(alwaysAvailable: Boolean); cdecl;
    function alwaysAvailable: Boolean; cdecl;
    procedure setMenuRepresentation(menuRepresentation: UIMenuElement); cdecl;
    function menuRepresentation: UIMenuElement; cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    function isHidden: Boolean; cdecl;
  end;

  TUIBarButtonItemGroup = class(TOCGenericImport<UIBarButtonItemGroupClass,
    UIBarButtonItemGroup>)
  end;

  PUIBarButtonItemGroup = Pointer;

  UIDictationPhraseClass = interface(NSObjectClass)
    ['{A22F0EA7-1E7E-4638-88AE-83D82A4BCC39}']
  end;

  UIDictationPhrase = interface(NSObject)
    ['{A539A6C3-364C-4238-8BD7-7EAFD5478D62}']
    function text: NSString; cdecl;
    function alternativeInterpretations: NSArray; cdecl;
  end;

  TUIDictationPhrase = class(TOCGenericImport<UIDictationPhraseClass,
    UIDictationPhrase>)
  end;

  PUIDictationPhrase = Pointer;

  UITextPlaceholderClass = interface(NSObjectClass)
    ['{216ACC38-CAEE-4CB1-8828-6E46593BD5F9}']
  end;

  UITextPlaceholder = interface(NSObject)
    ['{5968B4E1-C1AA-4B16-8A3B-11506B09CFD1}']
    function rects: NSArray; cdecl;
  end;

  TUITextPlaceholder = class(TOCGenericImport<UITextPlaceholderClass,
    UITextPlaceholder>)
  end;

  PUITextPlaceholder = Pointer;

  UITextInputStringTokenizerClass = interface(NSObjectClass)
    ['{E5D1BA6D-140F-436F-B1D3-58F644F88850}']
  end;

  UITextInputStringTokenizer = interface(NSObject)
    ['{7469F6A4-258B-44E1-9A49-1DD820520F8D}']
    function initWithTextInput(textInput: UIResponder)
      : Pointer { instancetype }; cdecl;
  end;

  TUITextInputStringTokenizer = class
    (TOCGenericImport<UITextInputStringTokenizerClass,
    UITextInputStringTokenizer>)
  end;

  PUITextInputStringTokenizer = Pointer;

  UITextDropProposalClass = interface(UIDropProposalClass)
    ['{89289A87-DAAE-49D8-B41B-0A04D0B1F50E}']
  end;

  UITextDropProposal = interface(UIDropProposal)
    ['{E54682A2-CEB1-4A40-ABE2-9D01A30761AD}']
    procedure setDropAction(dropAction: UITextDropAction); cdecl;
    function dropAction: UITextDropAction; cdecl;
    procedure setDropProgressMode(dropProgressMode
      : UITextDropProgressMode); cdecl;
    function dropProgressMode: UITextDropProgressMode; cdecl;
    procedure setUseFastSameViewOperations(useFastSameViewOperations
      : Boolean); cdecl;
    function useFastSameViewOperations: Boolean; cdecl;
    procedure setDropPerformer(dropPerformer: UITextDropPerformer); cdecl;
    function dropPerformer: UITextDropPerformer; cdecl;
  end;

  TUITextDropProposal = class(TOCGenericImport<UITextDropProposalClass,
    UITextDropProposal>)
  end;

  PUITextDropProposal = Pointer;

  NSTextAttachmentClass = interface(NSObjectClass)
    ['{8BB83311-549F-475D-985F-8B9A516C8E8B}']
    { class } function textAttachmentViewProviderClassForFileType
      (fileType: NSString): Pointer; cdecl;
    { class } procedure registerTextAttachmentViewProviderClass
      (textAttachmentViewProviderClass: Pointer; forFileType: NSString); cdecl;
    { class } function textAttachmentWithImage(image: UIImage)
      : NSTextAttachment; cdecl;
  end;

  NSTextAttachment = interface(NSObject)
    ['{D108F43B-EC7C-4BDA-8B26-A756DD674BCE}']
    function initWithData(contentData: NSData; ofType: NSString)
      : Pointer { instancetype }; cdecl;
    procedure setContents(contents: NSData); cdecl;
    function contents: NSData; cdecl;
    procedure setFileType(fileType: NSString); cdecl;
    function fileType: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setBounds(bounds: CGRect); cdecl;
    function bounds: CGRect; cdecl;
    procedure setFileWrapper(fileWrapper: NSFileWrapper); cdecl;
    function fileWrapper: NSFileWrapper; cdecl;
    procedure setLineLayoutPadding(lineLayoutPadding: CGFloat); cdecl;
    function lineLayoutPadding: CGFloat; cdecl;
    procedure setAllowsTextAttachmentView(allowsTextAttachmentView
      : Boolean); cdecl;
    function allowsTextAttachmentView: Boolean; cdecl;
    function usesTextAttachmentView: Boolean; cdecl;
  end;

  TNSTextAttachment = class(TOCGenericImport<NSTextAttachmentClass,
    NSTextAttachment>)
  end;

  PNSTextAttachment = Pointer;

  UIImageViewClass = interface(UIViewClass)
    ['{7E1EF0A1-824D-46A7-8480-F4DC67BA90E8}']
  end;

  UIImageView = interface(UIView)
    ['{212B3436-9863-4221-8844-5392CCA2D7DE}']
    [MethodName('initWithImage:')]
    function initWithImage(image: UIImage): Pointer { instancetype }; cdecl;
    [MethodName('initWithImage:highlightedImage:')]
    function initWithImageHighlightedImage(image: UIImage;
      highlightedImage: UIImage): Pointer { instancetype }; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setHighlightedImage(highlightedImage: UIImage); cdecl;
    function highlightedImage: UIImage; cdecl;
    procedure setPreferredSymbolConfiguration(preferredSymbolConfiguration
      : UIImageSymbolConfiguration); cdecl;
    function preferredSymbolConfiguration: UIImageSymbolConfiguration; cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    function isHighlighted: Boolean; cdecl;
    procedure setAnimationImages(animationImages: NSArray); cdecl;
    function animationImages: NSArray; cdecl;
    procedure setHighlightedAnimationImages(highlightedAnimationImages
      : NSArray); cdecl;
    function highlightedAnimationImages: NSArray; cdecl;
    procedure setAnimationDuration(animationDuration: NSTimeInterval); cdecl;
    function animationDuration: NSTimeInterval; cdecl;
    procedure setAnimationRepeatCount(animationRepeatCount: NSInteger); cdecl;
    function animationRepeatCount: NSInteger; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure startAnimating; cdecl;
    procedure stopAnimating; cdecl;
    function isAnimating: Boolean; cdecl;
    procedure setAdjustsImageWhenAncestorFocused(adjustsImageWhenAncestorFocused
      : Boolean); cdecl;
    function adjustsImageWhenAncestorFocused: Boolean; cdecl;
    function focusedFrameGuide: UILayoutGuide; cdecl;
    function overlayContentView: UIView; cdecl;
    procedure setMasksFocusEffectToContents(masksFocusEffectToContents
      : Boolean); cdecl;
    function masksFocusEffectToContents: Boolean; cdecl;
  end;

  TUIImageView = class(TOCGenericImport<UIImageViewClass, UIImageView>)
  end;

  PUIImageView = Pointer;

  UILabelClass = interface(UIViewClass)
    ['{9DF6DB8E-67F3-4016-8A12-A3FC43B28830}']
  end;

  UILabel = interface(UIView)
    ['{CEA6FDA6-B8BA-405D-8DE2-90934C678CFB}']
    procedure setText(text: NSString); cdecl;
    function text: NSString; cdecl;
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setTextColor(textColor: UIColor); cdecl;
    function textColor: UIColor; cdecl;
    procedure setShadowColor(shadowColor: UIColor); cdecl;
    function shadowColor: UIColor; cdecl;
    procedure setShadowOffset(shadowOffset: CGSize); cdecl;
    function shadowOffset: CGSize; cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    function textAlignment: NSTextAlignment; cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    function attributedText: NSAttributedString; cdecl;
    procedure setHighlightedTextColor(highlightedTextColor: UIColor); cdecl;
    function highlightedTextColor: UIColor; cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    function isHighlighted: Boolean; cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setNumberOfLines(numberOfLines: NSInteger); cdecl;
    function numberOfLines: NSInteger; cdecl;
    procedure setAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth
      : Boolean); cdecl;
    function adjustsFontSizeToFitWidth: Boolean; cdecl;
    procedure setBaselineAdjustment(baselineAdjustment
      : UIBaselineAdjustment); cdecl;
    function baselineAdjustment: UIBaselineAdjustment; cdecl;
    procedure setMinimumScaleFactor(minimumScaleFactor: CGFloat); cdecl;
    function minimumScaleFactor: CGFloat; cdecl;
    procedure setAllowsDefaultTighteningForTruncation
      (allowsDefaultTighteningForTruncation: Boolean); cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    procedure setLineBreakStrategy(lineBreakStrategy
      : NSLineBreakStrategy); cdecl;
    function lineBreakStrategy: NSLineBreakStrategy; cdecl;
    function textRectForBounds(bounds: CGRect;
      limitedToNumberOfLines: NSInteger): CGRect; cdecl;
    procedure drawTextInRect(rect: CGRect); cdecl;
    procedure setPreferredMaxLayoutWidth(preferredMaxLayoutWidth
      : CGFloat); cdecl;
    function preferredMaxLayoutWidth: CGFloat; cdecl;
    procedure setEnablesMarqueeWhenAncestorFocused
      (enablesMarqueeWhenAncestorFocused: Boolean); cdecl;
    function enablesMarqueeWhenAncestorFocused: Boolean; cdecl;
    procedure setShowsExpansionTextWhenTruncated(showsExpansionTextWhenTruncated
      : Boolean); cdecl;
    function showsExpansionTextWhenTruncated: Boolean; cdecl;
    procedure setMinimumFontSize(minimumFontSize: CGFloat); cdecl;
    function minimumFontSize: CGFloat; cdecl;
    procedure setAdjustsLetterSpacingToFitWidth(adjustsLetterSpacingToFitWidth
      : Boolean); cdecl;
    function adjustsLetterSpacingToFitWidth: Boolean; cdecl;
  end;

  TUILabel = class(TOCGenericImport<UILabelClass, UILabel>)
  end;

  PUILabel = Pointer;

  UIButtonClass = interface(UIControlClass)
    ['{1059F1B8-270D-41C1-88E4-2A245DA10D66}']
    [MethodName('buttonWithType:')]
    { class } function buttonWithType(buttonType: UIButtonType)
      : Pointer { instancetype }; cdecl;
    { class } function systemButtonWithImage(image: UIImage; target: Pointer;
      action: SEL): Pointer { instancetype }; cdecl;
    { class } function systemButtonWithPrimaryAction(primaryAction: UIAction)
      : Pointer { instancetype }; cdecl;
    [MethodName('buttonWithType:primaryAction:')]
    { class } function buttonWithTypePrimaryAction(buttonType: UIButtonType;
      primaryAction: UIAction): Pointer { instancetype }; cdecl;
    { class } function buttonWithConfiguration(configuration
      : UIButtonConfiguration; primaryAction: UIAction)
      : Pointer { instancetype }; cdecl;
  end;

  UIButton = interface(UIControl)
    ['{014CA160-E049-4A89-ADE9-890D86E2AE77}']
    [MethodName('initWithFrame:')]
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    [MethodName('initWithFrame:primaryAction:')]
    function initWithFramePrimaryAction(frame: CGRect; primaryAction: UIAction)
      : Pointer { instancetype }; cdecl;
    procedure setConfiguration(configuration: UIButtonConfiguration); cdecl;
    function configuration: UIButtonConfiguration; cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    procedure updateConfiguration; cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler
      : UIButtonConfigurationUpdateHandler); cdecl;
    function configurationUpdateHandler
      : UIButtonConfigurationUpdateHandler; cdecl;
    procedure setAutomaticallyUpdatesConfiguration
      (automaticallyUpdatesConfiguration: Boolean); cdecl;
    function automaticallyUpdatesConfiguration: Boolean; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    function buttonType: UIButtonType; cdecl;
    function isHovered: Boolean; cdecl;
    function isHeld: Boolean; cdecl;
    procedure setRole(role: UIButtonRole); cdecl;
    function role: UIButtonRole; cdecl;
    procedure setPointerInteractionEnabled(pointerInteractionEnabled
      : Boolean); cdecl;
    function isPointerInteractionEnabled: Boolean; cdecl;
    procedure setPointerStyleProvider(pointerStyleProvider
      : UIButtonPointerStyleProvider); cdecl;
    function pointerStyleProvider: UIButtonPointerStyleProvider; cdecl;
    procedure setMenu(menu: UIMenu); cdecl;
    function menu: UIMenu; cdecl;
    procedure setPreferredMenuElementOrder(preferredMenuElementOrder
      : UIContextMenuConfigurationElementOrder); cdecl;
    function preferredMenuElementOrder
      : UIContextMenuConfigurationElementOrder; cdecl;
    procedure setChangesSelectionAsPrimaryAction(changesSelectionAsPrimaryAction
      : Boolean); cdecl;
    function changesSelectionAsPrimaryAction: Boolean; cdecl;
    procedure setTitle(title: NSString; forState: UIControlState); cdecl;
    procedure setTitleColor(color: UIColor; forState: UIControlState); cdecl;
    procedure setTitleShadowColor(color: UIColor;
      forState: UIControlState); cdecl;
    procedure setImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setBackgroundImage(image: UIImage;
      forState: UIControlState); cdecl;
    procedure setPreferredSymbolConfiguration(configuration
      : UIImageSymbolConfiguration; forImageInState: UIControlState); cdecl;
    procedure setAttributedTitle(title: NSAttributedString;
      forState: UIControlState); cdecl;
    function titleForState(state: UIControlState): NSString; cdecl;
    function titleColorForState(state: UIControlState): UIColor; cdecl;
    function titleShadowColorForState(state: UIControlState): UIColor; cdecl;
    function imageForState(state: UIControlState): UIImage; cdecl;
    function backgroundImageForState(state: UIControlState): UIImage; cdecl;
    function preferredSymbolConfigurationForImageInState(state: UIControlState)
      : UIImageSymbolConfiguration; cdecl;
    function attributedTitleForState(state: UIControlState)
      : NSAttributedString; cdecl;
    function currentTitle: NSString; cdecl;
    function currentTitleColor: UIColor; cdecl;
    function currentTitleShadowColor: UIColor; cdecl;
    function currentImage: UIImage; cdecl;
    function currentBackgroundImage: UIImage; cdecl;
    function currentPreferredSymbolConfiguration
      : UIImageSymbolConfiguration; cdecl;
    function currentAttributedTitle: NSAttributedString; cdecl;
    function titleLabel: UILabel; cdecl;
    function imageView: UIImageView; cdecl;
    function subtitleLabel: UILabel; cdecl;
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    procedure setTitleShadowOffset(titleShadowOffset: CGSize); cdecl;
    function titleShadowOffset: CGSize; cdecl;
    procedure setContentEdgeInsets(contentEdgeInsets: UIEdgeInsets); cdecl;
    function contentEdgeInsets: UIEdgeInsets; cdecl;
    procedure setTitleEdgeInsets(titleEdgeInsets: UIEdgeInsets); cdecl;
    function titleEdgeInsets: UIEdgeInsets; cdecl;
    procedure setImageEdgeInsets(imageEdgeInsets: UIEdgeInsets); cdecl;
    function imageEdgeInsets: UIEdgeInsets; cdecl;
    procedure setReversesTitleShadowWhenHighlighted
      (reversesTitleShadowWhenHighlighted: Boolean); cdecl;
    function reversesTitleShadowWhenHighlighted: Boolean; cdecl;
    procedure setAdjustsImageWhenHighlighted(adjustsImageWhenHighlighted
      : Boolean); cdecl;
    function adjustsImageWhenHighlighted: Boolean; cdecl;
    procedure setAdjustsImageWhenDisabled(adjustsImageWhenDisabled
      : Boolean); cdecl;
    function adjustsImageWhenDisabled: Boolean; cdecl;
    procedure setShowsTouchWhenHighlighted(showsTouchWhenHighlighted
      : Boolean); cdecl;
    function showsTouchWhenHighlighted: Boolean; cdecl;
    function backgroundRectForBounds(bounds: CGRect): CGRect; cdecl;
    function contentRectForBounds(bounds: CGRect): CGRect; cdecl;
    function titleRectForContentRect(contentRect: CGRect): CGRect; cdecl;
    function imageRectForContentRect(contentRect: CGRect): CGRect; cdecl;
    function behavioralStyle: UIBehavioralStyle; cdecl;
    procedure setPreferredBehavioralStyle(preferredBehavioralStyle
      : UIBehavioralStyle); cdecl;
    function preferredBehavioralStyle: UIBehavioralStyle; cdecl;
  end;

  TUIButton = class(TOCGenericImport<UIButtonClass, UIButton>)
  end;

  PUIButton = Pointer;

  UIPopoverControllerClass = interface(NSObjectClass)
    ['{26A31006-1638-44D4-84E8-EE407F1D813B}']
  end;

  UIPopoverController = interface(NSObject)
    ['{47EF1010-F69B-48AC-B33B-42EB7AD20E98}']
    function initWithContentViewController(viewController: UIViewController)
      : Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    [MethodName('setContentViewController:')]
    procedure setContentViewController(contentViewController
      : UIViewController); cdecl;
    function contentViewController: UIViewController; cdecl;
    [MethodName('setContentViewController:animated:')]
    procedure setContentViewControllerAnimated(viewController: UIViewController;
      animated: Boolean); cdecl;
    [MethodName('setPopoverContentSize:')]
    procedure setPopoverContentSize(popoverContentSize: CGSize); cdecl;
    function popoverContentSize: CGSize; cdecl;
    [MethodName('setPopoverContentSize:animated:')]
    procedure setPopoverContentSizeAnimated(size: CGSize;
      animated: Boolean); cdecl;
    function isPopoverVisible: Boolean; cdecl;
    function popoverArrowDirection: UIPopoverArrowDirection; cdecl;
    procedure setPassthroughViews(passthroughViews: NSArray); cdecl;
    function passthroughViews: NSArray; cdecl;
    procedure presentPopoverFromRect(rect: CGRect; inView: UIView;
      permittedArrowDirections: UIPopoverArrowDirection;
      animated: Boolean); cdecl;
    procedure presentPopoverFromBarButtonItem(item: UIBarButtonItem;
      permittedArrowDirections: UIPopoverArrowDirection;
      animated: Boolean); cdecl;
    procedure dismissPopoverAnimated(animated: Boolean); cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setPopoverLayoutMargins(popoverLayoutMargins
      : UIEdgeInsets); cdecl;
    function popoverLayoutMargins: UIEdgeInsets; cdecl;
    procedure setPopoverBackgroundViewClass(popoverBackgroundViewClass
      : Pointer); cdecl;
    function popoverBackgroundViewClass: Pointer; cdecl;
  end;

  TUIPopoverController = class(TOCGenericImport<UIPopoverControllerClass,
    UIPopoverController>)
  end;

  PUIPopoverController = Pointer;

  UITextFieldClass = interface(UIControlClass)
    ['{9EB726A9-A431-4E48-AE5E-998A39492F6C}']
  end;

  UITextField = interface(UIControl)
    ['{5E80817D-D653-4F2A-BE05-89D6780A0FDE}']
    procedure setText(text: NSString); cdecl;
    function text: NSString; cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    function attributedText: NSAttributedString; cdecl;
    procedure setTextColor(textColor: UIColor); cdecl;
    function textColor: UIColor; cdecl;
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    function textAlignment: NSTextAlignment; cdecl;
    procedure setBorderStyle(borderStyle: UITextBorderStyle); cdecl;
    function borderStyle: UITextBorderStyle; cdecl;
    procedure setDefaultTextAttributes(defaultTextAttributes
      : NSDictionary); cdecl;
    function defaultTextAttributes: NSDictionary; cdecl;
    procedure setPlaceholder(placeholder: NSString); cdecl;
    function placeholder: NSString; cdecl;
    procedure setAttributedPlaceholder(attributedPlaceholder
      : NSAttributedString); cdecl;
    function attributedPlaceholder: NSAttributedString; cdecl;
    procedure setClearsOnBeginEditing(clearsOnBeginEditing: Boolean); cdecl;
    function clearsOnBeginEditing: Boolean; cdecl;
    procedure setAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth
      : Boolean); cdecl;
    function adjustsFontSizeToFitWidth: Boolean; cdecl;
    procedure setMinimumFontSize(minimumFontSize: CGFloat); cdecl;
    function minimumFontSize: CGFloat; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setBackground(background: UIImage); cdecl;
    function background: UIImage; cdecl;
    procedure setDisabledBackground(disabledBackground: UIImage); cdecl;
    function disabledBackground: UIImage; cdecl;
    function isEditing: Boolean; cdecl;
    procedure setAllowsEditingTextAttributes(allowsEditingTextAttributes
      : Boolean); cdecl;
    function allowsEditingTextAttributes: Boolean; cdecl;
    procedure setTypingAttributes(typingAttributes: NSDictionary); cdecl;
    function typingAttributes: NSDictionary; cdecl;
    procedure setClearButtonMode(clearButtonMode: UITextFieldViewMode); cdecl;
    function clearButtonMode: UITextFieldViewMode; cdecl;
    procedure setLeftView(leftView: UIView); cdecl;
    function leftView: UIView; cdecl;
    procedure setLeftViewMode(leftViewMode: UITextFieldViewMode); cdecl;
    function leftViewMode: UITextFieldViewMode; cdecl;
    procedure setRightView(rightView: UIView); cdecl;
    function rightView: UIView; cdecl;
    procedure setRightViewMode(rightViewMode: UITextFieldViewMode); cdecl;
    function rightViewMode: UITextFieldViewMode; cdecl;
    function borderRectForBounds(bounds: CGRect): CGRect; cdecl;
    function textRectForBounds(bounds: CGRect): CGRect; cdecl;
    function placeholderRectForBounds(bounds: CGRect): CGRect; cdecl;
    function editingRectForBounds(bounds: CGRect): CGRect; cdecl;
    function clearButtonRectForBounds(bounds: CGRect): CGRect; cdecl;
    function leftViewRectForBounds(bounds: CGRect): CGRect; cdecl;
    function rightViewRectForBounds(bounds: CGRect): CGRect; cdecl;
    procedure drawTextInRect(rect: CGRect); cdecl;
    procedure drawPlaceholderInRect(rect: CGRect); cdecl;
    procedure setInputView(inputView: UIView); cdecl;
    function inputView: UIView; cdecl;
    procedure setInputAccessoryView(inputAccessoryView: UIView); cdecl;
    function inputAccessoryView: UIView; cdecl;
    procedure setClearsOnInsertion(clearsOnInsertion: Boolean); cdecl;
    function clearsOnInsertion: Boolean; cdecl;
    procedure setInteractionState(interactionState: Pointer); cdecl;
    function interactionState: Pointer; cdecl;
  end;

  TUITextField = class(TOCGenericImport<UITextFieldClass, UITextField>)
  end;

  PUITextField = Pointer;

  UIToolbarClass = interface(UIViewClass)
    ['{CB04040E-E6FD-4122-8056-DE9C0949A1FC}']
  end;

  UIToolbar = interface(UIView)
    ['{E509EAA0-9584-4FC9-BAFE-244696DA260B}']
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    function barStyle: UIBarStyle; cdecl;
    [MethodName('setItems:')]
    procedure setItems(items: NSArray); cdecl;
    function items: NSArray; cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    function isTranslucent: Boolean; cdecl;
    [MethodName('setItems:animated:')]
    procedure setItemsAnimated(items: NSArray; animated: Boolean); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    function barTintColor: UIColor; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage;
      forToolbarPosition: UIBarPosition; barMetrics: UIBarMetrics); cdecl;
    function backgroundImageForToolbarPosition(topOrBottom: UIBarPosition;
      barMetrics: UIBarMetrics): UIImage; cdecl;
    procedure setShadowImage(shadowImage: UIImage;
      forToolbarPosition: UIBarPosition); cdecl;
    function shadowImageForToolbarPosition(topOrBottom: UIBarPosition)
      : UIImage; cdecl;
    procedure setStandardAppearance(standardAppearance
      : UIToolbarAppearance); cdecl;
    function standardAppearance: UIToolbarAppearance; cdecl;
    procedure setCompactAppearance(compactAppearance
      : UIToolbarAppearance); cdecl;
    function compactAppearance: UIToolbarAppearance; cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance
      : UIToolbarAppearance); cdecl;
    function scrollEdgeAppearance: UIToolbarAppearance; cdecl;
    procedure setCompactScrollEdgeAppearance(compactScrollEdgeAppearance
      : UIToolbarAppearance); cdecl;
    function compactScrollEdgeAppearance: UIToolbarAppearance; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
  end;

  TUIToolbar = class(TOCGenericImport<UIToolbarClass, UIToolbar>)
  end;

  PUIToolbar = Pointer;

  UITabBarClass = interface(UIViewClass)
    ['{38EFC08B-593D-4790-A471-4CC8D2FAC1E3}']
  end;

  UITabBar = interface(UIView)
    ['{1D5A6510-ED02-49E8-A0C1-48FE2D7C3B76}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    [MethodName('setItems:')]
    procedure setItems(items: NSArray); cdecl;
    function items: NSArray; cdecl;
    procedure setSelectedItem(selectedItem: UITabBarItem); cdecl;
    function selectedItem: UITabBarItem; cdecl;
    [MethodName('setItems:animated:')]
    procedure setItemsAnimated(items: NSArray; animated: Boolean); cdecl;
    procedure beginCustomizingItems(items: NSArray); cdecl;
    function endCustomizingAnimated(animated: Boolean): Boolean; cdecl;
    function isCustomizing: Boolean; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    function barTintColor: UIColor; cdecl;
    procedure setUnselectedItemTintColor(unselectedItemTintColor
      : UIColor); cdecl;
    function unselectedItemTintColor: UIColor; cdecl;
    procedure setSelectedImageTintColor(selectedImageTintColor: UIColor); cdecl;
    function selectedImageTintColor: UIColor; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage); cdecl;
    function backgroundImage: UIImage; cdecl;
    procedure setSelectionIndicatorImage(selectionIndicatorImage
      : UIImage); cdecl;
    function selectionIndicatorImage: UIImage; cdecl;
    procedure setShadowImage(shadowImage: UIImage); cdecl;
    function shadowImage: UIImage; cdecl;
    procedure setItemPositioning(itemPositioning
      : UITabBarItemPositioning); cdecl;
    function itemPositioning: UITabBarItemPositioning; cdecl;
    procedure setItemWidth(itemWidth: CGFloat); cdecl;
    function itemWidth: CGFloat; cdecl;
    procedure setItemSpacing(itemSpacing: CGFloat); cdecl;
    function itemSpacing: CGFloat; cdecl;
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    function barStyle: UIBarStyle; cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    function isTranslucent: Boolean; cdecl;
    procedure setStandardAppearance(standardAppearance
      : UITabBarAppearance); cdecl;
    function standardAppearance: UITabBarAppearance; cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance
      : UITabBarAppearance); cdecl;
    function scrollEdgeAppearance: UITabBarAppearance; cdecl;
    function leadingAccessoryView: UIView; cdecl;
    function trailingAccessoryView: UIView; cdecl;
  end;

  TUITabBar = class(TOCGenericImport<UITabBarClass, UITabBar>)
  end;

  PUITabBar = Pointer;

  UIBarItemClass = interface(NSObjectClass)
    ['{069B5F14-1A2D-487A-9C9B-A0E82716E28A}']
  end;

  UIBarItem = interface(NSObject)
    ['{224DBE69-A7C8-4802-AD0C-AEBEA16F220B}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setLandscapeImagePhone(landscapeImagePhone: UIImage); cdecl;
    function landscapeImagePhone: UIImage; cdecl;
    procedure setLargeContentSizeImage(largeContentSizeImage: UIImage); cdecl;
    function largeContentSizeImage: UIImage; cdecl;
    procedure setImageInsets(imageInsets: UIEdgeInsets); cdecl;
    function imageInsets: UIEdgeInsets; cdecl;
    procedure setLandscapeImagePhoneInsets(landscapeImagePhoneInsets
      : UIEdgeInsets); cdecl;
    function landscapeImagePhoneInsets: UIEdgeInsets; cdecl;
    procedure setLargeContentSizeImageInsets(largeContentSizeImageInsets
      : UIEdgeInsets); cdecl;
    function largeContentSizeImageInsets: UIEdgeInsets; cdecl;
    procedure setTag(tag: NSInteger); cdecl;
    function tag: NSInteger; cdecl;
    procedure setTitleTextAttributes(attributes: NSDictionary;
      forState: UIControlState); cdecl;
    function titleTextAttributesForState(state: UIControlState)
      : NSDictionary; cdecl;
  end;

  TUIBarItem = class(TOCGenericImport<UIBarItemClass, UIBarItem>)
  end;

  PUIBarItem = Pointer;

  UIBarButtonItemClass = interface(UIBarItemClass)
    ['{AED229A6-D4FD-4F54-B12F-43A8C3277072}']
    { class } function fixedSpaceItemOfWidth(width: CGFloat)
      : Pointer { instancetype }; cdecl;
    { class } function flexibleSpaceItem: Pointer { instancetype }; cdecl;
  end;

  UIBarButtonItem = interface(UIBarItem)
    ['{5C42A644-C0AD-4E43-9648-EE2B3C3CE91F}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    [MethodName('initWithImage:style:target:action:')]
    function initWithImageStyleTargetAction(image: UIImage;
      style: UIBarButtonItemStyle; target: Pointer; action: SEL)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithImage:landscapeImagePhone:style:target:action:')]
    function initWithImageLandscapeImagePhoneStyleTargetAction(image: UIImage;
      landscapeImagePhone: UIImage; style: UIBarButtonItemStyle;
      target: Pointer; action: SEL): Pointer { instancetype }; cdecl;
    [MethodName('initWithTitle:style:target:action:')]
    function initWithTitleStyleTargetAction(title: NSString;
      style: UIBarButtonItemStyle; target: Pointer; action: SEL)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithBarButtonSystemItem:target:action:')]
    function initWithBarButtonSystemItemTargetAction
      (systemItem: UIBarButtonSystemItem; target: Pointer; action: SEL)
      : Pointer { instancetype }; cdecl;
    function initWithCustomView(customView: UIView)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithBarButtonSystemItem:primaryAction:')]
    function initWithBarButtonSystemItemPrimaryAction
      (systemItem: UIBarButtonSystemItem; primaryAction: UIAction)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithPrimaryAction:')]
    function initWithPrimaryAction(primaryAction: UIAction)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithBarButtonSystemItem:menu:')]
    function initWithBarButtonSystemItemMenu(systemItem: UIBarButtonSystemItem;
      menu: UIMenu): Pointer { instancetype }; cdecl;
    [MethodName('initWithTitle:menu:')]
    function initWithTitleMenu(title: NSString; menu: UIMenu)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithImage:menu:')]
    function initWithImageMenu(image: UIImage; menu: UIMenu)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithPrimaryAction:menu:')]
    function initWithPrimaryActionMenu(primaryAction: UIAction; menu: UIMenu)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithBarButtonSystemItem:primaryAction:menu:')]
    function initWithBarButtonSystemItemPrimaryActionMenu
      (systemItem: UIBarButtonSystemItem; primaryAction: UIAction; menu: UIMenu)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithTitle:image:target:action:menu:')]
    function initWithTitleImageTargetActionMenu(title: NSString; image: UIImage;
      target: Pointer; action: SEL; menu: UIMenu)
      : Pointer { instancetype }; cdecl;
    procedure setStyle(style: UIBarButtonItemStyle); cdecl;
    function style: UIBarButtonItemStyle; cdecl;
    procedure setWidth(width: CGFloat); cdecl;
    function width: CGFloat; cdecl;
    procedure setPossibleTitles(possibleTitles: NSSet); cdecl;
    function possibleTitles: NSSet; cdecl;
    procedure setCustomView(customView: UIView); cdecl;
    function customView: UIView; cdecl;
    procedure setAction(action: SEL); cdecl;
    function action: SEL; cdecl;
    procedure setTarget(target: Pointer); cdecl;
    function target: Pointer; cdecl;
    procedure setPrimaryAction(primaryAction: UIAction); cdecl;
    function primaryAction: UIAction; cdecl;
    procedure setMenu(menu: UIMenu); cdecl;
    function menu: UIMenu; cdecl;
    procedure setPreferredMenuElementOrder(preferredMenuElementOrder
      : UIContextMenuConfigurationElementOrder); cdecl;
    function preferredMenuElementOrder
      : UIContextMenuConfigurationElementOrder; cdecl;
    procedure setChangesSelectionAsPrimaryAction(changesSelectionAsPrimaryAction
      : Boolean); cdecl;
    function changesSelectionAsPrimaryAction: Boolean; cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    function isSelected: Boolean; cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    function isHidden: Boolean; cdecl;
    procedure setMenuRepresentation(menuRepresentation: UIMenuElement); cdecl;
    function menuRepresentation: UIMenuElement; cdecl;
    function creatingFixedGroup: UIBarButtonItemGroup; cdecl;
    function creatingMovableGroupWithCustomizationIdentifier
      (customizationIdentifier: NSString): UIBarButtonItemGroup; cdecl;
    function creatingOptionalGroupWithCustomizationIdentifier
      (customizationIdentifier: NSString; inDefaultCustomization: Boolean)
      : UIBarButtonItemGroup; cdecl;
    [MethodName('setBackgroundImage:forState:barMetrics:')]
    procedure setBackgroundImageForStateBarMetrics(backgroundImage: UIImage;
      forState: UIControlState; barMetrics: UIBarMetrics); cdecl;
    [MethodName('backgroundImageForState:barMetrics:')]
    function backgroundImageForStateBarMetrics(state: UIControlState;
      barMetrics: UIBarMetrics): UIImage; cdecl;
    [MethodName('setBackgroundImage:forState:style:barMetrics:')]
    procedure setBackgroundImageForStateStyleBarMetrics(backgroundImage
      : UIImage; forState: UIControlState; style: UIBarButtonItemStyle;
      barMetrics: UIBarMetrics); cdecl;
    [MethodName('backgroundImageForState:style:barMetrics:')]
    function backgroundImageForStateStyleBarMetrics(state: UIControlState;
      style: UIBarButtonItemStyle; barMetrics: UIBarMetrics): UIImage; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setBackgroundVerticalPositionAdjustment(adjustment: CGFloat;
      forBarMetrics: UIBarMetrics); cdecl;
    function backgroundVerticalPositionAdjustmentForBarMetrics
      (barMetrics: UIBarMetrics): CGFloat; cdecl;
    procedure setTitlePositionAdjustment(adjustment: UIOffset;
      forBarMetrics: UIBarMetrics); cdecl;
    function titlePositionAdjustmentForBarMetrics(barMetrics: UIBarMetrics)
      : UIOffset; cdecl;
    procedure setBackButtonBackgroundImage(backgroundImage: UIImage;
      forState: UIControlState; barMetrics: UIBarMetrics); cdecl;
    function backButtonBackgroundImageForState(state: UIControlState;
      barMetrics: UIBarMetrics): UIImage; cdecl;
    procedure setBackButtonTitlePositionAdjustment(adjustment: UIOffset;
      forBarMetrics: UIBarMetrics); cdecl;
    function backButtonTitlePositionAdjustmentForBarMetrics
      (barMetrics: UIBarMetrics): UIOffset; cdecl;
    procedure setBackButtonBackgroundVerticalPositionAdjustment
      (adjustment: CGFloat; forBarMetrics: UIBarMetrics); cdecl;
    function backButtonBackgroundVerticalPositionAdjustmentForBarMetrics
      (barMetrics: UIBarMetrics): CGFloat; cdecl;
    function buttonGroup: UIBarButtonItemGroup; cdecl;
  end;

  TUIBarButtonItem = class(TOCGenericImport<UIBarButtonItemClass,
    UIBarButtonItem>)
  end;

  PUIBarButtonItem = Pointer;

  UIActionSheetClass = interface(UIViewClass)
    ['{BE182FA3-FD58-4F30-98C9-A860F42399CD}']
  end;

  UIActionSheet = interface(UIView)
    ['{B0567659-D8CD-4F38-98D3-3DA3E5A74EDE}']
    function initWithTitle(title: NSString; delegate: Pointer;
      cancelButtonTitle: NSString; destructiveButtonTitle: NSString;
      otherButtonTitles: NSString): Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setActionSheetStyle(actionSheetStyle: UIActionSheetStyle); cdecl;
    function actionSheetStyle: UIActionSheetStyle; cdecl;
    function addButtonWithTitle(title: NSString): NSInteger; cdecl;
    function buttonTitleAtIndex(buttonIndex: NSInteger): NSString; cdecl;
    function numberOfButtons: NSInteger; cdecl;
    procedure setCancelButtonIndex(cancelButtonIndex: NSInteger); cdecl;
    function cancelButtonIndex: NSInteger; cdecl;
    procedure setDestructiveButtonIndex(destructiveButtonIndex
      : NSInteger); cdecl;
    function destructiveButtonIndex: NSInteger; cdecl;
    function firstOtherButtonIndex: NSInteger; cdecl;
    function isVisible: Boolean; cdecl;
    procedure showFromToolbar(view: UIToolbar); cdecl;
    procedure showFromTabBar(view: UITabBar); cdecl;
    procedure showFromBarButtonItem(item: UIBarButtonItem;
      animated: Boolean); cdecl;
    procedure showFromRect(rect: CGRect; inView: UIView;
      animated: Boolean); cdecl;
    procedure showInView(view: UIView); cdecl;
    procedure dismissWithClickedButtonIndex(buttonIndex: NSInteger;
      animated: Boolean); cdecl;
  end;

  TUIActionSheet = class(TOCGenericImport<UIActionSheetClass, UIActionSheet>)
  end;

  PUIActionSheet = Pointer;

  UIAlertViewClass = interface(UIViewClass)
    ['{79E0DA70-0A02-46B0-AF35-F0F8059C9A0A}']
  end;

  UIAlertView = interface(UIView)
    ['{77CD2617-3DA3-4EF3-BECE-EA3C3FB8C054}']
    function initWithTitle(title: NSString; message: NSString;
      delegate: Pointer; cancelButtonTitle: NSString;
      otherButtonTitles: NSString): Pointer { instancetype }; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setMessage(message: NSString); cdecl;
    function message: NSString; cdecl;
    function addButtonWithTitle(title: NSString): NSInteger; cdecl;
    function buttonTitleAtIndex(buttonIndex: NSInteger): NSString; cdecl;
    function numberOfButtons: NSInteger; cdecl;
    procedure setCancelButtonIndex(cancelButtonIndex: NSInteger); cdecl;
    function cancelButtonIndex: NSInteger; cdecl;
    function firstOtherButtonIndex: NSInteger; cdecl;
    function isVisible: Boolean; cdecl;
    procedure show; cdecl;
    procedure dismissWithClickedButtonIndex(buttonIndex: NSInteger;
      animated: Boolean); cdecl;
    procedure setAlertViewStyle(alertViewStyle: UIAlertViewStyle); cdecl;
    function alertViewStyle: UIAlertViewStyle; cdecl;
    function textFieldAtIndex(textFieldIndex: NSInteger): UITextField; cdecl;
  end;

  TUIAlertView = class(TOCGenericImport<UIAlertViewClass, UIAlertView>)
  end;

  PUIAlertView = Pointer;

  UILocalNotificationClass = interface(NSObjectClass)
    ['{50CB0D21-6FB0-4455-9F79-4D1F2DAF2EE4}']
  end;

  UILocalNotification = interface(NSObject)
    ['{6E0A04EC-5376-4EEA-8D23-D16B3E056453}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setFireDate(fireDate: NSDate); cdecl;
    function fireDate: NSDate; cdecl;
    procedure setTimeZone(timeZone: NSTimeZone); cdecl;
    function timeZone: NSTimeZone; cdecl;
    procedure setRepeatInterval(repeatInterval: NSCalendarUnit); cdecl;
    function repeatInterval: NSCalendarUnit; cdecl;
    procedure setRepeatCalendar(repeatCalendar: NSCalendar); cdecl;
    function repeatCalendar: NSCalendar; cdecl;
    procedure setRegion(region: CLRegion); cdecl;
    function region: CLRegion; cdecl;
    procedure setRegionTriggersOnce(regionTriggersOnce: Boolean); cdecl;
    function regionTriggersOnce: Boolean; cdecl;
    procedure setAlertBody(alertBody: NSString); cdecl;
    function alertBody: NSString; cdecl;
    procedure setHasAction(hasAction: Boolean); cdecl;
    function hasAction: Boolean; cdecl;
    procedure setAlertAction(alertAction: NSString); cdecl;
    function alertAction: NSString; cdecl;
    procedure setAlertLaunchImage(alertLaunchImage: NSString); cdecl;
    function alertLaunchImage: NSString; cdecl;
    procedure setAlertTitle(alertTitle: NSString); cdecl;
    function alertTitle: NSString; cdecl;
    procedure setSoundName(soundName: NSString); cdecl;
    function soundName: NSString; cdecl;
    procedure setApplicationIconBadgeNumber(applicationIconBadgeNumber
      : NSInteger); cdecl;
    function applicationIconBadgeNumber: NSInteger; cdecl;
    procedure setUserInfo(userInfo: NSDictionary); cdecl;
    function userInfo: NSDictionary; cdecl;
    procedure setCategory(category: NSString); cdecl;
    function category: NSString; cdecl;
  end;

  TUILocalNotification = class(TOCGenericImport<UILocalNotificationClass,
    UILocalNotification>)
  end;

  PUILocalNotification = Pointer;

  UISceneClass = interface(UIResponderClass)
    ['{CC810010-46FD-4F14-8C6B-CF1CB7D839D4}']
  end;

  UIScene = interface(UIResponder)
    ['{D2C59509-8F97-4678-AF65-A52F66A1CB64}']
    function initWithSession(session: UISceneSession;
      connectionOptions: UISceneConnectionOptions)
      : Pointer { instancetype }; cdecl;
    function session: UISceneSession; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function activationState: UISceneActivationState; cdecl;
    procedure openURL(url: NSURL; options: UISceneOpenExternalURLOptions;
      completionHandler: TUIKitCompletion); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setSubtitle(subtitle: NSString); cdecl;
    function subtitle: NSString; cdecl;
    procedure setActivationConditions(activationConditions
      : UISceneActivationConditions); cdecl;
    function activationConditions: UISceneActivationConditions; cdecl;
    function pointerLockState: UIPointerLockState; cdecl;
    procedure extendStateRestoration; cdecl;
    procedure completeStateRestoration; cdecl;
  end;

  TUIScene = class(TOCGenericImport<UISceneClass, UIScene>)
  end;

  PUIScene = Pointer;

  UIWindowSceneClass = interface(UISceneClass)
    ['{6A7EA87D-486B-4109-8DAC-755429E73421}']
  end;

  UIWindowScene = interface(UIScene)
    ['{0F45DAE1-62D4-4991-8DF6-9688139DE032}']
    function screen: UIScreen; cdecl;
    function interfaceOrientation: UIInterfaceOrientation; cdecl;
    function coordinateSpace: Pointer; cdecl;
    function traitCollection: UITraitCollection; cdecl;
    procedure requestGeometryUpdateWithPreferences(geometryPreferences
      : UIWindowSceneGeometryPreferences;
      errorHandler: TUIKitErrorHandler); cdecl;
    function effectiveGeometry: UIWindowSceneGeometry; cdecl;
    function sizeRestrictions: UISceneSizeRestrictions; cdecl;
    function windows: NSArray; cdecl;
    function keyWindow: UIWindow; cdecl;
    procedure setActivityItemsConfigurationSource
      (activityItemsConfigurationSource: Pointer); cdecl;
    function activityItemsConfigurationSource: Pointer; cdecl;
    function windowingBehaviors: UISceneWindowingBehaviors; cdecl;
    function isFullScreen: Boolean; cdecl;
    function focusSystem: UIFocusSystem; cdecl;
    function statusBarManager: UIStatusBarManager; cdecl;
    function screenshotService: UIScreenshotService; cdecl;
  end;

  TUIWindowScene = class(TOCGenericImport<UIWindowSceneClass, UIWindowScene>)
  end;

  PUIWindowScene = Pointer;

  UISceneSessionClass = interface(NSObjectClass)
    ['{3F4E8EFD-E2A9-4244-8E58-D8DE3F60BCFB}']
  end;

  UISceneSession = interface(NSObject)
    ['{C7D8C22E-76DB-4973-8492-669358BC6243}']
    function scene: UIScene; cdecl;
    function role: UISceneSessionRole; cdecl;
    function configuration: UISceneConfiguration; cdecl;
    function persistentIdentifier: NSString; cdecl;
    procedure setStateRestorationActivity(stateRestorationActivity
      : NSUserActivity); cdecl;
    function stateRestorationActivity: NSUserActivity; cdecl;
    procedure setUserInfo(userInfo: NSDictionary); cdecl;
    function userInfo: NSDictionary; cdecl;
  end;

  TUISceneSession = class(TOCGenericImport<UISceneSessionClass, UISceneSession>)
  end;

  PUISceneSession = Pointer;

  UISceneConfigurationClass = interface(NSObjectClass)
    ['{9D1F813C-D49E-48F3-9FC2-C56BC4705F0B}']
    { class } function configurationWithName(name: NSString;
      sessionRole: UISceneSessionRole): Pointer { instancetype }; cdecl;
  end;

  UISceneConfiguration = interface(NSObject)
    ['{26A55F96-995D-4097-99B3-F4F088A5F51F}']
    function initWithName(name: NSString; sessionRole: UISceneSessionRole)
      : Pointer { instancetype }; cdecl;
    function name: NSString; cdecl;
    function role: UISceneSessionRole; cdecl;
    procedure setSceneClass(sceneClass: Pointer); cdecl;
    function sceneClass: Pointer; cdecl;
    procedure setDelegateClass(delegateClass: Pointer); cdecl;
    function delegateClass: Pointer; cdecl;
    procedure setStoryboard(storyboard: UIStoryboard); cdecl;
    function storyboard: UIStoryboard; cdecl;
  end;

  TUISceneConfiguration = class(TOCGenericImport<UISceneConfigurationClass,
    UISceneConfiguration>)
  end;

  PUISceneConfiguration = Pointer;

  UISceneConnectionOptionsClass = interface(NSObjectClass)
    ['{7207A745-8491-4FDD-AA33-AB70A3F93E7A}']
  end;

  UISceneConnectionOptions = interface(NSObject)
    ['{F1922E7F-7BAB-4042-A3A6-04A07330CE34}']
    function URLContexts: NSSet; cdecl;
    function sourceApplication: NSString; cdecl;
    function handoffUserActivityType: NSString; cdecl;
    function userActivities: NSSet; cdecl;
    function notificationResponse: UNNotificationResponse; cdecl;
    function shortcutItem: UIApplicationShortcutItem; cdecl;
    function cloudKitShareMetadata: CKShareMetadata; cdecl;
  end;

  TUISceneConnectionOptions = class
    (TOCGenericImport<UISceneConnectionOptionsClass, UISceneConnectionOptions>)
  end;

  PUISceneConnectionOptions = Pointer;

  UISceneActivationRequestOptionsClass = interface(NSObjectClass)
    ['{C9ED1900-4EFA-4612-B65E-B9FDA5FC4578}']
  end;

  UISceneActivationRequestOptions = interface(NSObject)
    ['{0211296F-771D-4292-B1BB-4F2B9CBECC92}']
    procedure setRequestingScene(requestingScene: UIScene); cdecl;
    function requestingScene: UIScene; cdecl;
    procedure setCollectionJoinBehavior(collectionJoinBehavior
      : UISceneCollectionJoinBehavior); cdecl;
    function collectionJoinBehavior: UISceneCollectionJoinBehavior; cdecl;
  end;

  TUISceneActivationRequestOptions = class
    (TOCGenericImport<UISceneActivationRequestOptionsClass,
    UISceneActivationRequestOptions>)
  end;

  PUISceneActivationRequestOptions = Pointer;

  UISceneDestructionRequestOptionsClass = interface(NSObjectClass)
    ['{31869EFB-B8A8-4935-96D2-3C9B47F492DF}']
  end;

  UISceneDestructionRequestOptions = interface(NSObject)
    ['{B19D661D-B3A2-4BE4-92A9-5AA40877BC1C}']
  end;

  TUISceneDestructionRequestOptions = class
    (TOCGenericImport<UISceneDestructionRequestOptionsClass,
    UISceneDestructionRequestOptions>)
  end;

  PUISceneDestructionRequestOptions = Pointer;

  UIApplicationClass = interface(UIResponderClass)
    ['{FA4B0B9F-2E0A-427D-8C39-79D62ACD8548}']
    { class } procedure registerObjectForStateRestoration(&object: Pointer;
      restorationIdentifier: NSString); cdecl;
  end;

  UIApplication = interface(UIResponder)
    ['{4DD5123C-853A-42B6-9BB7-76F65D480E2D}']
    procedure setSharedApplication(sharedApplication: UIApplication); cdecl;
    function sharedApplication: UIApplication; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure beginIgnoringInteractionEvents; cdecl;
    procedure endIgnoringInteractionEvents; cdecl;
    function isIgnoringInteractionEvents: Boolean; cdecl;
    procedure setIdleTimerDisabled(idleTimerDisabled: Boolean); cdecl;
    function isIdleTimerDisabled: Boolean; cdecl;
    [MethodName('openURL:')]
    function openURL(url: NSURL): Boolean; cdecl;
    function canOpenURL(url: NSURL): Boolean; cdecl;
    [MethodName('openURL:options:completionHandler:')]
    procedure openURLOptionsCompletionHandler(url: NSURL; options: NSDictionary;
      completionHandler: TUIKitCompletion); cdecl;
    procedure sendEvent(event: UIEvent); cdecl;
    function keyWindow: UIWindow; cdecl;
    function windows: NSArray; cdecl;
    function sendAction(action: SEL; &to: Pointer; from: Pointer;
      forEvent: UIEvent): Boolean; cdecl;
    procedure setNetworkActivityIndicatorVisible(networkActivityIndicatorVisible
      : Boolean); cdecl;
    function isNetworkActivityIndicatorVisible: Boolean; cdecl;
    function statusBarStyle: UIStatusBarStyle; cdecl;
    function isStatusBarHidden: Boolean; cdecl;
    function statusBarOrientation: UIInterfaceOrientation; cdecl;
    function supportedInterfaceOrientationsForWindow(window: UIWindow)
      : UIInterfaceOrientationMask; cdecl;
    function statusBarOrientationAnimationDuration: NSTimeInterval; cdecl;
    function statusBarFrame: CGRect; cdecl;
    procedure setApplicationIconBadgeNumber(applicationIconBadgeNumber
      : NSInteger); cdecl;
    function applicationIconBadgeNumber: NSInteger; cdecl;
    procedure setApplicationSupportsShakeToEdit(applicationSupportsShakeToEdit
      : Boolean); cdecl;
    function applicationSupportsShakeToEdit: Boolean; cdecl;
    function applicationState: UIApplicationState; cdecl;
    function backgroundTimeRemaining: NSTimeInterval; cdecl;
    function beginBackgroundTaskWithExpirationHandler(handler: TUIKitAction)
      : UIBackgroundTaskIdentifier; cdecl;
    function beginBackgroundTaskWithName(taskName: NSString;
      expirationHandler: TUIKitAction): UIBackgroundTaskIdentifier; cdecl;
    procedure endBackgroundTask(identifier: UIBackgroundTaskIdentifier); cdecl;
    procedure setMinimumBackgroundFetchInterval(minimumBackgroundFetchInterval
      : NSTimeInterval); cdecl;
    function backgroundRefreshStatus: UIBackgroundRefreshStatus; cdecl;
    function isProtectedDataAvailable: Boolean; cdecl;
    function userInterfaceLayoutDirection
      : UIUserInterfaceLayoutDirection; cdecl;
    function preferredContentSizeCategory: UIContentSizeCategory; cdecl;
    function connectedScenes: NSSet; cdecl;
    function openSessions: NSSet; cdecl;
    function supportsMultipleScenes: Boolean; cdecl;
    procedure requestSceneSessionActivation(sceneSession: UISceneSession;
      userActivity: NSUserActivity; options: UISceneActivationRequestOptions;
      errorHandler: TUIKitErrorHandler); cdecl;
    procedure requestSceneSessionDestruction(sceneSession: UISceneSession;
      options: UISceneDestructionRequestOptions;
      errorHandler: TUIKitErrorHandler); cdecl;
    procedure requestSceneSessionRefresh(sceneSession: UISceneSession); cdecl;
    procedure registerForRemoteNotifications; cdecl;
    procedure unregisterForRemoteNotifications; cdecl;
    function isRegisteredForRemoteNotifications: Boolean; cdecl;
    procedure registerForRemoteNotificationTypes
      (types: UIRemoteNotificationType); cdecl;
    function enabledRemoteNotificationTypes: UIRemoteNotificationType; cdecl;
    procedure presentLocalNotificationNow(notification
      : UILocalNotification); cdecl;
    procedure scheduleLocalNotification(notification
      : UILocalNotification); cdecl;
    procedure cancelLocalNotification(notification: UILocalNotification); cdecl;
    procedure cancelAllLocalNotifications; cdecl;
    procedure setScheduledLocalNotifications(scheduledLocalNotifications
      : NSArray); cdecl;
    function scheduledLocalNotifications: NSArray; cdecl;
    procedure registerUserNotificationSettings(notificationSettings
      : UIUserNotificationSettings); cdecl;
    function currentUserNotificationSettings: UIUserNotificationSettings; cdecl;
    procedure beginReceivingRemoteControlEvents; cdecl;
    procedure endReceivingRemoteControlEvents; cdecl;
    procedure setNewsstandIconImage(image: UIImage); cdecl;
    procedure setShortcutItems(shortcutItems: NSArray); cdecl;
    function shortcutItems: NSArray; cdecl;
    function supportsAlternateIcons: Boolean; cdecl;
    procedure setAlternateIconName(alternateIconName: NSString;
      completionHandler: TUIKitErrorHandler); cdecl;
    function alternateIconName: NSString; cdecl;
    procedure extendStateRestoration; cdecl;
    procedure completeStateRestoration; cdecl;
    procedure ignoreSnapshotOnNextApplicationLaunch; cdecl;
    procedure setProximitySensingEnabled(proximitySensingEnabled
      : Boolean); cdecl;
    function isProximitySensingEnabled: Boolean; cdecl;
    [MethodName('setStatusBarHidden:animated:')]
    procedure setStatusBarHiddenAnimated(hidden: Boolean;
      animated: Boolean); cdecl;
    [MethodName('setStatusBarOrientation:')]
    procedure setStatusBarOrientation(statusBarOrientation
      : UIInterfaceOrientation); cdecl;
    [MethodName('setStatusBarOrientation:animated:')]
    procedure setStatusBarOrientationAnimated(interfaceOrientation
      : UIInterfaceOrientation; animated: Boolean); cdecl;
    [MethodName('setStatusBarStyle:')]
    procedure setStatusBarStyle(statusBarStyle: UIStatusBarStyle); cdecl;
    [MethodName('setStatusBarStyle:animated:')]
    procedure setStatusBarStyleAnimated(statusBarStyle: UIStatusBarStyle;
      animated: Boolean); cdecl;
    [MethodName('setStatusBarHidden:')]
    procedure setStatusBarHidden(statusBarHidden: Boolean); cdecl;
    [MethodName('setStatusBarHidden:withAnimation:')]
    procedure setStatusBarHiddenWithAnimation(hidden: Boolean;
      withAnimation: UIStatusBarAnimation); cdecl;
    function setKeepAliveTimeout(timeout: NSTimeInterval; handler: TUIKitAction)
      : Boolean; cdecl;
    procedure clearKeepAliveTimeout; cdecl;
  end;

  TUIApplication = class(TOCGenericImport<UIApplicationClass, UIApplication>)
  end;

  PUIApplication = Pointer;

  UIUserNotificationSettingsClass = interface(NSObjectClass)
    ['{F0B2BA7D-FBC6-4905-AE87-75566C702093}']
    { class } function settingsForTypes(types: UIUserNotificationType;
      categories: NSSet): Pointer { instancetype }; cdecl;
  end;

  UIUserNotificationSettings = interface(NSObject)
    ['{476F5B4F-4A19-4710-9AB3-9E2DFA230DB6}']
    function types: UIUserNotificationType; cdecl;
    function categories: NSSet; cdecl;
  end;

  TUIUserNotificationSettings = class
    (TOCGenericImport<UIUserNotificationSettingsClass,
    UIUserNotificationSettings>)
  end;

  PUIUserNotificationSettings = Pointer;

  UIApplicationShortcutItemClass = interface(NSObjectClass)
    ['{F080D63B-A937-4519-8624-DD4155F017D1}']
  end;

  UIApplicationShortcutItem = interface(NSObject)
    ['{CA39865D-C844-4627-B51A-89C53E9DD379}']
    [MethodName('initWithType:localizedTitle:localizedSubtitle:icon:userInfo:')]
    function initWithTypeLocalizedTitleLocalizedSubtitleIconUserInfo
      (&type: NSString; localizedTitle: NSString; localizedSubtitle: NSString;
      icon: UIApplicationShortcutIcon; userInfo: NSDictionary)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithType:localizedTitle:')]
    function initWithTypeLocalizedTitle(&type: NSString;
      localizedTitle: NSString): Pointer { instancetype }; cdecl;
    function &type: NSString; cdecl;
    function localizedTitle: NSString; cdecl;
    function localizedSubtitle: NSString; cdecl;
    function icon: UIApplicationShortcutIcon; cdecl;
    function userInfo: NSDictionary; cdecl;
    function targetContentIdentifier: Pointer; cdecl;
  end;

  TUIApplicationShortcutItem = class
    (TOCGenericImport<UIApplicationShortcutItemClass,
    UIApplicationShortcutItem>)
  end;

  PUIApplicationShortcutItem = Pointer;

  UIOpenURLContextClass = interface(NSObjectClass)
    ['{37CC3FCB-1BA7-4E75-84A9-CBBBD4359737}']
  end;

  UIOpenURLContext = interface(NSObject)
    ['{3C469AA3-B846-4389-993A-A8BFFB0AD149}']
    function url: NSURL; cdecl;
    function options: UISceneOpenURLOptions; cdecl;
  end;

  TUIOpenURLContext = class(TOCGenericImport<UIOpenURLContextClass,
    UIOpenURLContext>)
  end;

  PUIOpenURLContext = Pointer;

  UISceneOpenExternalURLOptionsClass = interface(NSObjectClass)
    ['{4A746CC5-7F6B-4FD8-B173-34B10A6EE304}']
  end;

  UISceneOpenExternalURLOptions = interface(NSObject)
    ['{81F8D822-5B54-40F3-86A6-64BEC31DB201}']
    procedure setUniversalLinksOnly(universalLinksOnly: Boolean); cdecl;
    function universalLinksOnly: Boolean; cdecl;
    procedure setEventAttribution(eventAttribution: UIEventAttribution); cdecl;
    function eventAttribution: UIEventAttribution; cdecl;
  end;

  TUISceneOpenExternalURLOptions = class
    (TOCGenericImport<UISceneOpenExternalURLOptionsClass,
    UISceneOpenExternalURLOptions>)
  end;

  PUISceneOpenExternalURLOptions = Pointer;

  UISceneActivationConditionsClass = interface(NSObjectClass)
    ['{1B622EDF-8CEA-4CAC-889E-EEBFF09CD019}']
  end;

  UISceneActivationConditions = interface(NSObject)
    ['{19D8F1C4-3F0A-49B3-938B-DF64AA46D66B}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(aDecoder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setCanActivateForTargetContentIdentifierPredicate
      (canActivateForTargetContentIdentifierPredicate: NSPredicate); cdecl;
    function canActivateForTargetContentIdentifierPredicate: NSPredicate; cdecl;
    procedure setPrefersToActivateForTargetContentIdentifierPredicate
      (prefersToActivateForTargetContentIdentifierPredicate
      : NSPredicate); cdecl;
    function prefersToActivateForTargetContentIdentifierPredicate
      : NSPredicate; cdecl;
    procedure setTargetContentIdentifier(targetContentIdentifier
      : NSString); cdecl;
    function targetContentIdentifier: NSString; cdecl;
  end;

  TUISceneActivationConditions = class
    (TOCGenericImport<UISceneActivationConditionsClass,
    UISceneActivationConditions>)
  end;

  PUISceneActivationConditions = Pointer;

  UIPointerLockStateClass = interface(NSObjectClass)
    ['{945430E0-C027-4A40-AE9D-ED65EAEED14C}']
  end;

  UIPointerLockState = interface(NSObject)
    ['{E3695592-8E30-4390-98D0-B6FA83DC9B80}']
    function isLocked: Boolean; cdecl;
  end;

  TUIPointerLockState = class(TOCGenericImport<UIPointerLockStateClass,
    UIPointerLockState>)
  end;

  PUIPointerLockState = Pointer;

  UINavigationItemClass = interface(NSObjectClass)
    ['{F19B219C-7C0C-48C3-B853-9AD68531C664}']
  end;

  UINavigationItem = interface(NSObject)
    ['{596A5691-9CEE-4D13-881B-D9B7C6785D83}']
    function initWithTitle(title: NSString): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setTitleView(titleView: UIView); cdecl;
    function titleView: UIView; cdecl;
    procedure setPrompt(prompt: NSString); cdecl;
    function prompt: NSString; cdecl;
    procedure setBackBarButtonItem(backBarButtonItem: UIBarButtonItem); cdecl;
    function backBarButtonItem: UIBarButtonItem; cdecl;
    procedure setBackButtonTitle(backButtonTitle: NSString); cdecl;
    function backButtonTitle: NSString; cdecl;
    [MethodName('setHidesBackButton:')]
    procedure setHidesBackButton(hidesBackButton: Boolean); cdecl;
    function hidesBackButton: Boolean; cdecl;
    [MethodName('setHidesBackButton:animated:')]
    procedure setHidesBackButtonAnimated(hidesBackButton: Boolean;
      animated: Boolean); cdecl;
    procedure setBackButtonDisplayMode(backButtonDisplayMode
      : UINavigationItemBackButtonDisplayMode); cdecl;
    function backButtonDisplayMode
      : UINavigationItemBackButtonDisplayMode; cdecl;
    procedure setBackAction(backAction: UIAction); cdecl;
    function backAction: UIAction; cdecl;
    procedure setTitleMenuProvider(titleMenuProvider
      : TUIKitOptionsMenuProvider); cdecl;
    function titleMenuProvider: TUIKitOptionsMenuProvider; cdecl;
    procedure setRenameDelegate(renameDelegate: Pointer); cdecl;
    function renameDelegate: Pointer; cdecl;
    procedure setDocumentProperties(documentProperties
      : UIDocumentProperties); cdecl;
    function documentProperties: UIDocumentProperties; cdecl;
    [MethodName('setLeftBarButtonItems:')]
    procedure setLeftBarButtonItems(leftBarButtonItems: NSArray); cdecl;
    function leftBarButtonItems: NSArray; cdecl;
    [MethodName('setRightBarButtonItems:')]
    procedure setRightBarButtonItems(rightBarButtonItems: NSArray); cdecl;
    function rightBarButtonItems: NSArray; cdecl;
    [MethodName('setLeftBarButtonItems:animated:')]
    procedure setLeftBarButtonItemsAnimated(items: NSArray;
      animated: Boolean); cdecl;
    [MethodName('setRightBarButtonItems:animated:')]
    procedure setRightBarButtonItemsAnimated(items: NSArray;
      animated: Boolean); cdecl;
    procedure setLeftItemsSupplementBackButton(leftItemsSupplementBackButton
      : Boolean); cdecl;
    function leftItemsSupplementBackButton: Boolean; cdecl;
    [MethodName('setLeftBarButtonItem:')]
    procedure setLeftBarButtonItem(leftBarButtonItem: UIBarButtonItem); cdecl;
    function leftBarButtonItem: UIBarButtonItem; cdecl;
    [MethodName('setRightBarButtonItem:')]
    procedure setRightBarButtonItem(rightBarButtonItem: UIBarButtonItem); cdecl;
    function rightBarButtonItem: UIBarButtonItem; cdecl;
    [MethodName('setLeftBarButtonItem:animated:')]
    procedure setLeftBarButtonItemAnimated(item: UIBarButtonItem;
      animated: Boolean); cdecl;
    [MethodName('setRightBarButtonItem:animated:')]
    procedure setRightBarButtonItemAnimated(item: UIBarButtonItem;
      animated: Boolean); cdecl;
    procedure setCustomizationIdentifier(customizationIdentifier
      : NSString); cdecl;
    function customizationIdentifier: NSString; cdecl;
    procedure setLeadingItemGroups(leadingItemGroups: NSArray); cdecl;
    function leadingItemGroups: NSArray; cdecl;
    procedure setCenterItemGroups(centerItemGroups: NSArray); cdecl;
    function centerItemGroups: NSArray; cdecl;
    procedure setTrailingItemGroups(trailingItemGroups: NSArray); cdecl;
    function trailingItemGroups: NSArray; cdecl;
    procedure setPinnedTrailingGroup(pinnedTrailingGroup
      : UIBarButtonItemGroup); cdecl;
    function pinnedTrailingGroup: UIBarButtonItemGroup; cdecl;
    procedure setAdditionalOverflowItems(additionalOverflowItems
      : UIDeferredMenuElement); cdecl;
    function additionalOverflowItems: UIDeferredMenuElement; cdecl;
    function overflowPresentationSource: Pointer; cdecl;
    procedure setLargeTitleDisplayMode(largeTitleDisplayMode
      : UINavigationItemLargeTitleDisplayMode); cdecl;
    function largeTitleDisplayMode
      : UINavigationItemLargeTitleDisplayMode; cdecl;
    procedure setStyle(style: UINavigationItemStyle); cdecl;
    function style: UINavigationItemStyle; cdecl;
    procedure setSearchController(searchController: UISearchController); cdecl;
    function searchController: UISearchController; cdecl;
    procedure setHidesSearchBarWhenScrolling(hidesSearchBarWhenScrolling
      : Boolean); cdecl;
    function hidesSearchBarWhenScrolling: Boolean; cdecl;
    procedure setPreferredSearchBarPlacement(preferredSearchBarPlacement
      : UINavigationItemSearchBarPlacement); cdecl;
    function preferredSearchBarPlacement
      : UINavigationItemSearchBarPlacement; cdecl;
    function searchBarPlacement: UINavigationItemSearchBarPlacement; cdecl;
    procedure setStandardAppearance(standardAppearance
      : UINavigationBarAppearance); cdecl;
    function standardAppearance: UINavigationBarAppearance; cdecl;
    procedure setCompactAppearance(compactAppearance
      : UINavigationBarAppearance); cdecl;
    function compactAppearance: UINavigationBarAppearance; cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance
      : UINavigationBarAppearance); cdecl;
    function scrollEdgeAppearance: UINavigationBarAppearance; cdecl;
    procedure setCompactScrollEdgeAppearance(compactScrollEdgeAppearance
      : UINavigationBarAppearance); cdecl;
    function compactScrollEdgeAppearance: UINavigationBarAppearance; cdecl;
  end;

  TUINavigationItem = class(TOCGenericImport<UINavigationItemClass,
    UINavigationItem>)
  end;

  PUINavigationItem = Pointer;

  UITabBarItemClass = interface(UIBarItemClass)
    ['{F2D4D46F-58C3-4A3A-BC4C-F52AD0673AD5}']
  end;

  UITabBarItem = interface(UIBarItem)
    ['{1ACFBFDA-CB04-4E78-AB71-C6A1A5638536}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    [MethodName('initWithTitle:image:tag:')]
    function initWithTitleImageTag(title: NSString; image: UIImage;
      tag: NSInteger): Pointer { instancetype }; cdecl;
    [MethodName('initWithTitle:image:selectedImage:')]
    function initWithTitleImageSelectedImage(title: NSString; image: UIImage;
      selectedImage: UIImage): Pointer { instancetype }; cdecl;
    function initWithTabBarSystemItem(systemItem: UITabBarSystemItem;
      tag: NSInteger): Pointer { instancetype }; cdecl;
    procedure setSelectedImage(selectedImage: UIImage); cdecl;
    function selectedImage: UIImage; cdecl;
    procedure setBadgeValue(badgeValue: NSString); cdecl;
    function badgeValue: NSString; cdecl;
    procedure setFinishedSelectedImage(selectedImage: UIImage;
      withFinishedUnselectedImage: UIImage); cdecl;
    function finishedSelectedImage: UIImage; cdecl;
    function finishedUnselectedImage: UIImage; cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment
      : UIOffset); cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
    procedure setBadgeColor(badgeColor: UIColor); cdecl;
    function badgeColor: UIColor; cdecl;
    procedure setBadgeTextAttributes(textAttributes: NSDictionary;
      forState: UIControlState); cdecl;
    function badgeTextAttributesForState(state: UIControlState)
      : NSDictionary; cdecl;
    procedure setStandardAppearance(standardAppearance
      : UITabBarAppearance); cdecl;
    function standardAppearance: UITabBarAppearance; cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance
      : UITabBarAppearance); cdecl;
    function scrollEdgeAppearance: UITabBarAppearance; cdecl;
  end;

  TUITabBarItem = class(TOCGenericImport<UITabBarItemClass, UITabBarItem>)
  end;

  PUITabBarItem = Pointer;

  UISearchDisplayControllerClass = interface(NSObjectClass)
    ['{45A1F4BB-6D8D-46E5-84CC-353FBE6F8482}']
  end;

  UISearchDisplayController = interface(NSObject)
    ['{90A67970-36D3-466A-9ACC-EA6A2FA9456D}']
    function initWithSearchBar(searchBar: UISearchBar;
      contentsController: UIViewController): Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    [MethodName('setActive:')]
    procedure setActive(active: Boolean); cdecl;
    function isActive: Boolean; cdecl;
    [MethodName('setActive:animated:')]
    procedure setActiveAnimated(visible: Boolean; animated: Boolean); cdecl;
    function searchBar: UISearchBar; cdecl;
    function searchContentsController: UIViewController; cdecl;
    function searchResultsTableView: UITableView; cdecl;
    procedure setSearchResultsDataSource(searchResultsDataSource
      : Pointer); cdecl;
    function searchResultsDataSource: Pointer; cdecl;
    procedure setSearchResultsDelegate(searchResultsDelegate: Pointer); cdecl;
    function searchResultsDelegate: Pointer; cdecl;
    procedure setSearchResultsTitle(searchResultsTitle: NSString); cdecl;
    function searchResultsTitle: NSString; cdecl;
    procedure setDisplaysSearchBarInNavigationBar
      (displaysSearchBarInNavigationBar: Boolean); cdecl;
    function displaysSearchBarInNavigationBar: Boolean; cdecl;
    function navigationItem: UINavigationItem; cdecl;
  end;

  TUISearchDisplayController = class
    (TOCGenericImport<UISearchDisplayControllerClass,
    UISearchDisplayController>)
  end;

  PUISearchDisplayController = Pointer;

  UIStoryboardClass = interface(NSObjectClass)
    ['{CE7302FA-CDDD-4BE1-8A4A-371789CFBEA3}']
    { class } function storyboardWithName(name: NSString; bundle: NSBundle)
      : UIStoryboard; cdecl;
  end;

  UIStoryboard = interface(NSObject)
    ['{273E8A78-92E7-4685-8C7B-8F4D1AD4A091}']
    function instantiateInitialViewController: UIViewController; cdecl;
    function instantiateInitialViewControllerWithCreator
      (block: UIStoryboardViewControllerCreator): UIViewController; cdecl;
    [MethodName('instantiateViewControllerWithIdentifier:')]
    function instantiateViewControllerWithIdentifier(identifier: NSString)
      : UIViewController; cdecl;
    [MethodName('instantiateViewControllerWithIdentifier:creator:')]
    function instantiateViewControllerWithIdentifierCreator
      (identifier: NSString; creator: UIStoryboardViewControllerCreator)
      : UIViewController; cdecl;
  end;

  TUIStoryboard = class(TOCGenericImport<UIStoryboardClass, UIStoryboard>)
  end;

  PUIStoryboard = Pointer;

  UIStoryboardSegueClass = interface(NSObjectClass)
    ['{6F50BBCC-9E36-41F2-9C4D-821F5354960B}']
    { class } function segueWithIdentifier(identifier: NSString;
      source: UIViewController; destination: UIViewController;
      performHandler: TUIKitAction): Pointer { instancetype }; cdecl;
  end;

  UIStoryboardSegue = interface(NSObject)
    ['{8B447725-51F3-413E-AD35-75FC33E942EF}']
    function initWithIdentifier(identifier: NSString; source: UIViewController;
      destination: UIViewController): Pointer { instancetype }; cdecl;
    function identifier: NSString; cdecl;
    function sourceViewController: UIViewController; cdecl;
    function destinationViewController: UIViewController; cdecl;
    procedure perform; cdecl;
  end;

  TUIStoryboardSegue = class(TOCGenericImport<UIStoryboardSegueClass,
    UIStoryboardSegue>)
  end;

  PUIStoryboardSegue = Pointer;

  UIStoryboardUnwindSegueSourceClass = interface(NSObjectClass)
    ['{FE23AB66-F57B-4E21-8C76-2EB16A1D8987}']
  end;

  UIStoryboardUnwindSegueSource = interface(NSObject)
    ['{EF4DF141-0C72-47D3-812A-A7B43528A1F3}']
    function sourceViewController: UIViewController; cdecl;
    function unwindAction: SEL; cdecl;
    function sender: Pointer; cdecl;
  end;

  TUIStoryboardUnwindSegueSource = class
    (TOCGenericImport<UIStoryboardUnwindSegueSourceClass,
    UIStoryboardUnwindSegueSource>)
  end;

  PUIStoryboardUnwindSegueSource = Pointer;

  UIScrollViewClass = interface(UIViewClass)
    ['{0C33219B-C589-4841-B9B4-7B95EE28C0D5}']
  end;

  UIScrollView = interface(UIView)
    ['{693D985F-A97C-497A-AC5E-B2E657B31032}']
    [MethodName('setContentOffset:')]
    procedure setContentOffset(contentOffset: CGPoint); cdecl;
    function contentOffset: CGPoint; cdecl;
    procedure setContentSize(contentSize: CGSize); cdecl;
    function contentSize: CGSize; cdecl;
    procedure setContentInset(contentInset: UIEdgeInsets); cdecl;
    function contentInset: UIEdgeInsets; cdecl;
    function adjustedContentInset: UIEdgeInsets; cdecl;
    procedure adjustedContentInsetDidChange; cdecl;
    procedure setContentInsetAdjustmentBehavior(contentInsetAdjustmentBehavior
      : UIScrollViewContentInsetAdjustmentBehavior); cdecl;
    function contentInsetAdjustmentBehavior
      : UIScrollViewContentInsetAdjustmentBehavior; cdecl;
    procedure setAutomaticallyAdjustsScrollIndicatorInsets
      (automaticallyAdjustsScrollIndicatorInsets: Boolean); cdecl;
    function automaticallyAdjustsScrollIndicatorInsets: Boolean; cdecl;
    function contentLayoutGuide: UILayoutGuide; cdecl;
    function frameLayoutGuide: UILayoutGuide; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setDirectionalLockEnabled(directionalLockEnabled: Boolean); cdecl;
    function isDirectionalLockEnabled: Boolean; cdecl;
    procedure setBounces(bounces: Boolean); cdecl;
    function bounces: Boolean; cdecl;
    procedure setAlwaysBounceVertical(alwaysBounceVertical: Boolean); cdecl;
    function alwaysBounceVertical: Boolean; cdecl;
    procedure setAlwaysBounceHorizontal(alwaysBounceHorizontal: Boolean); cdecl;
    function alwaysBounceHorizontal: Boolean; cdecl;
    procedure setPagingEnabled(pagingEnabled: Boolean); cdecl;
    function isPagingEnabled: Boolean; cdecl;
    procedure setScrollEnabled(scrollEnabled: Boolean); cdecl;
    function isScrollEnabled: Boolean; cdecl;
    procedure setShowsVerticalScrollIndicator(showsVerticalScrollIndicator
      : Boolean); cdecl;
    function showsVerticalScrollIndicator: Boolean; cdecl;
    procedure setShowsHorizontalScrollIndicator(showsHorizontalScrollIndicator
      : Boolean); cdecl;
    function showsHorizontalScrollIndicator: Boolean; cdecl;
    procedure setIndicatorStyle(indicatorStyle
      : UIScrollViewIndicatorStyle); cdecl;
    function indicatorStyle: UIScrollViewIndicatorStyle; cdecl;
    procedure setVerticalScrollIndicatorInsets(verticalScrollIndicatorInsets
      : UIEdgeInsets); cdecl;
    function verticalScrollIndicatorInsets: UIEdgeInsets; cdecl;
    procedure setHorizontalScrollIndicatorInsets(horizontalScrollIndicatorInsets
      : UIEdgeInsets); cdecl;
    function horizontalScrollIndicatorInsets: UIEdgeInsets; cdecl;
    procedure setScrollIndicatorInsets(scrollIndicatorInsets
      : UIEdgeInsets); cdecl;
    function scrollIndicatorInsets: UIEdgeInsets; cdecl;
    procedure setDecelerationRate(decelerationRate
      : UIScrollViewDecelerationRate); cdecl;
    function decelerationRate: UIScrollViewDecelerationRate; cdecl;
    procedure setIndexDisplayMode(indexDisplayMode
      : UIScrollViewIndexDisplayMode); cdecl;
    function indexDisplayMode: UIScrollViewIndexDisplayMode; cdecl;
    [MethodName('setContentOffset:animated:')]
    procedure setContentOffsetAnimated(contentOffset: CGPoint;
      animated: Boolean); cdecl;
    procedure scrollRectToVisible(rect: CGRect; animated: Boolean); cdecl;
    procedure flashScrollIndicators; cdecl;
    function isTracking: Boolean; cdecl;
    function isDragging: Boolean; cdecl;
    function isDecelerating: Boolean; cdecl;
    procedure setDelaysContentTouches(delaysContentTouches: Boolean); cdecl;
    function delaysContentTouches: Boolean; cdecl;
    procedure setCanCancelContentTouches(canCancelContentTouches
      : Boolean); cdecl;
    function canCancelContentTouches: Boolean; cdecl;
    function touchesShouldBegin(touches: NSSet; withEvent: UIEvent;
      inContentView: UIView): Boolean; cdecl;
    function touchesShouldCancelInContentView(view: UIView): Boolean; cdecl;
    procedure setMinimumZoomScale(minimumZoomScale: CGFloat); cdecl;
    function minimumZoomScale: CGFloat; cdecl;
    procedure setMaximumZoomScale(maximumZoomScale: CGFloat); cdecl;
    function maximumZoomScale: CGFloat; cdecl;
    [MethodName('setZoomScale:')]
    procedure setZoomScale(zoomScale: CGFloat); cdecl;
    function zoomScale: CGFloat; cdecl;
    [MethodName('setZoomScale:animated:')]
    procedure setZoomScaleAnimated(scale: CGFloat; animated: Boolean); cdecl;
    procedure zoomToRect(rect: CGRect; animated: Boolean); cdecl;
    procedure setBouncesZoom(bouncesZoom: Boolean); cdecl;
    function bouncesZoom: Boolean; cdecl;
    function isZooming: Boolean; cdecl;
    function isZoomBouncing: Boolean; cdecl;
    procedure setScrollsToTop(scrollsToTop: Boolean); cdecl;
    function scrollsToTop: Boolean; cdecl;
    function panGestureRecognizer: UIPanGestureRecognizer; cdecl;
    function pinchGestureRecognizer: UIPinchGestureRecognizer; cdecl;
    function directionalPressGestureRecognizer: UIGestureRecognizer; cdecl;
    procedure setKeyboardDismissMode(keyboardDismissMode
      : UIScrollViewKeyboardDismissMode); cdecl;
    function keyboardDismissMode: UIScrollViewKeyboardDismissMode; cdecl;
    procedure setRefreshControl(refreshControl: UIRefreshControl); cdecl;
    function refreshControl: UIRefreshControl; cdecl;
  end;

  TUIScrollView = class(TOCGenericImport<UIScrollViewClass, UIScrollView>)
  end;

  PUIScrollView = Pointer;

  UIPresentationControllerClass = interface(NSObjectClass)
    ['{8334FF06-E11D-4619-9C74-5E4E21CC7BA4}']
  end;

  UIPresentationController = interface(NSObject)
    ['{D5678EA1-EE02-45B8-9701-27414A85A6A5}']
    function presentingViewController: UIViewController; cdecl;
    function presentedViewController: UIViewController; cdecl;
    function presentationStyle: UIModalPresentationStyle; cdecl;
    function containerView: UIView; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function initWithPresentedViewController(presentedViewController
      : UIViewController; presentingViewController: UIViewController)
      : Pointer { instancetype }; cdecl;
    function adaptivePresentationStyle: UIModalPresentationStyle; cdecl;
    function adaptivePresentationStyleForTraitCollection(traitCollection
      : UITraitCollection): UIModalPresentationStyle; cdecl;
    procedure containerViewWillLayoutSubviews; cdecl;
    procedure containerViewDidLayoutSubviews; cdecl;
    function presentedView: UIView; cdecl;
    function frameOfPresentedViewInContainerView: CGRect; cdecl;
    function shouldPresentInFullscreen: Boolean; cdecl;
    function shouldRemovePresentersView: Boolean; cdecl;
    procedure presentationTransitionWillBegin; cdecl;
    procedure presentationTransitionDidEnd(completed: Boolean); cdecl;
    procedure dismissalTransitionWillBegin; cdecl;
    procedure dismissalTransitionDidEnd(completed: Boolean); cdecl;
    procedure setOverrideTraitCollection(overrideTraitCollection
      : UITraitCollection); cdecl;
    function overrideTraitCollection: UITraitCollection; cdecl;
  end;

  TUIPresentationController = class
    (TOCGenericImport<UIPresentationControllerClass, UIPresentationController>)
  end;

  PUIPresentationController = Pointer;

  UISheetPresentationControllerClass = interface(UIPresentationControllerClass)
    ['{7DC309A2-B7A7-4CE2-88FA-D13D08F9CA44}']
  end;

  UISheetPresentationController = interface(UIPresentationController)
    ['{6D2C2F6A-357D-4CDE-B75B-DA0A86E6B365}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setSourceView(sourceView: UIView); cdecl;
    function sourceView: UIView; cdecl;
    procedure setPrefersEdgeAttachedInCompactHeight
      (prefersEdgeAttachedInCompactHeight: Boolean); cdecl;
    function prefersEdgeAttachedInCompactHeight: Boolean; cdecl;
    procedure setWidthFollowsPreferredContentSizeWhenEdgeAttached
      (widthFollowsPreferredContentSizeWhenEdgeAttached: Boolean); cdecl;
    function widthFollowsPreferredContentSizeWhenEdgeAttached: Boolean; cdecl;
    procedure setPrefersGrabberVisible(prefersGrabberVisible: Boolean); cdecl;
    function prefersGrabberVisible: Boolean; cdecl;
    procedure setPreferredCornerRadius(preferredCornerRadius: CGFloat); cdecl;
    function preferredCornerRadius: CGFloat; cdecl;
    procedure setDetents(detents: NSArray); cdecl;
    function detents: NSArray; cdecl;
    procedure invalidateDetents; cdecl;
    procedure setSelectedDetentIdentifier(selectedDetentIdentifier
      : UISheetPresentationControllerDetentIdentifier); cdecl;
    function selectedDetentIdentifier
      : UISheetPresentationControllerDetentIdentifier; cdecl;
    procedure setLargestUndimmedDetentIdentifier(largestUndimmedDetentIdentifier
      : UISheetPresentationControllerDetentIdentifier); cdecl;
    function largestUndimmedDetentIdentifier
      : UISheetPresentationControllerDetentIdentifier; cdecl;
    procedure setPrefersScrollingExpandsWhenScrolledToEdge
      (prefersScrollingExpandsWhenScrolledToEdge: Boolean); cdecl;
    function prefersScrollingExpandsWhenScrolledToEdge: Boolean; cdecl;
    procedure animateChanges(changes: TUIKitAction); cdecl;
  end;

  TUISheetPresentationController = class
    (TOCGenericImport<UISheetPresentationControllerClass,
    UISheetPresentationController>)
  end;

  PUISheetPresentationController = Pointer;

  UIPopoverPresentationControllerClass = interface
    (UIPresentationControllerClass)
    ['{A7976599-5D8C-41F7-B861-08504D3734C9}']
  end;

  UIPopoverPresentationController = interface(UIPresentationController)
    ['{EA3DFD8A-ADD7-4BAD-8634-50E56B675E80}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setPermittedArrowDirections(permittedArrowDirections
      : UIPopoverArrowDirection); cdecl;
    function permittedArrowDirections: UIPopoverArrowDirection; cdecl;
    procedure setSourceView(sourceView: UIView); cdecl;
    function sourceView: UIView; cdecl;
    procedure setSourceRect(sourceRect: CGRect); cdecl;
    function sourceRect: CGRect; cdecl;
    procedure setCanOverlapSourceViewRect(canOverlapSourceViewRect
      : Boolean); cdecl;
    function canOverlapSourceViewRect: Boolean; cdecl;
    procedure setSourceItem(sourceItem: Pointer); cdecl;
    function sourceItem: Pointer; cdecl;
    procedure setBarButtonItem(barButtonItem: UIBarButtonItem); cdecl;
    function barButtonItem: UIBarButtonItem; cdecl;
    function arrowDirection: UIPopoverArrowDirection; cdecl;
    procedure setPassthroughViews(passthroughViews: NSArray); cdecl;
    function passthroughViews: NSArray; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setPopoverLayoutMargins(popoverLayoutMargins
      : UIEdgeInsets); cdecl;
    function popoverLayoutMargins: UIEdgeInsets; cdecl;
    procedure setPopoverBackgroundViewClass(popoverBackgroundViewClass
      : Pointer); cdecl;
    function popoverBackgroundViewClass: Pointer; cdecl;
    function adaptiveSheetPresentationController
      : UISheetPresentationController; cdecl;
  end;

  TUIPopoverPresentationController = class
    (TOCGenericImport<UIPopoverPresentationControllerClass,
    UIPopoverPresentationController>)
  end;

  PUIPopoverPresentationController = Pointer;

  UIPreviewActionClass = interface(NSObjectClass)
    ['{ADA9D21A-95ED-45C7-9E5D-51144262AEAC}']
    { class } function actionWithTitle(title: NSString;
      style: UIPreviewActionStyle; handler: TUIKitHandler1)
      : Pointer { instancetype }; cdecl;
  end;

  UIPreviewAction = interface(NSObject)
    ['{6F09F90D-C340-4058-8719-CB4153A83C18}']
    function handler: TUIKitHandler; cdecl;
  end;

  TUIPreviewAction = class(TOCGenericImport<UIPreviewActionClass,
    UIPreviewAction>)
  end;

  PUIPreviewAction = Pointer;

  UIPreviewActionGroupClass = interface(NSObjectClass)
    ['{66FDE95A-0AB8-4375-B10D-068E64E614F9}']
    { class } function actionGroupWithTitle(title: NSString;
      style: UIPreviewActionStyle; actions: NSArray)
      : Pointer { instancetype }; cdecl;
  end;

  UIPreviewActionGroup = interface(NSObject)
    ['{0661390A-6ED6-4CCC-B8AA-12EE06C6D729}']
  end;

  TUIPreviewActionGroup = class(TOCGenericImport<UIPreviewActionGroupClass,
    UIPreviewActionGroup>)
  end;

  PUIPreviewActionGroup = Pointer;

  UICubicTimingParametersClass = interface(NSObjectClass)
    ['{089993E8-0FB8-4ED3-A16A-59D6F0FC10CF}']
  end;

  UICubicTimingParameters = interface(NSObject)
    ['{40563242-72D7-438C-A58D-40141D48EC33}']
    function animationCurve: UIViewAnimationCurve; cdecl;
    function controlPoint1: CGPoint; cdecl;
    function controlPoint2: CGPoint; cdecl;
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithAnimationCurve(curve: UIViewAnimationCurve)
      : Pointer { instancetype }; cdecl;
    function initWithControlPoint1(point1: CGPoint; controlPoint2: CGPoint)
      : Pointer { instancetype }; cdecl;
  end;

  TUICubicTimingParameters = class
    (TOCGenericImport<UICubicTimingParametersClass, UICubicTimingParameters>)
  end;

  PUICubicTimingParameters = Pointer;

  UISpringTimingParametersClass = interface(NSObjectClass)
    ['{48DC5AF6-EF9C-4ECC-94B0-1E075DDDAFF5}']
  end;

  UISpringTimingParameters = interface(NSObject)
    ['{B1F0A712-8E47-4D9C-AFEA-15083003513D}']
    function initialVelocity: CGVector; cdecl;
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    [MethodName('initWithDampingRatio:initialVelocity:')]
    function initWithDampingRatioInitialVelocity(ratio: CGFloat;
      initialVelocity: CGVector): Pointer { instancetype }; cdecl;
    function initWithMass(mass: CGFloat; stiffness: CGFloat; damping: CGFloat;
      initialVelocity: CGVector): Pointer { instancetype }; cdecl;
    [MethodName('initWithDampingRatio:')]
    function initWithDampingRatio(ratio: CGFloat)
      : Pointer { instancetype }; cdecl;
  end;

  TUISpringTimingParameters = class
    (TOCGenericImport<UISpringTimingParametersClass, UISpringTimingParameters>)
  end;

  PUISpringTimingParameters = Pointer;

  UIPercentDrivenInteractiveTransitionClass = interface(NSObjectClass)
    ['{21677AE4-21F9-466C-BE1D-E63B4C3F9746}']
  end;

  UIPercentDrivenInteractiveTransition = interface(NSObject)
    ['{F094AB4B-1CBB-435C-BBE5-493502095548}']
    function duration: CGFloat; cdecl;
    function percentComplete: CGFloat; cdecl;
    procedure setCompletionSpeed(completionSpeed: CGFloat); cdecl;
    function completionSpeed: CGFloat; cdecl;
    procedure setCompletionCurve(completionCurve: UIViewAnimationCurve); cdecl;
    function completionCurve: UIViewAnimationCurve; cdecl;
    procedure setTimingCurve(timingCurve: Pointer); cdecl;
    function timingCurve: Pointer; cdecl;
    procedure setWantsInteractiveStart(wantsInteractiveStart: Boolean); cdecl;
    function wantsInteractiveStart: Boolean; cdecl;
    procedure pauseInteractiveTransition; cdecl;
    procedure updateInteractiveTransition(percentComplete: CGFloat); cdecl;
    procedure cancelInteractiveTransition; cdecl;
    procedure finishInteractiveTransition; cdecl;
  end;

  TUIPercentDrivenInteractiveTransition = class
    (TOCGenericImport<UIPercentDrivenInteractiveTransitionClass,
    UIPercentDrivenInteractiveTransition>)
  end;

  PUIPercentDrivenInteractiveTransition = Pointer;

  UIActivityClass = interface(NSObjectClass)
    ['{057100B3-A243-43E0-9576-00CCD00C1B39}']
  end;

  UIActivity = interface(NSObject)
    ['{1929E7D8-830E-4DC4-940B-9236B07C24DE}']
    procedure setActivityCategory(activityCategory: UIActivityCategory); cdecl;
    function activityCategory: UIActivityCategory; cdecl;
    function activityType: UIActivityType; cdecl;
    function activityTitle: NSString; cdecl;
    function activityImage: UIImage; cdecl;
    function canPerformWithActivityItems(activityItems: NSArray)
      : Boolean; cdecl;
    procedure prepareWithActivityItems(activityItems: NSArray); cdecl;
    function activityViewController: UIViewController; cdecl;
    procedure performActivity; cdecl;
    procedure activityDidFinish(completed: Boolean); cdecl;
  end;

  TUIActivity = class(TOCGenericImport<UIActivityClass, UIActivity>)
  end;

  PUIActivity = Pointer;

  UIActivityViewControllerClass = interface(UIViewControllerClass)
    ['{2EB5FFC2-E35D-4ACC-AECB-75395C610E22}']
  end;

  UIActivityViewController = interface(UIViewController)
    ['{6218EA79-3C66-4870-95B2-9EF5EDA381A3}']
    function initWithActivityItems(activityItems: NSArray;
      applicationActivities: NSArray): Pointer { instancetype }; cdecl;
    procedure setCompletionHandler(completionHandler
      : UIActivityViewControllerCompletionHandler); cdecl;
    function completionHandler
      : UIActivityViewControllerCompletionHandler; cdecl;
    procedure setCompletionWithItemsHandler(completionWithItemsHandler
      : UIActivityViewControllerCompletionWithItemsHandler); cdecl;
    function completionWithItemsHandler
      : UIActivityViewControllerCompletionWithItemsHandler; cdecl;
    procedure setExcludedActivityTypes(excludedActivityTypes: NSArray); cdecl;
    function excludedActivityTypes: NSArray; cdecl;
    procedure setAllowsProminentActivity(allowsProminentActivity
      : Boolean); cdecl;
    function allowsProminentActivity: Boolean; cdecl;
    function initWithActivityItemsConfiguration(activityItemsConfiguration
      : Pointer): Pointer { instancetype }; cdecl;
  end;

  TUIActivityViewController = class
    (TOCGenericImport<UIActivityViewControllerClass, UIActivityViewController>)
  end;

  PUIActivityViewController = Pointer;

  UIDocumentBrowserActionClass = interface(NSObjectClass)
    ['{1F4DBD01-BFB3-4695-8F93-368E20CD59A6}']
  end;

  UIDocumentBrowserAction = interface(NSObject)
    ['{EDFDF724-AB27-424B-8AD4-EA52CDA5FBB8}']
    function initWithIdentifier(identifier: NSString; localizedTitle: NSString;
      availability: UIDocumentBrowserActionAvailability;
      handler: TUIKitRestorationHandler): Pointer { instancetype }; cdecl;
    function identifier: NSString; cdecl;
    function localizedTitle: NSString; cdecl;
    function availability: UIDocumentBrowserActionAvailability; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setSupportedContentTypes(supportedContentTypes: NSArray); cdecl;
    function supportedContentTypes: NSArray; cdecl;
    procedure setSupportsMultipleItems(supportsMultipleItems: Boolean); cdecl;
    function supportsMultipleItems: Boolean; cdecl;
  end;

  TUIDocumentBrowserAction = class
    (TOCGenericImport<UIDocumentBrowserActionClass, UIDocumentBrowserAction>)
  end;

  PUIDocumentBrowserAction = Pointer;

  UIDocumentBrowserTransitionControllerClass = interface(NSObjectClass)
    ['{F0DC44FB-AE7F-4684-86AB-A1199BA945A6}']
  end;

  UIDocumentBrowserTransitionController = interface(NSObject)
    ['{BC428688-43DB-44E0-804D-994708E97C9D}']
    procedure setLoadingProgress(loadingProgress: NSProgress); cdecl;
    function loadingProgress: NSProgress; cdecl;
    procedure setTargetView(targetView: UIView); cdecl;
    function targetView: UIView; cdecl;
  end;

  TUIDocumentBrowserTransitionController = class
    (TOCGenericImport<UIDocumentBrowserTransitionControllerClass,
    UIDocumentBrowserTransitionController>)
  end;

  PUIDocumentBrowserTransitionController = Pointer;

  UIDocumentBrowserViewControllerClass = interface(UIViewControllerClass)
    ['{394141E3-B892-45C3-8B05-13F6E39DB71D}']
  end;

  UIDocumentBrowserViewController = interface(UIViewController)
    ['{38A83B3A-FF07-4AF9-A858-67891241B8EF}']
    function initForOpeningFilesWithContentTypes(allowedContentTypes: NSArray)
      : Pointer { instancetype }; cdecl;
    function initForOpeningContentTypes(contentTypes: NSArray)
      : Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setAllowsDocumentCreation(allowsDocumentCreation: Boolean); cdecl;
    function allowsDocumentCreation: Boolean; cdecl;
    procedure setAllowsPickingMultipleItems(allowsPickingMultipleItems
      : Boolean); cdecl;
    function allowsPickingMultipleItems: Boolean; cdecl;
    function allowedContentTypes: NSArray; cdecl;
    function recentDocumentsContentTypes: NSArray; cdecl;
    function contentTypesForRecentDocuments: NSArray; cdecl;
    procedure setShouldShowFileExtensions(shouldShowFileExtensions
      : Boolean); cdecl;
    function shouldShowFileExtensions: Boolean; cdecl;
    procedure setAdditionalLeadingNavigationBarButtonItems
      (additionalLeadingNavigationBarButtonItems: NSArray); cdecl;
    function additionalLeadingNavigationBarButtonItems: NSArray; cdecl;
    procedure setAdditionalTrailingNavigationBarButtonItems
      (additionalTrailingNavigationBarButtonItems: NSArray); cdecl;
    function additionalTrailingNavigationBarButtonItems: NSArray; cdecl;
    procedure revealDocumentAtURL(url: NSURL; importIfNeeded: Boolean;
      completion: TUIKitCompletion2); cdecl;
    procedure importDocumentAtURL(documentURL: NSURL;
      nextToDocumentAtURL: NSURL; mode: UIDocumentBrowserImportMode;
      completionHandler: TUIKitCompletion2); cdecl;
    procedure renameDocumentAtURL(documentURL: NSURL; proposedName: NSString;
      completionHandler: TUIKitCompletion2); cdecl;
    function transitionControllerForDocumentAtURL(documentURL: NSURL)
      : UIDocumentBrowserTransitionController; cdecl;
    function transitionControllerForDocumentURL(documentURL: NSURL)
      : UIDocumentBrowserTransitionController; cdecl;
    procedure setCustomActions(customActions: NSArray); cdecl;
    function customActions: NSArray; cdecl;
    procedure setBrowserUserInterfaceStyle(browserUserInterfaceStyle
      : UIDocumentBrowserUserInterfaceStyle); cdecl;
    function browserUserInterfaceStyle
      : UIDocumentBrowserUserInterfaceStyle; cdecl;
    procedure setLocalizedCreateDocumentActionTitle
      (localizedCreateDocumentActionTitle: NSString); cdecl;
    function localizedCreateDocumentActionTitle: NSString; cdecl;
    procedure setDefaultDocumentAspectRatio(defaultDocumentAspectRatio
      : CGFloat); cdecl;
    function defaultDocumentAspectRatio: CGFloat; cdecl;
  end;

  TUIDocumentBrowserViewController = class
    (TOCGenericImport<UIDocumentBrowserViewControllerClass,
    UIDocumentBrowserViewController>)
  end;

  PUIDocumentBrowserViewController = Pointer;

  NSAttributedStringAttributeFixing = interface(IObjectiveC)
    ['{80A0FF52-08DD-4E8A-9D40-80B1E6B98C8E}']
    procedure fixAttributesInRange(range: NSRange); cdecl;
  end;

  NSAttributedStringDocumentFormats = interface(IObjectiveC)
    ['{24ADA4A7-A3A7-4C96-B677-C667C3844B7E}']
    function initWithURL(url: NSURL; options: NSDictionary;
      documentAttributes: NSDictionary; error: NSError)
      : Pointer { instancetype }; cdecl;
    function initWithData(data: NSData; options: NSDictionary;
      documentAttributes: NSDictionary; error: NSError)
      : Pointer { instancetype }; cdecl;
    function dataFromRange(range: NSRange; documentAttributes: NSDictionary;
      error: NSError): NSData; cdecl;
    function fileWrapperFromRange(range: NSRange;
      documentAttributes: NSDictionary; error: NSError): NSFileWrapper; cdecl;
  end;

  NSMutableAttributedStringDocumentFormats = interface(IObjectiveC)
    ['{3383B602-4858-46A0-972D-564202FBC231}']
    function readFromURL(url: NSURL; options: NSDictionary;
      documentAttributes: NSDictionary; error: NSError): Boolean; cdecl;
    function readFromData(data: NSData; options: NSDictionary;
      documentAttributes: NSDictionary; error: NSError): Boolean; cdecl;
  end;

  NSAttributedStringKitAdditions = interface(IObjectiveC)
    ['{B0199F9A-76F2-436C-A013-DA40A8C21B2C}']
    function containsAttachmentsInRange(range: NSRange): Boolean; cdecl;
  end;

  NSAttributedString_ItemProvider = interface(IObjectiveC)
    ['{4CA30382-7B37-49A9-A1EC-057DF256A0BC}']
  end;

  NSDeprecatedKitAdditions = interface(IObjectiveC)
    ['{E0538822-30BF-4DB6-8EE7-969C276C8B72}']
    function initWithFileURL(url: NSURL; options: NSDictionary;
      documentAttributes: NSDictionary; error: NSError)
      : Pointer { instancetype }; cdecl;
    function readFromFileURL(url: NSURL; options: NSDictionary;
      documentAttributes: NSDictionary; error: NSError): Boolean; cdecl;
  end;

  NSDataAssetClass = interface(NSObjectClass)
    ['{A64970B5-2CAB-4892-B050-06E3328D2451}']
  end;

  NSDataAsset = interface(NSObject)
    ['{B22C2A05-D164-4211-B7EE-4C65E4E41DB2}']
    [MethodName('initWithName:')]
    function initWithName(name: NSDataAssetName)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithName:bundle:')]
    function initWithNameBundle(name: NSDataAssetName; bundle: NSBundle)
      : Pointer { instancetype }; cdecl;
    function name: NSDataAssetName; cdecl;
    function data: NSData; cdecl;
    function typeIdentifier: NSString; cdecl;
  end;

  TNSDataAsset = class(TOCGenericImport<NSDataAssetClass, NSDataAsset>)
  end;

  PNSDataAsset = Pointer;

  NSDiffableDataSourceSectionSnapshotClass = interface(NSObjectClass)
    ['{2B86D48E-3665-4259-B09C-DB6010F8DEA3}']
  end;

  NSDiffableDataSourceSectionSnapshot = interface(NSObject)
    ['{C961FEE0-8E9D-4967-86DC-4A14E5C29D06}']
    function init: Pointer { instancetype }; cdecl;
    [MethodName('appendItems:')]
    procedure appendItems(items: NSArray); cdecl;
    [MethodName('appendItems:intoParentItem:')]
    procedure appendItemsIntoParentItem(items: NSArray;
      intoParentItem: ItemIdentifierType); cdecl;
    [MethodName('insertItems:beforeItem:')]
    procedure insertItemsBeforeItem(items: NSArray;
      beforeItem: ItemIdentifierType); cdecl;
    [MethodName('insertItems:afterItem:')]
    procedure insertItemsAfterItem(items: NSArray;
      afterItem: ItemIdentifierType); cdecl;
    procedure deleteItems(items: NSArray); cdecl;
    procedure deleteAllItems; cdecl;
    procedure expandItems(items: NSArray); cdecl;
    procedure collapseItems(items: NSArray); cdecl;
    procedure replaceChildrenOfParentItem(parentItem: ItemIdentifierType;
      withSnapshot: NSDiffableDataSourceSectionSnapshot); cdecl;
    [MethodName('insertSnapshot:beforeItem:')]
    procedure insertSnapshotBeforeItem
      (snapshot: NSDiffableDataSourceSectionSnapshot;
      beforeItem: ItemIdentifierType); cdecl;
    [MethodName('insertSnapshot:afterItem:')]
    function insertSnapshotAfterItem(snapshot
      : NSDiffableDataSourceSectionSnapshot; afterItem: ItemIdentifierType)
      : ItemIdentifierType; cdecl;
    function isExpanded(item: ItemIdentifierType): Boolean; cdecl;
    function isVisible(item: ItemIdentifierType): Boolean; cdecl;
    function containsItem(item: ItemIdentifierType): Boolean; cdecl;
    function levelOfItem(item: ItemIdentifierType): NSInteger; cdecl;
    function indexOfItem(item: ItemIdentifierType): NSInteger; cdecl;
    function items: NSArray; cdecl;
    function expandedItems: NSArray; cdecl;
    function parentOfChildItem(childItem: ItemIdentifierType)
      : ItemIdentifierType; cdecl;
    [MethodName('snapshotOfParentItem:')]
    function snapshotOfParentItem(parentItem: ItemIdentifierType)
      : NSDiffableDataSourceSectionSnapshot; cdecl;
    [MethodName('snapshotOfParentItem:includingParentItem:')]
    function snapshotOfParentItemIncludingParentItem
      (parentItem: ItemIdentifierType; includingParentItem: Boolean)
      : NSDiffableDataSourceSectionSnapshot; cdecl;
    function rootItems: NSArray; cdecl;
    function visibleItems: NSArray; cdecl;
    function visualDescription: NSString; cdecl;
  end;

  TNSDiffableDataSourceSectionSnapshot = class
    (TOCGenericImport<NSDiffableDataSourceSectionSnapshotClass,
    NSDiffableDataSourceSectionSnapshot>)
  end;

  PNSDiffableDataSourceSectionSnapshot = Pointer;

  NSLayoutManagerClass = interface(NSObjectClass)
    ['{FF7D5B16-7C67-4FDD-9538-680859BB8569}']
  end;

  NSLayoutManager = interface(NSObject)
    ['{DB6E4815-1871-4FA4-91BF-A0C19DAAAD87}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setTextStorage(textStorage: NSTextStorage); cdecl;
    function textStorage: NSTextStorage; cdecl;
    function textContainers: NSArray; cdecl;
    procedure addTextContainer(container: NSTextContainer); cdecl;
    procedure insertTextContainer(container: NSTextContainer;
      atIndex: NSUInteger); cdecl;
    procedure removeTextContainerAtIndex(index: NSUInteger); cdecl;
    procedure textContainerChangedGeometry(container: NSTextContainer); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setShowsInvisibleCharacters(showsInvisibleCharacters
      : Boolean); cdecl;
    function showsInvisibleCharacters: Boolean; cdecl;
    procedure setShowsControlCharacters(showsControlCharacters: Boolean); cdecl;
    function showsControlCharacters: Boolean; cdecl;
    procedure setUsesFontLeading(usesFontLeading: Boolean); cdecl;
    function usesFontLeading: Boolean; cdecl;
    procedure setAllowsNonContiguousLayout(allowsNonContiguousLayout
      : Boolean); cdecl;
    function allowsNonContiguousLayout: Boolean; cdecl;
    function hasNonContiguousLayout: Boolean; cdecl;
    procedure setLimitsLayoutForSuspiciousContents
      (limitsLayoutForSuspiciousContents: Boolean); cdecl;
    function limitsLayoutForSuspiciousContents: Boolean; cdecl;
    procedure setUsesDefaultHyphenation(usesDefaultHyphenation: Boolean); cdecl;
    function usesDefaultHyphenation: Boolean; cdecl;
    procedure invalidateGlyphsForCharacterRange(charRange: NSRange;
      changeInLength: NSInteger; actualCharacterRange: PNSRange); cdecl;
    procedure invalidateLayoutForCharacterRange(charRange: NSRange;
      actualCharacterRange: PNSRange); cdecl;
    procedure invalidateDisplayForCharacterRange(charRange: NSRange); cdecl;
    procedure invalidateDisplayForGlyphRange(glyphRange: NSRange); cdecl;
    procedure processEditingForTextStorage(textStorage: NSTextStorage;
      edited: NSTextStorageEditActions; range: NSRange;
      changeInLength: NSInteger; invalidatedRange: NSRange); cdecl;
    procedure ensureGlyphsForCharacterRange(charRange: NSRange); cdecl;
    procedure ensureGlyphsForGlyphRange(glyphRange: NSRange); cdecl;
    procedure ensureLayoutForCharacterRange(charRange: NSRange); cdecl;
    procedure ensureLayoutForGlyphRange(glyphRange: NSRange); cdecl;
    procedure ensureLayoutForTextContainer(container: NSTextContainer); cdecl;
    procedure ensureLayoutForBoundingRect(bounds: CGRect;
      inTextContainer: NSTextContainer); cdecl;
    procedure setGlyphs(glyphs: PWord; properties: PNSGlyphProperty;
      characterIndexes: PNSUInteger; font: UIFont;
      forGlyphRange: NSRange); cdecl;
    function numberOfGlyphs: NSUInteger; cdecl;
    [MethodName('CGGlyphAtIndex:isValidIndex:')]
    function CGGlyphAtIndexIsValidIndex(glyphIndex: NSUInteger;
      isValidIndex: PBoolean): CGGlyph; cdecl;
    [MethodName('CGGlyphAtIndex:')]
    function CGGlyphAtIndex(glyphIndex: NSUInteger): CGGlyph; cdecl;
    function isValidGlyphIndex(glyphIndex: NSUInteger): Boolean; cdecl;
    function propertyForGlyphAtIndex(glyphIndex: NSUInteger)
      : NSGlyphProperty; cdecl;
    function characterIndexForGlyphAtIndex(glyphIndex: NSUInteger)
      : NSUInteger; cdecl;
    function glyphIndexForCharacterAtIndex(charIndex: NSUInteger)
      : NSUInteger; cdecl;
    function getGlyphsInRange(glyphRange: NSRange; glyphs: PCGGlyph;
      properties: PNSGlyphProperty; characterIndexes: PNSUInteger;
      bidiLevels: PByte): NSUInteger; cdecl;
    procedure setTextContainer(container: NSTextContainer;
      forGlyphRange: NSRange); cdecl;
    procedure setLineFragmentRect(fragmentRect: CGRect; forGlyphRange: NSRange;
      usedRect: CGRect); cdecl;
    procedure setExtraLineFragmentRect(fragmentRect: CGRect; usedRect: CGRect;
      textContainer: NSTextContainer); cdecl;
    procedure setLocation(location: CGPoint;
      forStartOfGlyphRange: NSRange); cdecl;
    procedure setNotShownAttribute(flag: Boolean;
      forGlyphAtIndex: NSUInteger); cdecl;
    procedure setDrawsOutsideLineFragment(flag: Boolean;
      forGlyphAtIndex: NSUInteger); cdecl;
    procedure setAttachmentSize(attachmentSize: CGSize;
      forGlyphRange: NSRange); cdecl;
    procedure getFirstUnlaidCharacterIndex(charIndex: PNSUInteger;
      glyphIndex: PNSUInteger); cdecl;
    function firstUnlaidCharacterIndex: NSUInteger; cdecl;
    function firstUnlaidGlyphIndex: NSUInteger; cdecl;
    [MethodName('textContainerForGlyphAtIndex:effectiveRange:')]
    function textContainerForGlyphAtIndexEffectiveRange(glyphIndex: NSUInteger;
      effectiveRange: PNSRange): NSTextContainer; cdecl;
    [MethodName
      ('textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:')]
    function textContainerForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout
      (glyphIndex: NSUInteger; effectiveRange: PNSRange;
      withoutAdditionalLayout: Boolean): NSTextContainer; cdecl;
    function usedRectForTextContainer(container: NSTextContainer)
      : CGRect; cdecl;
    [MethodName('lineFragmentRectForGlyphAtIndex:effectiveRange:')]
    function lineFragmentRectForGlyphAtIndexEffectiveRange
      (glyphIndex: NSUInteger; effectiveRange: PNSRange): CGRect; cdecl;
    [MethodName
      ('lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:')
      ]
    function lineFragmentRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout
      (glyphIndex: NSUInteger; effectiveRange: PNSRange;
      withoutAdditionalLayout: Boolean): CGRect; cdecl;
    [MethodName('lineFragmentUsedRectForGlyphAtIndex:effectiveRange:')]
    function lineFragmentUsedRectForGlyphAtIndexEffectiveRange
      (glyphIndex: NSUInteger; effectiveRange: PNSRange): CGRect; cdecl;
    [MethodName
      ('lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:')
      ]
    function lineFragmentUsedRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout
      (glyphIndex: NSUInteger; effectiveRange: PNSRange;
      withoutAdditionalLayout: Boolean): CGRect; cdecl;
    function extraLineFragmentRect: CGRect; cdecl;
    function extraLineFragmentUsedRect: CGRect; cdecl;
    function extraLineFragmentTextContainer: NSTextContainer; cdecl;
    function locationForGlyphAtIndex(glyphIndex: NSUInteger): CGPoint; cdecl;
    function notShownAttributeForGlyphAtIndex(glyphIndex: NSUInteger)
      : Boolean; cdecl;
    function drawsOutsideLineFragmentForGlyphAtIndex(glyphIndex: NSUInteger)
      : Boolean; cdecl;
    function attachmentSizeForGlyphAtIndex(glyphIndex: NSUInteger)
      : CGSize; cdecl;
    function truncatedGlyphRangeInLineFragmentForGlyphAtIndex
      (glyphIndex: NSUInteger): NSRange; cdecl;
    function glyphRangeForCharacterRange(charRange: NSRange;
      actualCharacterRange: PNSRange): NSRange; cdecl;
    function characterRangeForGlyphRange(glyphRange: NSRange;
      actualGlyphRange: PNSRange): NSRange; cdecl;
    function glyphRangeForTextContainer(container: NSTextContainer)
      : NSRange; cdecl;
    function rangeOfNominallySpacedGlyphsContainingIndex(glyphIndex: NSUInteger)
      : NSRange; cdecl;
    function boundingRectForGlyphRange(glyphRange: NSRange;
      inTextContainer: NSTextContainer): CGRect; cdecl;
    function glyphRangeForBoundingRect(bounds: CGRect;
      inTextContainer: NSTextContainer): NSRange; cdecl;
    function glyphRangeForBoundingRectWithoutAdditionalLayout(bounds: CGRect;
      inTextContainer: NSTextContainer): NSRange; cdecl;
    [MethodName
      ('glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:')]
    function glyphIndexForPointInTextContainerFractionOfDistanceThroughGlyph
      (point: CGPoint; inTextContainer: NSTextContainer;
      fractionOfDistanceThroughGlyph: PCGFloat): NSUInteger; cdecl;
    [MethodName('glyphIndexForPoint:inTextContainer:')]
    function glyphIndexForPointInTextContainer(point: CGPoint;
      inTextContainer: NSTextContainer): NSUInteger; cdecl;
    function fractionOfDistanceThroughGlyphForPoint(point: CGPoint;
      inTextContainer: NSTextContainer): CGFloat; cdecl;
    function characterIndexForPoint(point: CGPoint;
      inTextContainer: NSTextContainer; fractionOfDistanceBetweenInsertionPoints
      : PCGFloat): NSUInteger; cdecl;
    function getLineFragmentInsertionPointsForCharacterAtIndex
      (charIndex: NSUInteger; alternatePositions: Boolean;
      inDisplayOrder: Boolean; positions: PCGFloat;
      characterIndexes: PNSUInteger): NSUInteger; cdecl;
    procedure enumerateLineFragmentsForGlyphRange(glyphRange: NSRange;
      usingBlock: TUIKitUsingBlock); cdecl;
    procedure enumerateEnclosingRectsForGlyphRange(glyphRange: NSRange;
      withinSelectedGlyphRange: NSRange; inTextContainer: NSTextContainer;
      usingBlock: TUIKitUsingBlock1); cdecl;
    procedure drawBackgroundForGlyphRange(glyphsToShow: NSRange;
      atPoint: CGPoint); cdecl;
    procedure drawGlyphsForGlyphRange(glyphsToShow: NSRange;
      atPoint: CGPoint); cdecl;
    [MethodName
      ('showCGGlyphs:positions:count:font:textMatrix:attributes:inContext:')]
    procedure showCGGlyphsPositionsCountFontTextMatrixAttributesInContext
      (glyphs: PCGGlyph; positions: PCGPoint; count: NSInteger; font: UIFont;
      textMatrix: CGAffineTransform; attributes: NSDictionary;
      inContext: CGContextRef); cdecl;
    procedure fillBackgroundRectArray(rectArray: PCGRect; count: NSUInteger;
      forCharacterRange: NSRange; color: UIColor); cdecl;
    procedure drawUnderlineForGlyphRange(glyphRange: NSRange;
      underlineType: NSUnderlineStyle; baselineOffset: CGFloat;
      lineFragmentRect: CGRect; lineFragmentGlyphRange: NSRange;
      containerOrigin: CGPoint); cdecl;
    procedure underlineGlyphRange(glyphRange: NSRange;
      underlineType: NSUnderlineStyle; lineFragmentRect: CGRect;
      lineFragmentGlyphRange: NSRange; containerOrigin: CGPoint); cdecl;
    procedure drawStrikethroughForGlyphRange(glyphRange: NSRange;
      strikethroughType: NSUnderlineStyle; baselineOffset: CGFloat;
      lineFragmentRect: CGRect; lineFragmentGlyphRange: NSRange;
      containerOrigin: CGPoint); cdecl;
    procedure strikethroughGlyphRange(glyphRange: NSRange;
      strikethroughType: NSUnderlineStyle; lineFragmentRect: CGRect;
      lineFragmentGlyphRange: NSRange; containerOrigin: CGPoint); cdecl;
    [MethodName('glyphAtIndex:isValidIndex:')]
    function glyphAtIndexIsValidIndex(glyphIndex: NSUInteger;
      isValidIndex: PBoolean): CGGlyph; cdecl;
    [MethodName('glyphAtIndex:')]
    function glyphAtIndex(glyphIndex: NSUInteger): CGGlyph; cdecl;
    procedure setHyphenationFactor(hyphenationFactor: CGFloat); cdecl;
    function hyphenationFactor: CGFloat; cdecl;
    [MethodName
      ('showCGGlyphs:positions:count:font:matrix:attributes:inContext:')]
    procedure showCGGlyphsPositionsCountFontMatrixAttributesInContext
      (glyphs: PCGGlyph; positions: PCGPoint; count: NSUInteger; font: UIFont;
      matrix: CGAffineTransform; attributes: NSDictionary;
      inContext: CGContextRef); cdecl;
  end;

  TNSLayoutManager = class(TOCGenericImport<NSLayoutManagerClass,
    NSLayoutManager>)
  end;

  PNSLayoutManager = Pointer;

  NSTextStorageClass = interface(NSMutableAttributedStringClass)
    ['{9076843D-08AC-4C9F-91D6-710959B19354}']
  end;

  NSTextStorage = interface(NSMutableAttributedString)
    ['{E54EECE8-7C3B-4F67-85A1-01C09A37315B}']
    function layoutManagers: NSArray; cdecl;
    procedure addLayoutManager(aLayoutManager: NSLayoutManager); cdecl;
    procedure removeLayoutManager(aLayoutManager: NSLayoutManager); cdecl;
    function editedMask: NSTextStorageEditActions; cdecl;
    function editedRange: NSRange; cdecl;
    function changeInLength: NSInteger; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure edited(editedMask: NSTextStorageEditActions; range: NSRange;
      changeInLength: NSInteger); cdecl;
    procedure processEditing; cdecl;
    function fixesAttributesLazily: Boolean; cdecl;
    procedure invalidateAttributesInRange(range: NSRange); cdecl;
    procedure ensureAttributesAreFixedInRange(range: NSRange); cdecl;
    procedure setTextStorageObserver(textStorageObserver: Pointer); cdecl;
    function textStorageObserver: Pointer; cdecl;
  end;

  TNSTextStorage = class(TOCGenericImport<NSTextStorageClass, NSTextStorage>)
  end;

  PNSTextStorage = Pointer;

  NSTextContainerClass = interface(NSObjectClass)
    ['{3D496C2A-30BC-471F-A239-BD425C7AB83C}']
  end;

  NSTextContainer = interface(NSObject)
    ['{7E3BD3AB-19B9-4812-AAAB-95C17BE163AE}']
    function initWithSize(size: CGSize): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setLayoutManager(layoutManager: NSLayoutManager); cdecl;
    function layoutManager: NSLayoutManager; cdecl;
    procedure replaceLayoutManager(newLayoutManager: NSLayoutManager); cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    procedure setSize(size: CGSize); cdecl;
    function size: CGSize; cdecl;
    procedure setExclusionPaths(exclusionPaths: NSArray); cdecl;
    function exclusionPaths: NSArray; cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    procedure setLineFragmentPadding(lineFragmentPadding: CGFloat); cdecl;
    function lineFragmentPadding: CGFloat; cdecl;
    procedure setMaximumNumberOfLines(maximumNumberOfLines: NSUInteger); cdecl;
    function maximumNumberOfLines: NSUInteger; cdecl;
    function lineFragmentRectForProposedRect(proposedRect: CGRect;
      atIndex: NSUInteger; writingDirection: NSWritingDirection;
      remainingRect: PCGRect): CGRect; cdecl;
    function isSimpleRectangularTextContainer: Boolean; cdecl;
    procedure setWidthTracksTextView(widthTracksTextView: Boolean); cdecl;
    function widthTracksTextView: Boolean; cdecl;
    procedure setHeightTracksTextView(heightTracksTextView: Boolean); cdecl;
    function heightTracksTextView: Boolean; cdecl;
  end;

  TNSTextContainer = class(TOCGenericImport<NSTextContainerClass,
    NSTextContainer>)
  end;

  PNSTextContainer = Pointer;

  NSShadowClass = interface(NSObjectClass)
    ['{D21A4DF1-5426-4933-AC53-126EF89CD4F1}']
  end;

  NSShadow = interface(NSObject)
    ['{86FCD277-72CA-44DA-852A-5AB3DBEC792F}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setShadowOffset(shadowOffset: CGSize); cdecl;
    function shadowOffset: CGSize; cdecl;
    procedure setShadowBlurRadius(shadowBlurRadius: CGFloat); cdecl;
    function shadowBlurRadius: CGFloat; cdecl;
    procedure setShadowColor(shadowColor: Pointer); cdecl;
    function shadowColor: Pointer; cdecl;
  end;

  TNSShadow = class(TOCGenericImport<NSShadowClass, NSShadow>)
  end;

  PNSShadow = Pointer;

  NSStringDrawingContextClass = interface(NSObjectClass)
    ['{57C47C69-E614-4769-B4DA-D1BB487CDF9E}']
  end;

  NSStringDrawingContext = interface(NSObject)
    ['{D6B9B780-ADDD-452A-8230-621A64449C0C}']
    procedure setMinimumScaleFactor(minimumScaleFactor: CGFloat); cdecl;
    function minimumScaleFactor: CGFloat; cdecl;
    function actualScaleFactor: CGFloat; cdecl;
    function totalBounds: CGRect; cdecl;
    procedure setMinimumTrackingAdjustment(minimumTrackingAdjustment
      : CGFloat); cdecl;
    function minimumTrackingAdjustment: CGFloat; cdecl;
    function actualTrackingAdjustment: CGFloat; cdecl;
  end;

  TNSStringDrawingContext = class(TOCGenericImport<NSStringDrawingContextClass,
    NSStringDrawingContext>)
  end;

  PNSStringDrawingContext = Pointer;

  NSStringDrawing = interface(IObjectiveC)
    ['{B023260A-750E-44F2-A392-794914A97F9B}']
    function sizeWithAttributes(attrs: NSDictionary): CGSize; cdecl;
    [MethodName('drawAtPoint:withAttributes:')]
    procedure drawAtPointWithAttributes(point: CGPoint;
      withAttributes: NSDictionary); cdecl;
    [MethodName('drawInRect:withAttributes:')]
    procedure drawInRectWithAttributes(rect: CGRect;
      withAttributes: NSDictionary); cdecl;
    function size: CGSize; cdecl;
    [MethodName('drawAtPoint:')]
    procedure drawAtPoint(point: CGPoint); cdecl;
    [MethodName('drawInRect:')]
    procedure drawInRect(rect: CGRect); cdecl;
  end;

  NSExtendedStringDrawing = interface(IObjectiveC)
    ['{5C24C9E3-52DF-450B-A66C-867D6B2B0B71}']
    [MethodName('drawWithRect:options:attributes:context:')]
    procedure drawWithRectOptionsAttributesContext(rect: CGRect;
      options: NSStringDrawingOptions; attributes: NSDictionary;
      context: NSStringDrawingContext); cdecl;
    [MethodName('boundingRectWithSize:options:attributes:context:')]
    function boundingRectWithSizeOptionsAttributesContext(size: CGSize;
      options: NSStringDrawingOptions; attributes: NSDictionary;
      context: NSStringDrawingContext): CGRect; cdecl;
    [MethodName('drawWithRect:options:context:')]
    procedure drawWithRectOptionsContext(rect: CGRect;
      options: NSStringDrawingOptions; context: NSStringDrawingContext); cdecl;
    [MethodName('boundingRectWithSize:options:context:')]
    function boundingRectWithSizeOptionsContext(size: CGSize;
      options: NSStringDrawingOptions; context: NSStringDrawingContext)
      : CGRect; cdecl;
  end;

  NSTextAttachmentViewProviderClass = interface(NSObjectClass)
    ['{6FBD0799-71A4-4492-9834-95C441B984E4}']
  end;

  NSTextAttachmentViewProvider = interface(NSObject)
    ['{1488BF93-3424-4CD4-8784-183A4CB2A04D}']
    function initWithTextAttachment(textAttachment: NSTextAttachment;
      parentView: UIView; textLayoutManager: NSTextLayoutManager;
      location: Pointer): Pointer { instancetype }; cdecl;
    function textAttachment: NSTextAttachment; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function location: Pointer; cdecl;
    procedure setView(view: UIView); cdecl;
    function view: UIView; cdecl;
    procedure loadView; cdecl;
    procedure setTracksTextAttachmentViewBounds(tracksTextAttachmentViewBounds
      : Boolean); cdecl;
    function tracksTextAttachmentViewBounds: Boolean; cdecl;
    function attachmentBoundsForAttributes(attributes: NSDictionary;
      location: Pointer; textContainer: NSTextContainer;
      proposedLineFragment: CGRect; position: CGPoint): CGRect; cdecl;
  end;

  TNSTextAttachmentViewProvider = class
    (TOCGenericImport<NSTextAttachmentViewProviderClass,
    NSTextAttachmentViewProvider>)
  end;

  PNSTextAttachmentViewProvider = Pointer;

  NSTextLayoutManagerClass = interface(NSObjectClass)
    ['{8080F9C9-20B7-41D9-9591-9335BAD11D44}']
  end;

  NSTextLayoutManager = interface(NSObject)
    ['{645EFF28-BA14-4CAB-B83E-287ABA70618F}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setUsesFontLeading(usesFontLeading: Boolean); cdecl;
    function usesFontLeading: Boolean; cdecl;
    procedure setLimitsLayoutForSuspiciousContents
      (limitsLayoutForSuspiciousContents: Boolean); cdecl;
    function limitsLayoutForSuspiciousContents: Boolean; cdecl;
    procedure setUsesHyphenation(usesHyphenation: Boolean); cdecl;
    function usesHyphenation: Boolean; cdecl;
    function textContentManager: NSTextContentManager; cdecl;
    procedure replaceTextContentManager(textContentManager
      : NSTextContentManager); cdecl;
    procedure setTextContainer(textContainer: NSTextContainer); cdecl;
    function textContainer: NSTextContainer; cdecl;
    function usageBoundsForTextContainer: CGRect; cdecl;
    function textViewportLayoutController
      : NSTextViewportLayoutController; cdecl;
    procedure setLayoutQueue(layoutQueue: NSOperationQueue); cdecl;
    function layoutQueue: NSOperationQueue; cdecl;
    procedure ensureLayoutForRange(range: NSTextRange); cdecl;
    procedure ensureLayoutForBounds(bounds: CGRect); cdecl;
    procedure invalidateLayoutForRange(range: NSTextRange); cdecl;
    function textLayoutFragmentForPosition(position: CGPoint)
      : NSTextLayoutFragment; cdecl;
    function textLayoutFragmentForLocation(location: Pointer)
      : NSTextLayoutFragment; cdecl;
    function enumerateTextLayoutFragmentsFromLocation(location: Pointer;
      options: NSTextLayoutFragmentEnumerationOptions;
      usingBlock: TUIKitUsingBlock3): Pointer; cdecl;
    procedure setTextSelections(textSelections: NSArray); cdecl;
    function textSelections: NSArray; cdecl;
    procedure setTextSelectionNavigation(textSelectionNavigation
      : NSTextSelectionNavigation); cdecl;
    function textSelectionNavigation: NSTextSelectionNavigation; cdecl;
    procedure enumerateRenderingAttributesFromLocation(location: Pointer;
      reverse: Boolean; usingBlock: TUIKitUsingBlock4); cdecl;
    procedure setRenderingAttributes(renderingAttributes: NSDictionary;
      forTextRange: NSTextRange); cdecl;
    procedure addRenderingAttribute(renderingAttribute: NSAttributedStringKey;
      value: Pointer; forTextRange: NSTextRange); cdecl;
    procedure removeRenderingAttribute(renderingAttribute
      : NSAttributedStringKey; forTextRange: NSTextRange); cdecl;
    procedure invalidateRenderingAttributesForTextRange
      (textRange: NSTextRange); cdecl;
    procedure setRenderingAttributesValidator(renderingAttributesValidator
      : TUIKitRenderingAttributesValidator); cdecl;
    function renderingAttributesValidator
      : TUIKitRenderingAttributesValidator; cdecl;
    procedure setLinkRenderingAttributes(linkRenderingAttributes
      : NSDictionary); cdecl;
    function linkRenderingAttributes: NSDictionary; cdecl;
    function renderingAttributesForLink(link: Pointer; atLocation: Pointer)
      : NSDictionary; cdecl;
    procedure enumerateTextSegmentsInRange(textRange: NSTextRange;
      &type: NSTextLayoutManagerSegmentType;
      options: NSTextLayoutManagerSegmentOptions;
      usingBlock: TUIKitUsingBlock5); cdecl;
    [MethodName('replaceContentsInRange:withTextElements:')]
    procedure replaceContentsInRangeWithTextElements(range: NSTextRange;
      withTextElements: NSArray); cdecl;
    [MethodName('replaceContentsInRange:withAttributedString:')]
    procedure replaceContentsInRangeWithAttributedString(range: NSTextRange;
      withAttributedString: NSAttributedString); cdecl;
  end;

  TNSTextLayoutManager = class(TOCGenericImport<NSTextLayoutManagerClass,
    NSTextLayoutManager>)
  end;

  PNSTextLayoutManager = Pointer;

  NSAttributedStringAttachmentConveniences = interface(IObjectiveC)
    ['{9A97C423-3D7D-4BF7-9869-92BCF4D452F1}']
    function attributedStringWithAttachment(attachment: NSTextAttachment)
      : NSAttributedString; cdecl;
  end;

  NSTextRangeClass = interface(NSObjectClass)
    ['{7D27B7F0-5359-4451-AA6D-86B3306B4FAC}']
  end;

  NSTextRange = interface(NSObject)
    ['{EA53A2D1-D5D4-4AFE-BABB-58306F3EF000}']
    [MethodName('initWithLocation:endLocation:')]
    function initWithLocationEndLocation(location: Pointer;
      endLocation: Pointer): Pointer { instancetype }; cdecl;
    [MethodName('initWithLocation:')]
    function initWithLocation(location: Pointer)
      : Pointer { instancetype }; cdecl;
    function isEmpty: Boolean; cdecl;
    function location: Pointer; cdecl;
    function endLocation: Pointer; cdecl;
    function isEqualToTextRange(textRange: NSTextRange): Boolean; cdecl;
    function containsLocation(location: Pointer): Boolean; cdecl;
    function containsRange(textRange: NSTextRange): Boolean; cdecl;
    function intersectsWithTextRange(textRange: NSTextRange): Boolean; cdecl;
    function textRangeByIntersectingWithTextRange(textRange: NSTextRange)
      : Pointer { instancetype }; cdecl;
    function textRangeByFormingUnionWithTextRange(textRange: NSTextRange)
      : Pointer { instancetype }; cdecl;
  end;

  TNSTextRange = class(TOCGenericImport<NSTextRangeClass, NSTextRange>)
  end;

  PNSTextRange = Pointer;

  NSTextElementClass = interface(NSObjectClass)
    ['{786734F5-A9A1-417D-B39E-98BC0E7F0785}']
  end;

  NSTextElement = interface(NSObject)
    ['{C8BCF29A-DBF0-46EC-B12A-B80995FD7C9A}']
    function initWithTextContentManager(textContentManager
      : NSTextContentManager): Pointer { instancetype }; cdecl;
    procedure setTextContentManager(textContentManager
      : NSTextContentManager); cdecl;
    function textContentManager: NSTextContentManager; cdecl;
    procedure setElementRange(elementRange: NSTextRange); cdecl;
    function elementRange: NSTextRange; cdecl;
    function childElements: NSArray; cdecl;
    function parentElement: NSTextElement; cdecl;
    function isRepresentedElement: Boolean; cdecl;
  end;

  TNSTextElement = class(TOCGenericImport<NSTextElementClass, NSTextElement>)
  end;

  PNSTextElement = Pointer;

  NSTextParagraphClass = interface(NSTextElementClass)
    ['{C9327086-A39C-4BF7-8291-37527A3CB2D1}']
  end;

  NSTextParagraph = interface(NSTextElement)
    ['{CD697E41-136F-4AA3-8393-67EC69BE18E5}']
    function initWithAttributedString(attributedString: NSAttributedString)
      : Pointer { instancetype }; cdecl;
    function attributedString: NSAttributedString; cdecl;
    function paragraphContentRange: NSTextRange; cdecl;
    function paragraphSeparatorRange: NSTextRange; cdecl;
  end;

  TNSTextParagraph = class(TOCGenericImport<NSTextParagraphClass,
    NSTextParagraph>)
  end;

  PNSTextParagraph = Pointer;

  NSTextContentManagerClass = interface(NSObjectClass)
    ['{B0007B36-B18C-4D85-BE8B-61AAB5BFD09B}']
  end;

  NSTextContentManager = interface(NSObject)
    ['{09AB8BCA-D466-47BE-B087-895750A5E26C}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function textLayoutManagers: NSArray; cdecl;
    procedure addTextLayoutManager(textLayoutManager
      : NSTextLayoutManager); cdecl;
    procedure removeTextLayoutManager(textLayoutManager
      : NSTextLayoutManager); cdecl;
    procedure setPrimaryTextLayoutManager(primaryTextLayoutManager
      : NSTextLayoutManager); cdecl;
    function primaryTextLayoutManager: NSTextLayoutManager; cdecl;
    procedure synchronizeTextLayoutManagers(completionHandler
      : TUIKitErrorHandler); cdecl;
    function textElementsForRange(range: NSTextRange): NSArray; cdecl;
    function hasEditingTransaction: Boolean; cdecl;
    procedure performEditingTransactionUsingBlock
      (transaction: TUIKitAction); cdecl;
    procedure recordEditActionInRange(originalTextRange: NSTextRange;
      newTextRange: NSTextRange); cdecl;
    procedure setAutomaticallySynchronizesTextLayoutManagers
      (automaticallySynchronizesTextLayoutManagers: Boolean); cdecl;
    function automaticallySynchronizesTextLayoutManagers: Boolean; cdecl;
    procedure setAutomaticallySynchronizesToBackingStore
      (automaticallySynchronizesToBackingStore: Boolean); cdecl;
    function automaticallySynchronizesToBackingStore: Boolean; cdecl;
  end;

  TNSTextContentManager = class(TOCGenericImport<NSTextContentManagerClass,
    NSTextContentManager>)
  end;

  PNSTextContentManager = Pointer;

  NSTextContentStorageClass = interface(NSTextContentManagerClass)
    ['{43CCE6F8-7ABB-47CE-97B6-889A0AE13CDB}']
  end;

  NSTextContentStorage = interface(NSTextContentManager)
    ['{6BCC13B0-486A-4B8B-94DA-BCAFCC597E7E}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setAttributedString(attributedString: NSAttributedString); cdecl;
    function attributedString: NSAttributedString; cdecl;
    function attributedStringForTextElement(textElement: NSTextElement)
      : NSAttributedString; cdecl;
    function textElementForAttributedString(attributedString
      : NSAttributedString): NSTextElement; cdecl;
    function locationFromLocation(location: Pointer; withOffset: NSInteger)
      : Pointer; cdecl;
    function offsetFromLocation(from: Pointer; toLocation: Pointer)
      : NSInteger; cdecl;
    function adjustedRangeFromRange(textRange: NSTextRange;
      forEditingTextSelection: Boolean): NSTextRange; cdecl;
  end;

  TNSTextContentStorage = class(TOCGenericImport<NSTextContentStorageClass,
    NSTextContentStorage>)
  end;

  PNSTextContentStorage = Pointer;

  NSTextLineFragmentClass = interface(NSObjectClass)
    ['{7F80D7C6-1633-4F33-839B-5E87C1B71CE3}']
  end;

  NSTextLineFragment = interface(NSObject)
    ['{7DD70AA3-E934-4683-9A0B-2CC2A59E772A}']
    function initWithAttributedString(attributedString: NSAttributedString;
      range: NSRange): Pointer { instancetype }; cdecl;
    function initWithCoder(aDecoder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithString(&string: NSString; attributes: NSDictionary;
      range: NSRange): Pointer { instancetype }; cdecl;
    function attributedString: NSAttributedString; cdecl;
    function characterRange: NSRange; cdecl;
    function typographicBounds: CGRect; cdecl;
    function glyphOrigin: CGPoint; cdecl;
    procedure drawAtPoint(point: CGPoint; inContext: CGContextRef); cdecl;
    function locationForCharacterAtIndex(index: NSInteger): CGPoint; cdecl;
    function characterIndexForPoint(point: CGPoint): NSInteger; cdecl;
    function fractionOfDistanceThroughGlyphForPoint(point: CGPoint)
      : CGFloat; cdecl;
  end;

  TNSTextLineFragment = class(TOCGenericImport<NSTextLineFragmentClass,
    NSTextLineFragment>)
  end;

  PNSTextLineFragment = Pointer;

  NSTextLayoutFragmentClass = interface(NSObjectClass)
    ['{B0CAED4E-CD04-4478-95CA-616F5BADB60E}']
  end;

  NSTextLayoutFragment = interface(NSObject)
    ['{50AC0369-9579-433F-98C1-24763687D903}']
    function initWithTextElement(textElement: NSTextElement; range: NSTextRange)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function textElement: NSTextElement; cdecl;
    function rangeInElement: NSTextRange; cdecl;
    function textLineFragments: NSArray; cdecl;
    procedure setLayoutQueue(layoutQueue: NSOperationQueue); cdecl;
    function layoutQueue: NSOperationQueue; cdecl;
    function state: NSTextLayoutFragmentState; cdecl;
    procedure invalidateLayout; cdecl;
    function layoutFragmentFrame: CGRect; cdecl;
    function renderingSurfaceBounds: CGRect; cdecl;
    function leadingPadding: CGFloat; cdecl;
    function trailingPadding: CGFloat; cdecl;
    function topMargin: CGFloat; cdecl;
    function bottomMargin: CGFloat; cdecl;
    procedure drawAtPoint(point: CGPoint; inContext: CGContextRef); cdecl;
    function textAttachmentViewProviders: NSArray; cdecl;
    function frameForTextAttachmentAtLocation(location: Pointer): CGRect; cdecl;
  end;

  TNSTextLayoutFragment = class(TOCGenericImport<NSTextLayoutFragmentClass,
    NSTextLayoutFragment>)
  end;

  PNSTextLayoutFragment = Pointer;

  NSTextSelectionClass = interface(NSObjectClass)
    ['{501117FB-F868-4669-8692-B0179AD9EEE9}']
  end;

  NSTextSelection = interface(NSObject)
    ['{8D1F0678-283E-4331-B657-0C16E963D16D}']
    function initWithRanges(textRanges: NSArray;
      affinity: NSTextSelectionAffinity;
      granularity: NSTextSelectionGranularity): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithRange(range: NSTextRange;
      affinity: NSTextSelectionAffinity;
      granularity: NSTextSelectionGranularity): Pointer { instancetype }; cdecl;
    function initWithLocation(location: Pointer;
      affinity: NSTextSelectionAffinity): Pointer { instancetype }; cdecl;
    function textRanges: NSArray; cdecl;
    function granularity: NSTextSelectionGranularity; cdecl;
    function affinity: NSTextSelectionAffinity; cdecl;
    function isTransient: Boolean; cdecl;
    procedure setAnchorPositionOffset(anchorPositionOffset: CGFloat); cdecl;
    function anchorPositionOffset: CGFloat; cdecl;
    procedure setLogical(logical: Boolean); cdecl;
    function isLogical: Boolean; cdecl;
    procedure setSecondarySelectionLocation(secondarySelectionLocation
      : Pointer); cdecl;
    function secondarySelectionLocation: Pointer; cdecl;
    procedure setTypingAttributes(typingAttributes: NSDictionary); cdecl;
    function typingAttributes: NSDictionary; cdecl;
    function textSelectionWithTextRanges(textRanges: NSArray)
      : NSTextSelection; cdecl;
  end;

  TNSTextSelection = class(TOCGenericImport<NSTextSelectionClass,
    NSTextSelection>)
  end;

  PNSTextSelection = Pointer;

  NSTextSelectionNavigationClass = interface(NSObjectClass)
    ['{2032ECF0-C327-4DED-B6A6-A92C4A60D7B7}']
  end;

  NSTextSelectionNavigation = interface(NSObject)
    ['{6428574B-14BD-41F5-AEBD-22B7575D4DC0}']
    function initWithDataSource(dataSource: Pointer)
      : Pointer { instancetype }; cdecl;
    function textSelectionDataSource: Pointer; cdecl;
    procedure setAllowsNonContiguousRanges(allowsNonContiguousRanges
      : Boolean); cdecl;
    function allowsNonContiguousRanges: Boolean; cdecl;
    procedure setRotatesCoordinateSystemForLayoutOrientation
      (rotatesCoordinateSystemForLayoutOrientation: Boolean); cdecl;
    function rotatesCoordinateSystemForLayoutOrientation: Boolean; cdecl;
    procedure flushLayoutCache; cdecl;
    function destinationSelectionForTextSelection(textSelection
      : NSTextSelection; direction: NSTextSelectionNavigationDirection;
      destination: NSTextSelectionNavigationDestination; extending: Boolean;
      confined: Boolean): NSTextSelection; cdecl;
    function textSelectionsInteractingAtPoint(point: CGPoint;
      inContainerAtLocation: Pointer; anchors: NSArray;
      modifiers: NSTextSelectionNavigationModifier; selecting: Boolean;
      bounds: CGRect): NSArray; cdecl;
    [MethodName('textSelectionForSelectionGranularity:enclosingTextSelection:')]
    function textSelectionForSelectionGranularityEnclosingTextSelection
      (selectionGranularity: NSTextSelectionGranularity;
      enclosingTextSelection: NSTextSelection): NSTextSelection; cdecl;
    [MethodName
      ('textSelectionForSelectionGranularity:enclosingPoint:inContainerAtLocation:')
      ]
    function textSelectionForSelectionGranularityEnclosingPointInContainerAtLocation
      (selectionGranularity: NSTextSelectionGranularity;
      enclosingPoint: CGPoint; inContainerAtLocation: Pointer)
      : NSTextSelection; cdecl;
    function resolvedInsertionLocationForTextSelection(textSelection
      : NSTextSelection;
      writingDirection: NSTextSelectionNavigationWritingDirection)
      : Pointer; cdecl;
    function deletionRangesForTextSelection(textSelection: NSTextSelection;
      direction: NSTextSelectionNavigationDirection;
      destination: NSTextSelectionNavigationDestination;
      allowsDecomposition: Boolean): NSArray; cdecl;
  end;

  TNSTextSelectionNavigation = class
    (TOCGenericImport<NSTextSelectionNavigationClass,
    NSTextSelectionNavigation>)
  end;

  PNSTextSelectionNavigation = Pointer;

  NSTextViewportLayoutControllerClass = interface(NSObjectClass)
    ['{1B35CD02-9AC1-4046-ACBC-170732E84467}']
  end;

  NSTextViewportLayoutController = interface(NSObject)
    ['{6F2A7968-8E30-42AF-8DAB-27F48023E444}']
    function initWithTextLayoutManager(textLayoutManager: NSTextLayoutManager)
      : Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function viewportBounds: CGRect; cdecl;
    function viewportRange: NSTextRange; cdecl;
    procedure layoutViewport; cdecl;
    function relocateViewportToTextLocation(textLocation: Pointer)
      : CGFloat; cdecl;
    procedure adjustViewportByVerticalOffset(verticalOffset: CGFloat); cdecl;
  end;

  TNSTextViewportLayoutController = class
    (TOCGenericImport<NSTextViewportLayoutControllerClass,
    NSTextViewportLayoutController>)
  end;

  PNSTextViewportLayoutController = Pointer;

  NSTextListElementClass = interface(NSTextParagraphClass)
    ['{0F10215F-195B-4643-AAFA-AD7890C274C0}']
    { class } function textListElementWithContents(contents: NSAttributedString;
      markerAttributes: NSDictionary; textList: NSTextList;
      childElements: NSArray): Pointer { instancetype }; cdecl;
    { class } function textListElementWithChildElements(children: NSArray;
      textList: NSTextList; nestingLevel: NSInteger)
      : Pointer { instancetype }; cdecl;
  end;

  NSTextListElement = interface(NSTextParagraph)
    ['{17E83C3A-79A2-48B0-9E2C-79D3EE98CDE3}']
    function initWithParentElement(parent: NSTextListElement;
      textList: NSTextList; contents: NSAttributedString;
      markerAttributes: NSDictionary; childElements: NSArray)
      : Pointer { instancetype }; cdecl;
    function textList: NSTextList; cdecl;
    function contents: NSAttributedString; cdecl;
    function markerAttributes: NSDictionary; cdecl;
    function attributedString: NSAttributedString; cdecl;
    function childElements: NSArray; cdecl;
    function parentElement: NSTextListElement; cdecl;
  end;

  TNSTextListElement = class(TOCGenericImport<NSTextListElementClass,
    NSTextListElement>)
  end;

  PNSTextListElement = Pointer;

  NSItemProvider = interface(IObjectiveC)
    ['{544A4A89-D1A7-4B53-A95D-8882D4904D9F}']
  end;

  UIPrinterClass = interface(NSObjectClass)
    ['{69E9A512-02AC-4DD0-960B-CC13E133F76D}']
    { class } function printerWithURL(url: NSURL): UIPrinter; cdecl;
  end;

  UIPrinter = interface(NSObject)
    ['{7A5A1F6A-CE88-4029-B0F9-2C4C817855E3}']
    function url: NSURL; cdecl;
    function displayName: NSString; cdecl;
    function displayLocation: NSString; cdecl;
    function supportedJobTypes: UIPrinterJobTypes; cdecl;
    function makeAndModel: NSString; cdecl;
    function supportsColor: Boolean; cdecl;
    function supportsDuplex: Boolean; cdecl;
    procedure contactPrinter(completionHandler: TUIKitCompletion); cdecl;
  end;

  TUIPrinter = class(TOCGenericImport<UIPrinterClass, UIPrinter>)
  end;

  PUIPrinter = Pointer;

  UIPrinterPickerControllerClass = interface(NSObjectClass)
    ['{A7A40798-59AD-4EDA-8948-699658F0F0F1}']
    { class } function printerPickerControllerWithInitiallySelectedPrinter
      (printer: UIPrinter): UIPrinterPickerController; cdecl;
  end;

  UIPrinterPickerController = interface(NSObject)
    ['{C675F691-444A-47B5-A943-C264573C1393}']
    function selectedPrinter: UIPrinter; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function presentAnimated(animated: Boolean;
      completionHandler: UIPrinterPickerCompletionHandler): Boolean; cdecl;
    function presentFromRect(rect: CGRect; inView: UIView; animated: Boolean;
      completionHandler: UIPrinterPickerCompletionHandler): Boolean; cdecl;
    function presentFromBarButtonItem(item: UIBarButtonItem; animated: Boolean;
      completionHandler: UIPrinterPickerCompletionHandler): Boolean; cdecl;
    procedure dismissAnimated(animated: Boolean); cdecl;
  end;

  TUIPrinterPickerController = class
    (TOCGenericImport<UIPrinterPickerControllerClass,
    UIPrinterPickerController>)
  end;

  PUIPrinterPickerController = Pointer;

  UIPrintPageRendererClass = interface(NSObjectClass)
    ['{32569A75-6A03-49D1-867F-567ECDD5E2A3}']
  end;

  UIPrintPageRenderer = interface(NSObject)
    ['{CA4E6CF1-7632-43A5-AC52-1BA568A1354D}']
    procedure setHeaderHeight(headerHeight: CGFloat); cdecl;
    function headerHeight: CGFloat; cdecl;
    procedure setFooterHeight(footerHeight: CGFloat); cdecl;
    function footerHeight: CGFloat; cdecl;
    function paperRect: CGRect; cdecl;
    function printableRect: CGRect; cdecl;
    function numberOfPages: NSInteger; cdecl;
    procedure setPrintFormatters(printFormatters: NSArray); cdecl;
    function printFormatters: NSArray; cdecl;
    function printFormattersForPageAtIndex(pageIndex: NSInteger)
      : NSArray; cdecl;
    procedure addPrintFormatter(formatter: UIPrintFormatter;
      startingAtPageAtIndex: NSInteger); cdecl;
    function currentRenderingQualityForRequestedRenderingQuality
      (requestedRenderingQuality: UIPrintRenderingQuality)
      : UIPrintRenderingQuality; cdecl;
    procedure prepareForDrawingPages(range: NSRange); cdecl;
    procedure drawPageAtIndex(pageIndex: NSInteger; inRect: CGRect); cdecl;
    procedure drawPrintFormatter(printFormatter: UIPrintFormatter;
      forPageAtIndex: NSInteger); cdecl;
    procedure drawHeaderForPageAtIndex(pageIndex: NSInteger;
      inRect: CGRect); cdecl;
    procedure drawContentForPageAtIndex(pageIndex: NSInteger;
      inRect: CGRect); cdecl;
    procedure drawFooterForPageAtIndex(pageIndex: NSInteger;
      inRect: CGRect); cdecl;
  end;

  TUIPrintPageRenderer = class(TOCGenericImport<UIPrintPageRendererClass,
    UIPrintPageRenderer>)
  end;

  PUIPrintPageRenderer = Pointer;

  UIPrintFormatterClass = interface(NSObjectClass)
    ['{676C8EE2-A5B5-4C62-82DF-B0E8665AC531}']
  end;

  UIPrintFormatter = interface(NSObject)
    ['{172F1E68-9A92-4C15-A4A0-A553622017DC}']
    function printPageRenderer: UIPrintPageRenderer; cdecl;
    procedure removeFromPrintPageRenderer; cdecl;
    procedure setMaximumContentHeight(maximumContentHeight: CGFloat); cdecl;
    function maximumContentHeight: CGFloat; cdecl;
    procedure setMaximumContentWidth(maximumContentWidth: CGFloat); cdecl;
    function maximumContentWidth: CGFloat; cdecl;
    procedure setContentInsets(contentInsets: UIEdgeInsets); cdecl;
    function contentInsets: UIEdgeInsets; cdecl;
    procedure setPerPageContentInsets(perPageContentInsets
      : UIEdgeInsets); cdecl;
    function perPageContentInsets: UIEdgeInsets; cdecl;
    procedure setStartPage(startPage: NSInteger); cdecl;
    function startPage: NSInteger; cdecl;
    function pageCount: NSInteger; cdecl;
    function requiresMainThread: Boolean; cdecl;
    function rectForPageAtIndex(pageIndex: NSInteger): CGRect; cdecl;
    procedure drawInRect(rect: CGRect; forPageAtIndex: NSInteger); cdecl;
  end;

  TUIPrintFormatter = class(TOCGenericImport<UIPrintFormatterClass,
    UIPrintFormatter>)
  end;

  PUIPrintFormatter = Pointer;

  UISimpleTextPrintFormatterClass = interface(UIPrintFormatterClass)
    ['{D32769D3-D8E1-40D8-97D1-01D4EB5A0B38}']
  end;

  UISimpleTextPrintFormatter = interface(UIPrintFormatter)
    ['{1B33E247-CBAA-45D4-B36C-59D066EE064E}']
    function initWithText(text: NSString): Pointer { instancetype }; cdecl;
    function initWithAttributedText(attributedText: NSAttributedString)
      : Pointer { instancetype }; cdecl;
    procedure setText(text: NSString); cdecl;
    function text: NSString; cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    function attributedText: NSAttributedString; cdecl;
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setColor(color: UIColor); cdecl;
    function color: UIColor; cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    function textAlignment: NSTextAlignment; cdecl;
  end;

  TUISimpleTextPrintFormatter = class
    (TOCGenericImport<UISimpleTextPrintFormatterClass,
    UISimpleTextPrintFormatter>)
  end;

  PUISimpleTextPrintFormatter = Pointer;

  UIMarkupTextPrintFormatterClass = interface(UIPrintFormatterClass)
    ['{D5F1B732-3832-4B5B-B1A6-5C6836DC4148}']
  end;

  UIMarkupTextPrintFormatter = interface(UIPrintFormatter)
    ['{23246A69-E040-4495-A07F-D0C48F6CFA9B}']
    function initWithMarkupText(markupText: NSString)
      : Pointer { instancetype }; cdecl;
    procedure setMarkupText(markupText: NSString); cdecl;
    function markupText: NSString; cdecl;
  end;

  TUIMarkupTextPrintFormatter = class
    (TOCGenericImport<UIMarkupTextPrintFormatterClass,
    UIMarkupTextPrintFormatter>)
  end;

  PUIMarkupTextPrintFormatter = Pointer;

  UIViewPrintFormatterClass = interface(UIPrintFormatterClass)
    ['{6CF87B5D-E091-4A6E-81B7-9B67C447B7B1}']
  end;

  UIViewPrintFormatter = interface(UIPrintFormatter)
    ['{0F1BE7A4-C9C1-47C4-B078-70A5EEDD9693}']
    function view: UIView; cdecl;
  end;

  TUIViewPrintFormatter = class(TOCGenericImport<UIViewPrintFormatterClass,
    UIViewPrintFormatter>)
  end;

  PUIViewPrintFormatter = Pointer;

  UIPrintInfoClass = interface(NSObjectClass)
    ['{852C3B20-4158-4332-85BF-A7520D7E6D0D}']
    { class } function printInfo: UIPrintInfo; cdecl;
    { class } function printInfoWithDictionary(dictionary: NSDictionary)
      : UIPrintInfo; cdecl;
  end;

  UIPrintInfo = interface(NSObject)
    ['{44AB9C34-AA3D-4086-B7F8-11209C736447}']
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setPrinterID(printerID: NSString); cdecl;
    function printerID: NSString; cdecl;
    procedure setJobName(jobName: NSString); cdecl;
    function jobName: NSString; cdecl;
    procedure setOutputType(outputType: UIPrintInfoOutputType); cdecl;
    function outputType: UIPrintInfoOutputType; cdecl;
    procedure setOrientation(orientation: UIPrintInfoOrientation); cdecl;
    function orientation: UIPrintInfoOrientation; cdecl;
    procedure setDuplex(duplex: UIPrintInfoDuplex); cdecl;
    function duplex: UIPrintInfoDuplex; cdecl;
    function dictionaryRepresentation: NSDictionary; cdecl;
  end;

  TUIPrintInfo = class(TOCGenericImport<UIPrintInfoClass, UIPrintInfo>)
  end;

  PUIPrintInfo = Pointer;

  UIPrintInteractionControllerClass = interface(NSObjectClass)
    ['{2433CCD8-E751-4D8E-B802-20435B7FCF3D}']
    { class } function canPrintURL(url: NSURL): Boolean; cdecl;
    { class } function canPrintData(data: NSData): Boolean; cdecl;
  end;

  UIPrintInteractionController = interface(NSObject)
    ['{FAC917D8-DEDA-4FCF-A39B-DC06B90E2AD0}']
    procedure setPrintingAvailable(printingAvailable: Boolean); cdecl;
    function printingAvailable: Boolean; cdecl;
    procedure setPrintableUTIs(printableUTIs: NSSet); cdecl;
    function printableUTIs: NSSet; cdecl;
    procedure setSharedPrintController(sharedPrintController
      : UIPrintInteractionController); cdecl;
    function sharedPrintController: UIPrintInteractionController; cdecl;
    procedure setPrintInfo(printInfo: UIPrintInfo); cdecl;
    function printInfo: UIPrintInfo; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setShowsPageRange(showsPageRange: Boolean); cdecl;
    function showsPageRange: Boolean; cdecl;
    procedure setShowsNumberOfCopies(showsNumberOfCopies: Boolean); cdecl;
    function showsNumberOfCopies: Boolean; cdecl;
    procedure setShowsPaperSelectionForLoadedPapers
      (showsPaperSelectionForLoadedPapers: Boolean); cdecl;
    function showsPaperSelectionForLoadedPapers: Boolean; cdecl;
    procedure setShowsPaperOrientation(showsPaperOrientation: Boolean); cdecl;
    function showsPaperOrientation: Boolean; cdecl;
    function printPaper: UIPrintPaper; cdecl;
    procedure setPrintPageRenderer(printPageRenderer
      : UIPrintPageRenderer); cdecl;
    function printPageRenderer: UIPrintPageRenderer; cdecl;
    procedure setPrintFormatter(printFormatter: UIPrintFormatter); cdecl;
    function printFormatter: UIPrintFormatter; cdecl;
    procedure setPrintingItem(printingItem: Pointer); cdecl;
    function printingItem: Pointer; cdecl;
    procedure setPrintingItems(printingItems: NSArray); cdecl;
    function printingItems: NSArray; cdecl;
    function presentAnimated(animated: Boolean;
      completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    function presentFromRect(rect: CGRect; inView: UIView; animated: Boolean;
      completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    function presentFromBarButtonItem(item: UIBarButtonItem; animated: Boolean;
      completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    function printToPrinter(printer: UIPrinter;
      completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    procedure dismissAnimated(animated: Boolean); cdecl;
  end;

  TUIPrintInteractionController = class
    (TOCGenericImport<UIPrintInteractionControllerClass,
    UIPrintInteractionController>)
  end;

  PUIPrintInteractionController = Pointer;

  UIPrintPaperClass = interface(NSObjectClass)
    ['{E70C1ADD-F750-4F3E-83A4-0A024F897CB0}']
    { class } function bestPaperForPageSize(contentSize: CGSize;
      withPapersFromArray: NSArray): UIPrintPaper; cdecl;
  end;

  UIPrintPaper = interface(NSObject)
    ['{C4D65EB8-D09B-48B2-B22D-DC9ECF389B40}']
    function paperSize: CGSize; cdecl;
    function printableRect: CGRect; cdecl;
    function printRect: CGRect; cdecl;
  end;

  TUIPrintPaper = class(TOCGenericImport<UIPrintPaperClass, UIPrintPaper>)
  end;

  PUIPrintPaper = Pointer;

  UIPrinterDestinationClass = interface(NSObjectClass)
    ['{4EAF628D-E3A8-4E3D-AA4A-5F327A610595}']
  end;

  UIPrinterDestination = interface(NSObject)
    ['{E4753237-72E3-44D9-9ED3-96D346391793}']
    function initWithURL(url: NSURL): Pointer { instancetype }; cdecl;
    procedure setURL(url: NSURL); cdecl;
    function url: NSURL; cdecl;
    procedure setDisplayName(displayName: NSString); cdecl;
    function displayName: NSString; cdecl;
    procedure setTxtRecord(txtRecord: NSData); cdecl;
    function txtRecord: NSData; cdecl;
  end;

  TUIPrinterDestination = class(TOCGenericImport<UIPrinterDestinationClass,
    UIPrinterDestination>)
  end;

  PUIPrinterDestination = Pointer;

  UIPrintServiceExtensionClass = interface(NSObjectClass)
    ['{E9D7C24B-895A-4707-AA44-90BB14FD5D6F}']
  end;

  UIPrintServiceExtension = interface(NSObject)
    ['{736607DD-26F3-4860-8453-B8E9D0765A74}']
    function printerDestinationsForPrintInfo(printInfo: UIPrintInfo)
      : NSArray; cdecl;
  end;

  TUIPrintServiceExtension = class
    (TOCGenericImport<UIPrintServiceExtensionClass, UIPrintServiceExtension>)
  end;

  PUIPrintServiceExtension = Pointer;

  UIActivityItemProviderClass = interface(NSOperationClass)
    ['{6EAE1082-7178-4E63-A94C-E8A01DE87F26}']
  end;

  UIActivityItemProvider = interface(NSOperation)
    ['{0FFDBDE2-00B9-44A7-93C7-3A1157AC255F}']
    function initWithPlaceholderItem(placeholderItem: Pointer)
      : Pointer { instancetype }; cdecl;
    function placeholderItem: Pointer; cdecl;
    function activityType: UIActivityType; cdecl;
    function item: Pointer; cdecl;
  end;

  TUIActivityItemProvider = class(TOCGenericImport<UIActivityItemProviderClass,
    UIActivityItemProvider>)
  end;

  PUIActivityItemProvider = Pointer;

  UIDocumentInteractionControllerClass = interface(NSObjectClass)
    ['{B59D796B-01E6-4B18-B395-17163478B2B5}']
    { class } function interactionControllerWithURL(url: NSURL)
      : UIDocumentInteractionController; cdecl;
  end;

  UIDocumentInteractionController = interface(NSObject)
    ['{D86A2DD5-BE7E-4DDA-872A-03D9F58B7461}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setURL(url: NSURL); cdecl;
    function url: NSURL; cdecl;
    procedure setUTI(UTI: NSString); cdecl;
    function UTI: NSString; cdecl;
    procedure setName(name: NSString); cdecl;
    function name: NSString; cdecl;
    function icons: NSArray; cdecl;
    procedure setAnnotation(annotation: Pointer); cdecl;
    function annotation: Pointer; cdecl;
    function presentOptionsMenuFromRect(rect: CGRect; inView: UIView;
      animated: Boolean): Boolean; cdecl;
    function presentOptionsMenuFromBarButtonItem(item: UIBarButtonItem;
      animated: Boolean): Boolean; cdecl;
    function presentPreviewAnimated(animated: Boolean): Boolean; cdecl;
    function presentOpenInMenuFromRect(rect: CGRect; inView: UIView;
      animated: Boolean): Boolean; cdecl;
    function presentOpenInMenuFromBarButtonItem(item: UIBarButtonItem;
      animated: Boolean): Boolean; cdecl;
    procedure dismissPreviewAnimated(animated: Boolean); cdecl;
    procedure dismissMenuAnimated(animated: Boolean); cdecl;
    function gestureRecognizers: NSArray; cdecl;
  end;

  TUIDocumentInteractionController = class
    (TOCGenericImport<UIDocumentInteractionControllerClass,
    UIDocumentInteractionController>)
  end;

  PUIDocumentInteractionController = Pointer;

  UIAccelerationClass = interface(NSObjectClass)
    ['{893F23D4-B077-4EE1-B95E-EF59850D96C4}']
  end;

  UIAcceleration = interface(NSObject)
    ['{56F72E93-F39C-4FBC-9D49-516364C4E2F6}']
    function timestamp: NSTimeInterval; cdecl;
    function x: UIAccelerationValue; cdecl;
    function y: UIAccelerationValue; cdecl;
    function z: UIAccelerationValue; cdecl;
  end;

  TUIAcceleration = class(TOCGenericImport<UIAccelerationClass, UIAcceleration>)
  end;

  PUIAcceleration = Pointer;

  UIAccelerometerClass = interface(NSObjectClass)
    ['{9EA930F5-1B56-4EC0-925A-617843F645A6}']
    { class } function sharedAccelerometer: UIAccelerometer; cdecl;
  end;

  UIAccelerometer = interface(NSObject)
    ['{BFE42395-02CA-4855-A3C7-8C06FA25E340}']
    procedure setUpdateInterval(updateInterval: NSTimeInterval); cdecl;
    function updateInterval: NSTimeInterval; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
  end;

  TUIAccelerometer = class(TOCGenericImport<UIAccelerometerClass,
    UIAccelerometer>)
  end;

  PUIAccelerometer = Pointer;

  UIPickerViewClass = interface(UIViewClass)
    ['{E34EB4FE-9B07-4513-8609-D319F9326161}']
  end;

  UIPickerView = interface(UIView)
    ['{19013A2C-6FD5-45AF-A3B9-EC5AF867B28C}']
    procedure setDataSource(dataSource: Pointer); cdecl;
    function dataSource: Pointer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setShowsSelectionIndicator(showsSelectionIndicator
      : Boolean); cdecl;
    function showsSelectionIndicator: Boolean; cdecl;
    function numberOfComponents: NSInteger; cdecl;
    function numberOfRowsInComponent(component: NSInteger): NSInteger; cdecl;
    function rowSizeForComponent(component: NSInteger): CGSize; cdecl;
    function viewForRow(row: NSInteger; forComponent: NSInteger): UIView; cdecl;
    procedure reloadAllComponents; cdecl;
    procedure reloadComponent(component: NSInteger); cdecl;
    procedure selectRow(row: NSInteger; inComponent: NSInteger;
      animated: Boolean); cdecl;
    function selectedRowInComponent(component: NSInteger): NSInteger; cdecl;
  end;

  TUIPickerView = class(TOCGenericImport<UIPickerViewClass, UIPickerView>)
  end;

  PUIPickerView = Pointer;

  UIRefreshControlClass = interface(UIControlClass)
    ['{A5E97426-FFCA-4D48-A470-6D8946CDB690}']
  end;

  UIRefreshControl = interface(UIControl)
    ['{A1F745F2-EF94-447E-9328-8A6B14CF6E2F}']
    function init: Pointer { instancetype }; cdecl;
    function isRefreshing: Boolean; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setAttributedTitle(attributedTitle: NSAttributedString); cdecl;
    function attributedTitle: NSAttributedString; cdecl;
    procedure beginRefreshing; cdecl;
    procedure endRefreshing; cdecl;
  end;

  TUIRefreshControl = class(TOCGenericImport<UIRefreshControlClass,
    UIRefreshControl>)
  end;

  PUIRefreshControl = Pointer;

  UIPanGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{914AAFC3-7A9D-4F40-9001-4C2D06D8C870}']
  end;

  UIPanGestureRecognizer = interface(UIGestureRecognizer)
    ['{D49404F6-64AA-460F-B54B-8EA6B56849DA}']
    procedure setMinimumNumberOfTouches(minimumNumberOfTouches
      : NSUInteger); cdecl;
    function minimumNumberOfTouches: NSUInteger; cdecl;
    procedure setMaximumNumberOfTouches(maximumNumberOfTouches
      : NSUInteger); cdecl;
    function maximumNumberOfTouches: NSUInteger; cdecl;
    function translationInView(view: UIView): CGPoint; cdecl;
    procedure setTranslation(translation: CGPoint; inView: UIView); cdecl;
    function velocityInView(view: UIView): CGPoint; cdecl;
    procedure setAllowedScrollTypesMask(allowedScrollTypesMask
      : UIScrollTypeMask); cdecl;
    function allowedScrollTypesMask: UIScrollTypeMask; cdecl;
  end;

  TUIPanGestureRecognizer = class(TOCGenericImport<UIPanGestureRecognizerClass,
    UIPanGestureRecognizer>)
  end;

  PUIPanGestureRecognizer = Pointer;

  UIPinchGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{21D23211-D8E1-4E6C-B56D-CF600F025279}']
  end;

  UIPinchGestureRecognizer = interface(UIGestureRecognizer)
    ['{5DC6871D-904D-4CBE-98BD-77A4E4634D8C}']
    procedure setScale(scale: CGFloat); cdecl;
    function scale: CGFloat; cdecl;
    function velocity: CGFloat; cdecl;
  end;

  TUIPinchGestureRecognizer = class
    (TOCGenericImport<UIPinchGestureRecognizerClass, UIPinchGestureRecognizer>)
  end;

  PUIPinchGestureRecognizer = Pointer;

  UIAccessibilityContainer = interface(IObjectiveC)
    ['{3EDE501C-E4F0-4D0D-8897-15A1EED12B2E}']
    function accessibilityElementCount: NSInteger; cdecl;
    function accessibilityElementAtIndex(index: NSInteger): Pointer; cdecl;
    function indexOfAccessibilityElement(element: Pointer): NSInteger; cdecl;
    procedure setAccessibilityElements(accessibilityElements: NSArray); cdecl;
    function accessibilityElements: NSArray; cdecl;
    procedure setAccessibilityContainerType(accessibilityContainerType
      : UIAccessibilityContainerType); cdecl;
    function accessibilityContainerType: UIAccessibilityContainerType; cdecl;
  end;

  UIImageAssetClass = interface(NSObjectClass)
    ['{A823C06F-3B3A-4460-A9C4-B952D785F1EF}']
  end;

  UIImageAsset = interface(NSObject)
    ['{2CE428ED-0B98-4F85-84EB-6045D3AA49B5}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function imageWithConfiguration(configuration: UIImageConfiguration)
      : UIImage; cdecl;
    [MethodName('registerImage:withConfiguration:')]
    procedure registerImageWithConfiguration(image: UIImage;
      withConfiguration: UIImageConfiguration); cdecl;
    procedure unregisterImageWithConfiguration(configuration
      : UIImageConfiguration); cdecl;
    function imageWithTraitCollection(traitCollection: UITraitCollection)
      : UIImage; cdecl;
    [MethodName('registerImage:withTraitCollection:')]
    procedure registerImageWithTraitCollection(image: UIImage;
      withTraitCollection: UITraitCollection); cdecl;
    procedure unregisterImageWithTraitCollection(traitCollection
      : UITraitCollection); cdecl;
  end;

  TUIImageAsset = class(TOCGenericImport<UIImageAssetClass, UIImageAsset>)
  end;

  PUIImageAsset = Pointer;

  UIGraphicsRendererFormatClass = interface(NSObjectClass)
    ['{6A688468-A092-46D8-B5C3-8B9B2A1A047A}']
    { class } function defaultFormat: Pointer { instancetype }; cdecl;
    { class } function preferredFormat: Pointer { instancetype }; cdecl;
  end;

  UIGraphicsRendererFormat = interface(NSObject)
    ['{4290DD3E-210A-428B-9C5F-AC73D5B2BA18}']
    function bounds: CGRect; cdecl;
  end;

  TUIGraphicsRendererFormat = class
    (TOCGenericImport<UIGraphicsRendererFormatClass, UIGraphicsRendererFormat>)
  end;

  PUIGraphicsRendererFormat = Pointer;

  UIGraphicsImageRendererFormatClass = interface(UIGraphicsRendererFormatClass)
    ['{4ED8155F-CE38-4018-8367-1B911D047889}']
    { class } function formatForTraitCollection(traitCollection
      : UITraitCollection): Pointer { instancetype }; cdecl;
  end;

  UIGraphicsImageRendererFormat = interface(UIGraphicsRendererFormat)
    ['{6088D8BC-9496-4C97-A1FD-11D1C08106BF}']
    procedure setScale(scale: CGFloat); cdecl;
    function scale: CGFloat; cdecl;
    procedure setOpaque(opaque: Boolean); cdecl;
    function opaque: Boolean; cdecl;
    procedure setPrefersExtendedRange(prefersExtendedRange: Boolean); cdecl;
    function prefersExtendedRange: Boolean; cdecl;
    procedure setPreferredRange(preferredRange
      : UIGraphicsImageRendererFormatRange); cdecl;
    function preferredRange: UIGraphicsImageRendererFormatRange; cdecl;
  end;

  TUIGraphicsImageRendererFormat = class
    (TOCGenericImport<UIGraphicsImageRendererFormatClass,
    UIGraphicsImageRendererFormat>)
  end;

  PUIGraphicsImageRendererFormat = Pointer;

  UIScreenClass = interface(NSObjectClass)
    ['{5B91792B-871F-4A03-B0CB-AA1439A769DF}']
  end;

  UIScreen = interface(NSObject)
    ['{94005CD3-4012-4639-8556-30CA10C908AF}']
    procedure setScreens(screens: NSArray); cdecl;
    function screens: NSArray; cdecl;
    procedure setMainScreen(mainScreen: UIScreen); cdecl;
    function mainScreen: UIScreen; cdecl;
    function bounds: CGRect; cdecl;
    function scale: CGFloat; cdecl;
    function availableModes: NSArray; cdecl;
    function preferredMode: UIScreenMode; cdecl;
    procedure setCurrentMode(currentMode: UIScreenMode); cdecl;
    function currentMode: UIScreenMode; cdecl;
    procedure setOverscanCompensation(overscanCompensation
      : UIScreenOverscanCompensation); cdecl;
    function overscanCompensation: UIScreenOverscanCompensation; cdecl;
    function overscanCompensationInsets: UIEdgeInsets; cdecl;
    function mirroredScreen: UIScreen; cdecl;
    function isCaptured: Boolean; cdecl;
    procedure setBrightness(brightness: CGFloat); cdecl;
    function brightness: CGFloat; cdecl;
    procedure setWantsSoftwareDimming(wantsSoftwareDimming: Boolean); cdecl;
    function wantsSoftwareDimming: Boolean; cdecl;
    function coordinateSpace: Pointer; cdecl;
    function fixedCoordinateSpace: Pointer; cdecl;
    function nativeBounds: CGRect; cdecl;
    function nativeScale: CGFloat; cdecl;
    function displayLinkWithTarget(target: Pointer; selector: SEL)
      : CADisplayLink; cdecl;
    function maximumFramesPerSecond: NSInteger; cdecl;
    function calibratedLatency: CFTimeInterval; cdecl;
    function referenceDisplayModeStatus
      : UIScreenReferenceDisplayModeStatus; cdecl;
    function currentEDRHeadroom: CGFloat; cdecl;
    function potentialEDRHeadroom: CGFloat; cdecl;
    function focusedItem: Pointer; cdecl;
    function focusedView: UIView; cdecl;
    function supportsFocus: Boolean; cdecl;
    function applicationFrame: CGRect; cdecl;
    function snapshotViewAfterScreenUpdates(afterUpdates: Boolean)
      : UIView; cdecl;
  end;

  TUIScreen = class(TOCGenericImport<UIScreenClass, UIScreen>)
  end;

  PUIScreen = Pointer;

  UIImageSymbolConfigurationClass = interface(UIImageConfigurationClass)
    ['{045FB49C-FE2F-4A1A-B0EA-025276BF8ABA}']
    { class } function configurationWithScale(scale: UIImageSymbolScale)
      : Pointer { instancetype }; cdecl;
    [MethodName('configurationWithPointSize:')]
    { class } function configurationWithPointSize(pointSize: CGFloat)
      : Pointer { instancetype }; cdecl;
    { class } function configurationWithWeight(weight: UIImageSymbolWeight)
      : Pointer { instancetype }; cdecl;
    [MethodName('configurationWithPointSize:weight:')]
    { class } function configurationWithPointSizeWeight(pointSize: CGFloat;
      weight: UIImageSymbolWeight): Pointer { instancetype }; cdecl;
    [MethodName('configurationWithPointSize:weight:scale:')]
    { class } function configurationWithPointSizeWeightScale(pointSize: CGFloat;
      weight: UIImageSymbolWeight; scale: UIImageSymbolScale)
      : Pointer { instancetype }; cdecl;
    [MethodName('configurationWithTextStyle:')]
    { class } function configurationWithTextStyle(textStyle: UIFontTextStyle)
      : Pointer { instancetype }; cdecl;
    [MethodName('configurationWithTextStyle:scale:')]
    { class } function configurationWithTextStyleScale
      (textStyle: UIFontTextStyle; scale: UIImageSymbolScale)
      : Pointer { instancetype }; cdecl;
    [MethodName('configurationWithFont:')]
    { class } function configurationWithFont(font: UIFont)
      : Pointer { instancetype }; cdecl;
    [MethodName('configurationWithFont:scale:')]
    { class } function configurationWithFontScale(font: UIFont;
      scale: UIImageSymbolScale): Pointer { instancetype }; cdecl;
    { class } function configurationWithHierarchicalColor(hierarchicalColor
      : UIColor): Pointer { instancetype }; cdecl;
    { class } function configurationWithPaletteColors(paletteColors: NSArray)
      : Pointer { instancetype }; cdecl;
    { class } function configurationPreferringMulticolor
      : Pointer { instancetype }; cdecl;
    { class } function configurationPreferringMonochrome
      : Pointer { instancetype }; cdecl;
  end;

  UIImageSymbolConfiguration = interface(UIImageConfiguration)
    ['{FA19992A-5EDA-4913-BF78-C0CEEF9ADA76}']
    procedure setUnspecifiedConfiguration(unspecifiedConfiguration
      : UIImageSymbolConfiguration); cdecl;
    function unspecifiedConfiguration: UIImageSymbolConfiguration; cdecl;
    function configurationWithoutTextStyle: Pointer { instancetype }; cdecl;
    function configurationWithoutScale: Pointer { instancetype }; cdecl;
    function configurationWithoutWeight: Pointer { instancetype }; cdecl;
    function configurationWithoutPointSizeAndWeight
      : Pointer { instancetype }; cdecl;
    function isEqualToConfiguration(otherConfiguration
      : UIImageSymbolConfiguration): Boolean; cdecl;
  end;

  TUIImageSymbolConfiguration = class
    (TOCGenericImport<UIImageSymbolConfigurationClass,
    UIImageSymbolConfiguration>)
  end;

  PUIImageSymbolConfiguration = Pointer;

  UIAccessibilityCustomActionClass = interface(NSObjectClass)
    ['{2C3EA803-4244-4288-9EEB-93A78FDDF9FF}']
  end;

  UIAccessibilityCustomAction = interface(NSObject)
    ['{730ABDD7-BFC0-4360-9E25-A2BCE75928FF}']
    [MethodName('initWithName:target:selector:')]
    function initWithNameTargetSelector(name: NSString; target: Pointer;
      selector: SEL): Pointer { instancetype }; cdecl;
    [MethodName('initWithAttributedName:target:selector:')]
    function initWithAttributedNameTargetSelector(attributedName
      : NSAttributedString; target: Pointer; selector: SEL)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithName:image:target:selector:')]
    function initWithNameImageTargetSelector(name: NSString; image: UIImage;
      target: Pointer; selector: SEL): Pointer { instancetype }; cdecl;
    [MethodName('initWithAttributedName:image:target:selector:')]
    function initWithAttributedNameImageTargetSelector(attributedName
      : NSAttributedString; image: UIImage; target: Pointer; selector: SEL)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithName:actionHandler:')]
    function initWithNameActionHandler(name: NSString;
      actionHandler: UIAccessibilityCustomActionHandler)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithAttributedName:actionHandler:')]
    function initWithAttributedNameActionHandler(attributedName
      : NSAttributedString; actionHandler: UIAccessibilityCustomActionHandler)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithName:image:actionHandler:')]
    function initWithNameImageActionHandler(name: NSString; image: UIImage;
      actionHandler: UIAccessibilityCustomActionHandler)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithAttributedName:image:actionHandler:')]
    function initWithAttributedNameImageActionHandler(attributedName
      : NSAttributedString; image: UIImage;
      actionHandler: UIAccessibilityCustomActionHandler)
      : Pointer { instancetype }; cdecl;
    procedure setName(name: NSString); cdecl;
    function name: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setAttributedName(attributedName: NSAttributedString); cdecl;
    function attributedName: NSAttributedString; cdecl;
    procedure setTarget(target: Pointer); cdecl;
    function target: Pointer; cdecl;
    procedure setSelector(selector: SEL); cdecl;
    function selector: SEL; cdecl;
    procedure setActionHandler(actionHandler
      : UIAccessibilityCustomActionHandler); cdecl;
    function actionHandler: UIAccessibilityCustomActionHandler; cdecl;
  end;

  TUIAccessibilityCustomAction = class
    (TOCGenericImport<UIAccessibilityCustomActionClass,
    UIAccessibilityCustomAction>)
  end;

  PUIAccessibilityCustomAction = Pointer;

  UIAccessibilityCustomRotorClass = interface(NSObjectClass)
    ['{9C999B46-BA8F-4ABD-A977-27AA0381EBA2}']
  end;

  UIAccessibilityCustomRotor = interface(NSObject)
    ['{83376BBA-D7DC-412B-91EA-6CDC0F6904A2}']
    procedure setAccessibilityCustomRotors(accessibilityCustomRotors
      : NSArray); cdecl;
    function accessibilityCustomRotors: NSArray; cdecl;
    function initWithName(name: NSString;
      itemSearchBlock: UIAccessibilityCustomRotorSearch)
      : Pointer { instancetype }; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString;
      itemSearchBlock: UIAccessibilityCustomRotorSearch)
      : Pointer { instancetype }; cdecl;
    function initWithSystemType(&type: UIAccessibilityCustomSystemRotorType;
      itemSearchBlock: UIAccessibilityCustomRotorSearch)
      : Pointer { instancetype }; cdecl;
    procedure setName(name: NSString); cdecl;
    function name: NSString; cdecl;
    procedure setAttributedName(attributedName: NSAttributedString); cdecl;
    function attributedName: NSAttributedString; cdecl;
    procedure setItemSearchBlock(itemSearchBlock
      : UIAccessibilityCustomRotorSearch); cdecl;
    function itemSearchBlock: UIAccessibilityCustomRotorSearch; cdecl;
    function systemRotorType: UIAccessibilityCustomSystemRotorType; cdecl;
  end;

  TUIAccessibilityCustomRotor = class
    (TOCGenericImport<UIAccessibilityCustomRotorClass,
    UIAccessibilityCustomRotor>)
  end;

  PUIAccessibilityCustomRotor = Pointer;

  UIAccessibilityCustomRotorItemResultClass = interface(NSObjectClass)
    ['{1F4CD92A-44C5-4583-B0D0-77782BB94CA1}']
  end;

  UIAccessibilityCustomRotorItemResult = interface(NSObject)
    ['{E2635DE8-EEBB-4D7B-B084-C9E3C53231B1}']
    function initWithTargetElement(targetElement: Pointer;
      targetRange: UITextRange): Pointer { instancetype }; cdecl;
    procedure setTargetElement(targetElement: Pointer); cdecl;
    function targetElement: Pointer; cdecl;
    procedure setTargetRange(targetRange: UITextRange); cdecl;
    function targetRange: UITextRange; cdecl;
  end;

  TUIAccessibilityCustomRotorItemResult = class
    (TOCGenericImport<UIAccessibilityCustomRotorItemResultClass,
    UIAccessibilityCustomRotorItemResult>)
  end;

  PUIAccessibilityCustomRotorItemResult = Pointer;

  UIAccessibilityCustomRotorSearchPredicateClass = interface(NSObjectClass)
    ['{B4AC7FC2-584D-4EC4-8196-51D9FD71A981}']
  end;

  UIAccessibilityCustomRotorSearchPredicate = interface(NSObject)
    ['{DA190AAB-7E77-4DB1-BE94-3E6C9EE9B2ED}']
    procedure setCurrentItem(currentItem
      : UIAccessibilityCustomRotorItemResult); cdecl;
    function currentItem: UIAccessibilityCustomRotorItemResult; cdecl;
    procedure setSearchDirection(searchDirection
      : UIAccessibilityCustomRotorDirection); cdecl;
    function searchDirection: UIAccessibilityCustomRotorDirection; cdecl;
  end;

  TUIAccessibilityCustomRotorSearchPredicate = class
    (TOCGenericImport<UIAccessibilityCustomRotorSearchPredicateClass,
    UIAccessibilityCustomRotorSearchPredicate>)
  end;

  PUIAccessibilityCustomRotorSearchPredicate = Pointer;

  UIAlertActionClass = interface(NSObjectClass)
    ['{0A2D6411-19A0-466D-B575-3CACA05A000A}']
    { class } function actionWithTitle(title: NSString;
      style: UIAlertActionStyle; handler: TUIKitHandler2)
      : Pointer { instancetype }; cdecl;
  end;

  UIAlertAction = interface(NSObject)
    ['{D9F1D47E-E979-4AAD-830A-349A32AE7096}']
    function title: NSString; cdecl;
    function style: UIAlertActionStyle; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
  end;

  TUIAlertAction = class(TOCGenericImport<UIAlertActionClass, UIAlertAction>)
  end;

  PUIAlertAction = Pointer;

  UIAlertControllerClass = interface(UIViewControllerClass)
    ['{18395273-63F2-4C0E-AA31-16266E6C2197}']
    { class } function alertControllerWithTitle(title: NSString;
      message: NSString; preferredStyle: UIAlertControllerStyle)
      : Pointer { instancetype }; cdecl;
  end;

  UIAlertController = interface(UIViewController)
    ['{613D7741-4602-40AB-81A3-8B293F3C7DC9}']
    procedure addAction(action: UIAlertAction); cdecl;
    function actions: NSArray; cdecl;
    procedure setPreferredAction(preferredAction: UIAlertAction); cdecl;
    function preferredAction: UIAlertAction; cdecl;
    procedure addTextFieldWithConfigurationHandler(configurationHandler
      : TUIKitConfigurationHandler); cdecl;
    function textFields: NSArray; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setMessage(message: NSString); cdecl;
    function message: NSString; cdecl;
    function preferredStyle: UIAlertControllerStyle; cdecl;
    procedure setSeverity(severity: UIAlertControllerSeverity); cdecl;
    function severity: UIAlertControllerSeverity; cdecl;
  end;

  TUIAlertController = class(TOCGenericImport<UIAlertControllerClass,
    UIAlertController>)
  end;

  PUIAlertController = Pointer;

  UIAccessibilityElementClass = interface(UIResponderClass)
    ['{626FEF39-6FB7-4F42-9686-FF600E954A09}']
  end;

  UIAccessibilityElement = interface(UIResponder)
    ['{54675BA0-23BC-487E-BFBA-42B33212A2FE}']
    function initWithAccessibilityContainer(container: Pointer)
      : Pointer { instancetype }; cdecl;
    procedure setAccessibilityContainer(accessibilityContainer: Pointer); cdecl;
    function accessibilityContainer: Pointer; cdecl;
    procedure setIsAccessibilityElement(isAccessibilityElement: Boolean); cdecl;
    function isAccessibilityElement: Boolean; cdecl;
    procedure setAccessibilityLabel(accessibilityLabel: NSString); cdecl;
    function accessibilityLabel: NSString; cdecl;
    procedure setAccessibilityHint(accessibilityHint: NSString); cdecl;
    function accessibilityHint: NSString; cdecl;
    procedure setAccessibilityValue(accessibilityValue: NSString); cdecl;
    function accessibilityValue: NSString; cdecl;
    procedure setAccessibilityFrame(accessibilityFrame: CGRect); cdecl;
    function accessibilityFrame: CGRect; cdecl;
    procedure setAccessibilityTraits(accessibilityTraits
      : UIAccessibilityTraits); cdecl;
    function accessibilityTraits: UIAccessibilityTraits; cdecl;
    procedure setAccessibilityFrameInContainerSpace
      (accessibilityFrameInContainerSpace: CGRect); cdecl;
    function accessibilityFrameInContainerSpace: CGRect; cdecl;
  end;

  TUIAccessibilityElement = class(TOCGenericImport<UIAccessibilityElementClass,
    UIAccessibilityElement>)
  end;

  PUIAccessibilityElement = Pointer;

  UIAccessibilityLocationDescriptorClass = interface(NSObjectClass)
    ['{D2D021EF-A606-48BD-B5A8-4A022012FB70}']
  end;

  UIAccessibilityLocationDescriptor = interface(NSObject)
    ['{4C702EEA-B685-41FF-8A53-05842EEB293B}']
    [MethodName('initWithName:view:')]
    function initWithNameView(name: NSString; view: UIView)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithName:point:inView:')]
    function initWithNamePointInView(name: NSString; point: CGPoint;
      inView: UIView): Pointer { instancetype }; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString;
      point: CGPoint; inView: UIView): Pointer { instancetype }; cdecl;
    function view: UIView; cdecl;
    function point: CGPoint; cdecl;
    function name: NSString; cdecl;
    function attributedName: NSAttributedString; cdecl;
  end;

  TUIAccessibilityLocationDescriptor = class
    (TOCGenericImport<UIAccessibilityLocationDescriptorClass,
    UIAccessibilityLocationDescriptor>)
  end;

  PUIAccessibilityLocationDescriptor = Pointer;

  UIAccessibility = interface(IObjectiveC)
    ['{4D1FC8D9-4DB2-46E5-BB51-9646CDEDC011}']
    procedure setIsAccessibilityElement(isAccessibilityElement: Boolean); cdecl;
    function isAccessibilityElement: Boolean; cdecl;
    procedure setAccessibilityLabel(accessibilityLabel: NSString); cdecl;
    function accessibilityLabel: NSString; cdecl;
    procedure setAccessibilityAttributedLabel(accessibilityAttributedLabel
      : NSAttributedString); cdecl;
    function accessibilityAttributedLabel: NSAttributedString; cdecl;
    procedure setAccessibilityHint(accessibilityHint: NSString); cdecl;
    function accessibilityHint: NSString; cdecl;
    procedure setAccessibilityAttributedHint(accessibilityAttributedHint
      : NSAttributedString); cdecl;
    function accessibilityAttributedHint: NSAttributedString; cdecl;
    procedure setAccessibilityValue(accessibilityValue: NSString); cdecl;
    function accessibilityValue: NSString; cdecl;
    procedure setAccessibilityAttributedValue(accessibilityAttributedValue
      : NSAttributedString); cdecl;
    function accessibilityAttributedValue: NSAttributedString; cdecl;
    procedure setAccessibilityTraits(accessibilityTraits
      : UIAccessibilityTraits); cdecl;
    function accessibilityTraits: UIAccessibilityTraits; cdecl;
    procedure setAccessibilityFrame(accessibilityFrame: CGRect); cdecl;
    function accessibilityFrame: CGRect; cdecl;
    procedure setAccessibilityPath(accessibilityPath: UIBezierPath); cdecl;
    function accessibilityPath: UIBezierPath; cdecl;
    procedure setAccessibilityActivationPoint(accessibilityActivationPoint
      : CGPoint); cdecl;
    function accessibilityActivationPoint: CGPoint; cdecl;
    procedure setAccessibilityLanguage(accessibilityLanguage: NSString); cdecl;
    function accessibilityLanguage: NSString; cdecl;
    procedure setAccessibilityElementsHidden(accessibilityElementsHidden
      : Boolean); cdecl;
    function accessibilityElementsHidden: Boolean; cdecl;
    procedure setAccessibilityViewIsModal(accessibilityViewIsModal
      : Boolean); cdecl;
    function accessibilityViewIsModal: Boolean; cdecl;
    procedure setShouldGroupAccessibilityChildren
      (shouldGroupAccessibilityChildren: Boolean); cdecl;
    function shouldGroupAccessibilityChildren: Boolean; cdecl;
    procedure setAccessibilityNavigationStyle(accessibilityNavigationStyle
      : UIAccessibilityNavigationStyle); cdecl;
    function accessibilityNavigationStyle
      : UIAccessibilityNavigationStyle; cdecl;
    procedure setAccessibilityRespondsToUserInteraction
      (accessibilityRespondsToUserInteraction: Boolean); cdecl;
    function accessibilityRespondsToUserInteraction: Boolean; cdecl;
    procedure setAccessibilityUserInputLabels(accessibilityUserInputLabels
      : NSArray); cdecl;
    function accessibilityUserInputLabels: NSArray; cdecl;
    procedure setAccessibilityAttributedUserInputLabels
      (accessibilityAttributedUserInputLabels: NSArray); cdecl;
    function accessibilityAttributedUserInputLabels: NSArray; cdecl;
    procedure setAccessibilityHeaderElements(accessibilityHeaderElements
      : NSArray); cdecl;
    function accessibilityHeaderElements: NSArray; cdecl;
    procedure setAccessibilityTextualContext(accessibilityTextualContext
      : UIAccessibilityTextualContext); cdecl;
    function accessibilityTextualContext: UIAccessibilityTextualContext; cdecl;
  end;

  UIAccessibilityFocus = interface(IObjectiveC)
    ['{AD55A032-FB2D-4629-A310-C8C711DE2966}']
    procedure accessibilityElementDidBecomeFocused; cdecl;
    procedure accessibilityElementDidLoseFocus; cdecl;
    function accessibilityElementIsFocused: Boolean; cdecl;
    function accessibilityAssistiveTechnologyFocusedIdentifiers: NSSet; cdecl;
  end;

  UIAccessibilityAction = interface(IObjectiveC)
    ['{65B959F4-9786-4A40-AD09-1B7ABCE9AA32}']
    function accessibilityActivate: Boolean; cdecl;
    procedure accessibilityIncrement; cdecl;
    procedure accessibilityDecrement; cdecl;
    function accessibilityScroll(direction: UIAccessibilityScrollDirection)
      : Boolean; cdecl;
    function accessibilityPerformEscape: Boolean; cdecl;
    function accessibilityPerformMagicTap: Boolean; cdecl;
    procedure setAccessibilityCustomActions(accessibilityCustomActions
      : NSArray); cdecl;
    function accessibilityCustomActions: NSArray; cdecl;
  end;

  UIAccessibilityDragging = interface(IObjectiveC)
    ['{50AFD6E3-4280-4CCE-9495-FC51BF3C020F}']
    procedure setAccessibilityDragSourceDescriptors
      (accessibilityDragSourceDescriptors: NSArray); cdecl;
    function accessibilityDragSourceDescriptors: NSArray; cdecl;
    procedure setAccessibilityDropPointDescriptors
      (accessibilityDropPointDescriptors: NSArray); cdecl;
    function accessibilityDropPointDescriptors: NSArray; cdecl;
  end;

  UIVisualEffectClass = interface(NSObjectClass)
    ['{15B37594-14EA-41E1-A375-97A9107D41E2}']
  end;

  UIVisualEffect = interface(NSObject)
    ['{24A09380-6D64-4164-B506-3C888E86CC9F}']
  end;

  TUIVisualEffect = class(TOCGenericImport<UIVisualEffectClass, UIVisualEffect>)
  end;

  PUIVisualEffect = Pointer;

  UIBackgroundConfigurationClass = interface(NSObjectClass)
    ['{EB7512F0-860E-4FD2-96D1-2218572E1643}']
    { class } function clearConfiguration: Pointer { instancetype }; cdecl;
    { class } function listPlainCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function listPlainHeaderFooterConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function listGroupedCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function listGroupedHeaderFooterConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function listSidebarHeaderConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function listSidebarCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function listAccompaniedSidebarCellConfiguration
      : Pointer { instancetype }; cdecl;
  end;

  UIBackgroundConfiguration = interface(NSObject)
    ['{C4433191-C38F-4BE4-A2A0-33CED0ECEC4D}']
    function updatedConfigurationForState(state: Pointer)
      : Pointer { instancetype }; cdecl;
    procedure setCustomView(customView: UIView); cdecl;
    function customView: UIView; cdecl;
    procedure setCornerRadius(cornerRadius: CGFloat); cdecl;
    function cornerRadius: CGFloat; cdecl;
    procedure setBackgroundInsets(backgroundInsets
      : NSDirectionalEdgeInsets); cdecl;
    function backgroundInsets: NSDirectionalEdgeInsets; cdecl;
    procedure setEdgesAddingLayoutMarginsToBackgroundInsets
      (edgesAddingLayoutMarginsToBackgroundInsets
      : NSDirectionalRectEdge); cdecl;
    function edgesAddingLayoutMarginsToBackgroundInsets
      : NSDirectionalRectEdge; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setBackgroundColorTransformer(backgroundColorTransformer
      : UIConfigurationColorTransformer); cdecl;
    function backgroundColorTransformer: UIConfigurationColorTransformer; cdecl;
    function resolvedBackgroundColorForTintColor(tintColor: UIColor)
      : UIColor; cdecl;
    procedure setVisualEffect(visualEffect: UIVisualEffect); cdecl;
    function visualEffect: UIVisualEffect; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setImageContentMode(imageContentMode: UIViewContentMode); cdecl;
    function imageContentMode: UIViewContentMode; cdecl;
    procedure setStrokeColor(strokeColor: UIColor); cdecl;
    function strokeColor: UIColor; cdecl;
    procedure setStrokeColorTransformer(strokeColorTransformer
      : UIConfigurationColorTransformer); cdecl;
    function strokeColorTransformer: UIConfigurationColorTransformer; cdecl;
    function resolvedStrokeColorForTintColor(tintColor: UIColor)
      : UIColor; cdecl;
    procedure setStrokeWidth(strokeWidth: CGFloat); cdecl;
    function strokeWidth: CGFloat; cdecl;
    procedure setStrokeOutset(strokeOutset: CGFloat); cdecl;
    function strokeOutset: CGFloat; cdecl;
  end;

  TUIBackgroundConfiguration = class
    (TOCGenericImport<UIBackgroundConfigurationClass,
    UIBackgroundConfiguration>)
  end;

  PUIBackgroundConfiguration = Pointer;

  UIButtonConfigurationClass = interface(NSObjectClass)
    ['{BD432D3F-B5BC-4F1F-B4E0-CB890540CE19}']
    { class } function plainButtonConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function tintedButtonConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function grayButtonConfiguration: Pointer { instancetype }; cdecl;
    { class } function filledButtonConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function borderlessButtonConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function borderedButtonConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function borderedTintedButtonConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function borderedProminentButtonConfiguration
      : Pointer { instancetype }; cdecl;
  end;

  UIButtonConfiguration = interface(NSObject)
    ['{A4A04BA9-1CD0-43C4-A1F9-72BD111799B2}']
    function updatedConfigurationForButton(button: UIButton)
      : Pointer { instancetype }; cdecl;
    procedure setBackground(background: UIBackgroundConfiguration); cdecl;
    function background: UIBackgroundConfiguration; cdecl;
    procedure setCornerStyle(cornerStyle
      : UIButtonConfigurationCornerStyle); cdecl;
    function cornerStyle: UIButtonConfigurationCornerStyle; cdecl;
    procedure setButtonSize(buttonSize: UIButtonConfigurationSize); cdecl;
    function buttonSize: UIButtonConfigurationSize; cdecl;
    procedure setMacIdiomStyle(macIdiomStyle
      : UIButtonConfigurationMacIdiomStyle); cdecl;
    function macIdiomStyle: UIButtonConfigurationMacIdiomStyle; cdecl;
    procedure setBaseForegroundColor(baseForegroundColor: UIColor); cdecl;
    function baseForegroundColor: UIColor; cdecl;
    procedure setBaseBackgroundColor(baseBackgroundColor: UIColor); cdecl;
    function baseBackgroundColor: UIColor; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setImageColorTransformer(imageColorTransformer
      : UIConfigurationColorTransformer); cdecl;
    function imageColorTransformer: UIConfigurationColorTransformer; cdecl;
    procedure setPreferredSymbolConfigurationForImage
      (preferredSymbolConfigurationForImage: UIImageSymbolConfiguration); cdecl;
    function preferredSymbolConfigurationForImage
      : UIImageSymbolConfiguration; cdecl;
    procedure setShowsActivityIndicator(showsActivityIndicator: Boolean); cdecl;
    function showsActivityIndicator: Boolean; cdecl;
    procedure setActivityIndicatorColorTransformer
      (activityIndicatorColorTransformer
      : UIConfigurationColorTransformer); cdecl;
    function activityIndicatorColorTransformer
      : UIConfigurationColorTransformer; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setAttributedTitle(attributedTitle: NSAttributedString); cdecl;
    function attributedTitle: NSAttributedString; cdecl;
    procedure setTitleTextAttributesTransformer(titleTextAttributesTransformer
      : UIConfigurationTextAttributesTransformer); cdecl;
    function titleTextAttributesTransformer
      : UIConfigurationTextAttributesTransformer; cdecl;
    procedure setTitleLineBreakMode(titleLineBreakMode: NSLineBreakMode); cdecl;
    function titleLineBreakMode: NSLineBreakMode; cdecl;
    procedure setSubtitle(subtitle: NSString); cdecl;
    function subtitle: NSString; cdecl;
    procedure setAttributedSubtitle(attributedSubtitle
      : NSAttributedString); cdecl;
    function attributedSubtitle: NSAttributedString; cdecl;
    procedure setSubtitleTextAttributesTransformer
      (subtitleTextAttributesTransformer
      : UIConfigurationTextAttributesTransformer); cdecl;
    function subtitleTextAttributesTransformer
      : UIConfigurationTextAttributesTransformer; cdecl;
    procedure setSubtitleLineBreakMode(subtitleLineBreakMode
      : NSLineBreakMode); cdecl;
    function subtitleLineBreakMode: NSLineBreakMode; cdecl;
    procedure setIndicator(indicator: UIButtonConfigurationIndicator); cdecl;
    function indicator: UIButtonConfigurationIndicator; cdecl;
    procedure setIndicatorColorTransformer(indicatorColorTransformer
      : UIConfigurationColorTransformer); cdecl;
    function indicatorColorTransformer: UIConfigurationColorTransformer; cdecl;
    procedure setContentInsets(contentInsets: NSDirectionalEdgeInsets); cdecl;
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    procedure setDefaultContentInsets; cdecl;
    procedure setImagePlacement(imagePlacement: NSDirectionalRectEdge); cdecl;
    function imagePlacement: NSDirectionalRectEdge; cdecl;
    procedure setImagePadding(imagePadding: CGFloat); cdecl;
    function imagePadding: CGFloat; cdecl;
    procedure setTitlePadding(titlePadding: CGFloat); cdecl;
    function titlePadding: CGFloat; cdecl;
    procedure setTitleAlignment(titleAlignment
      : UIButtonConfigurationTitleAlignment); cdecl;
    function titleAlignment: UIButtonConfigurationTitleAlignment; cdecl;
    procedure setAutomaticallyUpdateForSelection(automaticallyUpdateForSelection
      : Boolean); cdecl;
    function automaticallyUpdateForSelection: Boolean; cdecl;
  end;

  TUIButtonConfiguration = class(TOCGenericImport<UIButtonConfigurationClass,
    UIButtonConfiguration>)
  end;

  PUIButtonConfiguration = Pointer;

  UIPointerStyleClass = interface(NSObjectClass)
    ['{4B79C653-3BCC-454B-BD1C-0C98568E7F84}']
    { class } function styleWithEffect(effect: UIPointerEffect;
      shape: UIPointerShape): Pointer { instancetype }; cdecl;
    { class } function styleWithShape(shape: UIPointerShape;
      constrainedAxes: UIAxis): Pointer { instancetype }; cdecl;
    { class } function hiddenPointerStyle: Pointer { instancetype }; cdecl;
    { class } function systemPointerStyle: Pointer { instancetype }; cdecl;
  end;

  UIPointerStyle = interface(NSObject)
    ['{38531A4C-F14F-4A76-B9E9-89E626C00FCA}']
    procedure setAccessories(accessories: NSArray); cdecl;
    function accessories: NSArray; cdecl;
  end;

  TUIPointerStyle = class(TOCGenericImport<UIPointerStyleClass, UIPointerStyle>)
  end;

  PUIPointerStyle = Pointer;

  UIPointerEffectClass = interface(NSObjectClass)
    ['{52E5CC0C-D9F0-4457-941A-2CFB6B90D30D}']
    { class } function effectWithPreview(preview: UITargetedPreview)
      : Pointer { instancetype }; cdecl;
  end;

  UIPointerEffect = interface(NSObject)
    ['{DCE3BBBB-817A-4AA1-B219-FD462EAF50B1}']
    function preview: UITargetedPreview; cdecl;
  end;

  TUIPointerEffect = class(TOCGenericImport<UIPointerEffectClass,
    UIPointerEffect>)
  end;

  PUIPointerEffect = Pointer;

  UIPointerShapeClass = interface(NSObjectClass)
    ['{7A2648C9-F02A-44B8-AD20-78AD9B3F1D36}']
    { class } function shapeWithPath(path: UIBezierPath)
      : Pointer { instancetype }; cdecl;
    [MethodName('shapeWithRoundedRect:')]
    { class } function shapeWithRoundedRect(rect: CGRect)
      : Pointer { instancetype }; cdecl;
    [MethodName('shapeWithRoundedRect:cornerRadius:')]
    { class } function shapeWithRoundedRectCornerRadius(rect: CGRect;
      cornerRadius: CGFloat): Pointer { instancetype }; cdecl;
    { class } function beamWithPreferredLength(length: CGFloat; axis: UIAxis)
      : Pointer { instancetype }; cdecl;
  end;

  UIPointerShape = interface(NSObject)
    ['{50C86FBF-A8CA-41AD-A565-C15504DCB941}']
  end;

  TUIPointerShape = class(TOCGenericImport<UIPointerShapeClass, UIPointerShape>)
  end;

  PUIPointerShape = Pointer;

  UIActivityIndicatorViewClass = interface(UIViewClass)
    ['{3289E63C-984F-4FB9-908F-9ABCA48A97A0}']
  end;

  UIActivityIndicatorView = interface(UIView)
    ['{DA4C354E-773A-4E63-A972-1C41F2148F76}']
    function initWithActivityIndicatorStyle(style: UIActivityIndicatorViewStyle)
      : Pointer { instancetype }; cdecl;
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setActivityIndicatorViewStyle(activityIndicatorViewStyle
      : UIActivityIndicatorViewStyle); cdecl;
    function activityIndicatorViewStyle: UIActivityIndicatorViewStyle; cdecl;
    procedure setHidesWhenStopped(hidesWhenStopped: Boolean); cdecl;
    function hidesWhenStopped: Boolean; cdecl;
    procedure setColor(color: UIColor); cdecl;
    function color: UIColor; cdecl;
    procedure startAnimating; cdecl;
    procedure stopAnimating; cdecl;
    function isAnimating: Boolean; cdecl;
  end;

  TUIActivityIndicatorView = class
    (TOCGenericImport<UIActivityIndicatorViewClass, UIActivityIndicatorView>)
  end;

  PUIActivityIndicatorView = Pointer;

  UIActivityItemsConfigurationClass = interface(NSObjectClass)
    ['{BA02EFA4-1E83-4A4C-8B0B-742B97A9A033}']
    { class } function activityItemsConfigurationWithObjects(objects: NSArray)
      : Pointer { instancetype }; cdecl;
    { class } function activityItemsConfigurationWithItemProviders
      (itemProviders: NSArray): Pointer { instancetype }; cdecl;
  end;

  UIActivityItemsConfiguration = interface(NSObject)
    ['{84FCF690-3C74-4B64-B661-641E5C54D856}']
    procedure setLocalObject(localObject: Pointer); cdecl;
    function localObject: Pointer; cdecl;
    procedure setSupportedInteractions(supportedInteractions: NSArray); cdecl;
    function supportedInteractions: NSArray; cdecl;
    procedure setMetadataProvider(metadataProvider
      : TUIKitMetadataProvider); cdecl;
    function metadataProvider: TUIKitMetadataProvider; cdecl;
    procedure setPerItemMetadataProvider(perItemMetadataProvider
      : TUIKitPerItemMetadataProvider); cdecl;
    function perItemMetadataProvider: TUIKitPerItemMetadataProvider; cdecl;
    procedure setPreviewProvider(previewProvider: TUIKitPreviewProvider); cdecl;
    function previewProvider: TUIKitPreviewProvider; cdecl;
    procedure setApplicationActivitiesProvider(applicationActivitiesProvider
      : TUIKitApplicationActivitiesProvider); cdecl;
    function applicationActivitiesProvider
      : TUIKitApplicationActivitiesProvider; cdecl;
    function initWithObjects(objects: NSArray): Pointer { instancetype }; cdecl;
    function initWithItemProviders(itemProviders: NSArray)
      : Pointer { instancetype }; cdecl;
  end;

  TUIActivityItemsConfiguration = class
    (TOCGenericImport<UIActivityItemsConfigurationClass,
    UIActivityItemsConfiguration>)
  end;

  PUIActivityItemsConfiguration = Pointer;

  UIApplicationShortcutIconClass = interface(NSObjectClass)
    ['{8F93CC71-FEC9-4D30-9655-DF5189AC4599}']
    { class } function iconWithType(&type: UIApplicationShortcutIconType)
      : Pointer { instancetype }; cdecl;
    { class } function iconWithTemplateImageName(templateImageName: NSString)
      : Pointer { instancetype }; cdecl;
    { class } function iconWithSystemImageName(systemImageName: NSString)
      : Pointer { instancetype }; cdecl;
  end;

  UIApplicationShortcutIcon = interface(NSObject)
    ['{10E105B7-1FAB-4AFC-A6E9-F6BFACED3BCB}']
  end;

  TUIApplicationShortcutIcon = class
    (TOCGenericImport<UIApplicationShortcutIconClass,
    UIApplicationShortcutIcon>)
  end;

  PUIApplicationShortcutIcon = Pointer;

  UIMutableApplicationShortcutItemClass = interface
    (UIApplicationShortcutItemClass)
    ['{1941E085-736E-4CDA-8398-F5B75AEFDC6C}']
  end;

  UIMutableApplicationShortcutItem = interface(UIApplicationShortcutItem)
    ['{D026099A-FD2E-491E-85F3-4E691FD34905}']
    procedure setType(&type: NSString); cdecl;
    function &type: NSString; cdecl;
    procedure setLocalizedTitle(localizedTitle: NSString); cdecl;
    function localizedTitle: NSString; cdecl;
    procedure setLocalizedSubtitle(localizedSubtitle: NSString); cdecl;
    function localizedSubtitle: NSString; cdecl;
    procedure setIcon(icon: UIApplicationShortcutIcon); cdecl;
    function icon: UIApplicationShortcutIcon; cdecl;
    procedure setUserInfo(userInfo: NSDictionary); cdecl;
    function userInfo: NSDictionary; cdecl;
    procedure setTargetContentIdentifier(targetContentIdentifier
      : Pointer); cdecl;
    function targetContentIdentifier: Pointer; cdecl;
  end;

  TUIMutableApplicationShortcutItem = class
    (TOCGenericImport<UIMutableApplicationShortcutItemClass,
    UIMutableApplicationShortcutItem>)
  end;

  PUIMutableApplicationShortcutItem = Pointer;

  UIAttachmentBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{E2F1A08F-F353-458A-9B92-0E884D2E7EFD}']
    [MethodName
      ('slidingAttachmentWithItem:attachedToItem:attachmentAnchor:axisOfTranslation:')
      ]
    { class } function
      slidingAttachmentWithItemAttachedToItemAttachmentAnchorAxisOfTranslation
      (item1: Pointer; attachedToItem: Pointer; attachmentAnchor: CGPoint;
      axisOfTranslation: CGVector): Pointer { instancetype }; cdecl;
    [MethodName
      ('slidingAttachmentWithItem:attachmentAnchor:axisOfTranslation:')]
    { class } function
      slidingAttachmentWithItemAttachmentAnchorAxisOfTranslation(item: Pointer;
      attachmentAnchor: CGPoint; axisOfTranslation: CGVector)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('limitAttachmentWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:')
      ]
    { class } function limitAttachmentWithItem(item1: Pointer;
      offsetFromCenter: UIOffset; attachedToItem: Pointer;
      offsetFromCenter1: UIOffset): Pointer { instancetype }; cdecl;
    { class } function fixedAttachmentWithItem(item1: Pointer;
      attachedToItem: Pointer; attachmentAnchor: CGPoint)
      : Pointer { instancetype }; cdecl;
    { class } function pinAttachmentWithItem(item1: Pointer;
      attachedToItem: Pointer; attachmentAnchor: CGPoint)
      : Pointer { instancetype }; cdecl;
  end;

  UIAttachmentBehavior = interface(UIDynamicBehavior)
    ['{8FC4E16A-7F08-409E-BCD1-D3DF64676184}']
    [MethodName('initWithItem:attachedToAnchor:')]
    function initWithItemAttachedToAnchor(item: Pointer;
      attachedToAnchor: CGPoint): Pointer { instancetype }; cdecl;
    [MethodName('initWithItem:offsetFromCenter:attachedToAnchor:')]
    function initWithItemOffsetFromCenterAttachedToAnchor(item: Pointer;
      offsetFromCenter: UIOffset; attachedToAnchor: CGPoint)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithItem:attachedToItem:')]
    function initWithItemAttachedToItem(item1: Pointer; attachedToItem: Pointer)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:')]
    function initWithItemOffsetFromCenterAttachedToItemOffsetFromCenter
      (item1: Pointer; offsetFromCenter: UIOffset; attachedToItem: Pointer;
      offsetFromCenter1: UIOffset): Pointer { instancetype }; cdecl;
    function items: NSArray; cdecl;
    function attachedBehaviorType: UIAttachmentBehaviorType; cdecl;
    procedure setAnchorPoint(anchorPoint: CGPoint); cdecl;
    function anchorPoint: CGPoint; cdecl;
    procedure setLength(length: CGFloat); cdecl;
    function length: CGFloat; cdecl;
    procedure setDamping(damping: CGFloat); cdecl;
    function damping: CGFloat; cdecl;
    procedure setFrequency(frequency: CGFloat); cdecl;
    function frequency: CGFloat; cdecl;
    procedure setFrictionTorque(frictionTorque: CGFloat); cdecl;
    function frictionTorque: CGFloat; cdecl;
    procedure setAttachmentRange(attachmentRange: UIFloatRange); cdecl;
    function attachmentRange: UIFloatRange; cdecl;
  end;

  TUIAttachmentBehavior = class(TOCGenericImport<UIAttachmentBehaviorClass,
    UIAttachmentBehavior>)
  end;

  PUIAttachmentBehavior = Pointer;

  UIBandSelectionInteractionClass = interface(NSObjectClass)
    ['{BE6C16C0-5BFD-4496-B98E-5111B80BBD89}']
  end;

  UIBandSelectionInteraction = interface(NSObject)
    ['{677698C7-397A-41B3-9979-3F38B5EA1623}']
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    function state: UIBandSelectionInteractionState; cdecl;
    function selectionRect: CGRect; cdecl;
    function initialModifierFlags: UIKeyModifierFlags; cdecl;
    procedure setShouldBeginHandler(shouldBeginHandler
      : TUIKitShouldBeginHandler); cdecl;
    function shouldBeginHandler: TUIKitShouldBeginHandler; cdecl;
    function initWithSelectionHandler(selectionHandler: TUIKitSelectionHandler)
      : Pointer { instancetype }; cdecl;
  end;

  TUIBandSelectionInteraction = class
    (TOCGenericImport<UIBandSelectionInteractionClass,
    UIBandSelectionInteraction>)
  end;

  PUIBandSelectionInteraction = Pointer;

  UIBlurEffectClass = interface(UIVisualEffectClass)
    ['{A27888D1-A8F6-407F-A32F-65D39188E16E}']
    { class } function effectWithStyle(style: UIBlurEffectStyle)
      : UIBlurEffect; cdecl;
  end;

  UIBlurEffect = interface(UIVisualEffect)
    ['{984A0303-1F4B-4E66-B52A-D18EAA4F813E}']
  end;

  TUIBlurEffect = class(TOCGenericImport<UIBlurEffectClass, UIBlurEffect>)
  end;

  PUIBlurEffect = Pointer;

  UIBarAppearanceClass = interface(NSObjectClass)
    ['{808C26E9-861D-4476-96C2-BBBA4CF9EE12}']
  end;

  UIBarAppearance = interface(NSObject)
    ['{4F14B1EF-50A2-47F1-A2CA-5258AB8A2030}']
    function init: Pointer { instancetype }; cdecl;
    function initWithIdiom(idiom: UIUserInterfaceIdiom)
      : Pointer { instancetype }; cdecl;
    function idiom: UIUserInterfaceIdiom; cdecl;
    function initWithBarAppearance(barAppearance: UIBarAppearance)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function copy: Pointer { instancetype }; cdecl;
    procedure configureWithDefaultBackground; cdecl;
    procedure configureWithOpaqueBackground; cdecl;
    procedure configureWithTransparentBackground; cdecl;
    procedure setBackgroundEffect(backgroundEffect: UIBlurEffect); cdecl;
    function backgroundEffect: UIBlurEffect; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage); cdecl;
    function backgroundImage: UIImage; cdecl;
    procedure setBackgroundImageContentMode(backgroundImageContentMode
      : UIViewContentMode); cdecl;
    function backgroundImageContentMode: UIViewContentMode; cdecl;
    procedure setShadowColor(shadowColor: UIColor); cdecl;
    function shadowColor: UIColor; cdecl;
    procedure setShadowImage(shadowImage: UIImage); cdecl;
    function shadowImage: UIImage; cdecl;
  end;

  TUIBarAppearance = class(TOCGenericImport<UIBarAppearanceClass,
    UIBarAppearance>)
  end;

  PUIBarAppearance = Pointer;

  UIBarButtonItemStateAppearanceClass = interface(NSObjectClass)
    ['{9637440A-9D2A-404A-8E3F-52A1A039EF10}']
  end;

  UIBarButtonItemStateAppearance = interface(NSObject)
    ['{951BA567-E812-4D94-994E-C8B757AF3DDD}']
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment
      : UIOffset); cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage); cdecl;
    function backgroundImage: UIImage; cdecl;
    procedure setBackgroundImagePositionAdjustment
      (backgroundImagePositionAdjustment: UIOffset); cdecl;
    function backgroundImagePositionAdjustment: UIOffset; cdecl;
  end;

  TUIBarButtonItemStateAppearance = class
    (TOCGenericImport<UIBarButtonItemStateAppearanceClass,
    UIBarButtonItemStateAppearance>)
  end;

  PUIBarButtonItemStateAppearance = Pointer;

  UIBarButtonItemAppearanceClass = interface(NSObjectClass)
    ['{62938381-BB58-435F-96F3-7B37F493F9DE}']
  end;

  UIBarButtonItemAppearance = interface(NSObject)
    ['{DE56A423-7B99-46AE-B739-4BE8E7725323}']
    function init: Pointer { instancetype }; cdecl;
    function initWithStyle(style: UIBarButtonItemStyle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function copy: Pointer { instancetype }; cdecl;
    procedure configureWithDefaultForStyle(style: UIBarButtonItemStyle); cdecl;
    function normal: UIBarButtonItemStateAppearance; cdecl;
    function highlighted: UIBarButtonItemStateAppearance; cdecl;
    function disabled: UIBarButtonItemStateAppearance; cdecl;
    function focused: UIBarButtonItemStateAppearance; cdecl;
  end;

  TUIBarButtonItemAppearance = class
    (TOCGenericImport<UIBarButtonItemAppearanceClass,
    UIBarButtonItemAppearance>)
  end;

  PUIBarButtonItemAppearance = Pointer;

  UISliderClass = interface(UIControlClass)
    ['{E726C971-7118-426E-A676-760F93F76F21}']
  end;

  UISlider = interface(UIControl)
    ['{5F8A2B01-2D4B-4209-8F20-A3725C7EE4C6}']
    [MethodName('setValue:')]
    procedure setValue(value: Single); cdecl;
    function value: Single; cdecl;
    procedure setMinimumValue(minimumValue: Single); cdecl;
    function minimumValue: Single; cdecl;
    procedure setMaximumValue(maximumValue: Single); cdecl;
    function maximumValue: Single; cdecl;
    procedure setMinimumValueImage(minimumValueImage: UIImage); cdecl;
    function minimumValueImage: UIImage; cdecl;
    procedure setMaximumValueImage(maximumValueImage: UIImage); cdecl;
    function maximumValueImage: UIImage; cdecl;
    procedure setContinuous(continuous: Boolean); cdecl;
    function isContinuous: Boolean; cdecl;
    procedure setMinimumTrackTintColor(minimumTrackTintColor: UIColor); cdecl;
    function minimumTrackTintColor: UIColor; cdecl;
    procedure setMaximumTrackTintColor(maximumTrackTintColor: UIColor); cdecl;
    function maximumTrackTintColor: UIColor; cdecl;
    procedure setThumbTintColor(thumbTintColor: UIColor); cdecl;
    function thumbTintColor: UIColor; cdecl;
    [MethodName('setValue:animated:')]
    procedure setValueAnimated(value: Single; animated: Boolean); cdecl;
    procedure setThumbImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setMinimumTrackImage(image: UIImage;
      forState: UIControlState); cdecl;
    procedure setMaximumTrackImage(image: UIImage;
      forState: UIControlState); cdecl;
    function thumbImageForState(state: UIControlState): UIImage; cdecl;
    function minimumTrackImageForState(state: UIControlState): UIImage; cdecl;
    function maximumTrackImageForState(state: UIControlState): UIImage; cdecl;
    function currentThumbImage: UIImage; cdecl;
    function currentMinimumTrackImage: UIImage; cdecl;
    function currentMaximumTrackImage: UIImage; cdecl;
    function minimumValueImageRectForBounds(bounds: CGRect): CGRect; cdecl;
    function maximumValueImageRectForBounds(bounds: CGRect): CGRect; cdecl;
    function trackRectForBounds(bounds: CGRect): CGRect; cdecl;
    function thumbRectForBounds(bounds: CGRect; trackRect: CGRect;
      value: Single): CGRect; cdecl;
    function behavioralStyle: UIBehavioralStyle; cdecl;
    procedure setPreferredBehavioralStyle(preferredBehavioralStyle
      : UIBehavioralStyle); cdecl;
    function preferredBehavioralStyle: UIBehavioralStyle; cdecl;
  end;

  TUISlider = class(TOCGenericImport<UISliderClass, UISlider>)
  end;

  PUISlider = Pointer;

  UICalendarSelectionClass = interface(NSObjectClass)
    ['{D4D7B82B-868F-422D-843C-0042D1B18623}']
  end;

  UICalendarSelection = interface(NSObject)
    ['{DE2EBAD5-5205-41FA-A8CA-A6D58126B02C}']
    procedure updateSelectableDates; cdecl;
  end;

  TUICalendarSelection = class(TOCGenericImport<UICalendarSelectionClass,
    UICalendarSelection>)
  end;

  PUICalendarSelection = Pointer;

  UICalendarSelectionMultiDateClass = interface(UICalendarSelectionClass)
    ['{DC5EFA4F-078C-429A-92C3-CD7B812892C2}']
  end;

  UICalendarSelectionMultiDate = interface(UICalendarSelection)
    ['{D1198E96-D860-40BE-821A-8D223D1CDA8C}']
    [MethodName('setSelectedDates:')]
    procedure setSelectedDates(selectedDates: NSArray); cdecl;
    function selectedDates: NSArray; cdecl;
    [MethodName('setSelectedDates:animated:')]
    procedure setSelectedDatesAnimated(selectedDates: NSArray;
      animated: Boolean); cdecl;
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
  end;

  TUICalendarSelectionMultiDate = class
    (TOCGenericImport<UICalendarSelectionMultiDateClass,
    UICalendarSelectionMultiDate>)
  end;

  PUICalendarSelectionMultiDate = Pointer;

  UICalendarSelectionSingleDateClass = interface(UICalendarSelectionClass)
    ['{7131C955-C837-425D-9A35-7AC9FFFCD207}']
  end;

  UICalendarSelectionSingleDate = interface(UICalendarSelection)
    ['{11A134C0-4FC8-46CF-AF43-108D2C429775}']
    function delegate: Pointer; cdecl;
    [MethodName('setSelectedDate:')]
    procedure setSelectedDate(selectedDate: NSDateComponents); cdecl;
    function selectedDate: NSDateComponents; cdecl;
    [MethodName('setSelectedDate:animated:')]
    procedure setSelectedDateAnimated(selectedDate: NSDateComponents;
      animated: Boolean); cdecl;
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
  end;

  TUICalendarSelectionSingleDate = class
    (TOCGenericImport<UICalendarSelectionSingleDateClass,
    UICalendarSelectionSingleDate>)
  end;

  PUICalendarSelectionSingleDate = Pointer;

  UICalendarViewDecorationClass = interface(NSObjectClass)
    ['{A0B4773C-99DA-44B3-8D5A-3E633B1CC70F}']
    { class } function decorationWithColor(color: UIColor;
      size: UICalendarViewDecorationSize): Pointer { instancetype }; cdecl;
    [MethodName('decorationWithImage:')]
    { class } function decorationWithImage(image: UIImage)
      : Pointer { instancetype }; cdecl;
    [MethodName('decorationWithImage:color:size:')]
    { class } function decorationWithImageColorSize(image: UIImage;
      color: UIColor; size: UICalendarViewDecorationSize)
      : Pointer { instancetype }; cdecl;
    { class } function decorationWithCustomViewProvider(customViewProvider
      : TUIKitCustomViewProvider): Pointer { instancetype }; cdecl;
  end;

  UICalendarViewDecoration = interface(NSObject)
    ['{21A71A7C-7773-4B1A-9C03-02D86579D53B}']
    function init: Pointer { instancetype }; cdecl;
    function initWithImage(image: UIImage; color: UIColor;
      size: UICalendarViewDecorationSize): Pointer { instancetype }; cdecl;
    function initWithCustomViewProvider(customViewProvider
      : TUIKitCustomViewProvider): Pointer { instancetype }; cdecl;
  end;

  TUICalendarViewDecoration = class
    (TOCGenericImport<UICalendarViewDecorationClass, UICalendarViewDecoration>)
  end;

  PUICalendarViewDecoration = Pointer;

  UICalendarViewClass = interface(UIViewClass)
    ['{FA6101D5-A54F-43F0-9624-994F1BEFE1DE}']
  end;

  UICalendarView = interface(UIView)
    ['{F3BC8C49-4DEA-4A10-9E8A-46DA1659A31A}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setSelectionBehavior(selectionBehavior
      : UICalendarSelection); cdecl;
    function selectionBehavior: UICalendarSelection; cdecl;
    procedure setLocale(locale: NSLocale); cdecl;
    function locale: NSLocale; cdecl;
    procedure setCalendar(calendar: NSCalendar); cdecl;
    function calendar: NSCalendar; cdecl;
    procedure setTimeZone(timeZone: NSTimeZone); cdecl;
    function timeZone: NSTimeZone; cdecl;
    procedure setFontDesign(fontDesign: UIFontDescriptorSystemDesign); cdecl;
    function fontDesign: UIFontDescriptorSystemDesign; cdecl;
    procedure setAvailableDateRange(availableDateRange: NSDateInterval); cdecl;
    function availableDateRange: NSDateInterval; cdecl;
    [MethodName('setVisibleDateComponents:')]
    procedure setVisibleDateComponents(visibleDateComponents
      : NSDateComponents); cdecl;
    function visibleDateComponents: NSDateComponents; cdecl;
    [MethodName('setVisibleDateComponents:animated:')]
    procedure setVisibleDateComponentsAnimated(dateComponents: NSDateComponents;
      animated: Boolean); cdecl;
    procedure setWantsDateDecorations(wantsDateDecorations: Boolean); cdecl;
    function wantsDateDecorations: Boolean; cdecl;
    procedure reloadDecorationsForDateComponents(dates: NSArray;
      animated: Boolean); cdecl;
  end;

  TUICalendarView = class(TOCGenericImport<UICalendarViewClass, UICalendarView>)
  end;

  PUICalendarView = Pointer;

  UICellAccessoryClass = interface(NSObjectClass)
    ['{051911E9-8F03-481F-A37D-FF81D3EB02AC}']
  end;

  UICellAccessory = interface(NSObject)
    ['{078A75E5-5F2D-4254-8350-5F4F90CDD8F3}']
    procedure setDisplayedState(displayedState
      : UICellAccessoryDisplayedState); cdecl;
    function displayedState: UICellAccessoryDisplayedState; cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    function isHidden: Boolean; cdecl;
    procedure setReservedLayoutWidth(reservedLayoutWidth: CGFloat); cdecl;
    function reservedLayoutWidth: CGFloat; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function init: Pointer { instancetype }; cdecl;
  end;

  TUICellAccessory = class(TOCGenericImport<UICellAccessoryClass,
    UICellAccessory>)
  end;

  PUICellAccessory = Pointer;

  UICellAccessoryDisclosureIndicatorClass = interface(UICellAccessoryClass)
    ['{EE38611E-5ABC-49C0-B295-25BB2035FC83}']
  end;

  UICellAccessoryDisclosureIndicator = interface(UICellAccessory)
    ['{2CFBE4F5-43FF-47B7-BD5C-D0B69C0EBC80}']
  end;

  TUICellAccessoryDisclosureIndicator = class
    (TOCGenericImport<UICellAccessoryDisclosureIndicatorClass,
    UICellAccessoryDisclosureIndicator>)
  end;

  PUICellAccessoryDisclosureIndicator = Pointer;

  UICellAccessoryDetailClass = interface(UICellAccessoryClass)
    ['{380CC36C-A5CA-490A-9748-03B5C0363750}']
  end;

  UICellAccessoryDetail = interface(UICellAccessory)
    ['{18B8A70A-78FC-4C48-AEB4-9DA4B49E0764}']
    procedure setActionHandler(actionHandler: TUIKitAction); cdecl;
    function actionHandler: TUIKitAction; cdecl;
  end;

  TUICellAccessoryDetail = class(TOCGenericImport<UICellAccessoryDetailClass,
    UICellAccessoryDetail>)
  end;

  PUICellAccessoryDetail = Pointer;

  UICellAccessoryCheckmarkClass = interface(UICellAccessoryClass)
    ['{4DBEB883-9DBC-4B74-B850-FF5D03EF1175}']
  end;

  UICellAccessoryCheckmark = interface(UICellAccessory)
    ['{CC64EC5A-36CC-4F3B-8FD9-6092A43C31C4}']
  end;

  TUICellAccessoryCheckmark = class
    (TOCGenericImport<UICellAccessoryCheckmarkClass, UICellAccessoryCheckmark>)
  end;

  PUICellAccessoryCheckmark = Pointer;

  UICellAccessoryDeleteClass = interface(UICellAccessoryClass)
    ['{A930C394-F31A-44D7-97A5-7326E2538EAC}']
  end;

  UICellAccessoryDelete = interface(UICellAccessory)
    ['{DA8A28F4-4153-43B5-B79F-95E85AA2B5A4}']
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setActionHandler(actionHandler: TUIKitAction); cdecl;
    function actionHandler: TUIKitAction; cdecl;
  end;

  TUICellAccessoryDelete = class(TOCGenericImport<UICellAccessoryDeleteClass,
    UICellAccessoryDelete>)
  end;

  PUICellAccessoryDelete = Pointer;

  UICellAccessoryInsertClass = interface(UICellAccessoryClass)
    ['{58F118F0-D374-41CD-83A9-4B819728F197}']
  end;

  UICellAccessoryInsert = interface(UICellAccessory)
    ['{32C29D17-34BA-4D56-B82B-B842AE191EED}']
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setActionHandler(actionHandler: TUIKitAction); cdecl;
    function actionHandler: TUIKitAction; cdecl;
  end;

  TUICellAccessoryInsert = class(TOCGenericImport<UICellAccessoryInsertClass,
    UICellAccessoryInsert>)
  end;

  PUICellAccessoryInsert = Pointer;

  UICellAccessoryReorderClass = interface(UICellAccessoryClass)
    ['{9AD19FD2-01F7-4F41-A83E-5943146BD84F}']
  end;

  UICellAccessoryReorder = interface(UICellAccessory)
    ['{2E96BF87-0B3D-4D97-85C8-7E604E9AD156}']
    procedure setShowsVerticalSeparator(showsVerticalSeparator: Boolean); cdecl;
    function showsVerticalSeparator: Boolean; cdecl;
  end;

  TUICellAccessoryReorder = class(TOCGenericImport<UICellAccessoryReorderClass,
    UICellAccessoryReorder>)
  end;

  PUICellAccessoryReorder = Pointer;

  UICellAccessoryMultiselectClass = interface(UICellAccessoryClass)
    ['{2052FAE1-DE41-4876-9B48-5956AD81FC4E}']
  end;

  UICellAccessoryMultiselect = interface(UICellAccessory)
    ['{1C78A230-8C3F-4E96-8648-4DF11FBD52DE}']
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
  end;

  TUICellAccessoryMultiselect = class
    (TOCGenericImport<UICellAccessoryMultiselectClass,
    UICellAccessoryMultiselect>)
  end;

  PUICellAccessoryMultiselect = Pointer;

  UICellAccessoryOutlineDisclosureClass = interface(UICellAccessoryClass)
    ['{02F94025-6BB2-474E-9E99-6AED1D1F18CD}']
  end;

  UICellAccessoryOutlineDisclosure = interface(UICellAccessory)
    ['{5F7CD27F-990D-4D8F-8313-637E9D053316}']
    procedure setStyle(style: UICellAccessoryOutlineDisclosureStyle); cdecl;
    function style: UICellAccessoryOutlineDisclosureStyle; cdecl;
    procedure setActionHandler(actionHandler: TUIKitAction); cdecl;
    function actionHandler: TUIKitAction; cdecl;
  end;

  TUICellAccessoryOutlineDisclosure = class
    (TOCGenericImport<UICellAccessoryOutlineDisclosureClass,
    UICellAccessoryOutlineDisclosure>)
  end;

  PUICellAccessoryOutlineDisclosure = Pointer;

  UICellAccessoryPopUpMenuClass = interface(UICellAccessoryClass)
    ['{C697AD16-2AFB-49F4-AD8D-D67B6417B6C1}']
  end;

  UICellAccessoryPopUpMenu = interface(UICellAccessory)
    ['{B4E60CC5-E2EA-4E49-8C66-E5DC3AA0F32B}']
    function initWithMenu(menu: UIMenu): Pointer { instancetype }; cdecl;
    function menu: UIMenu; cdecl;
    procedure setSelectedElementDidChangeHandler(selectedElementDidChangeHandler
      : TUIKitSelectedElementDidChangeHandler); cdecl;
    function selectedElementDidChangeHandler
      : TUIKitSelectedElementDidChangeHandler; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUICellAccessoryPopUpMenu = class
    (TOCGenericImport<UICellAccessoryPopUpMenuClass, UICellAccessoryPopUpMenu>)
  end;

  PUICellAccessoryPopUpMenu = Pointer;

  UICellAccessoryLabelClass = interface(UICellAccessoryClass)
    ['{CD8C14C1-71C3-4353-8530-35BB4BFDBA99}']
  end;

  UICellAccessoryLabel = interface(UICellAccessory)
    ['{8E92203D-29F0-42A3-916C-261BE5984FBE}']
    function initWithText(text: NSString): Pointer { instancetype }; cdecl;
    function text: NSString; cdecl;
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setAdjustsFontForContentSizeCategory
      (adjustsFontForContentSizeCategory: Boolean); cdecl;
    function adjustsFontForContentSizeCategory: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUICellAccessoryLabel = class(TOCGenericImport<UICellAccessoryLabelClass,
    UICellAccessoryLabel>)
  end;

  PUICellAccessoryLabel = Pointer;

  UICellAccessoryCustomViewClass = interface(UICellAccessoryClass)
    ['{D81F51E5-6FEC-4E7C-9AEE-CCED2003EA40}']
  end;

  UICellAccessoryCustomView = interface(UICellAccessory)
    ['{999F5E02-78F2-4AC9-A09C-83C465F931A3}']
    function initWithCustomView(customView: UIView;
      placement: UICellAccessoryPlacement): Pointer { instancetype }; cdecl;
    function customView: UIView; cdecl;
    function placement: UICellAccessoryPlacement; cdecl;
    procedure setMaintainsFixedSize(maintainsFixedSize: Boolean); cdecl;
    function maintainsFixedSize: Boolean; cdecl;
    procedure setPosition(position: UICellAccessoryPosition); cdecl;
    function position: UICellAccessoryPosition; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUICellAccessoryCustomView = class
    (TOCGenericImport<UICellAccessoryCustomViewClass,
    UICellAccessoryCustomView>)
  end;

  PUICellAccessoryCustomView = Pointer;

  UIViewConfigurationStateClass = interface(NSObjectClass)
    ['{7029E774-9C2A-4661-8104-28F842E5643B}']
  end;

  UIViewConfigurationState = interface(NSObject)
    ['{AFB73745-6AFD-409A-9667-059E3679EA77}']
    function initWithTraitCollection(traitCollection: UITraitCollection)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setTraitCollection(traitCollection: UITraitCollection); cdecl;
    function traitCollection: UITraitCollection; cdecl;
    procedure setDisabled(disabled: Boolean); cdecl;
    function isDisabled: Boolean; cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    function isHighlighted: Boolean; cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    function isSelected: Boolean; cdecl;
    procedure setFocused(focused: Boolean); cdecl;
    function isFocused: Boolean; cdecl;
    procedure setPinned(pinned: Boolean); cdecl;
    function isPinned: Boolean; cdecl;
  end;

  TUIViewConfigurationState = class
    (TOCGenericImport<UIViewConfigurationStateClass, UIViewConfigurationState>)
  end;

  PUIViewConfigurationState = Pointer;

  UICellConfigurationStateClass = interface(UIViewConfigurationStateClass)
    ['{37BD48B3-5194-4F0A-BDB1-89BA87160314}']
  end;

  UICellConfigurationState = interface(UIViewConfigurationState)
    ['{5EF750C4-7CDC-413D-BFA6-715D4DC5AE32}']
    procedure setEditing(editing: Boolean); cdecl;
    function isEditing: Boolean; cdecl;
    procedure setExpanded(expanded: Boolean); cdecl;
    function isExpanded: Boolean; cdecl;
    procedure setSwiped(swiped: Boolean); cdecl;
    function isSwiped: Boolean; cdecl;
    procedure setReordering(reordering: Boolean); cdecl;
    function isReordering: Boolean; cdecl;
    procedure setCellDragState(cellDragState
      : UICellConfigurationDragState); cdecl;
    function cellDragState: UICellConfigurationDragState; cdecl;
    procedure setCellDropState(cellDropState
      : UICellConfigurationDropState); cdecl;
    function cellDropState: UICellConfigurationDropState; cdecl;
  end;

  TUICellConfigurationState = class
    (TOCGenericImport<UICellConfigurationStateClass, UICellConfigurationState>)
  end;

  PUICellConfigurationState = Pointer;

  UICloudSharingControllerClass = interface(UIViewControllerClass)
    ['{505A99FA-EE6F-44AA-BDA8-56345F6320B3}']
  end;

  UICloudSharingController = interface(UIViewController)
    ['{029CF1AE-4FD2-437D-A779-08BFD2BA14E4}']
    function initWithPreparationHandler(preparationHandler
      : TUIKitPreparationHandler): Pointer { instancetype }; cdecl;
    function initWithShare(share: CKShare; container: CKContainer)
      : Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function share: CKShare; cdecl;
    procedure setAvailablePermissions(availablePermissions
      : UICloudSharingPermissionOptions); cdecl;
    function availablePermissions: UICloudSharingPermissionOptions; cdecl;
    function activityItemSource: Pointer; cdecl;
  end;

  TUICloudSharingController = class
    (TOCGenericImport<UICloudSharingControllerClass, UICloudSharingController>)
  end;

  PUICloudSharingController = Pointer;

  UICollectionViewUpdateItemClass = interface(NSObjectClass)
    ['{2E2E3D50-C086-4B55-8D3A-791C9DC9AA59}']
  end;

  UICollectionViewUpdateItem = interface(NSObject)
    ['{6A74FEAB-645F-47CF-A380-BA6F9A973664}']
    function indexPathBeforeUpdate: NSIndexPath; cdecl;
    function indexPathAfterUpdate: NSIndexPath; cdecl;
    function updateAction: UICollectionUpdateAction; cdecl;
  end;

  TUICollectionViewUpdateItem = class
    (TOCGenericImport<UICollectionViewUpdateItemClass,
    UICollectionViewUpdateItem>)
  end;

  PUICollectionViewUpdateItem = Pointer;

  UICollectionViewLayoutAttributesClass = interface(NSObjectClass)
    ['{AB9A7C92-9F6C-4A1E-9209-2D3F39A3CDD0}']
    { class } function layoutAttributesForCellWithIndexPath
      (indexPath: NSIndexPath): Pointer { instancetype }; cdecl;
    { class } function layoutAttributesForSupplementaryViewOfKind
      (elementKind: NSString; withIndexPath: NSIndexPath)
      : Pointer { instancetype }; cdecl;
    { class } function layoutAttributesForDecorationViewOfKind
      (decorationViewKind: NSString; withIndexPath: NSIndexPath)
      : Pointer { instancetype }; cdecl;
  end;

  UICollectionViewLayoutAttributes = interface(NSObject)
    ['{4D4238C8-A804-47BE-B7B5-77F879404B4B}']
    procedure setFrame(frame: CGRect); cdecl;
    function frame: CGRect; cdecl;
    procedure setCenter(center: CGPoint); cdecl;
    function center: CGPoint; cdecl;
    procedure setSize(size: CGSize); cdecl;
    function size: CGSize; cdecl;
    procedure setTransform3D(transform3D: CATransform3D); cdecl;
    function transform3D: CATransform3D; cdecl;
    procedure setBounds(bounds: CGRect); cdecl;
    function bounds: CGRect; cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    function transform: CGAffineTransform; cdecl;
    procedure setAlpha(alpha: CGFloat); cdecl;
    function alpha: CGFloat; cdecl;
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function zIndex: NSInteger; cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    function isHidden: Boolean; cdecl;
    procedure setIndexPath(indexPath: NSIndexPath); cdecl;
    function indexPath: NSIndexPath; cdecl;
    function representedElementCategory: UICollectionElementCategory; cdecl;
    function representedElementKind: NSString; cdecl;
  end;

  TUICollectionViewLayoutAttributes = class
    (TOCGenericImport<UICollectionViewLayoutAttributesClass,
    UICollectionViewLayoutAttributes>)
  end;

  PUICollectionViewLayoutAttributes = Pointer;

  UICollectionViewClass = interface(UIScrollViewClass)
    ['{9F8971E5-EE0E-4257-961B-2F478B04F6FE}']
  end;

  UICollectionView = interface(UIScrollView)
    ['{2262DDFA-5244-497B-A45A-68FA8D959524}']
    function initWithFrame(frame: CGRect;
      collectionViewLayout: UICollectionViewLayout)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    [MethodName('setCollectionViewLayout:')]
    procedure setCollectionViewLayout(collectionViewLayout
      : UICollectionViewLayout); cdecl;
    function collectionViewLayout: UICollectionViewLayout; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setDataSource(dataSource: Pointer); cdecl;
    function dataSource: Pointer; cdecl;
    procedure setPrefetchDataSource(prefetchDataSource: Pointer); cdecl;
    function prefetchDataSource: Pointer; cdecl;
    procedure setPrefetchingEnabled(prefetchingEnabled: Boolean); cdecl;
    function isPrefetchingEnabled: Boolean; cdecl;
    procedure setDragDelegate(dragDelegate: Pointer); cdecl;
    function dragDelegate: Pointer; cdecl;
    procedure setDropDelegate(dropDelegate: Pointer); cdecl;
    function dropDelegate: Pointer; cdecl;
    procedure setDragInteractionEnabled(dragInteractionEnabled: Boolean); cdecl;
    function dragInteractionEnabled: Boolean; cdecl;
    function contextMenuInteraction: UIContextMenuInteraction; cdecl;
    procedure setReorderingCadence(reorderingCadence
      : UICollectionViewReorderingCadence); cdecl;
    function reorderingCadence: UICollectionViewReorderingCadence; cdecl;
    procedure setSelfSizingInvalidation(selfSizingInvalidation
      : UICollectionViewSelfSizingInvalidation); cdecl;
    function selfSizingInvalidation
      : UICollectionViewSelfSizingInvalidation; cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    function backgroundView: UIView; cdecl;
    [MethodName('registerClass:forCellWithReuseIdentifier:')]
    procedure registerClassForCellWithReuseIdentifier(cellClass: Pointer;
      forCellWithReuseIdentifier: NSString); cdecl;
    [MethodName('registerNib:forCellWithReuseIdentifier:')]
    procedure registerNibForCellWithReuseIdentifier(nib: UINib;
      forCellWithReuseIdentifier: NSString); cdecl;
    [MethodName
      ('registerClass:forSupplementaryViewOfKind:withReuseIdentifier:')]
    procedure registerClassForSupplementaryViewOfKindWithReuseIdentifier
      (viewClass: Pointer; forSupplementaryViewOfKind: NSString;
      withReuseIdentifier: NSString); cdecl;
    [MethodName('registerNib:forSupplementaryViewOfKind:withReuseIdentifier:')]
    procedure registerNibForSupplementaryViewOfKindWithReuseIdentifier
      (nib: UINib; forSupplementaryViewOfKind: NSString;
      withReuseIdentifier: NSString); cdecl;
    function dequeueReusableCellWithReuseIdentifier(identifier: NSString;
      forIndexPath: NSIndexPath): UICollectionViewCell; cdecl;
    function dequeueReusableSupplementaryViewOfKind(elementKind: NSString;
      withReuseIdentifier: NSString; forIndexPath: NSIndexPath)
      : UICollectionReusableView; cdecl;
    function dequeueConfiguredReusableCellWithRegistration
      (registration: UICollectionViewCellRegistration;
      forIndexPath: NSIndexPath; item: Pointer): UICollectionViewCell; cdecl;
    function dequeueConfiguredReusableSupplementaryViewWithRegistration
      (registration: UICollectionViewSupplementaryRegistration;
      forIndexPath: NSIndexPath): UICollectionReusableView; cdecl;
    procedure setAllowsSelection(allowsSelection: Boolean); cdecl;
    function allowsSelection: Boolean; cdecl;
    procedure setAllowsMultipleSelection(allowsMultipleSelection
      : Boolean); cdecl;
    function allowsMultipleSelection: Boolean; cdecl;
    function indexPathsForSelectedItems: NSArray; cdecl;
    procedure selectItemAtIndexPath(indexPath: NSIndexPath; animated: Boolean;
      scrollPosition: UICollectionViewScrollPosition); cdecl;
    procedure deselectItemAtIndexPath(indexPath: NSIndexPath;
      animated: Boolean); cdecl;
    function hasUncommittedUpdates: Boolean; cdecl;
    procedure reloadData; cdecl;
    [MethodName('setCollectionViewLayout:animated:')]
    procedure setCollectionViewLayoutAnimated(layout: UICollectionViewLayout;
      animated: Boolean); cdecl;
    [MethodName('setCollectionViewLayout:animated:completion:')]
    procedure setCollectionViewLayoutAnimatedCompletion
      (layout: UICollectionViewLayout; animated: Boolean;
      completion: TUIKitCompletion); cdecl;
    function startInteractiveTransitionToCollectionViewLayout
      (layout: UICollectionViewLayout;
      completion: UICollectionViewLayoutInteractiveTransitionCompletion)
      : UICollectionViewTransitionLayout; cdecl;
    procedure finishInteractiveTransition; cdecl;
    procedure cancelInteractiveTransition; cdecl;
    function numberOfSections: NSInteger; cdecl;
    function numberOfItemsInSection(section: NSInteger): NSInteger; cdecl;
    function layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForSupplementaryElementOfKind(kind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function indexPathForItemAtPoint(point: CGPoint): NSIndexPath; cdecl;
    function indexPathForCell(cell: UICollectionViewCell): NSIndexPath; cdecl;
    function cellForItemAtIndexPath(indexPath: NSIndexPath)
      : UICollectionViewCell; cdecl;
    function visibleCells: NSArray; cdecl;
    function indexPathsForVisibleItems: NSArray; cdecl;
    function supplementaryViewForElementKind(elementKind: NSString;
      atIndexPath: NSIndexPath): UICollectionReusableView; cdecl;
    function visibleSupplementaryViewsOfKind(elementKind: NSString)
      : NSArray; cdecl;
    function indexPathsForVisibleSupplementaryElementsOfKind
      (elementKind: NSString): NSArray; cdecl;
    procedure scrollToItemAtIndexPath(indexPath: NSIndexPath;
      atScrollPosition: UICollectionViewScrollPosition;
      animated: Boolean); cdecl;
    procedure insertSections(sections: NSIndexSet); cdecl;
    procedure deleteSections(sections: NSIndexSet); cdecl;
    procedure moveSection(section: NSInteger; toSection: NSInteger); cdecl;
    procedure reloadSections(sections: NSIndexSet); cdecl;
    procedure insertItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure deleteItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure moveItemAtIndexPath(indexPath: NSIndexPath;
      toIndexPath: NSIndexPath); cdecl;
    procedure reloadItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure reconfigureItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure performBatchUpdates(updates: TUIKitAction;
      completion: TUIKitCompletion); cdecl;
    function beginInteractiveMovementForItemAtIndexPath(indexPath: NSIndexPath)
      : Boolean; cdecl;
    procedure updateInteractiveMovementTargetPosition(targetPosition
      : CGPoint); cdecl;
    procedure endInteractiveMovement; cdecl;
    procedure cancelInteractiveMovement; cdecl;
    procedure setRemembersLastFocusedIndexPath(remembersLastFocusedIndexPath
      : Boolean); cdecl;
    function remembersLastFocusedIndexPath: Boolean; cdecl;
    procedure setSelectionFollowsFocus(selectionFollowsFocus: Boolean); cdecl;
    function selectionFollowsFocus: Boolean; cdecl;
    procedure setAllowsFocus(allowsFocus: Boolean); cdecl;
    function allowsFocus: Boolean; cdecl;
    procedure setAllowsFocusDuringEditing(allowsFocusDuringEditing
      : Boolean); cdecl;
    function allowsFocusDuringEditing: Boolean; cdecl;
    function hasActiveDrag: Boolean; cdecl;
    function hasActiveDrop: Boolean; cdecl;
    procedure setEditing(editing: Boolean); cdecl;
    function isEditing: Boolean; cdecl;
    procedure setAllowsSelectionDuringEditing(allowsSelectionDuringEditing
      : Boolean); cdecl;
    function allowsSelectionDuringEditing: Boolean; cdecl;
    procedure setAllowsMultipleSelectionDuringEditing
      (allowsMultipleSelectionDuringEditing: Boolean); cdecl;
    function allowsMultipleSelectionDuringEditing: Boolean; cdecl;
  end;

  TUICollectionView = class(TOCGenericImport<UICollectionViewClass,
    UICollectionView>)
  end;

  PUICollectionView = Pointer;

  UINibClass = interface(NSObjectClass)
    ['{7AFD9326-AEE1-4737-B43E-5317C6B8FB7A}']
    { class } function nibWithNibName(name: NSString; bundle: NSBundle)
      : UINib; cdecl;
    { class } function nibWithData(data: NSData; bundle: NSBundle)
      : UINib; cdecl;
  end;

  UINib = interface(NSObject)
    ['{C9EE4A8F-13F1-4713-A0F4-8D324A999CBA}']
    function instantiateWithOwner(ownerOrNil: Pointer; options: NSDictionary)
      : NSArray; cdecl;
  end;

  TUINib = class(TOCGenericImport<UINibClass, UINib>)
  end;

  PUINib = Pointer;

  UICollectionViewLayoutInvalidationContextClass = interface(NSObjectClass)
    ['{DFC79740-A8C6-4513-84E0-86F7C846E40F}']
  end;

  UICollectionViewLayoutInvalidationContext = interface(NSObject)
    ['{EE520DAD-A1A1-4801-81BD-7D71E48E83F9}']
    function invalidateEverything: Boolean; cdecl;
    function invalidateDataSourceCounts: Boolean; cdecl;
    procedure invalidateItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure invalidateSupplementaryElementsOfKind(elementKind: NSString;
      atIndexPaths: NSArray); cdecl;
    procedure invalidateDecorationElementsOfKind(elementKind: NSString;
      atIndexPaths: NSArray); cdecl;
    function invalidatedItemIndexPaths: NSArray; cdecl;
    function invalidatedSupplementaryIndexPaths: NSDictionary; cdecl;
    function invalidatedDecorationIndexPaths: NSDictionary; cdecl;
    procedure setContentOffsetAdjustment(contentOffsetAdjustment
      : CGPoint); cdecl;
    function contentOffsetAdjustment: CGPoint; cdecl;
    procedure setContentSizeAdjustment(contentSizeAdjustment: CGSize); cdecl;
    function contentSizeAdjustment: CGSize; cdecl;
    function previousIndexPathsForInteractivelyMovingItems: NSArray; cdecl;
    function targetIndexPathsForInteractivelyMovingItems: NSArray; cdecl;
    function interactiveMovementTarget: CGPoint; cdecl;
  end;

  TUICollectionViewLayoutInvalidationContext = class
    (TOCGenericImport<UICollectionViewLayoutInvalidationContextClass,
    UICollectionViewLayoutInvalidationContext>)
  end;

  PUICollectionViewLayoutInvalidationContext = Pointer;

  UICollectionViewLayoutClass = interface(NSObjectClass)
    ['{8CA79FA1-76FB-4F88-8DD5-96EA116EE636}']
  end;

  UICollectionViewLayout = interface(NSObject)
    ['{82F19D88-5C11-4344-A5C6-FFBC4646E398}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function collectionView: UICollectionView; cdecl;
    procedure invalidateLayout; cdecl;
    procedure invalidateLayoutWithContext
      (context: UICollectionViewLayoutInvalidationContext); cdecl;
    procedure registerClass(viewClass: Pointer;
      forDecorationViewOfKind: NSString); cdecl;
    procedure registerNib(nib: UINib; forDecorationViewOfKind: NSString); cdecl;
    procedure setLayoutAttributesClass(layoutAttributesClass: Pointer); cdecl;
    function layoutAttributesClass: Pointer; cdecl;
    procedure setInvalidationContextClass(invalidationContextClass
      : Pointer); cdecl;
    function invalidationContextClass: Pointer; cdecl;
    procedure prepareLayout; cdecl;
    function layoutAttributesForElementsInRect(rect: CGRect): NSArray; cdecl;
    function layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForSupplementaryViewOfKind(elementKind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForDecorationViewOfKind(elementKind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function shouldInvalidateLayoutForBoundsChange(newBounds: CGRect)
      : Boolean; cdecl;
    function invalidationContextForBoundsChange(newBounds: CGRect)
      : UICollectionViewLayoutInvalidationContext; cdecl;
    function shouldInvalidateLayoutForPreferredLayoutAttributes
      (preferredAttributes: UICollectionViewLayoutAttributes;
      withOriginalAttributes: UICollectionViewLayoutAttributes): Boolean; cdecl;
    function invalidationContextForPreferredLayoutAttributes(preferredAttributes
      : UICollectionViewLayoutAttributes;
      withOriginalAttributes: UICollectionViewLayoutAttributes)
      : UICollectionViewLayoutInvalidationContext; cdecl;
    [MethodName
      ('targetContentOffsetForProposedContentOffset:withScrollingVelocity:')]
    function targetContentOffsetForProposedContentOffsetWithScrollingVelocity
      (proposedContentOffset: CGPoint; withScrollingVelocity: CGPoint)
      : CGPoint; cdecl;
    [MethodName('targetContentOffsetForProposedContentOffset:')]
    function targetContentOffsetForProposedContentOffset(proposedContentOffset
      : CGPoint): CGPoint; cdecl;
    function collectionViewContentSize: CGSize; cdecl;
    function developmentLayoutDirection: UIUserInterfaceLayoutDirection; cdecl;
    function flipsHorizontallyInOppositeLayoutDirection: Boolean; cdecl;
    procedure prepareForCollectionViewUpdates(updateItems: NSArray); cdecl;
    procedure finalizeCollectionViewUpdates; cdecl;
    procedure prepareForAnimatedBoundsChange(oldBounds: CGRect); cdecl;
    procedure finalizeAnimatedBoundsChange; cdecl;
    procedure prepareForTransitionToLayout
      (newLayout: UICollectionViewLayout); cdecl;
    procedure prepareForTransitionFromLayout
      (oldLayout: UICollectionViewLayout); cdecl;
    procedure finalizeLayoutTransition; cdecl;
    function initialLayoutAttributesForAppearingItemAtIndexPath
      (itemIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function finalLayoutAttributesForDisappearingItemAtIndexPath
      (itemIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function initialLayoutAttributesForAppearingSupplementaryElementOfKind
      (elementKind: NSString; atIndexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
    function finalLayoutAttributesForDisappearingSupplementaryElementOfKind
      (elementKind: NSString; atIndexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
    function initialLayoutAttributesForAppearingDecorationElementOfKind
      (elementKind: NSString; atIndexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
    function finalLayoutAttributesForDisappearingDecorationElementOfKind
      (elementKind: NSString; atIndexPath: NSIndexPath)
      : UICollectionViewLayoutAttributes; cdecl;
    function indexPathsToDeleteForSupplementaryViewOfKind(elementKind: NSString)
      : NSArray; cdecl;
    function indexPathsToDeleteForDecorationViewOfKind(elementKind: NSString)
      : NSArray; cdecl;
    function indexPathsToInsertForSupplementaryViewOfKind(elementKind: NSString)
      : NSArray; cdecl;
    function indexPathsToInsertForDecorationViewOfKind(elementKind: NSString)
      : NSArray; cdecl;
    function targetIndexPathForInteractivelyMovingItem(previousIndexPath
      : NSIndexPath; withPosition: CGPoint): NSIndexPath; cdecl;
    function layoutAttributesForInteractivelyMovingItemAtIndexPath
      (indexPath: NSIndexPath; withTargetPosition: CGPoint)
      : UICollectionViewLayoutAttributes; cdecl;
    function invalidationContextForInteractivelyMovingItems(targetIndexPaths
      : NSArray; withTargetPosition: CGPoint; previousIndexPaths: NSArray;
      previousPosition: CGPoint)
      : UICollectionViewLayoutInvalidationContext; cdecl;
    function invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths
      (indexPaths: NSArray; previousIndexPaths: NSArray;
      movementCancelled: Boolean)
      : UICollectionViewLayoutInvalidationContext; cdecl;
  end;

  TUICollectionViewLayout = class(TOCGenericImport<UICollectionViewLayoutClass,
    UICollectionViewLayout>)
  end;

  PUICollectionViewLayout = Pointer;

  NSCollectionLayoutSectionClass = interface(NSObjectClass)
    ['{F530B532-73E1-4A12-8DC7-0C9A7F7618C4}']
    { class } function sectionWithGroup(group: NSCollectionLayoutGroup)
      : Pointer { instancetype }; cdecl;
    { class } function sectionWithListConfiguration(configuration
      : UICollectionLayoutListConfiguration; layoutEnvironment: Pointer)
      : Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutSection = interface(NSObject)
    ['{0980C96B-ED20-44F2-8EE1-35C4C87AC560}']
    procedure setContentInsets(contentInsets: NSDirectionalEdgeInsets); cdecl;
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    procedure setInterGroupSpacing(interGroupSpacing: CGFloat); cdecl;
    function interGroupSpacing: CGFloat; cdecl;
    procedure setContentInsetsReference(contentInsetsReference
      : UIContentInsetsReference); cdecl;
    function contentInsetsReference: UIContentInsetsReference; cdecl;
    procedure setSupplementaryContentInsetsReference
      (supplementaryContentInsetsReference: UIContentInsetsReference); cdecl;
    function supplementaryContentInsetsReference
      : UIContentInsetsReference; cdecl;
    procedure setOrthogonalScrollingBehavior(orthogonalScrollingBehavior
      : UICollectionLayoutSectionOrthogonalScrollingBehavior); cdecl;
    function orthogonalScrollingBehavior
      : UICollectionLayoutSectionOrthogonalScrollingBehavior; cdecl;
    procedure setBoundarySupplementaryItems(boundarySupplementaryItems
      : NSArray); cdecl;
    function boundarySupplementaryItems: NSArray; cdecl;
    procedure setVisibleItemsInvalidationHandler(visibleItemsInvalidationHandler
      : NSCollectionLayoutSectionVisibleItemsInvalidationHandler); cdecl;
    function visibleItemsInvalidationHandler
      : NSCollectionLayoutSectionVisibleItemsInvalidationHandler; cdecl;
    procedure setDecorationItems(decorationItems: NSArray); cdecl;
    function decorationItems: NSArray; cdecl;
    procedure setSupplementariesFollowContentInsets
      (supplementariesFollowContentInsets: Boolean); cdecl;
    function supplementariesFollowContentInsets: Boolean; cdecl;
  end;

  TNSCollectionLayoutSection = class
    (TOCGenericImport<NSCollectionLayoutSectionClass,
    NSCollectionLayoutSection>)
  end;

  PNSCollectionLayoutSection = Pointer;

  NSCollectionLayoutItemClass = interface(NSObjectClass)
    ['{7CC99D19-0DEA-416F-92C9-D2617CC8C7D4}']
    [MethodName('itemWithLayoutSize:')]
    { class } function itemWithLayoutSize(layoutSize: NSCollectionLayoutSize)
      : Pointer { instancetype }; cdecl;
    [MethodName('itemWithLayoutSize:supplementaryItems:')]
    { class } function itemWithLayoutSizeSupplementaryItems
      (layoutSize: NSCollectionLayoutSize; supplementaryItems: NSArray)
      : Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutItem = interface(NSObject)
    ['{101B4C38-7BFB-4F00-847D-1E708EA2FE96}']
    procedure setContentInsets(contentInsets: NSDirectionalEdgeInsets); cdecl;
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    procedure setEdgeSpacing(edgeSpacing: NSCollectionLayoutEdgeSpacing); cdecl;
    function edgeSpacing: NSCollectionLayoutEdgeSpacing; cdecl;
    function layoutSize: NSCollectionLayoutSize; cdecl;
    function supplementaryItems: NSArray; cdecl;
  end;

  TNSCollectionLayoutItem = class(TOCGenericImport<NSCollectionLayoutItemClass,
    NSCollectionLayoutItem>)
  end;

  PNSCollectionLayoutItem = Pointer;

  NSCollectionLayoutGroupClass = interface(NSCollectionLayoutItemClass)
    ['{2790389B-2E7D-4F00-B73A-EDF16E3A2A4C}']
    [MethodName('horizontalGroupWithLayoutSize:repeatingSubitem:count:')]
    { class } function horizontalGroupWithLayoutSizeRepeatingSubitemCount
      (layoutSize: NSCollectionLayoutSize;
      repeatingSubitem: NSCollectionLayoutItem; count: NSInteger)
      : Pointer { instancetype }; cdecl;
    [MethodName('horizontalGroupWithLayoutSize:subitems:')]
    { class } function horizontalGroupWithLayoutSizeSubitems
      (layoutSize: NSCollectionLayoutSize; subitems: NSArray)
      : Pointer { instancetype }; cdecl;
    [MethodName('verticalGroupWithLayoutSize:repeatingSubitem:count:')]
    { class } function verticalGroupWithLayoutSizeRepeatingSubitemCount
      (layoutSize: NSCollectionLayoutSize;
      repeatingSubitem: NSCollectionLayoutItem; count: NSInteger)
      : Pointer { instancetype }; cdecl;
    [MethodName('verticalGroupWithLayoutSize:subitems:')]
    { class } function verticalGroupWithLayoutSizeSubitems
      (layoutSize: NSCollectionLayoutSize; subitems: NSArray)
      : Pointer { instancetype }; cdecl;
    { class } function customGroupWithLayoutSize
      (layoutSize: NSCollectionLayoutSize;
      itemProvider: NSCollectionLayoutGroupCustomItemProvider)
      : Pointer { instancetype }; cdecl;
    [MethodName('horizontalGroupWithLayoutSize:subitem:count:')]
    { class } function horizontalGroupWithLayoutSizeSubitemCount
      (layoutSize: NSCollectionLayoutSize; subitem: NSCollectionLayoutItem;
      count: NSInteger): Pointer { instancetype }; cdecl;
    [MethodName('verticalGroupWithLayoutSize:subitem:count:')]
    { class } function verticalGroupWithLayoutSizeSubitemCount
      (layoutSize: NSCollectionLayoutSize; subitem: NSCollectionLayoutItem;
      count: NSInteger): Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutGroup = interface(NSCollectionLayoutItem)
    ['{D57CFC78-4915-4501-985F-1BAF3C77D1CB}']
    procedure setSupplementaryItems(supplementaryItems: NSArray); cdecl;
    function supplementaryItems: NSArray; cdecl;
    procedure setInterItemSpacing(interItemSpacing
      : NSCollectionLayoutSpacing); cdecl;
    function interItemSpacing: NSCollectionLayoutSpacing; cdecl;
    function subitems: NSArray; cdecl;
    function visualDescription: NSString; cdecl;
  end;

  TNSCollectionLayoutGroup = class
    (TOCGenericImport<NSCollectionLayoutGroupClass, NSCollectionLayoutGroup>)
  end;

  PNSCollectionLayoutGroup = Pointer;

  NSCollectionLayoutSupplementaryItemClass = interface
    (NSCollectionLayoutItemClass)
    ['{ED598D5C-CE50-413B-B1F5-D84B11F80E6E}']
    [MethodName('supplementaryItemWithLayoutSize:elementKind:containerAnchor:')]
    { class } function supplementaryItemWithLayoutSizeElementKindContainerAnchor
      (layoutSize: NSCollectionLayoutSize; elementKind: NSString;
      containerAnchor: NSCollectionLayoutAnchor)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('supplementaryItemWithLayoutSize:elementKind:containerAnchor:itemAnchor:')
      ]
    { class } function
      supplementaryItemWithLayoutSizeElementKindContainerAnchorItemAnchor
      (layoutSize: NSCollectionLayoutSize; elementKind: NSString;
      containerAnchor: NSCollectionLayoutAnchor;
      itemAnchor: NSCollectionLayoutAnchor): Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutSupplementaryItem = interface(NSCollectionLayoutItem)
    ['{E6FFAD7A-275B-46E0-A6BB-FA570942F7BF}']
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function zIndex: NSInteger; cdecl;
    function elementKind: NSString; cdecl;
    function containerAnchor: NSCollectionLayoutAnchor; cdecl;
    function itemAnchor: NSCollectionLayoutAnchor; cdecl;
  end;

  TNSCollectionLayoutSupplementaryItem = class
    (TOCGenericImport<NSCollectionLayoutSupplementaryItemClass,
    NSCollectionLayoutSupplementaryItem>)
  end;

  PNSCollectionLayoutSupplementaryItem = Pointer;

  NSCollectionLayoutBoundarySupplementaryItemClass = interface
    (NSCollectionLayoutSupplementaryItemClass)
    ['{CF751A87-B2BD-4E0B-8D26-1B793F5BD3D9}']
    [MethodName
      ('boundarySupplementaryItemWithLayoutSize:elementKind:alignment:')]
    { class } function
      boundarySupplementaryItemWithLayoutSizeElementKindAlignment
      (layoutSize: NSCollectionLayoutSize; elementKind: NSString;
      alignment: NSRectAlignment): Pointer { instancetype }; cdecl;
    [MethodName
      ('boundarySupplementaryItemWithLayoutSize:elementKind:alignment:absoluteOffset:')
      ]
    { class } function
      boundarySupplementaryItemWithLayoutSizeElementKindAlignmentAbsoluteOffset
      (layoutSize: NSCollectionLayoutSize; elementKind: NSString;
      alignment: NSRectAlignment; absoluteOffset: CGPoint)
      : Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutBoundarySupplementaryItem = interface
    (NSCollectionLayoutSupplementaryItem)
    ['{BA69E68F-FE61-4317-8330-D61774A7FDD5}']
    procedure setExtendsBoundary(extendsBoundary: Boolean); cdecl;
    function extendsBoundary: Boolean; cdecl;
    procedure setPinToVisibleBounds(pinToVisibleBounds: Boolean); cdecl;
    function pinToVisibleBounds: Boolean; cdecl;
    function alignment: NSRectAlignment; cdecl;
    function offset: CGPoint; cdecl;
  end;

  TNSCollectionLayoutBoundarySupplementaryItem = class
    (TOCGenericImport<NSCollectionLayoutBoundarySupplementaryItemClass,
    NSCollectionLayoutBoundarySupplementaryItem>)
  end;

  PNSCollectionLayoutBoundarySupplementaryItem = Pointer;

  NSCollectionLayoutDecorationItemClass = interface(NSCollectionLayoutItemClass)
    ['{35DC498F-EA45-4B83-975F-639EA5496EFF}']
    { class } function backgroundDecorationItemWithElementKind
      (elementKind: NSString): Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutDecorationItem = interface(NSCollectionLayoutItem)
    ['{6DC52BA0-3AA0-464C-B1E5-77CB57835848}']
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function zIndex: NSInteger; cdecl;
    function elementKind: NSString; cdecl;
  end;

  TNSCollectionLayoutDecorationItem = class
    (TOCGenericImport<NSCollectionLayoutDecorationItemClass,
    NSCollectionLayoutDecorationItem>)
  end;

  PNSCollectionLayoutDecorationItem = Pointer;

  NSCollectionLayoutSizeClass = interface(NSObjectClass)
    ['{27F65BF6-0A85-4D5F-9A5E-66BCAB86BAB2}']
    { class } function sizeWithWidthDimension
      (width: NSCollectionLayoutDimension;
      heightDimension: NSCollectionLayoutDimension)
      : Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutSize = interface(NSObject)
    ['{4968A110-6464-42D2-8688-AA83C6DFBA39}']
    function widthDimension: NSCollectionLayoutDimension; cdecl;
    function heightDimension: NSCollectionLayoutDimension; cdecl;
  end;

  TNSCollectionLayoutSize = class(TOCGenericImport<NSCollectionLayoutSizeClass,
    NSCollectionLayoutSize>)
  end;

  PNSCollectionLayoutSize = Pointer;

  NSCollectionLayoutDimensionClass = interface(NSObjectClass)
    ['{FEA47CC2-2AC9-43C1-88EA-A2233DB27065}']
    { class } function fractionalWidthDimension(fractionalWidth: CGFloat)
      : Pointer { instancetype }; cdecl;
    { class } function fractionalHeightDimension(fractionalHeight: CGFloat)
      : Pointer { instancetype }; cdecl;
    { class } function absoluteDimension(absoluteDimension: CGFloat)
      : Pointer { instancetype }; cdecl;
    { class } function estimatedDimension(estimatedDimension: CGFloat)
      : Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutDimension = interface(NSObject)
    ['{CA9B29CF-8C2D-4250-81F9-D8EF80FDC4A4}']
    function isFractionalWidth: Boolean; cdecl;
    function isFractionalHeight: Boolean; cdecl;
    function isAbsolute: Boolean; cdecl;
    function isEstimated: Boolean; cdecl;
    function dimension: CGFloat; cdecl;
  end;

  TNSCollectionLayoutDimension = class
    (TOCGenericImport<NSCollectionLayoutDimensionClass,
    NSCollectionLayoutDimension>)
  end;

  PNSCollectionLayoutDimension = Pointer;

  NSCollectionLayoutSpacingClass = interface(NSObjectClass)
    ['{1AE1FDCC-D6C8-4945-8A57-5FA5137BAE36}']
    { class } function flexibleSpacing(flexibleSpacing: CGFloat)
      : Pointer { instancetype }; cdecl;
    { class } function fixedSpacing(fixedSpacing: CGFloat)
      : Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutSpacing = interface(NSObject)
    ['{19D48DE5-784E-4933-83B7-C00D72C359F4}']
    function spacing: CGFloat; cdecl;
    function isFlexibleSpacing: Boolean; cdecl;
    function isFixedSpacing: Boolean; cdecl;
  end;

  TNSCollectionLayoutSpacing = class
    (TOCGenericImport<NSCollectionLayoutSpacingClass,
    NSCollectionLayoutSpacing>)
  end;

  PNSCollectionLayoutSpacing = Pointer;

  NSCollectionLayoutEdgeSpacingClass = interface(NSObjectClass)
    ['{4E17088B-991A-4C07-A092-E8E50B41104D}']
    { class } function spacingForLeading(leading: NSCollectionLayoutSpacing;
      top: NSCollectionLayoutSpacing; trailing: NSCollectionLayoutSpacing;
      bottom: NSCollectionLayoutSpacing): Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutEdgeSpacing = interface(NSObject)
    ['{F2F04FC8-EF40-4EB6-B4A7-7A60A9A14161}']
    function leading: NSCollectionLayoutSpacing; cdecl;
    function top: NSCollectionLayoutSpacing; cdecl;
    function trailing: NSCollectionLayoutSpacing; cdecl;
    function bottom: NSCollectionLayoutSpacing; cdecl;
  end;

  TNSCollectionLayoutEdgeSpacing = class
    (TOCGenericImport<NSCollectionLayoutEdgeSpacingClass,
    NSCollectionLayoutEdgeSpacing>)
  end;

  PNSCollectionLayoutEdgeSpacing = Pointer;

  NSCollectionLayoutAnchorClass = interface(NSObjectClass)
    ['{01CC3646-EE7C-4355-B876-B2BB1445A0B0}']
    [MethodName('layoutAnchorWithEdges:')]
    { class } function layoutAnchorWithEdges(edges: NSDirectionalRectEdge)
      : Pointer { instancetype }; cdecl;
    [MethodName('layoutAnchorWithEdges:absoluteOffset:')]
    { class } function layoutAnchorWithEdgesAbsoluteOffset
      (edges: NSDirectionalRectEdge; absoluteOffset: CGPoint)
      : Pointer { instancetype }; cdecl;
    [MethodName('layoutAnchorWithEdges:fractionalOffset:')]
    { class } function layoutAnchorWithEdgesFractionalOffset
      (edges: NSDirectionalRectEdge; fractionalOffset: CGPoint)
      : Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutAnchor = interface(NSObject)
    ['{26A93F36-BD74-4CFE-BA33-F3986EAD9575}']
    function edges: NSDirectionalRectEdge; cdecl;
    function offset: CGPoint; cdecl;
    function isAbsoluteOffset: Boolean; cdecl;
    function isFractionalOffset: Boolean; cdecl;
  end;

  TNSCollectionLayoutAnchor = class
    (TOCGenericImport<NSCollectionLayoutAnchorClass, NSCollectionLayoutAnchor>)
  end;

  PNSCollectionLayoutAnchor = Pointer;

  UICollectionViewCompositionalLayoutConfigurationClass = interface
    (NSObjectClass)
    ['{C4BC55F8-A8C7-4C0F-9169-53925D8BC75A}']
  end;

  UICollectionViewCompositionalLayoutConfiguration = interface(NSObject)
    ['{6E5571C3-881F-4220-8CD3-825D334523E4}']
    procedure setScrollDirection(scrollDirection
      : UICollectionViewScrollDirection); cdecl;
    function scrollDirection: UICollectionViewScrollDirection; cdecl;
    procedure setInterSectionSpacing(interSectionSpacing: CGFloat); cdecl;
    function interSectionSpacing: CGFloat; cdecl;
    procedure setBoundarySupplementaryItems(boundarySupplementaryItems
      : NSArray); cdecl;
    function boundarySupplementaryItems: NSArray; cdecl;
    procedure setContentInsetsReference(contentInsetsReference
      : UIContentInsetsReference); cdecl;
    function contentInsetsReference: UIContentInsetsReference; cdecl;
  end;

  TUICollectionViewCompositionalLayoutConfiguration = class
    (TOCGenericImport<UICollectionViewCompositionalLayoutConfigurationClass,
    UICollectionViewCompositionalLayoutConfiguration>)
  end;

  PUICollectionViewCompositionalLayoutConfiguration = Pointer;

  UICollectionViewCompositionalLayoutClass = interface
    (UICollectionViewLayoutClass)
    ['{F626123F-306A-4411-A7BF-9A562428195D}']
    { class } function layoutWithListConfiguration(configuration
      : UICollectionLayoutListConfiguration): Pointer { instancetype }; cdecl;
  end;

  UICollectionViewCompositionalLayout = interface(UICollectionViewLayout)
    ['{85B37C59-6BE3-41FD-8232-1635BCF64964}']
    [MethodName('initWithSection:')]
    function initWithSection(section: NSCollectionLayoutSection)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithSection:configuration:')]
    function initWithSectionConfiguration(section: NSCollectionLayoutSection;
      configuration: UICollectionViewCompositionalLayoutConfiguration)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithSectionProvider:')]
    function initWithSectionProvider(sectionProvider
      : UICollectionViewCompositionalLayoutSectionProvider)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithSectionProvider:configuration:')]
    function initWithSectionProviderConfiguration(sectionProvider
      : UICollectionViewCompositionalLayoutSectionProvider;
      configuration: UICollectionViewCompositionalLayoutConfiguration)
      : Pointer { instancetype }; cdecl;
    procedure setConfiguration(configuration
      : UICollectionViewCompositionalLayoutConfiguration); cdecl;
    function configuration
      : UICollectionViewCompositionalLayoutConfiguration; cdecl;
  end;

  TUICollectionViewCompositionalLayout = class
    (TOCGenericImport<UICollectionViewCompositionalLayoutClass,
    UICollectionViewCompositionalLayout>)
  end;

  PUICollectionViewCompositionalLayout = Pointer;

  NSCollectionLayoutGroupCustomItemClass = interface(NSObjectClass)
    ['{1D0B51A7-94C0-4258-A7A9-557AAFF0579C}']
    [MethodName('customItemWithFrame:')]
    { class } function customItemWithFrame(frame: CGRect)
      : Pointer { instancetype }; cdecl;
    [MethodName('customItemWithFrame:zIndex:')]
    { class } function customItemWithFrameZIndex(frame: CGRect;
      zIndex: NSInteger): Pointer { instancetype }; cdecl;
  end;

  NSCollectionLayoutGroupCustomItem = interface(NSObject)
    ['{D86B7A9B-0D22-44E3-BEE8-E284CE852581}']
    function frame: CGRect; cdecl;
    function zIndex: NSInteger; cdecl;
  end;

  TNSCollectionLayoutGroupCustomItem = class
    (TOCGenericImport<NSCollectionLayoutGroupCustomItemClass,
    NSCollectionLayoutGroupCustomItem>)
  end;

  PNSCollectionLayoutGroupCustomItem = Pointer;

  UISwipeActionsConfigurationClass = interface(NSObjectClass)
    ['{E759888F-2BA6-4B4E-8AF8-5F104FC5EFC3}']
    { class } function configurationWithActions(actions: NSArray)
      : Pointer { instancetype }; cdecl;
  end;

  UISwipeActionsConfiguration = interface(NSObject)
    ['{F599405E-0B6C-4FB4-AFDF-0936B1B7A87B}']
    function actions: NSArray; cdecl;
    procedure setPerformsFirstActionWithFullSwipe
      (performsFirstActionWithFullSwipe: Boolean); cdecl;
    function performsFirstActionWithFullSwipe: Boolean; cdecl;
  end;

  TUISwipeActionsConfiguration = class
    (TOCGenericImport<UISwipeActionsConfigurationClass,
    UISwipeActionsConfiguration>)
  end;

  PUISwipeActionsConfiguration = Pointer;

  UIListSeparatorConfigurationClass = interface(NSObjectClass)
    ['{0E6A9B40-4CE9-4EEC-BDD9-E52E5FA8D923}']
  end;

  UIListSeparatorConfiguration = interface(NSObject)
    ['{522016A4-0543-406C-B8B4-F44723A241D1}']
    function initWithListAppearance(listAppearance
      : UICollectionLayoutListAppearance): Pointer { instancetype }; cdecl;
    procedure setTopSeparatorVisibility(topSeparatorVisibility
      : UIListSeparatorVisibility); cdecl;
    function topSeparatorVisibility: UIListSeparatorVisibility; cdecl;
    procedure setBottomSeparatorVisibility(bottomSeparatorVisibility
      : UIListSeparatorVisibility); cdecl;
    function bottomSeparatorVisibility: UIListSeparatorVisibility; cdecl;
    procedure setTopSeparatorInsets(topSeparatorInsets
      : NSDirectionalEdgeInsets); cdecl;
    function topSeparatorInsets: NSDirectionalEdgeInsets; cdecl;
    procedure setBottomSeparatorInsets(bottomSeparatorInsets
      : NSDirectionalEdgeInsets); cdecl;
    function bottomSeparatorInsets: NSDirectionalEdgeInsets; cdecl;
    procedure setColor(color: UIColor); cdecl;
    function color: UIColor; cdecl;
    procedure setMultipleSelectionColor(multipleSelectionColor: UIColor); cdecl;
    function multipleSelectionColor: UIColor; cdecl;
    procedure setVisualEffect(visualEffect: UIVisualEffect); cdecl;
    function visualEffect: UIVisualEffect; cdecl;
  end;

  TUIListSeparatorConfiguration = class
    (TOCGenericImport<UIListSeparatorConfigurationClass,
    UIListSeparatorConfiguration>)
  end;

  PUIListSeparatorConfiguration = Pointer;

  UICollectionLayoutListConfigurationClass = interface(NSObjectClass)
    ['{50ECF396-365B-4DE3-8C86-D1C2BA123316}']
  end;

  UICollectionLayoutListConfiguration = interface(NSObject)
    ['{90A6C1F2-963D-4B01-B69D-F787C440BBAD}']
    function initWithAppearance(appearance: UICollectionLayoutListAppearance)
      : Pointer { instancetype }; cdecl;
    function appearance: UICollectionLayoutListAppearance; cdecl;
    procedure setShowsSeparators(showsSeparators: Boolean); cdecl;
    function showsSeparators: Boolean; cdecl;
    procedure setSeparatorConfiguration(separatorConfiguration
      : UIListSeparatorConfiguration); cdecl;
    function separatorConfiguration: UIListSeparatorConfiguration; cdecl;
    procedure setItemSeparatorHandler(itemSeparatorHandler
      : UICollectionLayoutListItemSeparatorHandler); cdecl;
    function itemSeparatorHandler
      : UICollectionLayoutListItemSeparatorHandler; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setLeadingSwipeActionsConfigurationProvider
      (leadingSwipeActionsConfigurationProvider
      : UICollectionLayoutListSwipeActionsConfigurationProvider); cdecl;
    function leadingSwipeActionsConfigurationProvider
      : UICollectionLayoutListSwipeActionsConfigurationProvider; cdecl;
    procedure setTrailingSwipeActionsConfigurationProvider
      (trailingSwipeActionsConfigurationProvider
      : UICollectionLayoutListSwipeActionsConfigurationProvider); cdecl;
    function trailingSwipeActionsConfigurationProvider
      : UICollectionLayoutListSwipeActionsConfigurationProvider; cdecl;
    procedure setHeaderMode(headerMode
      : UICollectionLayoutListHeaderMode); cdecl;
    function headerMode: UICollectionLayoutListHeaderMode; cdecl;
    procedure setFooterMode(footerMode
      : UICollectionLayoutListFooterMode); cdecl;
    function footerMode: UICollectionLayoutListFooterMode; cdecl;
    procedure setHeaderTopPadding(headerTopPadding: CGFloat); cdecl;
    function headerTopPadding: CGFloat; cdecl;
  end;

  TUICollectionLayoutListConfiguration = class
    (TOCGenericImport<UICollectionLayoutListConfigurationClass,
    UICollectionLayoutListConfiguration>)
  end;

  PUICollectionLayoutListConfiguration = Pointer;

  UICollectionReusableViewClass = interface(UIViewClass)
    ['{A7DDE6B5-5BF7-40AE-8310-2D3EA4687350}']
  end;

  UICollectionReusableView = interface(UIView)
    ['{2C548371-6A3F-48ED-AF12-47ED26BEE900}']
    function reuseIdentifier: NSString; cdecl;
    procedure prepareForReuse; cdecl;
    procedure applyLayoutAttributes(layoutAttributes
      : UICollectionViewLayoutAttributes); cdecl;
    procedure willTransitionFromLayout(oldLayout: UICollectionViewLayout;
      toLayout: UICollectionViewLayout); cdecl;
    procedure didTransitionFromLayout(oldLayout: UICollectionViewLayout;
      toLayout: UICollectionViewLayout); cdecl;
    function preferredLayoutAttributesFittingAttributes(layoutAttributes
      : UICollectionViewLayoutAttributes)
      : UICollectionViewLayoutAttributes; cdecl;
  end;

  TUICollectionReusableView = class
    (TOCGenericImport<UICollectionReusableViewClass, UICollectionReusableView>)
  end;

  PUICollectionReusableView = Pointer;

  UICollectionViewCellClass = interface(UICollectionReusableViewClass)
    ['{BA52ABB4-7C5C-498F-ABAD-34F04344D3BB}']
  end;

  UICollectionViewCell = interface(UICollectionReusableView)
    ['{B73F5D0D-6B69-4769-B7DB-C34242BE9B31}']
    function configurationState: UICellConfigurationState; cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    procedure updateConfigurationUsingState
      (state: UICellConfigurationState); cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler
      : UICollectionViewCellConfigurationUpdateHandler); cdecl;
    function configurationUpdateHandler
      : UICollectionViewCellConfigurationUpdateHandler; cdecl;
    procedure setContentConfiguration(contentConfiguration: Pointer); cdecl;
    function contentConfiguration: Pointer; cdecl;
    procedure setAutomaticallyUpdatesContentConfiguration
      (automaticallyUpdatesContentConfiguration: Boolean); cdecl;
    function automaticallyUpdatesContentConfiguration: Boolean; cdecl;
    function contentView: UIView; cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    function isSelected: Boolean; cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    function isHighlighted: Boolean; cdecl;
    procedure dragStateDidChange(dragState
      : UICollectionViewCellDragState); cdecl;
    function defaultBackgroundConfiguration: UIBackgroundConfiguration; cdecl;
    procedure setBackgroundConfiguration(backgroundConfiguration
      : UIBackgroundConfiguration); cdecl;
    function backgroundConfiguration: UIBackgroundConfiguration; cdecl;
    procedure setAutomaticallyUpdatesBackgroundConfiguration
      (automaticallyUpdatesBackgroundConfiguration: Boolean); cdecl;
    function automaticallyUpdatesBackgroundConfiguration: Boolean; cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    function backgroundView: UIView; cdecl;
    procedure setSelectedBackgroundView(selectedBackgroundView: UIView); cdecl;
    function selectedBackgroundView: UIView; cdecl;
  end;

  TUICollectionViewCell = class(TOCGenericImport<UICollectionViewCellClass,
    UICollectionViewCell>)
  end;

  PUICollectionViewCell = Pointer;

  UICollectionViewTransitionLayoutClass = interface(UICollectionViewLayoutClass)
    ['{7E370DA9-8589-44C6-B3F8-515133492573}']
  end;

  UICollectionViewTransitionLayout = interface(UICollectionViewLayout)
    ['{4A80F25F-5D30-45C3-8927-16B64031A0C5}']
    procedure setTransitionProgress(transitionProgress: CGFloat); cdecl;
    function transitionProgress: CGFloat; cdecl;
    function currentLayout: UICollectionViewLayout; cdecl;
    function nextLayout: UICollectionViewLayout; cdecl;
    function initWithCurrentLayout(currentLayout: UICollectionViewLayout;
      nextLayout: UICollectionViewLayout): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure updateValue(value: CGFloat; forAnimatedKey: NSString); cdecl;
    function valueForAnimatedKey(key: NSString): CGFloat; cdecl;
  end;

  TUICollectionViewTransitionLayout = class
    (TOCGenericImport<UICollectionViewTransitionLayoutClass,
    UICollectionViewTransitionLayout>)
  end;

  PUICollectionViewTransitionLayout = Pointer;

  UIPreviewParametersClass = interface(NSObjectClass)
    ['{6CD2AF3E-7650-4E98-939A-2231301AC3F4}']
  end;

  UIPreviewParameters = interface(NSObject)
    ['{7F736671-3CF3-4585-8842-034F68E41415}']
    function init: Pointer { instancetype }; cdecl;
    function initWithTextLineRects(textLineRects: NSArray)
      : Pointer { instancetype }; cdecl;
    procedure setVisiblePath(visiblePath: UIBezierPath); cdecl;
    function visiblePath: UIBezierPath; cdecl;
    procedure setShadowPath(shadowPath: UIBezierPath); cdecl;
    function shadowPath: UIBezierPath; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
  end;

  TUIPreviewParameters = class(TOCGenericImport<UIPreviewParametersClass,
    UIPreviewParameters>)
  end;

  PUIPreviewParameters = Pointer;

  UIDragPreviewParametersClass = interface(UIPreviewParametersClass)
    ['{F6ACCEF7-A8E5-4FCC-891F-0BEC56740967}']
  end;

  UIDragPreviewParameters = interface(UIPreviewParameters)
    ['{2292655E-E302-4C26-AAF2-25DA0BB85189}']
  end;

  TUIDragPreviewParameters = class
    (TOCGenericImport<UIDragPreviewParametersClass, UIDragPreviewParameters>)
  end;

  PUIDragPreviewParameters = Pointer;

  UIPreviewTargetClass = interface(NSObjectClass)
    ['{C98C3C37-01FA-4FC7-BFEE-3F28707F8F0B}']
  end;

  UIPreviewTarget = interface(NSObject)
    ['{5C06E50B-1E07-4E45-A318-551AF199A46F}']
    [MethodName('initWithContainer:center:transform:')]
    function initWithContainerCenterTransform(container: UIView;
      center: CGPoint; transform: CGAffineTransform)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithContainer:center:')]
    function initWithContainerCenter(container: UIView; center: CGPoint)
      : Pointer { instancetype }; cdecl;
    function container: UIView; cdecl;
    function center: CGPoint; cdecl;
    function transform: CGAffineTransform; cdecl;
  end;

  TUIPreviewTarget = class(TOCGenericImport<UIPreviewTargetClass,
    UIPreviewTarget>)
  end;

  PUIPreviewTarget = Pointer;

  UIDragPreviewTargetClass = interface(UIPreviewTargetClass)
    ['{A94418A8-3195-4D44-934D-9AF3C7D424A2}']
  end;

  UIDragPreviewTarget = interface(UIPreviewTarget)
    ['{9786EC19-2070-417D-AD19-C80083A1FFD6}']
  end;

  TUIDragPreviewTarget = class(TOCGenericImport<UIDragPreviewTargetClass,
    UIDragPreviewTarget>)
  end;

  PUIDragPreviewTarget = Pointer;

  UICollectionViewDropProposalClass = interface(UIDropProposalClass)
    ['{49FC2F88-D060-41A9-98F5-575DCC4F508D}']
  end;

  UICollectionViewDropProposal = interface(UIDropProposal)
    ['{88D5FE86-6557-4E3F-9A48-C90C36662FFE}']
    function initWithDropOperation(operation: UIDropOperation;
      intent: UICollectionViewDropIntent): Pointer { instancetype }; cdecl;
    function intent: UICollectionViewDropIntent; cdecl;
  end;

  TUICollectionViewDropProposal = class
    (TOCGenericImport<UICollectionViewDropProposalClass,
    UICollectionViewDropProposal>)
  end;

  PUICollectionViewDropProposal = Pointer;

  UICollectionViewPlaceholderClass = interface(NSObjectClass)
    ['{1B4D6797-76AC-4BAB-A265-C62FF1FE6AF1}']
  end;

  UICollectionViewPlaceholder = interface(NSObject)
    ['{4A99A37D-46FD-4B55-8915-88FA531A84BF}']
    function initWithInsertionIndexPath(insertionIndexPath: NSIndexPath;
      reuseIdentifier: NSString): Pointer { instancetype }; cdecl;
    procedure setCellUpdateHandler(cellUpdateHandler
      : TUIKitCellUpdateHandler); cdecl;
    function cellUpdateHandler: TUIKitCellUpdateHandler; cdecl;
  end;

  TUICollectionViewPlaceholder = class
    (TOCGenericImport<UICollectionViewPlaceholderClass,
    UICollectionViewPlaceholder>)
  end;

  PUICollectionViewPlaceholder = Pointer;

  UICollectionViewDropPlaceholderClass = interface
    (UICollectionViewPlaceholderClass)
    ['{9534889E-B5E6-4C05-B1BF-D04C7B81D525}']
  end;

  UICollectionViewDropPlaceholder = interface(UICollectionViewPlaceholder)
    ['{444C90D4-F034-4A13-A267-34E5EA3BBD65}']
    procedure setPreviewParametersProvider(previewParametersProvider
      : TUIKitPreviewParametersProvider); cdecl;
    function previewParametersProvider: TUIKitPreviewParametersProvider; cdecl;
  end;

  TUICollectionViewDropPlaceholder = class
    (TOCGenericImport<UICollectionViewDropPlaceholderClass,
    UICollectionViewDropPlaceholder>)
  end;

  PUICollectionViewDropPlaceholder = Pointer;

  UICollectionViewCellRegistrationClass = interface(NSObjectClass)
    ['{BA999E16-F856-4627-AE9A-89AF7209700A}']
    { class } function registrationWithCellClass(cellClass: Pointer;
      configurationHandler
      : UICollectionViewCellRegistrationConfigurationHandler)
      : Pointer { instancetype }; cdecl;
    { class } function registrationWithCellNib(cellNib: UINib;
      configurationHandler
      : UICollectionViewCellRegistrationConfigurationHandler)
      : Pointer { instancetype }; cdecl;
  end;

  UICollectionViewCellRegistration = interface(NSObject)
    ['{88FE1474-FEE5-4623-962E-063DD37E9301}']
    function cellClass: Pointer; cdecl;
    function cellNib: UINib; cdecl;
    function configurationHandler
      : UICollectionViewCellRegistrationConfigurationHandler; cdecl;
  end;

  TUICollectionViewCellRegistration = class
    (TOCGenericImport<UICollectionViewCellRegistrationClass,
    UICollectionViewCellRegistration>)
  end;

  PUICollectionViewCellRegistration = Pointer;

  UICollectionViewSupplementaryRegistrationClass = interface(NSObjectClass)
    ['{AE77AA2D-FF70-4CA6-883B-730D4BF2FF7B}']
    { class } function registrationWithSupplementaryClass(supplementaryClass
      : Pointer; elementKind: NSString;
      configurationHandler
      : UICollectionViewSupplementaryRegistrationConfigurationHandler)
      : Pointer { instancetype }; cdecl;
    { class } function registrationWithSupplementaryNib(supplementaryNib: UINib;
      elementKind: NSString;
      configurationHandler
      : UICollectionViewSupplementaryRegistrationConfigurationHandler)
      : Pointer { instancetype }; cdecl;
  end;

  UICollectionViewSupplementaryRegistration = interface(NSObject)
    ['{34051BDC-7374-4202-913E-3A66B45AF5FE}']
    function supplementaryClass: Pointer; cdecl;
    function supplementaryNib: UINib; cdecl;
    function elementKind: NSString; cdecl;
    function configurationHandler
      : UICollectionViewSupplementaryRegistrationConfigurationHandler; cdecl;
  end;

  TUICollectionViewSupplementaryRegistration = class
    (TOCGenericImport<UICollectionViewSupplementaryRegistrationClass,
    UICollectionViewSupplementaryRegistration>)
  end;

  PUICollectionViewSupplementaryRegistration = Pointer;

  UIWindowSceneActivationConfigurationClass = interface(NSObjectClass)
    ['{CDFC7582-B2ED-43DB-8C7D-064A6917EDDF}']
  end;

  UIWindowSceneActivationConfiguration = interface(NSObject)
    ['{F1A18B69-3BBB-4F94-A75A-B7D4B65B14F7}']
    function userActivity: NSUserActivity; cdecl;
    procedure setOptions(options: UIWindowSceneActivationRequestOptions); cdecl;
    function options: UIWindowSceneActivationRequestOptions; cdecl;
    procedure setPreview(preview: UITargetedPreview); cdecl;
    function preview: UITargetedPreview; cdecl;
    function initWithUserActivity(userActivity: NSUserActivity)
      : Pointer { instancetype }; cdecl;
  end;

  TUIWindowSceneActivationConfiguration = class
    (TOCGenericImport<UIWindowSceneActivationConfigurationClass,
    UIWindowSceneActivationConfiguration>)
  end;

  PUIWindowSceneActivationConfiguration = Pointer;

  UICollectionViewFocusUpdateContextClass = interface(UIFocusUpdateContextClass)
    ['{60B5DB40-10DC-4FC6-B721-590D513D9486}']
  end;

  UICollectionViewFocusUpdateContext = interface(UIFocusUpdateContext)
    ['{D5245DC6-3F83-439D-85E1-F6174B9BCF41}']
    function previouslyFocusedIndexPath: NSIndexPath; cdecl;
    function nextFocusedIndexPath: NSIndexPath; cdecl;
  end;

  TUICollectionViewFocusUpdateContext = class
    (TOCGenericImport<UICollectionViewFocusUpdateContextClass,
    UICollectionViewFocusUpdateContext>)
  end;

  PUICollectionViewFocusUpdateContext = Pointer;

  UILongPressGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{3B64F48A-32C0-46DE-B013-CC865066FB96}']
  end;

  UILongPressGestureRecognizer = interface(UIGestureRecognizer)
    ['{DAAABFCC-7A70-4128-BE08-12BF3ED99003}']
    procedure setNumberOfTapsRequired(numberOfTapsRequired: NSUInteger); cdecl;
    function numberOfTapsRequired: NSUInteger; cdecl;
    procedure setNumberOfTouchesRequired(numberOfTouchesRequired
      : NSUInteger); cdecl;
    function numberOfTouchesRequired: NSUInteger; cdecl;
    procedure setMinimumPressDuration(minimumPressDuration
      : NSTimeInterval); cdecl;
    function minimumPressDuration: NSTimeInterval; cdecl;
    procedure setAllowableMovement(allowableMovement: CGFloat); cdecl;
    function allowableMovement: CGFloat; cdecl;
  end;

  TUILongPressGestureRecognizer = class
    (TOCGenericImport<UILongPressGestureRecognizerClass,
    UILongPressGestureRecognizer>)
  end;

  PUILongPressGestureRecognizer = Pointer;

  UICollectionViewControllerClass = interface(UIViewControllerClass)
    ['{3EA924F0-B579-46B4-AB5D-E785FB822F24}']
  end;

  UICollectionViewController = interface(UIViewController)
    ['{3B0ED958-FD8D-4355-9A44-C1DF5B06BA0C}']
    function initWithCollectionViewLayout(layout: UICollectionViewLayout)
      : Pointer { instancetype }; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setCollectionView(collectionView: UICollectionView); cdecl;
    function collectionView: UICollectionView; cdecl;
    procedure setClearsSelectionOnViewWillAppear(clearsSelectionOnViewWillAppear
      : Boolean); cdecl;
    function clearsSelectionOnViewWillAppear: Boolean; cdecl;
    procedure setUseLayoutToLayoutNavigationTransitions
      (useLayoutToLayoutNavigationTransitions: Boolean); cdecl;
    function useLayoutToLayoutNavigationTransitions: Boolean; cdecl;
    function collectionViewLayout: UICollectionViewLayout; cdecl;
    procedure setInstallsStandardGestureForInteractiveMovement
      (installsStandardGestureForInteractiveMovement: Boolean); cdecl;
    function installsStandardGestureForInteractiveMovement: Boolean; cdecl;
  end;

  TUICollectionViewController = class
    (TOCGenericImport<UICollectionViewControllerClass,
    UICollectionViewController>)
  end;

  PUICollectionViewController = Pointer;

  UICollectionViewFlowLayoutInvalidationContextClass = interface
    (UICollectionViewLayoutInvalidationContextClass)
    ['{9EF7F839-13D9-4CCB-A850-3131A3F7003C}']
  end;

  UICollectionViewFlowLayoutInvalidationContext = interface
    (UICollectionViewLayoutInvalidationContext)
    ['{9A74AE1D-825C-468D-BF81-16F8C53C6B1C}']
    procedure setInvalidateFlowLayoutDelegateMetrics
      (invalidateFlowLayoutDelegateMetrics: Boolean); cdecl;
    function invalidateFlowLayoutDelegateMetrics: Boolean; cdecl;
    procedure setInvalidateFlowLayoutAttributes(invalidateFlowLayoutAttributes
      : Boolean); cdecl;
    function invalidateFlowLayoutAttributes: Boolean; cdecl;
  end;

  TUICollectionViewFlowLayoutInvalidationContext = class
    (TOCGenericImport<UICollectionViewFlowLayoutInvalidationContextClass,
    UICollectionViewFlowLayoutInvalidationContext>)
  end;

  PUICollectionViewFlowLayoutInvalidationContext = Pointer;

  UICollectionViewFlowLayoutClass = interface(UICollectionViewLayoutClass)
    ['{474A522E-2DE3-4BE2-808C-0B8648EDC183}']
  end;

  UICollectionViewFlowLayout = interface(UICollectionViewLayout)
    ['{C3F2F910-EE50-45E3-BD65-2251775FFE11}']
    procedure setMinimumLineSpacing(minimumLineSpacing: CGFloat); cdecl;
    function minimumLineSpacing: CGFloat; cdecl;
    procedure setMinimumInteritemSpacing(minimumInteritemSpacing
      : CGFloat); cdecl;
    function minimumInteritemSpacing: CGFloat; cdecl;
    procedure setItemSize(itemSize: CGSize); cdecl;
    function itemSize: CGSize; cdecl;
    procedure setEstimatedItemSize(estimatedItemSize: CGSize); cdecl;
    function estimatedItemSize: CGSize; cdecl;
    procedure setScrollDirection(scrollDirection
      : UICollectionViewScrollDirection); cdecl;
    function scrollDirection: UICollectionViewScrollDirection; cdecl;
    procedure setHeaderReferenceSize(headerReferenceSize: CGSize); cdecl;
    function headerReferenceSize: CGSize; cdecl;
    procedure setFooterReferenceSize(footerReferenceSize: CGSize); cdecl;
    function footerReferenceSize: CGSize; cdecl;
    procedure setSectionInset(sectionInset: UIEdgeInsets); cdecl;
    function sectionInset: UIEdgeInsets; cdecl;
    procedure setSectionInsetReference(sectionInsetReference
      : UICollectionViewFlowLayoutSectionInsetReference); cdecl;
    function sectionInsetReference
      : UICollectionViewFlowLayoutSectionInsetReference; cdecl;
    procedure setSectionHeadersPinToVisibleBounds
      (sectionHeadersPinToVisibleBounds: Boolean); cdecl;
    function sectionHeadersPinToVisibleBounds: Boolean; cdecl;
    procedure setSectionFootersPinToVisibleBounds
      (sectionFootersPinToVisibleBounds: Boolean); cdecl;
    function sectionFootersPinToVisibleBounds: Boolean; cdecl;
  end;

  TUICollectionViewFlowLayout = class
    (TOCGenericImport<UICollectionViewFlowLayoutClass,
    UICollectionViewFlowLayout>)
  end;

  PUICollectionViewFlowLayout = Pointer;

  UIListContentConfigurationClass = interface(NSObjectClass)
    ['{D277AE74-51F4-4425-AEE3-F4229526B656}']
    { class } function cellConfiguration: Pointer { instancetype }; cdecl;
    { class } function subtitleCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function valueCellConfiguration: Pointer { instancetype }; cdecl;
    { class } function plainHeaderConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function plainFooterConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function groupedHeaderConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function groupedFooterConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function prominentInsetGroupedHeaderConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function extraProminentInsetGroupedHeaderConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function sidebarCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function sidebarSubtitleCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function accompaniedSidebarCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function accompaniedSidebarSubtitleCellConfiguration
      : Pointer { instancetype }; cdecl;
    { class } function sidebarHeaderConfiguration
      : Pointer { instancetype }; cdecl;
  end;

  UIListContentConfiguration = interface(NSObject)
    ['{C4EFB24E-24FA-43C1-9E09-A6A12D23D379}']
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    function imageProperties: UIListContentImageProperties; cdecl;
    procedure setText(text: NSString); cdecl;
    function text: NSString; cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    function attributedText: NSAttributedString; cdecl;
    function textProperties: UIListContentTextProperties; cdecl;
    procedure setSecondaryText(secondaryText: NSString); cdecl;
    function secondaryText: NSString; cdecl;
    procedure setSecondaryAttributedText(secondaryAttributedText
      : NSAttributedString); cdecl;
    function secondaryAttributedText: NSAttributedString; cdecl;
    function secondaryTextProperties: UIListContentTextProperties; cdecl;
    procedure setAxesPreservingSuperviewLayoutMargins
      (axesPreservingSuperviewLayoutMargins: UIAxis); cdecl;
    function axesPreservingSuperviewLayoutMargins: UIAxis; cdecl;
    procedure setDirectionalLayoutMargins(directionalLayoutMargins
      : NSDirectionalEdgeInsets); cdecl;
    function directionalLayoutMargins: NSDirectionalEdgeInsets; cdecl;
    procedure setPrefersSideBySideTextAndSecondaryText
      (prefersSideBySideTextAndSecondaryText: Boolean); cdecl;
    function prefersSideBySideTextAndSecondaryText: Boolean; cdecl;
    procedure setImageToTextPadding(imageToTextPadding: CGFloat); cdecl;
    function imageToTextPadding: CGFloat; cdecl;
    procedure setTextToSecondaryTextHorizontalPadding
      (textToSecondaryTextHorizontalPadding: CGFloat); cdecl;
    function textToSecondaryTextHorizontalPadding: CGFloat; cdecl;
    procedure setTextToSecondaryTextVerticalPadding
      (textToSecondaryTextVerticalPadding: CGFloat); cdecl;
    function textToSecondaryTextVerticalPadding: CGFloat; cdecl;
  end;

  TUIListContentConfiguration = class
    (TOCGenericImport<UIListContentConfigurationClass,
    UIListContentConfiguration>)
  end;

  PUIListContentConfiguration = Pointer;

  UICollectionViewListCellClass = interface(UICollectionViewCellClass)
    ['{06AF4D33-1A26-4B98-8794-76FF222AF6BD}']
  end;

  UICollectionViewListCell = interface(UICollectionViewCell)
    ['{45670EF5-D6CD-4FD7-BCD0-2EB2DE4559CC}']
    function defaultContentConfiguration: UIListContentConfiguration; cdecl;
    procedure setIndentationLevel(indentationLevel: NSInteger); cdecl;
    function indentationLevel: NSInteger; cdecl;
    procedure setIndentationWidth(indentationWidth: CGFloat); cdecl;
    function indentationWidth: CGFloat; cdecl;
    procedure setIndentsAccessories(indentsAccessories: Boolean); cdecl;
    function indentsAccessories: Boolean; cdecl;
    procedure setAccessories(accessories: NSArray); cdecl;
    function accessories: NSArray; cdecl;
    function separatorLayoutGuide: UILayoutGuide; cdecl;
  end;

  TUICollectionViewListCell = class
    (TOCGenericImport<UICollectionViewListCellClass, UICollectionViewListCell>)
  end;

  PUICollectionViewListCell = Pointer;

  UICollisionBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{6EE2A83D-355D-44F2-9347-B53C412108E1}']
  end;

  UICollisionBehavior = interface(UIDynamicBehavior)
    ['{ADFEB4EF-A530-4E1D-BCE0-E65A4112AD50}']
    function initWithItems(items: NSArray): Pointer { instancetype }; cdecl;
    procedure addItem(item: Pointer); cdecl;
    procedure removeItem(item: Pointer); cdecl;
    function items: NSArray; cdecl;
    procedure setCollisionMode(collisionMode: UICollisionBehaviorMode); cdecl;
    function collisionMode: UICollisionBehaviorMode; cdecl;
    procedure setTranslatesReferenceBoundsIntoBoundary
      (translatesReferenceBoundsIntoBoundary: Boolean); cdecl;
    function translatesReferenceBoundsIntoBoundary: Boolean; cdecl;
    procedure setTranslatesReferenceBoundsIntoBoundaryWithInsets
      (insets: UIEdgeInsets); cdecl;
    [MethodName('addBoundaryWithIdentifier:forPath:')]
    procedure addBoundaryWithIdentifierForPath(identifier: Pointer;
      forPath: UIBezierPath); cdecl;
    [MethodName('addBoundaryWithIdentifier:fromPoint:toPoint:')]
    procedure addBoundaryWithIdentifierFromPointToPoint(identifier: Pointer;
      fromPoint: CGPoint; toPoint: CGPoint); cdecl;
    function boundaryWithIdentifier(identifier: Pointer): UIBezierPath; cdecl;
    procedure removeBoundaryWithIdentifier(identifier: Pointer); cdecl;
    function boundaryIdentifiers: NSArray; cdecl;
    procedure removeAllBoundaries; cdecl;
    procedure setCollisionDelegate(collisionDelegate: Pointer); cdecl;
    function collisionDelegate: Pointer; cdecl;
  end;

  TUICollisionBehavior = class(TOCGenericImport<UICollisionBehaviorClass,
    UICollisionBehavior>)
  end;

  PUICollisionBehavior = Pointer;

  UIColorPickerViewControllerClass = interface(UIViewControllerClass)
    ['{68CB3DE5-0148-4EFE-B775-DDC41F6A264E}']
  end;

  UIColorPickerViewController = interface(UIViewController)
    ['{354123F4-93D9-4D43-8D76-63B25C962417}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setSelectedColor(selectedColor: UIColor); cdecl;
    function selectedColor: UIColor; cdecl;
    procedure setSupportsAlpha(supportsAlpha: Boolean); cdecl;
    function supportsAlpha: Boolean; cdecl;
    function init: Pointer { instancetype }; cdecl;
  end;

  TUIColorPickerViewController = class
    (TOCGenericImport<UIColorPickerViewControllerClass,
    UIColorPickerViewController>)
  end;

  PUIColorPickerViewController = Pointer;

  UIColorWellClass = interface(UIControlClass)
    ['{DFE5B76D-0339-46F1-8C9B-A528D030F243}']
  end;

  UIColorWell = interface(UIControl)
    ['{8C22F1BC-3610-4E70-B6D0-4152E2F08A11}']
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setSupportsAlpha(supportsAlpha: Boolean); cdecl;
    function supportsAlpha: Boolean; cdecl;
    procedure setSelectedColor(selectedColor: UIColor); cdecl;
    function selectedColor: UIColor; cdecl;
  end;

  TUIColorWell = class(TOCGenericImport<UIColorWellClass, UIColorWell>)
  end;

  PUIColorWell = Pointer;

  UIContextualActionClass = interface(NSObjectClass)
    ['{8ED8BF4E-8EA5-4CCB-9E27-1E50EFFCC3DB}']
    { class } function contextualActionWithStyle(style: UIContextualActionStyle;
      title: NSString; handler: UIContextualActionHandler)
      : Pointer { instancetype }; cdecl;
  end;

  UIContextualAction = interface(NSObject)
    ['{E4F4634C-C396-498E-8487-347F59FFDD56}']
    function style: UIContextualActionStyle; cdecl;
    function handler: UIContextualActionHandler; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
  end;

  TUIContextualAction = class(TOCGenericImport<UIContextualActionClass,
    UIContextualAction>)
  end;

  PUIContextualAction = Pointer;

  UIDatePickerClass = interface(UIControlClass)
    ['{700D4C63-3A1E-4BA8-99BE-8812FA28E969}']
  end;

  UIDatePicker = interface(UIControl)
    ['{2D8EAEDE-35B9-49BD-BA29-B6E05858EBE8}']
    procedure setDatePickerMode(datePickerMode: UIDatePickerMode); cdecl;
    function datePickerMode: UIDatePickerMode; cdecl;
    procedure setLocale(locale: NSLocale); cdecl;
    function locale: NSLocale; cdecl;
    procedure setCalendar(calendar: NSCalendar); cdecl;
    function calendar: NSCalendar; cdecl;
    procedure setTimeZone(timeZone: NSTimeZone); cdecl;
    function timeZone: NSTimeZone; cdecl;
    [MethodName('setDate:')]
    procedure setDate(date: NSDate); cdecl;
    function date: NSDate; cdecl;
    procedure setMinimumDate(minimumDate: NSDate); cdecl;
    function minimumDate: NSDate; cdecl;
    procedure setMaximumDate(maximumDate: NSDate); cdecl;
    function maximumDate: NSDate; cdecl;
    procedure setCountDownDuration(countDownDuration: NSTimeInterval); cdecl;
    function countDownDuration: NSTimeInterval; cdecl;
    procedure setMinuteInterval(minuteInterval: NSInteger); cdecl;
    function minuteInterval: NSInteger; cdecl;
    [MethodName('setDate:animated:')]
    procedure setDateAnimated(date: NSDate; animated: Boolean); cdecl;
    procedure setPreferredDatePickerStyle(preferredDatePickerStyle
      : UIDatePickerStyle); cdecl;
    function preferredDatePickerStyle: UIDatePickerStyle; cdecl;
    function datePickerStyle: UIDatePickerStyle; cdecl;
    procedure setRoundsToMinuteInterval(roundsToMinuteInterval: Boolean); cdecl;
    function roundsToMinuteInterval: Boolean; cdecl;
  end;

  TUIDatePicker = class(TOCGenericImport<UIDatePickerClass, UIDatePicker>)
  end;

  PUIDatePicker = Pointer;

  UIDeferredMenuElementClass = interface(UIMenuElementClass)
    ['{BF8D2CF5-3A45-47F7-953E-D13AC68D6CBF}']
    { class } function elementWithProvider(elementProvider
      : TUIKitElementProvider): Pointer { instancetype }; cdecl;
    { class } function elementWithUncachedProvider(elementProvider
      : TUIKitElementProvider): Pointer { instancetype }; cdecl;
  end;

  UIDeferredMenuElement = interface(UIMenuElement)
    ['{78CAEF05-FA62-45BF-A781-15013C34A996}']
  end;

  TUIDeferredMenuElement = class(TOCGenericImport<UIDeferredMenuElementClass,
    UIDeferredMenuElement>)
  end;

  PUIDeferredMenuElement = Pointer;

  UISwipeGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{68DAFC61-9627-4DC6-BAD0-76E2507E5DC5}']
  end;

  UISwipeGestureRecognizer = interface(UIGestureRecognizer)
    ['{F5A7493A-80C4-451F-8578-85E47EF88BE2}']
    procedure setNumberOfTouchesRequired(numberOfTouchesRequired
      : NSUInteger); cdecl;
    function numberOfTouchesRequired: NSUInteger; cdecl;
    procedure setDirection(direction: UISwipeGestureRecognizerDirection); cdecl;
    function direction: UISwipeGestureRecognizerDirection; cdecl;
  end;

  TUISwipeGestureRecognizer = class
    (TOCGenericImport<UISwipeGestureRecognizerClass, UISwipeGestureRecognizer>)
  end;

  PUISwipeGestureRecognizer = Pointer;

  UITableViewClass = interface(UIScrollViewClass)
    ['{28009FF9-4163-4AEA-B47F-3BCE40B2FCAF}']
  end;

  UITableView = interface(UIScrollView)
    ['{FC22E1E5-495C-4672-B5F3-DC118BABEFD7}']
    function initWithFrame(frame: CGRect; style: UITableViewStyle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function style: UITableViewStyle; cdecl;
    procedure setDataSource(dataSource: Pointer); cdecl;
    function dataSource: Pointer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setPrefetchDataSource(prefetchDataSource: Pointer); cdecl;
    function prefetchDataSource: Pointer; cdecl;
    procedure setPrefetchingEnabled(prefetchingEnabled: Boolean); cdecl;
    function isPrefetchingEnabled: Boolean; cdecl;
    procedure setDragDelegate(dragDelegate: Pointer); cdecl;
    function dragDelegate: Pointer; cdecl;
    procedure setDropDelegate(dropDelegate: Pointer); cdecl;
    function dropDelegate: Pointer; cdecl;
    procedure setRowHeight(rowHeight: CGFloat); cdecl;
    function rowHeight: CGFloat; cdecl;
    procedure setSectionHeaderHeight(sectionHeaderHeight: CGFloat); cdecl;
    function sectionHeaderHeight: CGFloat; cdecl;
    procedure setSectionFooterHeight(sectionFooterHeight: CGFloat); cdecl;
    function sectionFooterHeight: CGFloat; cdecl;
    procedure setEstimatedRowHeight(estimatedRowHeight: CGFloat); cdecl;
    function estimatedRowHeight: CGFloat; cdecl;
    procedure setEstimatedSectionHeaderHeight(estimatedSectionHeaderHeight
      : CGFloat); cdecl;
    function estimatedSectionHeaderHeight: CGFloat; cdecl;
    procedure setEstimatedSectionFooterHeight(estimatedSectionFooterHeight
      : CGFloat); cdecl;
    function estimatedSectionFooterHeight: CGFloat; cdecl;
    procedure setFillerRowHeight(fillerRowHeight: CGFloat); cdecl;
    function fillerRowHeight: CGFloat; cdecl;
    procedure setSectionHeaderTopPadding(sectionHeaderTopPadding
      : CGFloat); cdecl;
    function sectionHeaderTopPadding: CGFloat; cdecl;
    procedure setSeparatorInset(separatorInset: UIEdgeInsets); cdecl;
    function separatorInset: UIEdgeInsets; cdecl;
    procedure setSeparatorInsetReference(separatorInsetReference
      : UITableViewSeparatorInsetReference); cdecl;
    function separatorInsetReference: UITableViewSeparatorInsetReference; cdecl;
    procedure setSelfSizingInvalidation(selfSizingInvalidation
      : UITableViewSelfSizingInvalidation); cdecl;
    function selfSizingInvalidation: UITableViewSelfSizingInvalidation; cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    function backgroundView: UIView; cdecl;
    function contextMenuInteraction: UIContextMenuInteraction; cdecl;
    function numberOfSections: NSInteger; cdecl;
    function numberOfRowsInSection(section: NSInteger): NSInteger; cdecl;
    function rectForSection(section: NSInteger): CGRect; cdecl;
    function rectForHeaderInSection(section: NSInteger): CGRect; cdecl;
    function rectForFooterInSection(section: NSInteger): CGRect; cdecl;
    function rectForRowAtIndexPath(indexPath: NSIndexPath): CGRect; cdecl;
    function indexPathForRowAtPoint(point: CGPoint): NSIndexPath; cdecl;
    function indexPathForCell(cell: UITableViewCell): NSIndexPath; cdecl;
    function indexPathsForRowsInRect(rect: CGRect): NSArray; cdecl;
    function cellForRowAtIndexPath(indexPath: NSIndexPath)
      : UITableViewCell; cdecl;
    function visibleCells: NSArray; cdecl;
    function indexPathsForVisibleRows: NSArray; cdecl;
    function headerViewForSection(section: NSInteger)
      : UITableViewHeaderFooterView; cdecl;
    function footerViewForSection(section: NSInteger)
      : UITableViewHeaderFooterView; cdecl;
    procedure scrollToRowAtIndexPath(indexPath: NSIndexPath;
      atScrollPosition: UITableViewScrollPosition; animated: Boolean); cdecl;
    procedure scrollToNearestSelectedRowAtScrollPosition(scrollPosition
      : UITableViewScrollPosition; animated: Boolean); cdecl;
    procedure performBatchUpdates(updates: TUIKitAction;
      completion: TUIKitCompletion); cdecl;
    procedure beginUpdates; cdecl;
    procedure endUpdates; cdecl;
    procedure insertSections(sections: NSIndexSet;
      withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure deleteSections(sections: NSIndexSet;
      withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure moveSection(section: NSInteger; toSection: NSInteger); cdecl;
    procedure reloadSections(sections: NSIndexSet;
      withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure insertRowsAtIndexPaths(indexPaths: NSArray;
      withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure deleteRowsAtIndexPaths(indexPaths: NSArray;
      withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure moveRowAtIndexPath(indexPath: NSIndexPath;
      toIndexPath: NSIndexPath); cdecl;
    procedure reloadRowsAtIndexPaths(indexPaths: NSArray;
      withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure reconfigureRowsAtIndexPaths(indexPaths: NSArray); cdecl;
    function hasUncommittedUpdates: Boolean; cdecl;
    procedure reloadData; cdecl;
    procedure reloadSectionIndexTitles; cdecl;
    [MethodName('setEditing:')]
    procedure setEditing(editing: Boolean); cdecl;
    function isEditing: Boolean; cdecl;
    [MethodName('setEditing:animated:')]
    procedure setEditingAnimated(editing: Boolean; animated: Boolean); cdecl;
    procedure setAllowsSelection(allowsSelection: Boolean); cdecl;
    function allowsSelection: Boolean; cdecl;
    procedure setAllowsSelectionDuringEditing(allowsSelectionDuringEditing
      : Boolean); cdecl;
    function allowsSelectionDuringEditing: Boolean; cdecl;
    procedure setAllowsMultipleSelection(allowsMultipleSelection
      : Boolean); cdecl;
    function allowsMultipleSelection: Boolean; cdecl;
    procedure setAllowsMultipleSelectionDuringEditing
      (allowsMultipleSelectionDuringEditing: Boolean); cdecl;
    function allowsMultipleSelectionDuringEditing: Boolean; cdecl;
    function indexPathForSelectedRow: NSIndexPath; cdecl;
    function indexPathsForSelectedRows: NSArray; cdecl;
    procedure selectRowAtIndexPath(indexPath: NSIndexPath; animated: Boolean;
      scrollPosition: UITableViewScrollPosition); cdecl;
    procedure deselectRowAtIndexPath(indexPath: NSIndexPath;
      animated: Boolean); cdecl;
    procedure setSectionIndexMinimumDisplayRowCount
      (sectionIndexMinimumDisplayRowCount: NSInteger); cdecl;
    function sectionIndexMinimumDisplayRowCount: NSInteger; cdecl;
    procedure setSectionIndexColor(sectionIndexColor: UIColor); cdecl;
    function sectionIndexColor: UIColor; cdecl;
    procedure setSectionIndexBackgroundColor(sectionIndexBackgroundColor
      : UIColor); cdecl;
    function sectionIndexBackgroundColor: UIColor; cdecl;
    procedure setSectionIndexTrackingBackgroundColor
      (sectionIndexTrackingBackgroundColor: UIColor); cdecl;
    function sectionIndexTrackingBackgroundColor: UIColor; cdecl;
    procedure setSeparatorStyle(separatorStyle
      : UITableViewCellSeparatorStyle); cdecl;
    function separatorStyle: UITableViewCellSeparatorStyle; cdecl;
    procedure setSeparatorColor(separatorColor: UIColor); cdecl;
    function separatorColor: UIColor; cdecl;
    procedure setSeparatorEffect(separatorEffect: UIVisualEffect); cdecl;
    function separatorEffect: UIVisualEffect; cdecl;
    procedure setCellLayoutMarginsFollowReadableWidth
      (cellLayoutMarginsFollowReadableWidth: Boolean); cdecl;
    function cellLayoutMarginsFollowReadableWidth: Boolean; cdecl;
    procedure setInsetsContentViewsToSafeArea(insetsContentViewsToSafeArea
      : Boolean); cdecl;
    function insetsContentViewsToSafeArea: Boolean; cdecl;
    procedure setTableHeaderView(tableHeaderView: UIView); cdecl;
    function tableHeaderView: UIView; cdecl;
    procedure setTableFooterView(tableFooterView: UIView); cdecl;
    function tableFooterView: UIView; cdecl;
    [MethodName('dequeueReusableCellWithIdentifier:')]
    function dequeueReusableCellWithIdentifier(identifier: NSString)
      : UITableViewCell; cdecl;
    [MethodName('dequeueReusableCellWithIdentifier:forIndexPath:')]
    function dequeueReusableCellWithIdentifierForIndexPath(identifier: NSString;
      forIndexPath: NSIndexPath): UITableViewCell; cdecl;
    function dequeueReusableHeaderFooterViewWithIdentifier(identifier: NSString)
      : UITableViewHeaderFooterView; cdecl;
    [MethodName('registerNib:forCellReuseIdentifier:')]
    procedure registerNibForCellReuseIdentifier(nib: UINib;
      forCellReuseIdentifier: NSString); cdecl;
    [MethodName('registerClass:forCellReuseIdentifier:')]
    procedure registerClassForCellReuseIdentifier(cellClass: Pointer;
      forCellReuseIdentifier: NSString); cdecl;
    [MethodName('registerNib:forHeaderFooterViewReuseIdentifier:')]
    procedure registerNibForHeaderFooterViewReuseIdentifier(nib: UINib;
      forHeaderFooterViewReuseIdentifier: NSString); cdecl;
    [MethodName('registerClass:forHeaderFooterViewReuseIdentifier:')]
    procedure registerClassForHeaderFooterViewReuseIdentifier(aClass: Pointer;
      forHeaderFooterViewReuseIdentifier: NSString); cdecl;
    procedure setRemembersLastFocusedIndexPath(remembersLastFocusedIndexPath
      : Boolean); cdecl;
    function remembersLastFocusedIndexPath: Boolean; cdecl;
    procedure setSelectionFollowsFocus(selectionFollowsFocus: Boolean); cdecl;
    function selectionFollowsFocus: Boolean; cdecl;
    procedure setAllowsFocus(allowsFocus: Boolean); cdecl;
    function allowsFocus: Boolean; cdecl;
    procedure setAllowsFocusDuringEditing(allowsFocusDuringEditing
      : Boolean); cdecl;
    function allowsFocusDuringEditing: Boolean; cdecl;
    procedure setDragInteractionEnabled(dragInteractionEnabled: Boolean); cdecl;
    function dragInteractionEnabled: Boolean; cdecl;
    function hasActiveDrag: Boolean; cdecl;
    function hasActiveDrop: Boolean; cdecl;
  end;

  TUITableView = class(TOCGenericImport<UITableViewClass, UITableView>)
  end;

  PUITableView = Pointer;

  UITableViewCellClass = interface(UIViewClass)
    ['{466F32BB-B6F1-4102-8C9B-A494EF2F560E}']
  end;

  UITableViewCell = interface(UIView)
    ['{C5315A24-C412-4A5F-A6B3-4C3239044AEF}']
    function initWithStyle(style: UITableViewCellStyle;
      reuseIdentifier: NSString): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function configurationState: UICellConfigurationState; cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    procedure updateConfigurationUsingState
      (state: UICellConfigurationState); cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler
      : UITableViewCellConfigurationUpdateHandler); cdecl;
    function configurationUpdateHandler
      : UITableViewCellConfigurationUpdateHandler; cdecl;
    function defaultContentConfiguration: UIListContentConfiguration; cdecl;
    procedure setContentConfiguration(contentConfiguration: Pointer); cdecl;
    function contentConfiguration: Pointer; cdecl;
    procedure setAutomaticallyUpdatesContentConfiguration
      (automaticallyUpdatesContentConfiguration: Boolean); cdecl;
    function automaticallyUpdatesContentConfiguration: Boolean; cdecl;
    function contentView: UIView; cdecl;
    function imageView: UIImageView; cdecl;
    function textLabel: UILabel; cdecl;
    function detailTextLabel: UILabel; cdecl;
    function defaultBackgroundConfiguration: UIBackgroundConfiguration; cdecl;
    procedure setBackgroundConfiguration(backgroundConfiguration
      : UIBackgroundConfiguration); cdecl;
    function backgroundConfiguration: UIBackgroundConfiguration; cdecl;
    procedure setAutomaticallyUpdatesBackgroundConfiguration
      (automaticallyUpdatesBackgroundConfiguration: Boolean); cdecl;
    function automaticallyUpdatesBackgroundConfiguration: Boolean; cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    function backgroundView: UIView; cdecl;
    procedure setSelectedBackgroundView(selectedBackgroundView: UIView); cdecl;
    function selectedBackgroundView: UIView; cdecl;
    procedure setMultipleSelectionBackgroundView(multipleSelectionBackgroundView
      : UIView); cdecl;
    function multipleSelectionBackgroundView: UIView; cdecl;
    function reuseIdentifier: NSString; cdecl;
    procedure prepareForReuse; cdecl;
    procedure setSelectionStyle(selectionStyle
      : UITableViewCellSelectionStyle); cdecl;
    function selectionStyle: UITableViewCellSelectionStyle; cdecl;
    [MethodName('setSelected:')]
    procedure setSelected(selected: Boolean); cdecl;
    function isSelected: Boolean; cdecl;
    [MethodName('setHighlighted:')]
    procedure setHighlighted(highlighted: Boolean); cdecl;
    function isHighlighted: Boolean; cdecl;
    [MethodName('setSelected:animated:')]
    procedure setSelectedAnimated(selected: Boolean; animated: Boolean); cdecl;
    [MethodName('setHighlighted:animated:')]
    procedure setHighlightedAnimated(highlighted: Boolean;
      animated: Boolean); cdecl;
    function editingStyle: UITableViewCellEditingStyle; cdecl;
    procedure setShowsReorderControl(showsReorderControl: Boolean); cdecl;
    function showsReorderControl: Boolean; cdecl;
    procedure setShouldIndentWhileEditing(shouldIndentWhileEditing
      : Boolean); cdecl;
    function shouldIndentWhileEditing: Boolean; cdecl;
    procedure setAccessoryType(accessoryType
      : UITableViewCellAccessoryType); cdecl;
    function accessoryType: UITableViewCellAccessoryType; cdecl;
    procedure setAccessoryView(accessoryView: UIView); cdecl;
    function accessoryView: UIView; cdecl;
    procedure setEditingAccessoryType(editingAccessoryType
      : UITableViewCellAccessoryType); cdecl;
    function editingAccessoryType: UITableViewCellAccessoryType; cdecl;
    procedure setEditingAccessoryView(editingAccessoryView: UIView); cdecl;
    function editingAccessoryView: UIView; cdecl;
    procedure setIndentationLevel(indentationLevel: NSInteger); cdecl;
    function indentationLevel: NSInteger; cdecl;
    procedure setIndentationWidth(indentationWidth: CGFloat); cdecl;
    function indentationWidth: CGFloat; cdecl;
    procedure setSeparatorInset(separatorInset: UIEdgeInsets); cdecl;
    function separatorInset: UIEdgeInsets; cdecl;
    [MethodName('setEditing:')]
    procedure setEditing(editing: Boolean); cdecl;
    function isEditing: Boolean; cdecl;
    [MethodName('setEditing:animated:')]
    procedure setEditingAnimated(editing: Boolean; animated: Boolean); cdecl;
    function showingDeleteConfirmation: Boolean; cdecl;
    procedure setFocusStyle(focusStyle: UITableViewCellFocusStyle); cdecl;
    function focusStyle: UITableViewCellFocusStyle; cdecl;
    procedure willTransitionToState(state: UITableViewCellStateMask); cdecl;
    procedure didTransitionToState(state: UITableViewCellStateMask); cdecl;
    procedure dragStateDidChange(dragState: UITableViewCellDragState); cdecl;
    procedure setUserInteractionEnabledWhileDragging
      (userInteractionEnabledWhileDragging: Boolean); cdecl;
    function userInteractionEnabledWhileDragging: Boolean; cdecl;
    function initWithFrame(frame: CGRect; reuseIdentifier: NSString)
      : Pointer; cdecl;
    procedure setText(text: NSString); cdecl;
    function text: NSString; cdecl;
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    function textAlignment: NSTextAlignment; cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    procedure setTextColor(textColor: UIColor); cdecl;
    function textColor: UIColor; cdecl;
    procedure setSelectedTextColor(selectedTextColor: UIColor); cdecl;
    function selectedTextColor: UIColor; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setSelectedImage(selectedImage: UIImage); cdecl;
    function selectedImage: UIImage; cdecl;
    procedure setHidesAccessoryWhenEditing(hidesAccessoryWhenEditing
      : Boolean); cdecl;
    function hidesAccessoryWhenEditing: Boolean; cdecl;
    procedure setTarget(target: Pointer); cdecl;
    function target: Pointer; cdecl;
    procedure setEditAction(editAction: SEL); cdecl;
    function editAction: SEL; cdecl;
    procedure setAccessoryAction(accessoryAction: SEL); cdecl;
    function accessoryAction: SEL; cdecl;
  end;

  TUITableViewCell = class(TOCGenericImport<UITableViewCellClass,
    UITableViewCell>)
  end;

  PUITableViewCell = Pointer;

  UITableViewHeaderFooterViewClass = interface(UIViewClass)
    ['{43B9241C-F79B-4385-B838-E40930436B9E}']
  end;

  UITableViewHeaderFooterView = interface(UIView)
    ['{6574CF7E-2B6A-4CAB-8318-E59376C8AB29}']
    function initWithReuseIdentifier(reuseIdentifier: NSString)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function configurationState: UIViewConfigurationState; cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    procedure updateConfigurationUsingState
      (state: UIViewConfigurationState); cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler
      : UITableViewHeaderFooterViewConfigurationUpdateHandler); cdecl;
    function configurationUpdateHandler
      : UITableViewHeaderFooterViewConfigurationUpdateHandler; cdecl;
    function defaultContentConfiguration: UIListContentConfiguration; cdecl;
    procedure setContentConfiguration(contentConfiguration: Pointer); cdecl;
    function contentConfiguration: Pointer; cdecl;
    procedure setAutomaticallyUpdatesContentConfiguration
      (automaticallyUpdatesContentConfiguration: Boolean); cdecl;
    function automaticallyUpdatesContentConfiguration: Boolean; cdecl;
    function contentView: UIView; cdecl;
    function textLabel: UILabel; cdecl;
    function detailTextLabel: UILabel; cdecl;
    function defaultBackgroundConfiguration: UIBackgroundConfiguration; cdecl;
    procedure setBackgroundConfiguration(backgroundConfiguration
      : UIBackgroundConfiguration); cdecl;
    function backgroundConfiguration: UIBackgroundConfiguration; cdecl;
    procedure setAutomaticallyUpdatesBackgroundConfiguration
      (automaticallyUpdatesBackgroundConfiguration: Boolean); cdecl;
    function automaticallyUpdatesBackgroundConfiguration: Boolean; cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    function backgroundView: UIView; cdecl;
    function reuseIdentifier: NSString; cdecl;
    procedure prepareForReuse; cdecl;
  end;

  TUITableViewHeaderFooterView = class
    (TOCGenericImport<UITableViewHeaderFooterViewClass,
    UITableViewHeaderFooterView>)
  end;

  PUITableViewHeaderFooterView = Pointer;

  UITableViewDropProposalClass = interface(UIDropProposalClass)
    ['{44EF22F9-D0F2-4908-9450-B433C3542321}']
  end;

  UITableViewDropProposal = interface(UIDropProposal)
    ['{008B4B42-4997-4736-B5A5-A0C5E7FE1AC8}']
    function initWithDropOperation(operation: UIDropOperation;
      intent: UITableViewDropIntent): Pointer { instancetype }; cdecl;
    function intent: UITableViewDropIntent; cdecl;
  end;

  TUITableViewDropProposal = class
    (TOCGenericImport<UITableViewDropProposalClass, UITableViewDropProposal>)
  end;

  PUITableViewDropProposal = Pointer;

  UITableViewPlaceholderClass = interface(NSObjectClass)
    ['{34BF6F73-20BD-4CE5-A57E-F006583BB19E}']
  end;

  UITableViewPlaceholder = interface(NSObject)
    ['{EDD5A210-9D13-47B0-BE06-5FA21CF57433}']
    function initWithInsertionIndexPath(insertionIndexPath: NSIndexPath;
      reuseIdentifier: NSString; rowHeight: CGFloat)
      : Pointer { instancetype }; cdecl;
    procedure setCellUpdateHandler(cellUpdateHandler
      : TUIKitCellUpdateHandler1); cdecl;
    function cellUpdateHandler: TUIKitCellUpdateHandler1; cdecl;
  end;

  TUITableViewPlaceholder = class(TOCGenericImport<UITableViewPlaceholderClass,
    UITableViewPlaceholder>)
  end;

  PUITableViewPlaceholder = Pointer;

  UITableViewDropPlaceholderClass = interface(UITableViewPlaceholderClass)
    ['{C401530F-4B0B-4981-83AD-B004398CF2AF}']
  end;

  UITableViewDropPlaceholder = interface(UITableViewPlaceholder)
    ['{27DF1E36-4A7B-4AD8-A9C6-4C2CE93ACF3A}']
    procedure setPreviewParametersProvider(previewParametersProvider
      : TUIKitPreviewParametersProvider1); cdecl;
    function previewParametersProvider: TUIKitPreviewParametersProvider1; cdecl;
  end;

  TUITableViewDropPlaceholder = class
    (TOCGenericImport<UITableViewDropPlaceholderClass,
    UITableViewDropPlaceholder>)
  end;

  PUITableViewDropPlaceholder = Pointer;

  UITableViewRowActionClass = interface(NSObjectClass)
    ['{0AD743EF-678C-40F7-B1E2-3FB1065D1D34}']
    { class } function rowActionWithStyle(style: UITableViewRowActionStyle;
      title: NSString; handler: TUIKitHandler3)
      : Pointer { instancetype }; cdecl;
  end;

  UITableViewRowAction = interface(NSObject)
    ['{F9ECDE13-E64A-437D-9EEC-A5682377E5A9}']
    function style: UITableViewRowActionStyle; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setBackgroundEffect(backgroundEffect: UIVisualEffect); cdecl;
    function backgroundEffect: UIVisualEffect; cdecl;
  end;

  TUITableViewRowAction = class(TOCGenericImport<UITableViewRowActionClass,
    UITableViewRowAction>)
  end;

  PUITableViewRowAction = Pointer;

  UITableViewFocusUpdateContextClass = interface(UIFocusUpdateContextClass)
    ['{347D8E92-4F50-4257-A2E5-8EFC73FEE979}']
  end;

  UITableViewFocusUpdateContext = interface(UIFocusUpdateContext)
    ['{14A0E798-6335-459F-8E62-D7238200D2D2}']
    function previouslyFocusedIndexPath: NSIndexPath; cdecl;
    function nextFocusedIndexPath: NSIndexPath; cdecl;
  end;

  TUITableViewFocusUpdateContext = class
    (TOCGenericImport<UITableViewFocusUpdateContextClass,
    UITableViewFocusUpdateContext>)
  end;

  PUITableViewFocusUpdateContext = Pointer;

  NSDiffableDataSourceSnapshotClass = interface(NSObjectClass)
    ['{DA269D44-82EC-41BB-B4DA-7C16BE649818}']
  end;

  NSDiffableDataSourceSnapshot = interface(NSObject)
    ['{3BD4B42D-70AC-4C99-A31D-36A38A5E93F3}']
    function numberOfItems: NSInteger; cdecl;
    function numberOfSections: NSInteger; cdecl;
    function sectionIdentifiers: NSArray; cdecl;
    function itemIdentifiers: NSArray; cdecl;
    function reloadedSectionIdentifiers: NSArray; cdecl;
    function reloadedItemIdentifiers: NSArray; cdecl;
    function reconfiguredItemIdentifiers: NSArray; cdecl;
    function numberOfItemsInSection(sectionIdentifier: SectionIdentifierType)
      : NSInteger; cdecl;
    function itemIdentifiersInSectionWithIdentifier(sectionIdentifier
      : SectionIdentifierType): NSArray; cdecl;
    function sectionIdentifierForSectionContainingItemIdentifier
      (itemIdentifier: ItemIdentifierType): SectionIdentifierType; cdecl;
    function indexOfItemIdentifier(itemIdentifier: ItemIdentifierType)
      : NSInteger; cdecl;
    function indexOfSectionIdentifier(sectionIdentifier: SectionIdentifierType)
      : NSInteger; cdecl;
    [MethodName('appendItemsWithIdentifiers:')]
    procedure appendItemsWithIdentifiers(identifiers: NSArray); cdecl;
    [MethodName('appendItemsWithIdentifiers:intoSectionWithIdentifier:')]
    procedure appendItemsWithIdentifiersIntoSectionWithIdentifier
      (identifiers: NSArray;
      intoSectionWithIdentifier: SectionIdentifierType); cdecl;
    [MethodName('insertItemsWithIdentifiers:beforeItemWithIdentifier:')]
    procedure insertItemsWithIdentifiersBeforeItemWithIdentifier
      (identifiers: NSArray;
      beforeItemWithIdentifier: ItemIdentifierType); cdecl;
    [MethodName('insertItemsWithIdentifiers:afterItemWithIdentifier:')]
    procedure insertItemsWithIdentifiersAfterItemWithIdentifier
      (identifiers: NSArray;
      afterItemWithIdentifier: ItemIdentifierType); cdecl;
    procedure deleteItemsWithIdentifiers(identifiers: NSArray); cdecl;
    procedure deleteAllItems; cdecl;
    [MethodName('moveItemWithIdentifier:beforeItemWithIdentifier:')]
    procedure moveItemWithIdentifierBeforeItemWithIdentifier(fromIdentifier
      : ItemIdentifierType;
      beforeItemWithIdentifier: ItemIdentifierType); cdecl;
    [MethodName('moveItemWithIdentifier:afterItemWithIdentifier:')]
    procedure moveItemWithIdentifierAfterItemWithIdentifier(fromIdentifier
      : ItemIdentifierType; afterItemWithIdentifier: ItemIdentifierType); cdecl;
    procedure reloadItemsWithIdentifiers(identifiers: NSArray); cdecl;
    procedure reconfigureItemsWithIdentifiers(identifiers: NSArray); cdecl;
    procedure appendSectionsWithIdentifiers(sectionIdentifiers: NSArray); cdecl;
    [MethodName('insertSectionsWithIdentifiers:beforeSectionWithIdentifier:')]
    procedure insertSectionsWithIdentifiersBeforeSectionWithIdentifier
      (sectionIdentifiers: NSArray;
      beforeSectionWithIdentifier: SectionIdentifierType); cdecl;
    [MethodName('insertSectionsWithIdentifiers:afterSectionWithIdentifier:')]
    procedure insertSectionsWithIdentifiersAfterSectionWithIdentifier
      (sectionIdentifiers: NSArray;
      afterSectionWithIdentifier: SectionIdentifierType); cdecl;
    procedure deleteSectionsWithIdentifiers(sectionIdentifiers: NSArray); cdecl;
    [MethodName('moveSectionWithIdentifier:beforeSectionWithIdentifier:')]
    procedure moveSectionWithIdentifierBeforeSectionWithIdentifier
      (fromSectionIdentifier: SectionIdentifierType;
      beforeSectionWithIdentifier: SectionIdentifierType); cdecl;
    [MethodName('moveSectionWithIdentifier:afterSectionWithIdentifier:')]
    procedure moveSectionWithIdentifierAfterSectionWithIdentifier
      (fromSectionIdentifier: SectionIdentifierType;
      afterSectionWithIdentifier: SectionIdentifierType); cdecl;
    procedure reloadSectionsWithIdentifiers(sectionIdentifiers: NSArray); cdecl;
  end;

  TNSDiffableDataSourceSnapshot = class
    (TOCGenericImport<NSDiffableDataSourceSnapshotClass,
    NSDiffableDataSourceSnapshot>)
  end;

  PNSDiffableDataSourceSnapshot = Pointer;

  NSDiffableDataSourceSectionTransactionClass = interface(NSObjectClass)
    ['{1986A43E-E9DE-49FD-AFB9-F0BF14BE06AA}']
  end;

  NSDiffableDataSourceSectionTransaction = interface(NSObject)
    ['{CB01ABAE-C3CA-4B5D-BC36-0689578EC01D}']
    function sectionIdentifier: SectionIdentifierType; cdecl;
    function initialSnapshot: NSDiffableDataSourceSectionSnapshot; cdecl;
    function finalSnapshot: NSDiffableDataSourceSectionSnapshot; cdecl;
    function difference: NSOrderedCollectionDifference; cdecl;
  end;

  TNSDiffableDataSourceSectionTransaction = class
    (TOCGenericImport<NSDiffableDataSourceSectionTransactionClass,
    NSDiffableDataSourceSectionTransaction>)
  end;

  PNSDiffableDataSourceSectionTransaction = Pointer;

  NSDiffableDataSourceTransactionClass = interface(NSObjectClass)
    ['{EC443C73-779D-424C-A23C-96F042FC96B9}']
  end;

  NSDiffableDataSourceTransaction = interface(NSObject)
    ['{3954FE65-48FF-4D71-93D2-7875AEA5E3E8}']
    function initialSnapshot: NSDiffableDataSourceSnapshot; cdecl;
    function finalSnapshot: NSDiffableDataSourceSnapshot; cdecl;
    function difference: NSOrderedCollectionDifference; cdecl;
    function sectionTransactions: NSArray; cdecl;
  end;

  TNSDiffableDataSourceTransaction = class
    (TOCGenericImport<NSDiffableDataSourceTransactionClass,
    NSDiffableDataSourceTransaction>)
  end;

  PNSDiffableDataSourceTransaction = Pointer;

  UICollectionViewDiffableDataSourceReorderingHandlersClass = interface
    (NSObjectClass)
    ['{61FB798C-A61F-4AFA-A85A-96A7BAACF184}']
  end;

  UICollectionViewDiffableDataSourceReorderingHandlers = interface(NSObject)
    ['{93075CB0-F68B-43B5-89ED-B3E03BDB8AA1}']
    procedure setCanReorderItemHandler(canReorderItemHandler
      : TUIKitCanReorderItemHandler); cdecl;
    function canReorderItemHandler: TUIKitCanReorderItemHandler; cdecl;
    procedure setWillReorderHandler(willReorderHandler
      : TUIKitWillReorderHandler); cdecl;
    function willReorderHandler: TUIKitWillReorderHandler; cdecl;
    procedure setDidReorderHandler(didReorderHandler
      : TUIKitWillReorderHandler); cdecl;
    function didReorderHandler: TUIKitWillReorderHandler; cdecl;
  end;

  TUICollectionViewDiffableDataSourceReorderingHandlers = class
    (TOCGenericImport<UICollectionViewDiffableDataSourceReorderingHandlersClass,
    UICollectionViewDiffableDataSourceReorderingHandlers>)
  end;

  PUICollectionViewDiffableDataSourceReorderingHandlers = Pointer;

  UICollectionViewDiffableDataSourceSectionSnapshotHandlersClass = interface
    (NSObjectClass)
    ['{BA16DA7F-A91E-4074-B0E8-8DF305C3C70A}']
  end;

  UICollectionViewDiffableDataSourceSectionSnapshotHandlers =
    interface(NSObject)
    ['{466A0C65-1449-42D8-BE73-640F04589385}']
    procedure setShouldExpandItemHandler(shouldExpandItemHandler
      : TUIKitCanReorderItemHandler); cdecl;
    function shouldExpandItemHandler: TUIKitCanReorderItemHandler; cdecl;
    procedure setWillExpandItemHandler(willExpandItemHandler
      : TUIKitWillExpandItemHandler); cdecl;
    function willExpandItemHandler: TUIKitWillExpandItemHandler; cdecl;
    procedure setShouldCollapseItemHandler(shouldCollapseItemHandler
      : TUIKitCanReorderItemHandler); cdecl;
    function shouldCollapseItemHandler: TUIKitCanReorderItemHandler; cdecl;
    procedure setWillCollapseItemHandler(willCollapseItemHandler
      : TUIKitWillExpandItemHandler); cdecl;
    function willCollapseItemHandler: TUIKitWillExpandItemHandler; cdecl;
    procedure setSnapshotForExpandingParentItemHandler
      (snapshotForExpandingParentItemHandler
      : TUIKitSnapshotForExpandingParentItemHandler); cdecl;
    function snapshotForExpandingParentItemHandler
      : TUIKitSnapshotForExpandingParentItemHandler; cdecl;
  end;

  TUICollectionViewDiffableDataSourceSectionSnapshotHandlers = class
    (TOCGenericImport<
    UICollectionViewDiffableDataSourceSectionSnapshotHandlersClass,
    UICollectionViewDiffableDataSourceSectionSnapshotHandlers>)
  end;

  PUICollectionViewDiffableDataSourceSectionSnapshotHandlers = Pointer;

  UICollectionViewDiffableDataSourceClass = interface(NSObjectClass)
    ['{769EEAE1-6B81-4656-A913-6B80533B6C82}']
  end;

  UICollectionViewDiffableDataSource = interface(NSObject)
    ['{24DA83C9-9985-4043-9A71-C9B005EC1FF5}']
    function initWithCollectionView(collectionView: UICollectionView;
      cellProvider: UICollectionViewDiffableDataSourceCellProvider)
      : Pointer { instancetype }; cdecl;
    procedure setSupplementaryViewProvider(supplementaryViewProvider
      : UICollectionViewDiffableDataSourceSupplementaryViewProvider); cdecl;
    function supplementaryViewProvider
      : UICollectionViewDiffableDataSourceSupplementaryViewProvider; cdecl;
    function snapshot: NSDiffableDataSourceSnapshot; cdecl;
    [MethodName('applySnapshot:animatingDifferences:')]
    procedure applySnapshotAnimatingDifferences
      (snapshot: NSDiffableDataSourceSnapshot;
      animatingDifferences: Boolean); cdecl;
    [MethodName('applySnapshot:animatingDifferences:completion:')]
    procedure applySnapshotAnimatingDifferencesCompletion
      (snapshot: NSDiffableDataSourceSnapshot; animatingDifferences: Boolean;
      completion: TUIKitAction); cdecl;
    [MethodName('applySnapshotUsingReloadData:')]
    procedure applySnapshotUsingReloadData
      (snapshot: NSDiffableDataSourceSnapshot); cdecl;
    [MethodName('applySnapshotUsingReloadData:completion:')]
    procedure applySnapshotUsingReloadDataCompletion
      (snapshot: NSDiffableDataSourceSnapshot; completion: TUIKitAction); cdecl;
    function sectionIdentifierForIndex(index: NSInteger)
      : SectionIdentifierType; cdecl;
    function indexForSectionIdentifier(identifier: SectionIdentifierType)
      : NSInteger; cdecl;
    function itemIdentifierForIndexPath(indexPath: NSIndexPath)
      : ItemIdentifierType; cdecl;
    function indexPathForItemIdentifier(identifier: ItemIdentifierType)
      : NSIndexPath; cdecl;
    procedure setReorderingHandlers(reorderingHandlers
      : UICollectionViewDiffableDataSourceReorderingHandlers); cdecl;
    function reorderingHandlers
      : UICollectionViewDiffableDataSourceReorderingHandlers; cdecl;
    [MethodName('applySnapshot:toSection:animatingDifferences:')]
    procedure applySnapshotToSectionAnimatingDifferences
      (snapshot: NSDiffableDataSourceSectionSnapshot;
      toSection: SectionIdentifierType; animatingDifferences: Boolean); cdecl;
    [MethodName('applySnapshot:toSection:animatingDifferences:completion:')]
    procedure applySnapshotToSectionAnimatingDifferencesCompletion
      (snapshot: NSDiffableDataSourceSectionSnapshot;
      toSection: SectionIdentifierType; animatingDifferences: Boolean;
      completion: TUIKitAction); cdecl;
    function snapshotForSection(section: SectionIdentifierType)
      : NSDiffableDataSourceSectionSnapshot; cdecl;
    procedure setSectionSnapshotHandlers(sectionSnapshotHandlers
      : UICollectionViewDiffableDataSourceSectionSnapshotHandlers); cdecl;
    function sectionSnapshotHandlers
      : UICollectionViewDiffableDataSourceSectionSnapshotHandlers; cdecl;
  end;

  TUICollectionViewDiffableDataSource = class
    (TOCGenericImport<UICollectionViewDiffableDataSourceClass,
    UICollectionViewDiffableDataSource>)
  end;

  PUICollectionViewDiffableDataSource = Pointer;

  UITableViewDiffableDataSourceClass = interface(NSObjectClass)
    ['{E508BCB9-BA30-4E01-9BDF-800CF706270E}']
  end;

  UITableViewDiffableDataSource = interface(NSObject)
    ['{39317931-190C-497D-B0C6-7FE89482617B}']
    function initWithTableView(tableView: UITableView;
      cellProvider: UITableViewDiffableDataSourceCellProvider)
      : Pointer { instancetype }; cdecl;
    function snapshot: NSDiffableDataSourceSnapshot; cdecl;
    [MethodName('applySnapshot:animatingDifferences:')]
    procedure applySnapshotAnimatingDifferences
      (snapshot: NSDiffableDataSourceSnapshot;
      animatingDifferences: Boolean); cdecl;
    [MethodName('applySnapshot:animatingDifferences:completion:')]
    procedure applySnapshotAnimatingDifferencesCompletion
      (snapshot: NSDiffableDataSourceSnapshot; animatingDifferences: Boolean;
      completion: TUIKitAction); cdecl;
    [MethodName('applySnapshotUsingReloadData:')]
    procedure applySnapshotUsingReloadData
      (snapshot: NSDiffableDataSourceSnapshot); cdecl;
    [MethodName('applySnapshotUsingReloadData:completion:')]
    procedure applySnapshotUsingReloadDataCompletion
      (snapshot: NSDiffableDataSourceSnapshot; completion: TUIKitAction); cdecl;
    function sectionIdentifierForIndex(index: NSInteger)
      : SectionIdentifierType; cdecl;
    function indexForSectionIdentifier(identifier: SectionIdentifierType)
      : NSInteger; cdecl;
    function itemIdentifierForIndexPath(indexPath: NSIndexPath)
      : ItemIdentifierType; cdecl;
    function indexPathForItemIdentifier(identifier: ItemIdentifierType)
      : NSIndexPath; cdecl;
    procedure setDefaultRowAnimation(defaultRowAnimation
      : UITableViewRowAnimation); cdecl;
    function defaultRowAnimation: UITableViewRowAnimation; cdecl;
  end;

  TUITableViewDiffableDataSource = class
    (TOCGenericImport<UITableViewDiffableDataSourceClass,
    UITableViewDiffableDataSource>)
  end;

  PUITableViewDiffableDataSource = Pointer;

  UIDocumentClass = interface(NSObjectClass)
    ['{3990159D-5FD1-48AF-992A-013EFA5F7461}']
  end;

  UIDocument = interface(NSObject)
    ['{D876F492-1D03-460F-99AA-7A75A9C7982C}']
    function initWithFileURL(url: NSURL): Pointer { instancetype }; cdecl;
    function fileURL: NSURL; cdecl;
    function localizedName: NSString; cdecl;
    function fileType: NSString; cdecl;
    procedure setFileModificationDate(fileModificationDate: NSDate); cdecl;
    function fileModificationDate: NSDate; cdecl;
    function documentState: UIDocumentState; cdecl;
    function progress: NSProgress; cdecl;
    procedure openWithCompletionHandler(completionHandler
      : TUIKitCompletion); cdecl;
    procedure closeWithCompletionHandler(completionHandler
      : TUIKitCompletion); cdecl;
    function loadFromContents(contents: Pointer; ofType: NSString;
      error: NSError): Boolean; cdecl;
    function contentsForType(typeName: NSString; error: NSError)
      : Pointer; cdecl;
    procedure disableEditing; cdecl;
    procedure enableEditing; cdecl;
    procedure setUndoManager(undoManager: NSUndoManager); cdecl;
    function undoManager: NSUndoManager; cdecl;
    function hasUnsavedChanges: Boolean; cdecl;
    procedure updateChangeCount(change: UIDocumentChangeKind); cdecl;
    function changeCountTokenForSaveOperation(saveOperation
      : UIDocumentSaveOperation): Pointer; cdecl;
    procedure updateChangeCountWithToken(changeCountToken: Pointer;
      forSaveOperation: UIDocumentSaveOperation); cdecl;
    procedure saveToURL(url: NSURL; forSaveOperation: UIDocumentSaveOperation;
      completionHandler: TUIKitCompletion); cdecl;
    procedure autosaveWithCompletionHandler(completionHandler
      : TUIKitCompletion); cdecl;
    function savingFileType: NSString; cdecl;
    function fileNameExtensionForType(typeName: NSString;
      saveOperation: UIDocumentSaveOperation): NSString; cdecl;
    [MethodName
      ('writeContents:andAttributes:safelyToURL:forSaveOperation:error:')]
    function writeContentsAndAttributesSafelyToURLForSaveOperationError
      (contents: Pointer; andAttributes: NSDictionary; safelyToURL: NSURL;
      forSaveOperation: UIDocumentSaveOperation; error: NSError)
      : Boolean; cdecl;
    [MethodName
      ('writeContents:toURL:forSaveOperation:originalContentsURL:error:')]
    function writeContentsToURLForSaveOperationOriginalContentsURLError
      (contents: Pointer; toURL: NSURL;
      forSaveOperation: UIDocumentSaveOperation; originalContentsURL: NSURL;
      error: NSError): Boolean; cdecl;
    function fileAttributesToWriteToURL(url: NSURL;
      forSaveOperation: UIDocumentSaveOperation; error: NSError)
      : NSDictionary; cdecl;
    function readFromURL(url: NSURL; error: NSError): Boolean; cdecl;
    procedure performAsynchronousFileAccessUsingBlock
      (block: TUIKitAction); cdecl;
    procedure handleError(error: NSError;
      userInteractionPermitted: Boolean); cdecl;
    procedure finishedHandlingError(error: NSError; recovered: Boolean); cdecl;
    procedure userInteractionNoLongerPermittedForError(error: NSError); cdecl;
    procedure revertToContentsOfURL(url: NSURL;
      completionHandler: TUIKitCompletion); cdecl;
    procedure setUserActivity(userActivity: NSUserActivity); cdecl;
    function userActivity: NSUserActivity; cdecl;
    procedure updateUserActivityState(userActivity: NSUserActivity); cdecl;
    procedure restoreUserActivityState(userActivity: NSUserActivity); cdecl;
  end;

  TUIDocument = class(TOCGenericImport<UIDocumentClass, UIDocument>)
  end;

  PUIDocument = Pointer;

  UIDocumentPickerViewControllerClass = interface(UIViewControllerClass)
    ['{02601AE8-23B7-42A9-A944-DA23D001EE79}']
  end;

  UIDocumentPickerViewController = interface(UIViewController)
    ['{78C6A92A-B06B-470E-A4F4-3370C90921E2}']
    function initWithDocumentTypes(allowedUTIs: NSArray;
      inMode: UIDocumentPickerMode): Pointer { instancetype }; cdecl;
    [MethodName('initForOpeningContentTypes:asCopy:')]
    function initForOpeningContentTypesAsCopy(contentTypes: NSArray;
      asCopy: Boolean): Pointer { instancetype }; cdecl;
    [MethodName('initForOpeningContentTypes:')]
    function initForOpeningContentTypes(contentTypes: NSArray)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithURL(url: NSURL; inMode: UIDocumentPickerMode)
      : Pointer { instancetype }; cdecl;
    function initWithURLs(urls: NSArray; inMode: UIDocumentPickerMode)
      : Pointer { instancetype }; cdecl;
    [MethodName('initForExportingURLs:asCopy:')]
    function initForExportingURLsAsCopy(urls: NSArray; asCopy: Boolean)
      : Pointer { instancetype }; cdecl;
    [MethodName('initForExportingURLs:')]
    function initForExportingURLs(urls: NSArray)
      : Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function documentPickerMode: UIDocumentPickerMode; cdecl;
    procedure setAllowsMultipleSelection(allowsMultipleSelection
      : Boolean); cdecl;
    function allowsMultipleSelection: Boolean; cdecl;
    procedure setShouldShowFileExtensions(shouldShowFileExtensions
      : Boolean); cdecl;
    function shouldShowFileExtensions: Boolean; cdecl;
    procedure setDirectoryURL(directoryURL: NSURL); cdecl;
    function directoryURL: NSURL; cdecl;
  end;

  TUIDocumentPickerViewController = class
    (TOCGenericImport<UIDocumentPickerViewControllerClass,
    UIDocumentPickerViewController>)
  end;

  PUIDocumentPickerViewController = Pointer;

  UIDocumentMenuViewControllerClass = interface(UIViewControllerClass)
    ['{CAAED2DE-7307-428E-9672-BF506D421D54}']
  end;

  UIDocumentMenuViewController = interface(UIViewController)
    ['{226D3BCD-3C54-47E3-AAEF-4D7606559B23}']
    function initWithDocumentTypes(allowedUTIs: NSArray;
      inMode: UIDocumentPickerMode): Pointer { instancetype }; cdecl;
    function initWithURL(url: NSURL; inMode: UIDocumentPickerMode)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure addOptionWithTitle(title: NSString; image: UIImage;
      order: UIDocumentMenuOrder; handler: TUIKitAction); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
  end;

  TUIDocumentMenuViewController = class
    (TOCGenericImport<UIDocumentMenuViewControllerClass,
    UIDocumentMenuViewController>)
  end;

  PUIDocumentMenuViewController = Pointer;

  UIDocumentPickerExtensionViewControllerClass = interface
    (UIViewControllerClass)
    ['{F795102C-4397-424E-A401-765BED8C95C8}']
  end;

  UIDocumentPickerExtensionViewController = interface(UIViewController)
    ['{80E8DB26-5E57-490F-BDE6-DBE76D0EC0BA}']
    procedure dismissGrantingAccessToURL(url: NSURL); cdecl;
    procedure prepareForPresentationInMode(mode: UIDocumentPickerMode); cdecl;
    function documentPickerMode: UIDocumentPickerMode; cdecl;
    function originalURL: NSURL; cdecl;
    function validTypes: NSArray; cdecl;
    function providerIdentifier: NSString; cdecl;
    function documentStorageURL: NSURL; cdecl;
  end;

  TUIDocumentPickerExtensionViewController = class
    (TOCGenericImport<UIDocumentPickerExtensionViewControllerClass,
    UIDocumentPickerExtensionViewController>)
  end;

  PUIDocumentPickerExtensionViewController = Pointer;

  UIDocumentPropertiesClass = interface(NSObjectClass)
    ['{1271113F-9ED7-4F2B-B8DE-16F5512834CC}']
  end;

  UIDocumentProperties = interface(NSObject)
    ['{FE9E63CF-FFD7-4E9D-83A3-8653FD4C92A9}']
    function initWithURL(url: NSURL): Pointer { instancetype }; cdecl;
    function initWithMetadata(metadata: LPLinkMetadata)
      : Pointer { instancetype }; cdecl;
    procedure setMetadata(metadata: LPLinkMetadata); cdecl;
    function metadata: LPLinkMetadata; cdecl;
    procedure setDragItemsProvider(dragItemsProvider
      : TUIKitDragItemsProvider); cdecl;
    function dragItemsProvider: TUIKitDragItemsProvider; cdecl;
    procedure setActivityViewControllerProvider(activityViewControllerProvider
      : TUIKitActivityViewControllerProvider); cdecl;
    function activityViewControllerProvider
      : TUIKitActivityViewControllerProvider; cdecl;
    procedure setWantsIconRepresentation(wantsIconRepresentation
      : Boolean); cdecl;
    function wantsIconRepresentation: Boolean; cdecl;
  end;

  TUIDocumentProperties = class(TOCGenericImport<UIDocumentPropertiesClass,
    UIDocumentProperties>)
  end;

  PUIDocumentProperties = Pointer;

  UIDragPreviewClass = interface(NSObjectClass)
    ['{890CE2D4-943C-4BE1-819B-AEA02AA0ACF3}']
    [MethodName('previewForURL:')]
    { class } function previewForURL(url: NSURL)
      : Pointer { instancetype }; cdecl;
    [MethodName('previewForURL:title:')]
    { class } function previewForURLTitle(url: NSURL; title: NSString)
      : Pointer { instancetype }; cdecl;
  end;

  UIDragPreview = interface(NSObject)
    ['{68510748-16AA-4FD3-84A4-47DD4D55EDAF}']
    [MethodName('initWithView:parameters:')]
    function initWithViewParameters(view: UIView;
      parameters: UIDragPreviewParameters): Pointer { instancetype }; cdecl;
    [MethodName('initWithView:')]
    function initWithView(view: UIView): Pointer { instancetype }; cdecl;
    function view: UIView; cdecl;
    function parameters: UIDragPreviewParameters; cdecl;
  end;

  TUIDragPreview = class(TOCGenericImport<UIDragPreviewClass, UIDragPreview>)
  end;

  PUIDragPreview = Pointer;

  UIDynamicItemBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{38CBD870-F4B0-458D-B729-D86A4AFE8332}']
  end;

  UIDynamicItemBehavior = interface(UIDynamicBehavior)
    ['{40F2A303-2BA5-4A8E-8717-6878DAC1B950}']
    function initWithItems(items: NSArray): Pointer { instancetype }; cdecl;
    procedure addItem(item: Pointer); cdecl;
    procedure removeItem(item: Pointer); cdecl;
    function items: NSArray; cdecl;
    procedure setElasticity(elasticity: CGFloat); cdecl;
    function elasticity: CGFloat; cdecl;
    procedure setFriction(friction: CGFloat); cdecl;
    function friction: CGFloat; cdecl;
    procedure setDensity(density: CGFloat); cdecl;
    function density: CGFloat; cdecl;
    procedure setResistance(resistance: CGFloat); cdecl;
    function resistance: CGFloat; cdecl;
    procedure setAngularResistance(angularResistance: CGFloat); cdecl;
    function angularResistance: CGFloat; cdecl;
    procedure setCharge(charge: CGFloat); cdecl;
    function charge: CGFloat; cdecl;
    procedure setAnchored(anchored: Boolean); cdecl;
    function isAnchored: Boolean; cdecl;
    procedure setAllowsRotation(allowsRotation: Boolean); cdecl;
    function allowsRotation: Boolean; cdecl;
    procedure addLinearVelocity(velocity: CGPoint; forItem: Pointer); cdecl;
    function linearVelocityForItem(item: Pointer): CGPoint; cdecl;
    procedure addAngularVelocity(velocity: CGFloat; forItem: Pointer); cdecl;
    function angularVelocityForItem(item: Pointer): CGFloat; cdecl;
  end;

  TUIDynamicItemBehavior = class(TOCGenericImport<UIDynamicItemBehaviorClass,
    UIDynamicItemBehavior>)
  end;

  PUIDynamicItemBehavior = Pointer;

  UIEditMenuConfigurationClass = interface(NSObjectClass)
    ['{09073E80-8972-4525-A5C0-4C8A113A062D}']
    { class } function configurationWithIdentifier(identifier: Pointer;
      sourcePoint: CGPoint): Pointer { instancetype }; cdecl;
  end;

  UIEditMenuConfiguration = interface(NSObject)
    ['{212E3DB4-F219-4AC1-91DD-BC4CC08F5F63}']
    function identifier: Pointer; cdecl;
    function sourcePoint: CGPoint; cdecl;
    procedure setPreferredArrowDirection(preferredArrowDirection
      : UIEditMenuArrowDirection); cdecl;
    function preferredArrowDirection: UIEditMenuArrowDirection; cdecl;
  end;

  TUIEditMenuConfiguration = class
    (TOCGenericImport<UIEditMenuConfigurationClass, UIEditMenuConfiguration>)
  end;

  PUIEditMenuConfiguration = Pointer;

  UIEditMenuInteractionClass = interface(NSObjectClass)
    ['{A6B63674-2569-4210-88DA-CDA606C592CC}']
  end;

  UIEditMenuInteraction = interface(NSObject)
    ['{5503CE68-9B4D-4A72-95D6-E6BA0A41BEB4}']
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    procedure presentEditMenuWithConfiguration(configuration
      : UIEditMenuConfiguration); cdecl;
    procedure dismissMenu; cdecl;
    procedure reloadVisibleMenu; cdecl;
    procedure updateVisibleMenuPositionAnimated(animated: Boolean); cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
  end;

  TUIEditMenuInteraction = class(TOCGenericImport<UIEditMenuInteractionClass,
    UIEditMenuInteraction>)
  end;

  PUIEditMenuInteraction = Pointer;

  UIEventAttributionClass = interface(NSObjectClass)
    ['{2A874EC3-E700-4BA3-A220-27C54B446240}']
  end;

  UIEventAttribution = interface(NSObject)
    ['{5951F032-DB46-442A-9254-FA8E9C6B8E1E}']
    function sourceIdentifier: Byte; cdecl;
    function destinationURL: NSURL; cdecl;
    function reportEndpoint: NSURL; cdecl;
    function sourceDescription: NSString; cdecl;
    function purchaser: NSString; cdecl;
    function initWithSourceIdentifier(sourceIdentifier: Byte;
      destinationURL: NSURL; sourceDescription: NSString; purchaser: NSString)
      : Pointer { instancetype }; cdecl;
  end;

  TUIEventAttribution = class(TOCGenericImport<UIEventAttributionClass,
    UIEventAttribution>)
  end;

  PUIEventAttribution = Pointer;

  UIEventAttributionViewClass = interface(UIViewClass)
    ['{2EF7498F-1B0B-4055-A02E-826878A20413}']
  end;

  UIEventAttributionView = interface(UIView)
    ['{D0E99F75-12AE-45FD-8E82-8B227C5106BC}']
  end;

  TUIEventAttributionView = class(TOCGenericImport<UIEventAttributionViewClass,
    UIEventAttributionView>)
  end;

  PUIEventAttributionView = Pointer;

  UIFeedbackGeneratorClass = interface(NSObjectClass)
    ['{8653B780-B506-4F7E-8700-69F08B0EE454}']
  end;

  UIFeedbackGenerator = interface(NSObject)
    ['{4FE485C4-BCBE-44A4-9E3A-234747707A58}']
    procedure prepare; cdecl;
  end;

  TUIFeedbackGenerator = class(TOCGenericImport<UIFeedbackGeneratorClass,
    UIFeedbackGenerator>)
  end;

  PUIFeedbackGenerator = Pointer;

  UIRegionClass = interface(NSObjectClass)
    ['{199E9348-20B1-4942-857F-38170F83EF04}']
  end;

  UIRegion = interface(NSObject)
    ['{DACAEA2B-ECE4-404E-9E8A-96EFFED6FA65}']
    procedure setInfiniteRegion(infiniteRegion: UIRegion); cdecl;
    function infiniteRegion: UIRegion; cdecl;
    function initWithRadius(radius: CGFloat): Pointer { instancetype }; cdecl;
    function initWithSize(size: CGSize): Pointer { instancetype }; cdecl;
    function inverseRegion: Pointer { instancetype }; cdecl;
    function regionByUnionWithRegion(region: UIRegion)
      : Pointer { instancetype }; cdecl;
    function regionByDifferenceFromRegion(region: UIRegion)
      : Pointer { instancetype }; cdecl;
    function regionByIntersectionWithRegion(region: UIRegion)
      : Pointer { instancetype }; cdecl;
    function containsPoint(point: CGPoint): Boolean; cdecl;
  end;

  TUIRegion = class(TOCGenericImport<UIRegionClass, UIRegion>)
  end;

  PUIRegion = Pointer;

  UIFieldBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{5DB58F50-D6D5-4360-88A7-7BAA5922D695}']
    { class } function dragField: Pointer { instancetype }; cdecl;
    { class } function vortexField: Pointer { instancetype }; cdecl;
    { class } function radialGravityFieldWithPosition(position: CGPoint)
      : Pointer { instancetype }; cdecl;
    { class } function linearGravityFieldWithVector(direction: CGVector)
      : Pointer { instancetype }; cdecl;
    { class } function velocityFieldWithVector(direction: CGVector)
      : Pointer { instancetype }; cdecl;
    { class } function noiseFieldWithSmoothness(smoothness: CGFloat;
      animationSpeed: CGFloat): Pointer { instancetype }; cdecl;
    { class } function turbulenceFieldWithSmoothness(smoothness: CGFloat;
      animationSpeed: CGFloat): Pointer { instancetype }; cdecl;
    { class } function springField: Pointer { instancetype }; cdecl;
    { class } function electricField: Pointer { instancetype }; cdecl;
    { class } function magneticField: Pointer { instancetype }; cdecl;
    { class } function fieldWithEvaluationBlock(block: TUIKitBlock2)
      : Pointer { instancetype }; cdecl;
  end;

  UIFieldBehavior = interface(UIDynamicBehavior)
    ['{15F48BB0-CA69-4395-AF0E-9E9DAF47A546}']
    procedure addItem(item: Pointer); cdecl;
    procedure removeItem(item: Pointer); cdecl;
    function items: NSArray; cdecl;
    procedure setPosition(position: CGPoint); cdecl;
    function position: CGPoint; cdecl;
    procedure setRegion(region: UIRegion); cdecl;
    function region: UIRegion; cdecl;
    procedure setStrength(strength: CGFloat); cdecl;
    function strength: CGFloat; cdecl;
    procedure setFalloff(falloff: CGFloat); cdecl;
    function falloff: CGFloat; cdecl;
    procedure setMinimumRadius(minimumRadius: CGFloat); cdecl;
    function minimumRadius: CGFloat; cdecl;
    procedure setDirection(direction: CGVector); cdecl;
    function direction: CGVector; cdecl;
    procedure setSmoothness(smoothness: CGFloat); cdecl;
    function smoothness: CGFloat; cdecl;
    procedure setAnimationSpeed(animationSpeed: CGFloat); cdecl;
    function animationSpeed: CGFloat; cdecl;
  end;

  TUIFieldBehavior = class(TOCGenericImport<UIFieldBehaviorClass,
    UIFieldBehavior>)
  end;

  PUIFieldBehavior = Pointer;

  UITextSearchOptionsClass = interface(NSObjectClass)
    ['{63CD50AE-63C3-44AE-A63D-D3B5D3F7CDB7}']
  end;

  UITextSearchOptions = interface(NSObject)
    ['{3AFC4DA2-D863-4A30-AF7A-D92CE90319F8}']
    function wordMatchMethod: UITextSearchMatchMethod; cdecl;
    function stringCompareOptions: NSStringCompareOptions; cdecl;
  end;

  TUITextSearchOptions = class(TOCGenericImport<UITextSearchOptionsClass,
    UITextSearchOptions>)
  end;

  PUITextSearchOptions = Pointer;

  UIFindSessionClass = interface(NSObjectClass)
    ['{9082F7D7-11D1-4F51-8C5E-A0141AF6E998}']
  end;

  UIFindSession = interface(NSObject)
    ['{361946EB-88A7-4498-BE98-947BD0FCBCB8}']
    function resultCount: NSInteger; cdecl;
    function highlightedResultIndex: NSInteger; cdecl;
    procedure setSearchResultDisplayStyle(searchResultDisplayStyle
      : UIFindSessionSearchResultDisplayStyle); cdecl;
    function searchResultDisplayStyle
      : UIFindSessionSearchResultDisplayStyle; cdecl;
    function supportsReplacement: Boolean; cdecl;
    function allowsReplacementForCurrentlyHighlightedResult: Boolean; cdecl;
    procedure performSearchWithQuery(query: NSString;
      options: UITextSearchOptions); cdecl;
    procedure performSingleReplacementWithSearchQuery(searchQuery: NSString;
      replacementString: NSString; options: UITextSearchOptions); cdecl;
    procedure replaceAllInstancesOfSearchQuery(searchQuery: NSString;
      withReplacementString: NSString; options: UITextSearchOptions); cdecl;
    procedure highlightNextResultInDirection
      (direction: UITextStorageDirection); cdecl;
    procedure invalidateFoundResults; cdecl;
    function allowsReplacement: Boolean; cdecl;
  end;

  TUIFindSession = class(TOCGenericImport<UIFindSessionClass, UIFindSession>)
  end;

  PUIFindSession = Pointer;

  UITextSearchingFindSessionClass = interface(UIFindSessionClass)
    ['{FE7DA270-C699-41DC-95BE-CD92B41011E5}']
  end;

  UITextSearchingFindSession = interface(UIFindSession)
    ['{CC370C2E-E8AA-4BFA-8D47-E7AAA76B8BC7}']
    function searchableObject: Pointer; cdecl;
    function initWithSearchableObject(searchableObject: Pointer)
      : Pointer { instancetype }; cdecl;
  end;

  TUITextSearchingFindSession = class
    (TOCGenericImport<UITextSearchingFindSessionClass,
    UITextSearchingFindSession>)
  end;

  PUITextSearchingFindSession = Pointer;

  UIFindInteractionClass = interface(NSObjectClass)
    ['{1C0B53BA-A466-44EA-9B64-31261FD36A25}']
  end;

  UIFindInteraction = interface(NSObject)
    ['{E70C8C01-8FDF-4C27-832C-2C593BB074B7}']
    function isFindNavigatorVisible: Boolean; cdecl;
    function activeFindSession: UIFindSession; cdecl;
    procedure setSearchText(searchText: NSString); cdecl;
    function searchText: NSString; cdecl;
    procedure setReplacementText(replacementText: NSString); cdecl;
    function replacementText: NSString; cdecl;
    procedure setOptionsMenuProvider(optionsMenuProvider
      : TUIKitOptionsMenuProvider); cdecl;
    function optionsMenuProvider: TUIKitOptionsMenuProvider; cdecl;
    function delegate: Pointer; cdecl;
    function initWithSessionDelegate(sessionDelegate: Pointer)
      : Pointer { instancetype }; cdecl;
    procedure presentFindNavigatorShowingReplace(showingReplace
      : Boolean); cdecl;
    procedure dismissFindNavigator; cdecl;
    procedure findNext; cdecl;
    procedure findPrevious; cdecl;
    procedure updateResultCount; cdecl;
  end;

  TUIFindInteraction = class(TOCGenericImport<UIFindInteractionClass,
    UIFindInteraction>)
  end;

  PUIFindInteraction = Pointer;

  UIFocusSystemClass = interface(NSObjectClass)
    ['{6FF02F16-A82D-4891-ACE9-73332FEA36B2}']
    { class } function focusSystemForEnvironment(environment: Pointer)
      : UIFocusSystem; cdecl;
    { class } function environment(environment: Pointer;
      containsEnvironment: Pointer): Boolean; cdecl;
    { class } procedure registerURL(soundFileURL: NSURL;
      forSoundIdentifier: UIFocusSoundIdentifier); cdecl;
  end;

  UIFocusSystem = interface(NSObject)
    ['{9EC414DE-1A33-46F4-AE51-D859DE0B6E26}']
    function focusedItem: Pointer; cdecl;
    procedure requestFocusUpdateToEnvironment(environment: Pointer); cdecl;
    procedure updateFocusIfNeeded; cdecl;
  end;

  TUIFocusSystem = class(TOCGenericImport<UIFocusSystemClass, UIFocusSystem>)
  end;

  PUIFocusSystem = Pointer;

  UIFocusDebuggerClass = interface(NSObjectClass)
    ['{5251D908-48A1-4D57-819C-8CD244E539DC}']
    { class } function help: Pointer; cdecl;
    { class } function status: Pointer; cdecl;
    { class } function checkFocusabilityForItem(item: Pointer): Pointer; cdecl;
    { class } function simulateFocusUpdateRequestFromEnvironment
      (environment: Pointer): Pointer; cdecl;
    { class } function focusGroupsForEnvironment(environment: Pointer)
      : Pointer; cdecl;
    { class } function preferredFocusEnvironmentsForEnvironment
      (environment: Pointer): Pointer; cdecl;
  end;

  UIFocusDebugger = interface(NSObject)
    ['{EFD15780-5230-44CE-88CD-78DA76BE89AC}']
  end;

  TUIFocusDebugger = class(TOCGenericImport<UIFocusDebuggerClass,
    UIFocusDebugger>)
  end;

  PUIFocusDebugger = Pointer;

  UIFocusHaloEffectClass = interface(UIFocusEffectClass)
    ['{859DAB0C-BD03-4145-B400-3A0354C89301}']
    { class } function effectWithRect(rect: CGRect)
      : Pointer { instancetype }; cdecl;
    { class } function effectWithRoundedRect(rect: CGRect;
      cornerRadius: CGFloat; curve: CALayerCornerCurve)
      : Pointer { instancetype }; cdecl;
    { class } function effectWithPath(bezierPath: UIBezierPath)
      : Pointer { instancetype }; cdecl;
  end;

  UIFocusHaloEffect = interface(UIFocusEffect)
    ['{DAB8F988-E418-4B60-A922-31D61945AE95}']
    procedure setContainerView(containerView: UIView); cdecl;
    function containerView: UIView; cdecl;
    procedure setReferenceView(referenceView: UIView); cdecl;
    function referenceView: UIView; cdecl;
    procedure setPosition(position: UIFocusHaloEffectPosition); cdecl;
    function position: UIFocusHaloEffectPosition; cdecl;
  end;

  TUIFocusHaloEffect = class(TOCGenericImport<UIFocusHaloEffectClass,
    UIFocusHaloEffect>)
  end;

  PUIFocusHaloEffect = Pointer;

  UISceneOpenURLOptionsClass = interface(NSObjectClass)
    ['{279457F8-9C8D-4342-B024-0E0A5C6E5D36}']
  end;

  UISceneOpenURLOptions = interface(NSObject)
    ['{97B7052B-9F3E-4FED-88C5-94D6328FB864}']
    function sourceApplication: NSString; cdecl;
    function annotation: Pointer; cdecl;
    function openInPlace: Boolean; cdecl;
    function eventAttribution: UIEventAttribution; cdecl;
  end;

  TUISceneOpenURLOptions = class(TOCGenericImport<UISceneOpenURLOptionsClass,
    UISceneOpenURLOptions>)
  end;

  PUISceneOpenURLOptions = Pointer;

  UISceneSizeRestrictionsClass = interface(NSObjectClass)
    ['{DD4A525F-BB80-4EC2-9F32-B1E768BA386A}']
  end;

  UISceneSizeRestrictions = interface(NSObject)
    ['{D0A88106-9262-43CA-9568-577958324BD7}']
    procedure setMinimumSize(minimumSize: CGSize); cdecl;
    function minimumSize: CGSize; cdecl;
    procedure setMaximumSize(maximumSize: CGSize); cdecl;
    function maximumSize: CGSize; cdecl;
    procedure setAllowsFullScreen(allowsFullScreen: Boolean); cdecl;
    function allowsFullScreen: Boolean; cdecl;
  end;

  TUISceneSizeRestrictions = class
    (TOCGenericImport<UISceneSizeRestrictionsClass, UISceneSizeRestrictions>)
  end;

  PUISceneSizeRestrictions = Pointer;

  UISceneWindowingBehaviorsClass = interface(NSObjectClass)
    ['{87A1899B-559E-4926-9667-FA87AC77C740}']
  end;

  UISceneWindowingBehaviors = interface(NSObject)
    ['{4A99C57B-2241-4E95-A865-D7453C2AC959}']
    procedure setClosable(closable: Boolean); cdecl;
    function isClosable: Boolean; cdecl;
    procedure setMiniaturizable(miniaturizable: Boolean); cdecl;
    function isMiniaturizable: Boolean; cdecl;
  end;

  TUISceneWindowingBehaviors = class
    (TOCGenericImport<UISceneWindowingBehaviorsClass,
    UISceneWindowingBehaviors>)
  end;

  PUISceneWindowingBehaviors = Pointer;

  UIWindowSceneGeometryClass = interface(NSObjectClass)
    ['{26E369D3-7D30-456D-A891-A4AD2F702ECE}']
  end;

  UIWindowSceneGeometry = interface(NSObject)
    ['{04ABA280-7633-41F3-ACA4-A0F04D442DF6}']
    function systemFrame: CGRect; cdecl;
    function interfaceOrientation: UIInterfaceOrientation; cdecl;
  end;

  TUIWindowSceneGeometry = class(TOCGenericImport<UIWindowSceneGeometryClass,
    UIWindowSceneGeometry>)
  end;

  PUIWindowSceneGeometry = Pointer;

  UIWindowSceneGeometryPreferencesClass = interface(NSObjectClass)
    ['{67BAB962-8703-48B9-BE06-F9CA931E3DA2}']
  end;

  UIWindowSceneGeometryPreferences = interface(NSObject)
    ['{276140EB-BF61-4C3F-B6B3-048B20850A8C}']
  end;

  TUIWindowSceneGeometryPreferences = class
    (TOCGenericImport<UIWindowSceneGeometryPreferencesClass,
    UIWindowSceneGeometryPreferences>)
  end;

  PUIWindowSceneGeometryPreferences = Pointer;

  UIWindowSceneDestructionRequestOptionsClass = interface
    (UISceneDestructionRequestOptionsClass)
    ['{376A8B97-6B9D-4607-9DCA-92244148D9E1}']
  end;

  UIWindowSceneDestructionRequestOptions = interface
    (UISceneDestructionRequestOptions)
    ['{0D58C8BD-BCD3-49AB-B6E7-5B9C6428591F}']
    procedure setWindowDismissalAnimation(windowDismissalAnimation
      : UIWindowSceneDismissalAnimation); cdecl;
    function windowDismissalAnimation: UIWindowSceneDismissalAnimation; cdecl;
  end;

  TUIWindowSceneDestructionRequestOptions = class
    (TOCGenericImport<UIWindowSceneDestructionRequestOptionsClass,
    UIWindowSceneDestructionRequestOptions>)
  end;

  PUIWindowSceneDestructionRequestOptions = Pointer;

  UIFontMetricsClass = interface(NSObjectClass)
    ['{8945F5AB-820A-487C-9B29-7B1667B707ED}']
    { class } function metricsForTextStyle(textStyle: UIFontTextStyle)
      : Pointer { instancetype }; cdecl;
  end;

  UIFontMetrics = interface(NSObject)
    ['{782AD00B-9723-49A0-B233-C72AD73AFE1B}']
    procedure setDefaultMetrics(defaultMetrics: UIFontMetrics); cdecl;
    function defaultMetrics: UIFontMetrics; cdecl;
    function initForTextStyle(textStyle: UIFontTextStyle)
      : Pointer { instancetype }; cdecl;
    [MethodName('scaledFontForFont:')]
    function scaledFontForFont(font: UIFont): UIFont; cdecl;
    [MethodName('scaledFontForFont:maximumPointSize:')]
    function scaledFontForFontMaximumPointSize(font: UIFont;
      maximumPointSize: CGFloat): UIFont; cdecl;
    [MethodName('scaledFontForFont:compatibleWithTraitCollection:')]
    function scaledFontForFontCompatibleWithTraitCollection(font: UIFont;
      compatibleWithTraitCollection: UITraitCollection): UIFont; cdecl;
    [MethodName
      ('scaledFontForFont:maximumPointSize:compatibleWithTraitCollection:')]
    function scaledFontForFontMaximumPointSizeCompatibleWithTraitCollection
      (font: UIFont; maximumPointSize: CGFloat;
      compatibleWithTraitCollection: UITraitCollection): UIFont; cdecl;
    [MethodName('scaledValueForValue:')]
    function scaledValueForValue(value: CGFloat): CGFloat; cdecl;
    [MethodName('scaledValueForValue:compatibleWithTraitCollection:')]
    function scaledValueForValueCompatibleWithTraitCollection(value: CGFloat;
      compatibleWithTraitCollection: UITraitCollection): CGFloat; cdecl;
  end;

  TUIFontMetrics = class(TOCGenericImport<UIFontMetricsClass, UIFontMetrics>)
  end;

  PUIFontMetrics = Pointer;

  UIFontPickerViewControllerConfigurationClass = interface(NSObjectClass)
    ['{76F61EFB-7F11-4271-A970-229493D0E6C6}']
    { class } function filterPredicateForFilteredLanguages(filteredLanguages
      : NSArray): NSPredicate; cdecl;
  end;

  UIFontPickerViewControllerConfiguration = interface(NSObject)
    ['{AEA96758-CA0E-46DA-9DDA-8265A65C27E8}']
    procedure setIncludeFaces(includeFaces: Boolean); cdecl;
    function includeFaces: Boolean; cdecl;
    procedure setDisplayUsingSystemFont(displayUsingSystemFont: Boolean); cdecl;
    function displayUsingSystemFont: Boolean; cdecl;
    procedure setFilteredTraits(filteredTraits
      : UIFontDescriptorSymbolicTraits); cdecl;
    function filteredTraits: UIFontDescriptorSymbolicTraits; cdecl;
    procedure setFilteredLanguagesPredicate(filteredLanguagesPredicate
      : NSPredicate); cdecl;
    function filteredLanguagesPredicate: NSPredicate; cdecl;
  end;

  TUIFontPickerViewControllerConfiguration = class
    (TOCGenericImport<UIFontPickerViewControllerConfigurationClass,
    UIFontPickerViewControllerConfiguration>)
  end;

  PUIFontPickerViewControllerConfiguration = Pointer;

  UIFontPickerViewControllerClass = interface(UIViewControllerClass)
    ['{515D9E20-D527-40E1-9C83-9FFE64EDAD73}']
  end;

  UIFontPickerViewController = interface(UIViewController)
    ['{11AF9513-3B76-4967-AD55-DD74B65D9B03}']
    function initWithConfiguration(configuration
      : UIFontPickerViewControllerConfiguration)
      : Pointer { instancetype }; cdecl;
    function configuration: UIFontPickerViewControllerConfiguration; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setSelectedFontDescriptor(selectedFontDescriptor
      : UIFontDescriptor); cdecl;
    function selectedFontDescriptor: UIFontDescriptor; cdecl;
  end;

  TUIFontPickerViewController = class
    (TOCGenericImport<UIFontPickerViewControllerClass,
    UIFontPickerViewController>)
  end;

  PUIFontPickerViewController = Pointer;

  UIGraphicsRendererContextClass = interface(NSObjectClass)
    ['{F204DE75-119F-4AFA-B289-34D813CC2C9C}']
  end;

  UIGraphicsRendererContext = interface(NSObject)
    ['{B42D5F1A-2019-44E8-B662-EA5B175518FF}']
    function CGContext: CGContextRef; cdecl;
    function format: UIGraphicsRendererFormat; cdecl;
    [MethodName('fillRect:')]
    procedure fillRect(rect: CGRect); cdecl;
    [MethodName('fillRect:blendMode:')]
    procedure fillRectBlendMode(rect: CGRect; blendMode: CGBlendMode); cdecl;
    [MethodName('strokeRect:')]
    procedure strokeRect(rect: CGRect); cdecl;
    [MethodName('strokeRect:blendMode:')]
    procedure strokeRectBlendMode(rect: CGRect; blendMode: CGBlendMode); cdecl;
    procedure clipToRect(rect: CGRect); cdecl;
  end;

  TUIGraphicsRendererContext = class
    (TOCGenericImport<UIGraphicsRendererContextClass,
    UIGraphicsRendererContext>)
  end;

  PUIGraphicsRendererContext = Pointer;

  UIGraphicsRendererClass = interface(NSObjectClass)
    ['{EB5587D2-2068-4A4F-ADEF-9114427E30AD}']
    { class } function rendererContextClass: Pointer; cdecl;
    { class } function contextWithFormat(format: UIGraphicsRendererFormat)
      : CGContextRef; cdecl;
    { class } procedure prepareCGContext(context: CGContextRef;
      withRendererContext: UIGraphicsRendererContext); cdecl;
  end;

  UIGraphicsRenderer = interface(NSObject)
    ['{E3EEEDBF-C31C-49B5-BE21-D88E674FE04F}']
    [MethodName('initWithBounds:')]
    function initWithBounds(bounds: CGRect): Pointer { instancetype }; cdecl;
    [MethodName('initWithBounds:format:')]
    function initWithBoundsFormat(bounds: CGRect;
      format: UIGraphicsRendererFormat): Pointer { instancetype }; cdecl;
    function format: UIGraphicsRendererFormat; cdecl;
    function allowsImageOutput: Boolean; cdecl;
    function runDrawingActions(drawingActions: UIGraphicsDrawingActions;
      completionActions: UIGraphicsDrawingActions; error: NSError)
      : Boolean; cdecl;
  end;

  TUIGraphicsRenderer = class(TOCGenericImport<UIGraphicsRendererClass,
    UIGraphicsRenderer>)
  end;

  PUIGraphicsRenderer = Pointer;

  UIGraphicsImageRendererContextClass = interface
    (UIGraphicsRendererContextClass)
    ['{610890A0-58A8-43E2-AF76-268BC9E358D6}']
  end;

  UIGraphicsImageRendererContext = interface(UIGraphicsRendererContext)
    ['{77306594-1EBD-458B-BDEB-4F2E0A48AE80}']
    function currentImage: UIImage; cdecl;
  end;

  TUIGraphicsImageRendererContext = class
    (TOCGenericImport<UIGraphicsImageRendererContextClass,
    UIGraphicsImageRendererContext>)
  end;

  PUIGraphicsImageRendererContext = Pointer;

  UIGraphicsImageRendererClass = interface(UIGraphicsRendererClass)
    ['{9E25C744-F55F-4DE1-BD79-1DD484779ECF}']
  end;

  UIGraphicsImageRenderer = interface(UIGraphicsRenderer)
    ['{2AEC76E4-8516-4F44-A715-DEBC7EA81744}']
    [MethodName('initWithSize:')]
    function initWithSize(size: CGSize): Pointer { instancetype }; cdecl;
    [MethodName('initWithSize:format:')]
    function initWithSizeFormat(size: CGSize;
      format: UIGraphicsImageRendererFormat): Pointer { instancetype }; cdecl;
    function initWithBounds(bounds: CGRect;
      format: UIGraphicsImageRendererFormat): Pointer { instancetype }; cdecl;
    function imageWithActions(actions: UIGraphicsImageDrawingActions)
      : UIImage; cdecl;
    function PNGDataWithActions(actions: UIGraphicsImageDrawingActions)
      : NSData; cdecl;
    function JPEGDataWithCompressionQuality(compressionQuality: CGFloat;
      actions: UIGraphicsImageDrawingActions): NSData; cdecl;
  end;

  TUIGraphicsImageRenderer = class
    (TOCGenericImport<UIGraphicsImageRendererClass, UIGraphicsImageRenderer>)
  end;

  PUIGraphicsImageRenderer = Pointer;

  UIGraphicsPDFRendererContextClass = interface(UIGraphicsRendererContextClass)
    ['{F6F419F0-A375-4F82-9D09-14A28B841E55}']
  end;

  UIGraphicsPDFRendererContext = interface(UIGraphicsRendererContext)
    ['{AA29380D-AF05-4C4F-9CFC-A1B0766C6C03}']
    function pdfContextBounds: CGRect; cdecl;
    procedure beginPage; cdecl;
    procedure beginPageWithBounds(bounds: CGRect;
      pageInfo: NSDictionary); cdecl;
    procedure setURL(url: NSURL; forRect: CGRect); cdecl;
    procedure addDestinationWithName(name: NSString; atPoint: CGPoint); cdecl;
    procedure setDestinationWithName(name: NSString; forRect: CGRect); cdecl;
  end;

  TUIGraphicsPDFRendererContext = class
    (TOCGenericImport<UIGraphicsPDFRendererContextClass,
    UIGraphicsPDFRendererContext>)
  end;

  PUIGraphicsPDFRendererContext = Pointer;

  UIGraphicsPDFRendererFormatClass = interface(UIGraphicsRendererFormatClass)
    ['{CD4DDFC6-2D10-4E98-8709-C4B3CF876854}']
  end;

  UIGraphicsPDFRendererFormat = interface(UIGraphicsRendererFormat)
    ['{04AA0D6E-1511-4426-A624-A46471477F6D}']
    procedure setDocumentInfo(documentInfo: NSDictionary); cdecl;
    function documentInfo: NSDictionary; cdecl;
  end;

  TUIGraphicsPDFRendererFormat = class
    (TOCGenericImport<UIGraphicsPDFRendererFormatClass,
    UIGraphicsPDFRendererFormat>)
  end;

  PUIGraphicsPDFRendererFormat = Pointer;

  UIGraphicsPDFRendererClass = interface(UIGraphicsRendererClass)
    ['{FA4A7F6A-D92B-4DBC-9EE2-A17708DDAAF0}']
  end;

  UIGraphicsPDFRenderer = interface(UIGraphicsRenderer)
    ['{46945472-BFE2-4C07-8EC3-38E319EC2A5F}']
    function initWithBounds(bounds: CGRect; format: UIGraphicsPDFRendererFormat)
      : Pointer { instancetype }; cdecl;
    function writePDFToURL(url: NSURL; withActions: UIGraphicsPDFDrawingActions;
      error: NSError): Boolean; cdecl;
    function PDFDataWithActions(actions: UIGraphicsPDFDrawingActions)
      : NSData; cdecl;
  end;

  TUIGraphicsPDFRenderer = class(TOCGenericImport<UIGraphicsPDFRendererClass,
    UIGraphicsPDFRenderer>)
  end;

  PUIGraphicsPDFRenderer = Pointer;

  UIGravityBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{EA37F2FB-AF34-4283-BDAB-9C157EB1E10D}']
  end;

  UIGravityBehavior = interface(UIDynamicBehavior)
    ['{B3632B4A-6252-492C-ABC6-5DE0137C5C2A}']
    function initWithItems(items: NSArray): Pointer { instancetype }; cdecl;
    procedure addItem(item: Pointer); cdecl;
    procedure removeItem(item: Pointer); cdecl;
    function items: NSArray; cdecl;
    procedure setGravityDirection(gravityDirection: CGVector); cdecl;
    function gravityDirection: CGVector; cdecl;
    [MethodName('setAngle:')]
    procedure setAngle(angle: CGFloat); cdecl;
    function angle: CGFloat; cdecl;
    procedure setMagnitude(magnitude: CGFloat); cdecl;
    function magnitude: CGFloat; cdecl;
    [MethodName('setAngle:magnitude:')]
    procedure setAngleMagnitude(angle: CGFloat; magnitude: CGFloat); cdecl;
  end;

  TUIGravityBehavior = class(TOCGenericImport<UIGravityBehaviorClass,
    UIGravityBehavior>)
  end;

  PUIGravityBehavior = Pointer;

  UIHoverGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{39F66999-92F9-4BC3-9BB8-8E90E9F5F04A}']
  end;

  UIHoverGestureRecognizer = interface(UIGestureRecognizer)
    ['{81EDA1D3-36EB-40A5-8DF1-D4B7DEF61182}']
    function zOffset: CGFloat; cdecl;
    function azimuthAngleInView(view: UIView): CGFloat; cdecl;
    function azimuthUnitVectorInView(view: UIView): CGVector; cdecl;
    function altitudeAngle: CGFloat; cdecl;
  end;

  TUIHoverGestureRecognizer = class
    (TOCGenericImport<UIHoverGestureRecognizerClass, UIHoverGestureRecognizer>)
  end;

  PUIHoverGestureRecognizer = Pointer;

  UITapGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{B6950EF0-09FF-48F7-9E53-045D5DF0E290}']
  end;

  UITapGestureRecognizer = interface(UIGestureRecognizer)
    ['{DCCD76D7-D196-48E4-BFD5-45996950B6CC}']
    procedure setNumberOfTapsRequired(numberOfTapsRequired: NSUInteger); cdecl;
    function numberOfTapsRequired: NSUInteger; cdecl;
    procedure setNumberOfTouchesRequired(numberOfTouchesRequired
      : NSUInteger); cdecl;
    function numberOfTouchesRequired: NSUInteger; cdecl;
    procedure setButtonMaskRequired(buttonMaskRequired
      : UIEventButtonMask); cdecl;
    function buttonMaskRequired: UIEventButtonMask; cdecl;
  end;

  TUITapGestureRecognizer = class(TOCGenericImport<UITapGestureRecognizerClass,
    UITapGestureRecognizer>)
  end;

  PUITapGestureRecognizer = Pointer;

  UINavigationBarClass = interface(UIViewClass)
    ['{BA71F5FF-49AF-4527-9FAA-7F12A37471AB}']
  end;

  UINavigationBar = interface(UIView)
    ['{7180E56C-7558-4F19-9FCD-5880496EA392}']
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    function barStyle: UIBarStyle; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    function isTranslucent: Boolean; cdecl;
    procedure pushNavigationItem(item: UINavigationItem;
      animated: Boolean); cdecl;
    function popNavigationItemAnimated(animated: Boolean)
      : UINavigationItem; cdecl;
    function topItem: UINavigationItem; cdecl;
    function backItem: UINavigationItem; cdecl;
    [MethodName('setItems:')]
    procedure setItems(items: NSArray); cdecl;
    function items: NSArray; cdecl;
    [MethodName('setItems:animated:')]
    procedure setItemsAnimated(items: NSArray; animated: Boolean); cdecl;
    procedure setPrefersLargeTitles(prefersLargeTitles: Boolean); cdecl;
    function prefersLargeTitles: Boolean; cdecl;
    function currentNSToolbarSection: UINavigationBarNSToolbarSection; cdecl;
    function behavioralStyle: UIBehavioralStyle; cdecl;
    procedure setPreferredBehavioralStyle(preferredBehavioralStyle
      : UIBehavioralStyle); cdecl;
    function preferredBehavioralStyle: UIBehavioralStyle; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    function barTintColor: UIColor; cdecl;
    [MethodName('setBackgroundImage:forBarPosition:barMetrics:')]
    procedure setBackgroundImageForBarPositionBarMetrics(backgroundImage
      : UIImage; forBarPosition: UIBarPosition;
      barMetrics: UIBarMetrics); cdecl;
    function backgroundImageForBarPosition(barPosition: UIBarPosition;
      barMetrics: UIBarMetrics): UIImage; cdecl;
    [MethodName('setBackgroundImage:forBarMetrics:')]
    procedure setBackgroundImageForBarMetrics(backgroundImage: UIImage;
      forBarMetrics: UIBarMetrics); cdecl;
    function backgroundImageForBarMetrics(barMetrics: UIBarMetrics)
      : UIImage; cdecl;
    procedure setShadowImage(shadowImage: UIImage); cdecl;
    function shadowImage: UIImage; cdecl;
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
    procedure setLargeTitleTextAttributes(largeTitleTextAttributes
      : NSDictionary); cdecl;
    function largeTitleTextAttributes: NSDictionary; cdecl;
    procedure setTitleVerticalPositionAdjustment(adjustment: CGFloat;
      forBarMetrics: UIBarMetrics); cdecl;
    function titleVerticalPositionAdjustmentForBarMetrics
      (barMetrics: UIBarMetrics): CGFloat; cdecl;
    procedure setBackIndicatorImage(backIndicatorImage: UIImage); cdecl;
    function backIndicatorImage: UIImage; cdecl;
    procedure setBackIndicatorTransitionMaskImage
      (backIndicatorTransitionMaskImage: UIImage); cdecl;
    function backIndicatorTransitionMaskImage: UIImage; cdecl;
    procedure setStandardAppearance(standardAppearance
      : UINavigationBarAppearance); cdecl;
    function standardAppearance: UINavigationBarAppearance; cdecl;
    procedure setCompactAppearance(compactAppearance
      : UINavigationBarAppearance); cdecl;
    function compactAppearance: UINavigationBarAppearance; cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance
      : UINavigationBarAppearance); cdecl;
    function scrollEdgeAppearance: UINavigationBarAppearance; cdecl;
    procedure setCompactScrollEdgeAppearance(compactScrollEdgeAppearance
      : UINavigationBarAppearance); cdecl;
    function compactScrollEdgeAppearance: UINavigationBarAppearance; cdecl;
  end;

  TUINavigationBar = class(TOCGenericImport<UINavigationBarClass,
    UINavigationBar>)
  end;

  PUINavigationBar = Pointer;

  UINavigationControllerClass = interface(UIViewControllerClass)
    ['{BAA51C21-9F1C-45D0-93FD-9CC667344DA4}']
  end;

  UINavigationController = interface(UIViewController)
    ['{244CC55B-D6A9-4D70-829C-EC3A30BD1A17}']
    function initWithNavigationBarClass(navigationBarClass: Pointer;
      toolbarClass: Pointer): Pointer { instancetype }; cdecl;
    function initWithRootViewController(rootViewController: UIViewController)
      : Pointer { instancetype }; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(aDecoder: NSCoder): Pointer { instancetype }; cdecl;
    procedure pushViewController(viewController: UIViewController;
      animated: Boolean); cdecl;
    function popViewControllerAnimated(animated: Boolean)
      : UIViewController; cdecl;
    function popToViewController(viewController: UIViewController;
      animated: Boolean): NSArray; cdecl;
    function popToRootViewControllerAnimated(animated: Boolean): NSArray; cdecl;
    function topViewController: UIViewController; cdecl;
    function visibleViewController: UIViewController; cdecl;
    [MethodName('setViewControllers:')]
    procedure setViewControllers(viewControllers: NSArray); cdecl;
    function viewControllers: NSArray; cdecl;
    [MethodName('setViewControllers:animated:')]
    procedure setViewControllersAnimated(viewControllers: NSArray;
      animated: Boolean); cdecl;
    [MethodName('setNavigationBarHidden:')]
    procedure setNavigationBarHidden(navigationBarHidden: Boolean); cdecl;
    function isNavigationBarHidden: Boolean; cdecl;
    [MethodName('setNavigationBarHidden:animated:')]
    procedure setNavigationBarHiddenAnimated(hidden: Boolean;
      animated: Boolean); cdecl;
    function navigationBar: UINavigationBar; cdecl;
    [MethodName('setToolbarHidden:')]
    procedure setToolbarHidden(toolbarHidden: Boolean); cdecl;
    function isToolbarHidden: Boolean; cdecl;
    [MethodName('setToolbarHidden:animated:')]
    procedure setToolbarHiddenAnimated(hidden: Boolean;
      animated: Boolean); cdecl;
    function toolbar: UIToolbar; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function interactivePopGestureRecognizer: UIGestureRecognizer; cdecl;
    procedure showViewController(vc: UIViewController; sender: Pointer); cdecl;
    procedure setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears
      : Boolean); cdecl;
    function hidesBarsWhenKeyboardAppears: Boolean; cdecl;
    procedure setHidesBarsOnSwipe(hidesBarsOnSwipe: Boolean); cdecl;
    function hidesBarsOnSwipe: Boolean; cdecl;
    function barHideOnSwipeGestureRecognizer: UIPanGestureRecognizer; cdecl;
    procedure setHidesBarsWhenVerticallyCompact(hidesBarsWhenVerticallyCompact
      : Boolean); cdecl;
    function hidesBarsWhenVerticallyCompact: Boolean; cdecl;
    procedure setHidesBarsOnTap(hidesBarsOnTap: Boolean); cdecl;
    function hidesBarsOnTap: Boolean; cdecl;
    function barHideOnTapGestureRecognizer: UITapGestureRecognizer; cdecl;
  end;

  TUINavigationController = class(TOCGenericImport<UINavigationControllerClass,
    UINavigationController>)
  end;

  PUINavigationController = Pointer;

  UIImagePickerControllerClass = interface(UINavigationControllerClass)
    ['{17041A1A-ADDB-4EAA-B105-E059A60F2D85}']
    { class } function isSourceTypeAvailable(sourceType
      : UIImagePickerControllerSourceType): Boolean; cdecl;
    { class } function availableMediaTypesForSourceType
      (sourceType: UIImagePickerControllerSourceType): NSArray; cdecl;
    { class } function isCameraDeviceAvailable(cameraDevice
      : UIImagePickerControllerCameraDevice): Boolean; cdecl;
    { class } function isFlashAvailableForCameraDevice
      (cameraDevice: UIImagePickerControllerCameraDevice): Boolean; cdecl;
    { class } function availableCaptureModesForCameraDevice
      (cameraDevice: UIImagePickerControllerCameraDevice): NSArray; cdecl;
  end;

  UIImagePickerController = interface(UINavigationController)
    ['{7D0AC187-01D5-4643-8701-477984F20998}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setSourceType(sourceType
      : UIImagePickerControllerSourceType); cdecl;
    function sourceType: UIImagePickerControllerSourceType; cdecl;
    procedure setMediaTypes(mediaTypes: NSArray); cdecl;
    function mediaTypes: NSArray; cdecl;
    procedure setAllowsEditing(allowsEditing: Boolean); cdecl;
    function allowsEditing: Boolean; cdecl;
    procedure setAllowsImageEditing(allowsImageEditing: Boolean); cdecl;
    function allowsImageEditing: Boolean; cdecl;
    procedure setImageExportPreset(imageExportPreset
      : UIImagePickerControllerImageURLExportPreset); cdecl;
    function imageExportPreset
      : UIImagePickerControllerImageURLExportPreset; cdecl;
    procedure setVideoMaximumDuration(videoMaximumDuration
      : NSTimeInterval); cdecl;
    function videoMaximumDuration: NSTimeInterval; cdecl;
    procedure setVideoQuality(videoQuality
      : UIImagePickerControllerQualityType); cdecl;
    function videoQuality: UIImagePickerControllerQualityType; cdecl;
    procedure setVideoExportPreset(videoExportPreset: NSString); cdecl;
    function videoExportPreset: NSString; cdecl;
    procedure setShowsCameraControls(showsCameraControls: Boolean); cdecl;
    function showsCameraControls: Boolean; cdecl;
    procedure setCameraOverlayView(cameraOverlayView: UIView); cdecl;
    function cameraOverlayView: UIView; cdecl;
    procedure setCameraViewTransform(cameraViewTransform
      : CGAffineTransform); cdecl;
    function cameraViewTransform: CGAffineTransform; cdecl;
    procedure takePicture; cdecl;
    function startVideoCapture: Boolean; cdecl;
    procedure stopVideoCapture; cdecl;
    procedure setCameraCaptureMode(cameraCaptureMode
      : UIImagePickerControllerCameraCaptureMode); cdecl;
    function cameraCaptureMode: UIImagePickerControllerCameraCaptureMode; cdecl;
    procedure setCameraDevice(cameraDevice
      : UIImagePickerControllerCameraDevice); cdecl;
    function cameraDevice: UIImagePickerControllerCameraDevice; cdecl;
    procedure setCameraFlashMode(cameraFlashMode
      : UIImagePickerControllerCameraFlashMode); cdecl;
    function cameraFlashMode: UIImagePickerControllerCameraFlashMode; cdecl;
  end;

  TUIImagePickerController = class
    (TOCGenericImport<UIImagePickerControllerClass, UIImagePickerController>)
  end;

  PUIImagePickerController = Pointer;

  UIImpactFeedbackGeneratorClass = interface(UIFeedbackGeneratorClass)
    ['{435D056C-1A68-4C0F-8026-2C22DC35C447}']
  end;

  UIImpactFeedbackGenerator = interface(UIFeedbackGenerator)
    ['{8E316CE9-B60E-4BB7-97FB-E5BAFD0FB1D3}']
    function initWithStyle(style: UIImpactFeedbackStyle)
      : Pointer { instancetype }; cdecl;
    procedure impactOccurred; cdecl;
    procedure impactOccurredWithIntensity(intensity: CGFloat); cdecl;
  end;

  TUIImpactFeedbackGenerator = class
    (TOCGenericImport<UIImpactFeedbackGeneratorClass,
    UIImpactFeedbackGenerator>)
  end;

  PUIImpactFeedbackGenerator = Pointer;

  UIIndirectScribbleInteractionClass = interface(NSObjectClass)
    ['{DB48904B-30DC-4113-8F1E-8921BC054E32}']
  end;

  UIIndirectScribbleInteraction = interface(NSObject)
    ['{AEEF50C5-CA6E-4DB9-A1F9-646D52EAC85F}']
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    function delegate: Pointer; cdecl;
    function isHandlingWriting: Boolean; cdecl;
  end;

  TUIIndirectScribbleInteraction = class
    (TOCGenericImport<UIIndirectScribbleInteractionClass,
    UIIndirectScribbleInteraction>)
  end;

  PUIIndirectScribbleInteraction = Pointer;

  UIInputViewClass = interface(UIViewClass)
    ['{FDC50C1D-0D43-42FD-85C9-B0C12160337E}']
  end;

  UIInputView = interface(UIView)
    ['{746FB3D0-C3E7-4911-BFF0-8A4564181D45}']
    function inputViewStyle: UIInputViewStyle; cdecl;
    procedure setAllowsSelfSizing(allowsSelfSizing: Boolean); cdecl;
    function allowsSelfSizing: Boolean; cdecl;
    function initWithFrame(frame: CGRect; inputViewStyle: UIInputViewStyle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUIInputView = class(TOCGenericImport<UIInputViewClass, UIInputView>)
  end;

  PUIInputView = Pointer;

  UILexiconClass = interface(NSObjectClass)
    ['{5E39FD95-39B1-42DA-9022-84909A3AD724}']
  end;

  UILexicon = interface(NSObject)
    ['{27893CB5-5858-45CA-884F-E89A3286377D}']
    function entries: NSArray; cdecl;
  end;

  TUILexicon = class(TOCGenericImport<UILexiconClass, UILexicon>)
  end;

  PUILexicon = Pointer;

  UIKeyClass = interface(NSObjectClass)
    ['{BE8773D0-3DAA-4FB4-A2D3-55436975ABFA}']
  end;

  UIKey = interface(NSObject)
    ['{601215AD-C721-4F7B-8FB3-2371069D1194}']
    function characters: NSString; cdecl;
    function charactersIgnoringModifiers: NSString; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function keyCode: UIKeyboardHIDUsage; cdecl;
  end;

  TUIKey = class(TOCGenericImport<UIKeyClass, UIKey>)
  end;

  PUIKey = Pointer;

  UIListContentImagePropertiesClass = interface(NSObjectClass)
    ['{29D50A97-ADA2-4B0B-8D09-4B2AC95DB2D6}']
  end;

  UIListContentImageProperties = interface(NSObject)
    ['{BC0BCA52-22EE-4B46-94E6-7342E978AFD9}']
    procedure setPreferredSymbolConfiguration(preferredSymbolConfiguration
      : UIImageSymbolConfiguration); cdecl;
    function preferredSymbolConfiguration: UIImageSymbolConfiguration; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setTintColorTransformer(tintColorTransformer
      : UIConfigurationColorTransformer); cdecl;
    function tintColorTransformer: UIConfigurationColorTransformer; cdecl;
    function resolvedTintColorForTintColor(tintColor: UIColor): UIColor; cdecl;
    procedure setCornerRadius(cornerRadius: CGFloat); cdecl;
    function cornerRadius: CGFloat; cdecl;
    procedure setMaximumSize(maximumSize: CGSize); cdecl;
    function maximumSize: CGSize; cdecl;
    procedure setReservedLayoutSize(reservedLayoutSize: CGSize); cdecl;
    function reservedLayoutSize: CGSize; cdecl;
    procedure setAccessibilityIgnoresInvertColors
      (accessibilityIgnoresInvertColors: Boolean); cdecl;
    function accessibilityIgnoresInvertColors: Boolean; cdecl;
  end;

  TUIListContentImageProperties = class
    (TOCGenericImport<UIListContentImagePropertiesClass,
    UIListContentImageProperties>)
  end;

  PUIListContentImageProperties = Pointer;

  UIListContentTextPropertiesClass = interface(NSObjectClass)
    ['{BAF0EEB9-F2BD-454B-8843-FEFD75B202FA}']
  end;

  UIListContentTextProperties = interface(NSObject)
    ['{0F0E4A1F-2F26-4269-AC14-26A6A76056B9}']
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setColor(color: UIColor); cdecl;
    function color: UIColor; cdecl;
    procedure setColorTransformer(colorTransformer
      : UIConfigurationColorTransformer); cdecl;
    function colorTransformer: UIConfigurationColorTransformer; cdecl;
    function resolvedColor: UIColor; cdecl;
    procedure setAlignment(alignment: UIListContentTextAlignment); cdecl;
    function alignment: UIListContentTextAlignment; cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    procedure setNumberOfLines(numberOfLines: NSInteger); cdecl;
    function numberOfLines: NSInteger; cdecl;
    procedure setAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth
      : Boolean); cdecl;
    function adjustsFontSizeToFitWidth: Boolean; cdecl;
    procedure setMinimumScaleFactor(minimumScaleFactor: CGFloat); cdecl;
    function minimumScaleFactor: CGFloat; cdecl;
    procedure setAllowsDefaultTighteningForTruncation
      (allowsDefaultTighteningForTruncation: Boolean); cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    procedure setAdjustsFontForContentSizeCategory
      (adjustsFontForContentSizeCategory: Boolean); cdecl;
    function adjustsFontForContentSizeCategory: Boolean; cdecl;
    procedure setShowsExpansionTextWhenTruncated(showsExpansionTextWhenTruncated
      : Boolean); cdecl;
    function showsExpansionTextWhenTruncated: Boolean; cdecl;
    procedure setTransform(transform: UIListContentTextTransform); cdecl;
    function transform: UIListContentTextTransform; cdecl;
  end;

  TUIListContentTextProperties = class
    (TOCGenericImport<UIListContentTextPropertiesClass,
    UIListContentTextProperties>)
  end;

  PUIListContentTextProperties = Pointer;

  UIListContentViewClass = interface(UIViewClass)
    ['{8D79A202-B5E4-49D5-B4EA-2E5941AEB13C}']
  end;

  UIListContentView = interface(UIView)
    ['{FC273768-B721-4411-ACF0-30C3620329E1}']
    function initWithConfiguration(configuration: UIListContentConfiguration)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setConfiguration(configuration
      : UIListContentConfiguration); cdecl;
    function configuration: UIListContentConfiguration; cdecl;
    function textLayoutGuide: UILayoutGuide; cdecl;
    function secondaryTextLayoutGuide: UILayoutGuide; cdecl;
    function imageLayoutGuide: UILayoutGuide; cdecl;
  end;

  TUIListContentView = class(TOCGenericImport<UIListContentViewClass,
    UIListContentView>)
  end;

  PUIListContentView = Pointer;

  UIVibrancyEffectClass = interface(UIVisualEffectClass)
    ['{52ED3761-AFA4-4934-A944-CBFD5D70BBF2}']
    [MethodName('effectForBlurEffect:')]
    { class } function effectForBlurEffect(blurEffect: UIBlurEffect)
      : UIVibrancyEffect; cdecl;
    [MethodName('effectForBlurEffect:style:')]
    { class } function effectForBlurEffectStyle(blurEffect: UIBlurEffect;
      style: UIVibrancyEffectStyle): UIVibrancyEffect; cdecl;
  end;

  UIVibrancyEffect = interface(UIVisualEffect)
    ['{A7C1E469-8C1C-4178-AD15-8054BE5D6FA2}']
  end;

  TUIVibrancyEffect = class(TOCGenericImport<UIVibrancyEffectClass,
    UIVibrancyEffect>)
  end;

  PUIVibrancyEffect = Pointer;

  UIVisualEffectViewClass = interface(UIViewClass)
    ['{45C2C04F-A383-4AF0-8B74-14173EA28EAF}']
  end;

  UIVisualEffectView = interface(UIView)
    ['{BDB37747-92BB-41EA-BC02-BC7C079BB9E0}']
    function contentView: UIView; cdecl;
    procedure setEffect(effect: UIVisualEffect); cdecl;
    function effect: UIVisualEffect; cdecl;
    function initWithEffect(effect: UIVisualEffect)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUIVisualEffectView = class(TOCGenericImport<UIVisualEffectViewClass,
    UIVisualEffectView>)
  end;

  PUIVisualEffectView = Pointer;

  UILexiconEntryClass = interface(NSObjectClass)
    ['{1F28DD91-FF4C-4BDC-AFEC-5883E4ABB623}']
  end;

  UILexiconEntry = interface(NSObject)
    ['{8DAD15BF-D79B-4F06-B519-7EF2980A29E6}']
    function documentText: NSString; cdecl;
    function userInput: NSString; cdecl;
  end;

  TUILexiconEntry = class(TOCGenericImport<UILexiconEntryClass, UILexiconEntry>)
  end;

  PUILexiconEntry = Pointer;

  UILargeContentViewerInteractionClass = interface(NSObjectClass)
    ['{97DE7A3F-248C-4475-BA74-DEA62A492AE8}']
  end;

  UILargeContentViewerInteraction = interface(NSObject)
    ['{2CA69BB8-456F-4E0D-B76E-F187F54299DA}']
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    function delegate: Pointer; cdecl;
    function gestureRecognizerForExclusionRelationship
      : UIGestureRecognizer; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function enabled: Boolean; cdecl;
  end;

  TUILargeContentViewerInteraction = class
    (TOCGenericImport<UILargeContentViewerInteractionClass,
    UILargeContentViewerInteraction>)
  end;

  PUILargeContentViewerInteraction = Pointer;

  UIUserNotificationCategoryClass = interface(NSObjectClass)
    ['{86D7F35E-0F78-4F24-AD48-82889871AE80}']
  end;

  UIUserNotificationCategory = interface(NSObject)
    ['{D42F536E-0EF8-4397-A329-F64BC57735DE}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function identifier: NSString; cdecl;
    function actionsForContext(context: UIUserNotificationActionContext)
      : NSArray; cdecl;
  end;

  TUIUserNotificationCategory = class
    (TOCGenericImport<UIUserNotificationCategoryClass,
    UIUserNotificationCategory>)
  end;

  PUIUserNotificationCategory = Pointer;

  UIUserNotificationActionClass = interface(NSObjectClass)
    ['{47BF6D7C-045F-4537-BFCA-095879D52624}']
  end;

  UIUserNotificationAction = interface(NSObject)
    ['{B715C282-AA7E-4519-BD2B-A757001E8434}']
    function init: Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function identifier: NSString; cdecl;
    function title: NSString; cdecl;
    function behavior: UIUserNotificationActionBehavior; cdecl;
    function parameters: NSDictionary; cdecl;
    function activationMode: UIUserNotificationActivationMode; cdecl;
    function isAuthenticationRequired: Boolean; cdecl;
    function isDestructive: Boolean; cdecl;
  end;

  TUIUserNotificationAction = class
    (TOCGenericImport<UIUserNotificationActionClass, UIUserNotificationAction>)
  end;

  PUIUserNotificationAction = Pointer;

  UIMutableUserNotificationCategoryClass = interface
    (UIUserNotificationCategoryClass)
    ['{B0AB87FB-2B4E-4951-AC45-BE6BF898B8E1}']
  end;

  UIMutableUserNotificationCategory = interface(UIUserNotificationCategory)
    ['{42CB9527-6CBA-4EF0-9D07-32D6CD5B7067}']
    procedure setIdentifier(identifier: NSString); cdecl;
    function identifier: NSString; cdecl;
    procedure setActions(actions: NSArray;
      forContext: UIUserNotificationActionContext); cdecl;
  end;

  TUIMutableUserNotificationCategory = class
    (TOCGenericImport<UIMutableUserNotificationCategoryClass,
    UIMutableUserNotificationCategory>)
  end;

  PUIMutableUserNotificationCategory = Pointer;

  UIMutableUserNotificationActionClass = interface
    (UIUserNotificationActionClass)
    ['{5A602875-283F-4D11-A5DF-3DD17CA4DAE9}']
  end;

  UIMutableUserNotificationAction = interface(UIUserNotificationAction)
    ['{5985608F-3BDA-49E7-85ED-ED1BE1487BD9}']
    procedure setIdentifier(identifier: NSString); cdecl;
    function identifier: NSString; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setBehavior(behavior: UIUserNotificationActionBehavior); cdecl;
    function behavior: UIUserNotificationActionBehavior; cdecl;
    procedure setParameters(parameters: NSDictionary); cdecl;
    function parameters: NSDictionary; cdecl;
    procedure setActivationMode(activationMode
      : UIUserNotificationActivationMode); cdecl;
    function activationMode: UIUserNotificationActivationMode; cdecl;
    procedure setAuthenticationRequired(authenticationRequired: Boolean); cdecl;
    function isAuthenticationRequired: Boolean; cdecl;
    procedure setDestructive(destructive: Boolean); cdecl;
    function isDestructive: Boolean; cdecl;
  end;

  TUIMutableUserNotificationAction = class
    (TOCGenericImport<UIMutableUserNotificationActionClass,
    UIMutableUserNotificationAction>)
  end;

  PUIMutableUserNotificationAction = Pointer;

  UILocalizedIndexedCollationClass = interface(NSObjectClass)
    ['{2736A689-4996-4248-89C6-FEF53E1118B2}']
    { class } function currentCollation: Pointer { instancetype }; cdecl;
  end;

  UILocalizedIndexedCollation = interface(NSObject)
    ['{F176893D-CB22-4570-82B9-12C06812A03F}']
    function sectionTitles: NSArray; cdecl;
    function sectionIndexTitles: NSArray; cdecl;
    function sectionForSectionIndexTitleAtIndex(indexTitleIndex: NSInteger)
      : NSInteger; cdecl;
    function sectionForObject(&object: Pointer; collationStringSelector: SEL)
      : NSInteger; cdecl;
    function sortedArrayFromArray(&array: NSArray; collationStringSelector: SEL)
      : NSArray; cdecl;
  end;

  TUILocalizedIndexedCollation = class
    (TOCGenericImport<UILocalizedIndexedCollationClass,
    UILocalizedIndexedCollation>)
  end;

  PUILocalizedIndexedCollation = Pointer;

  UIManagedDocumentClass = interface(UIDocumentClass)
    ['{38479BF9-2045-4519-BC8E-04F4B98DFD28}']
  end;

  UIManagedDocument = interface(UIDocument)
    ['{EDC1B6F4-0710-4843-8CCA-CAA8EBC86C38}']
    procedure setPersistentStoreName(persistentStoreName: NSString); cdecl;
    function persistentStoreName: NSString; cdecl;
    function managedObjectContext: NSManagedObjectContext; cdecl;
    function managedObjectModel: NSManagedObjectModel; cdecl;
    procedure setPersistentStoreOptions(persistentStoreOptions
      : NSDictionary); cdecl;
    function persistentStoreOptions: NSDictionary; cdecl;
    procedure setModelConfiguration(modelConfiguration: NSString); cdecl;
    function modelConfiguration: NSString; cdecl;
    function configurePersistentStoreCoordinatorForURL(storeURL: NSURL;
      ofType: NSString; modelConfiguration: NSString;
      storeOptions: NSDictionary; error: NSError): Boolean; cdecl;
    function persistentStoreTypeForFileType(fileType: NSString)
      : NSString; cdecl;
    function readAdditionalContentFromURL(absoluteURL: NSURL; error: NSError)
      : Boolean; cdecl;
    function additionalContentForURL(absoluteURL: NSURL; error: NSError)
      : Pointer; cdecl;
    function writeAdditionalContent(content: Pointer; toURL: NSURL;
      originalContentsURL: NSURL; error: NSError): Boolean; cdecl;
  end;

  TUIManagedDocument = class(TOCGenericImport<UIManagedDocumentClass,
    UIManagedDocument>)
  end;

  PUIManagedDocument = Pointer;

  UIMenuItemClass = interface(NSObjectClass)
    ['{4893B0B5-EF12-4BD7-88DB-231C463C5B43}']
  end;

  UIMenuItem = interface(NSObject)
    ['{E5E09013-5CB3-48B5-A682-F427C97EC2FF}']
    function initWithTitle(title: NSString; action: SEL)
      : Pointer { instancetype }; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setAction(action: SEL); cdecl;
    function action: SEL; cdecl;
  end;

  TUIMenuItem = class(TOCGenericImport<UIMenuItemClass, UIMenuItem>)
  end;

  PUIMenuItem = Pointer;

  UIMenuControllerClass = interface(NSObjectClass)
    ['{7B37553D-4881-470C-8B41-F55139E38D36}']
  end;

  UIMenuController = interface(NSObject)
    ['{90ABFA6E-C509-4545-9551-08CB0F675DF3}']
    procedure setSharedMenuController(sharedMenuController
      : UIMenuController); cdecl;
    function sharedMenuController: UIMenuController; cdecl;
    function isMenuVisible: Boolean; cdecl;
    [MethodName('setMenuVisible:')]
    procedure setMenuVisible(menuVisible: Boolean); cdecl;
    [MethodName('setMenuVisible:animated:')]
    procedure setMenuVisibleAnimated(menuVisible: Boolean;
      animated: Boolean); cdecl;
    procedure setTargetRect(targetRect: CGRect; inView: UIView); cdecl;
    procedure showMenuFromView(targetView: UIView; rect: CGRect); cdecl;
    procedure hideMenuFromView(targetView: UIView); cdecl;
    procedure hideMenu; cdecl;
    procedure setArrowDirection(arrowDirection
      : UIMenuControllerArrowDirection); cdecl;
    function arrowDirection: UIMenuControllerArrowDirection; cdecl;
    procedure setMenuItems(menuItems: NSArray); cdecl;
    function menuItems: NSArray; cdecl;
    procedure update; cdecl;
    function menuFrame: CGRect; cdecl;
  end;

  TUIMenuController = class(TOCGenericImport<UIMenuControllerClass,
    UIMenuController>)
  end;

  PUIMenuController = Pointer;

  UIInterpolatingMotionEffectClass = interface(UIMotionEffectClass)
    ['{EA110A88-E2E2-4BA3-883E-2AF9014741B4}']
  end;

  UIInterpolatingMotionEffect = interface(UIMotionEffect)
    ['{304EA65F-6220-49D0-9700-152DF57E5E85}']
    function initWithKeyPath(keyPath: NSString;
      &type: UIInterpolatingMotionEffectType): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function keyPath: NSString; cdecl;
    function &type: UIInterpolatingMotionEffectType; cdecl;
    procedure setMinimumRelativeValue(minimumRelativeValue: Pointer); cdecl;
    function minimumRelativeValue: Pointer; cdecl;
    procedure setMaximumRelativeValue(maximumRelativeValue: Pointer); cdecl;
    function maximumRelativeValue: Pointer; cdecl;
  end;

  TUIInterpolatingMotionEffect = class
    (TOCGenericImport<UIInterpolatingMotionEffectClass,
    UIInterpolatingMotionEffect>)
  end;

  PUIInterpolatingMotionEffect = Pointer;

  UIMotionEffectGroupClass = interface(UIMotionEffectClass)
    ['{E303A1E5-35C5-4870-85F8-342D52B674E0}']
  end;

  UIMotionEffectGroup = interface(UIMotionEffect)
    ['{8B17082B-8815-4695-83C8-0AB5DD2DBC5F}']
    procedure setMotionEffects(motionEffects: NSArray); cdecl;
    function motionEffects: NSArray; cdecl;
  end;

  TUIMotionEffectGroup = class(TOCGenericImport<UIMotionEffectGroupClass,
    UIMotionEffectGroup>)
  end;

  PUIMotionEffectGroup = Pointer;

  UISearchControllerClass = interface(UIViewControllerClass)
    ['{70763EE2-CEC2-4F8C-A4F7-226972950687}']
  end;

  UISearchController = interface(UIViewController)
    ['{438D0D39-09B4-4557-9D24-0EC018E1F855}']
    function initWithSearchResultsController(searchResultsController
      : UIViewController): Pointer { instancetype }; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setSearchResultsUpdater(searchResultsUpdater: Pointer); cdecl;
    function searchResultsUpdater: Pointer; cdecl;
    procedure setActive(active: Boolean); cdecl;
    function isActive: Boolean; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setDimsBackgroundDuringPresentation
      (dimsBackgroundDuringPresentation: Boolean); cdecl;
    function dimsBackgroundDuringPresentation: Boolean; cdecl;
    procedure setObscuresBackgroundDuringPresentation
      (obscuresBackgroundDuringPresentation: Boolean); cdecl;
    function obscuresBackgroundDuringPresentation: Boolean; cdecl;
    procedure setHidesNavigationBarDuringPresentation
      (hidesNavigationBarDuringPresentation: Boolean); cdecl;
    function hidesNavigationBarDuringPresentation: Boolean; cdecl;
    function searchResultsController: UIViewController; cdecl;
    function searchBar: UISearchBar; cdecl;
    function searchBarPlacement: UINavigationItemSearchBarPlacement; cdecl;
    procedure setAutomaticallyShowsSearchResultsController
      (automaticallyShowsSearchResultsController: Boolean); cdecl;
    function automaticallyShowsSearchResultsController: Boolean; cdecl;
    procedure setShowsSearchResultsController(showsSearchResultsController
      : Boolean); cdecl;
    function showsSearchResultsController: Boolean; cdecl;
    procedure setAutomaticallyShowsCancelButton(automaticallyShowsCancelButton
      : Boolean); cdecl;
    function automaticallyShowsCancelButton: Boolean; cdecl;
    procedure setAutomaticallyShowsScopeBar(automaticallyShowsScopeBar
      : Boolean); cdecl;
    function automaticallyShowsScopeBar: Boolean; cdecl;
    procedure setScopeBarActivation(scopeBarActivation
      : UISearchControllerScopeBarActivation); cdecl;
    function scopeBarActivation: UISearchControllerScopeBarActivation; cdecl;
    procedure setSearchSuggestions(searchSuggestions: NSArray); cdecl;
    function searchSuggestions: NSArray; cdecl;
    procedure setIgnoresSearchSuggestionsForSearchBarPlacementStacked
      (ignoresSearchSuggestionsForSearchBarPlacementStacked: Boolean); cdecl;
    function ignoresSearchSuggestionsForSearchBarPlacementStacked
      : Boolean; cdecl;
    procedure setSearchControllerObservedScrollView
      (searchControllerObservedScrollView: UIScrollView); cdecl;
    function searchControllerObservedScrollView: UIScrollView; cdecl;
  end;

  TUISearchController = class(TOCGenericImport<UISearchControllerClass,
    UISearchController>)
  end;

  PUISearchController = Pointer;

  UINavigationBarAppearanceClass = interface(UIBarAppearanceClass)
    ['{BD5B696C-C2B0-42A3-8C8B-4B551BD630AD}']
  end;

  UINavigationBarAppearance = interface(UIBarAppearance)
    ['{6301323D-822E-49E5-A830-E7C3A3236B3E}']
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment
      : UIOffset); cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
    procedure setLargeTitleTextAttributes(largeTitleTextAttributes
      : NSDictionary); cdecl;
    function largeTitleTextAttributes: NSDictionary; cdecl;
    procedure setButtonAppearance(buttonAppearance
      : UIBarButtonItemAppearance); cdecl;
    function buttonAppearance: UIBarButtonItemAppearance; cdecl;
    procedure setDoneButtonAppearance(doneButtonAppearance
      : UIBarButtonItemAppearance); cdecl;
    function doneButtonAppearance: UIBarButtonItemAppearance; cdecl;
    procedure setBackButtonAppearance(backButtonAppearance
      : UIBarButtonItemAppearance); cdecl;
    function backButtonAppearance: UIBarButtonItemAppearance; cdecl;
    function backIndicatorImage: UIImage; cdecl;
    function backIndicatorTransitionMaskImage: UIImage; cdecl;
    procedure setBackIndicatorImage(backIndicatorImage: UIImage;
      transitionMaskImage: UIImage); cdecl;
  end;

  TUINavigationBarAppearance = class
    (TOCGenericImport<UINavigationBarAppearanceClass,
    UINavigationBarAppearance>)
  end;

  PUINavigationBarAppearance = Pointer;

  UINibLoadingAdditions = interface(IObjectiveC)
    ['{B4FDE278-64FB-4614-9370-E7CDB5429BEA}']
    function loadNibNamed(name: NSString; owner: Pointer; options: NSDictionary)
      : NSArray; cdecl;
    procedure awakeFromNib; cdecl;
    procedure prepareForInterfaceBuilder; cdecl;
  end;

  UIPageControlClass = interface(UIControlClass)
    ['{D2EA3C55-7B68-4160-853A-453BE6E39F08}']
  end;

  UIPageControl = interface(UIControl)
    ['{19B57347-FA04-4A6B-82CC-71DEE28ACF76}']
    procedure setNumberOfPages(numberOfPages: NSInteger); cdecl;
    function numberOfPages: NSInteger; cdecl;
    procedure setCurrentPage(currentPage: NSInteger); cdecl;
    function currentPage: NSInteger; cdecl;
    procedure setHidesForSinglePage(hidesForSinglePage: Boolean); cdecl;
    function hidesForSinglePage: Boolean; cdecl;
    procedure setPageIndicatorTintColor(pageIndicatorTintColor: UIColor); cdecl;
    function pageIndicatorTintColor: UIColor; cdecl;
    procedure setCurrentPageIndicatorTintColor(currentPageIndicatorTintColor
      : UIColor); cdecl;
    function currentPageIndicatorTintColor: UIColor; cdecl;
    procedure setBackgroundStyle(backgroundStyle
      : UIPageControlBackgroundStyle); cdecl;
    function backgroundStyle: UIPageControlBackgroundStyle; cdecl;
    procedure setDirection(direction: UIPageControlDirection); cdecl;
    function direction: UIPageControlDirection; cdecl;
    function interactionState: UIPageControlInteractionState; cdecl;
    procedure setAllowsContinuousInteraction(allowsContinuousInteraction
      : Boolean); cdecl;
    function allowsContinuousInteraction: Boolean; cdecl;
    procedure setPreferredIndicatorImage(preferredIndicatorImage
      : UIImage); cdecl;
    function preferredIndicatorImage: UIImage; cdecl;
    function indicatorImageForPage(page: NSInteger): UIImage; cdecl;
    procedure setIndicatorImage(image: UIImage; forPage: NSInteger); cdecl;
    procedure setPreferredCurrentPageIndicatorImage
      (preferredCurrentPageIndicatorImage: UIImage); cdecl;
    function preferredCurrentPageIndicatorImage: UIImage; cdecl;
    function currentPageIndicatorImageForPage(page: NSInteger): UIImage; cdecl;
    procedure setCurrentPageIndicatorImage(image: UIImage;
      forPage: NSInteger); cdecl;
    function sizeForNumberOfPages(pageCount: NSInteger): CGSize; cdecl;
    procedure setDefersCurrentPageDisplay(defersCurrentPageDisplay
      : Boolean); cdecl;
    function defersCurrentPageDisplay: Boolean; cdecl;
    procedure updateCurrentPageDisplay; cdecl;
  end;

  TUIPageControl = class(TOCGenericImport<UIPageControlClass, UIPageControl>)
  end;

  PUIPageControl = Pointer;

  UIPageViewControllerClass = interface(UIViewControllerClass)
    ['{481F13BE-F9C3-40A9-AFCC-171A9C47CCCC}']
  end;

  UIPageViewController = interface(UIViewController)
    ['{F0AF6BAB-7E98-4CDE-828A-BC57479E9700}']
    function initWithTransitionStyle(style: UIPageViewControllerTransitionStyle;
      navigationOrientation: UIPageViewControllerNavigationOrientation;
      options: NSDictionary): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setDataSource(dataSource: Pointer); cdecl;
    function dataSource: Pointer; cdecl;
    function transitionStyle: UIPageViewControllerTransitionStyle; cdecl;
    function navigationOrientation
      : UIPageViewControllerNavigationOrientation; cdecl;
    function spineLocation: UIPageViewControllerSpineLocation; cdecl;
    procedure setDoubleSided(doubleSided: Boolean); cdecl;
    function isDoubleSided: Boolean; cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function viewControllers: NSArray; cdecl;
    procedure setViewControllers(viewControllers: NSArray;
      direction: UIPageViewControllerNavigationDirection; animated: Boolean;
      completion: TUIKitCompletion); cdecl;
  end;

  TUIPageViewController = class(TOCGenericImport<UIPageViewControllerClass,
    UIPageViewController>)
  end;

  PUIPageViewController = Pointer;

  UIPasteboardClass = interface(NSObjectClass)
    ['{EABF7E7C-A4C7-4600-8C0B-723CB0CBCB2B}']
    { class } function pasteboardWithName(pasteboardName: UIPasteboardName;
      create: Boolean): UIPasteboard; cdecl;
    { class } function pasteboardWithUniqueName: UIPasteboard; cdecl;
    { class } procedure removePasteboardWithName(pasteboardName
      : UIPasteboardName); cdecl;
  end;

  UIPasteboard = interface(NSObject)
    ['{D95D5EE7-D678-4A7B-8B97-B12D57CB82C6}']
    procedure setGeneralPasteboard(generalPasteboard: UIPasteboard); cdecl;
    function generalPasteboard: UIPasteboard; cdecl;
    function name: UIPasteboardName; cdecl;
    function isPersistent: Boolean; cdecl;
    procedure setPersistent(persistent: Boolean); cdecl;
    function changeCount: NSInteger; cdecl;
    [MethodName('setItemProviders:')]
    procedure setItemProviders(itemProviders: NSArray); cdecl;
    function itemProviders: NSArray; cdecl;
    [MethodName('setItemProviders:localOnly:expirationDate:')]
    procedure setItemProvidersLocalOnlyExpirationDate(itemProviders: NSArray;
      localOnly: Boolean; expirationDate: NSDate); cdecl;
    [MethodName('setObjects:')]
    procedure setObjects(objects: NSArray); cdecl;
    [MethodName('setObjects:localOnly:expirationDate:')]
    procedure setObjectsLocalOnlyExpirationDate(objects: NSArray;
      localOnly: Boolean; expirationDate: NSDate); cdecl;
    function pasteboardTypes: NSArray; cdecl;
    [MethodName('containsPasteboardTypes:')]
    function containsPasteboardTypes(pasteboardTypes: NSArray): Boolean; cdecl;
    [MethodName('dataForPasteboardType:')]
    function dataForPasteboardType(pasteboardType: NSString): NSData; cdecl;
    function valueForPasteboardType(pasteboardType: NSString): Pointer; cdecl;
    procedure setValue(value: Pointer; forPasteboardType: NSString); cdecl;
    procedure setData(data: NSData; forPasteboardType: NSString); cdecl;
    function numberOfItems: NSInteger; cdecl;
    function pasteboardTypesForItemSet(itemSet: NSIndexSet): NSArray; cdecl;
    [MethodName('containsPasteboardTypes:inItemSet:')]
    function containsPasteboardTypesInItemSet(pasteboardTypes: NSArray;
      inItemSet: NSIndexSet): Boolean; cdecl;
    function itemSetWithPasteboardTypes(pasteboardTypes: NSArray)
      : NSIndexSet; cdecl;
    function valuesForPasteboardType(pasteboardType: NSString;
      inItemSet: NSIndexSet): NSArray; cdecl;
    [MethodName('dataForPasteboardType:inItemSet:')]
    function dataForPasteboardTypeInItemSet(pasteboardType: NSString;
      inItemSet: NSIndexSet): NSArray; cdecl;
    [MethodName('setItems:')]
    procedure setItems(items: NSArray); cdecl;
    function items: NSArray; cdecl;
    procedure addItems(items: NSArray); cdecl;
    [MethodName('setItems:options:')]
    procedure setItemsOptions(items: NSArray; options: NSDictionary); cdecl;
    procedure setString(&string: NSString); cdecl;
    function &string: NSString; cdecl;
    procedure setStrings(strings: NSArray); cdecl;
    function strings: NSArray; cdecl;
    procedure setURL(url: NSURL); cdecl;
    function url: NSURL; cdecl;
    procedure setURLs(urls: NSArray); cdecl;
    function urls: NSArray; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setImages(images: NSArray); cdecl;
    function images: NSArray; cdecl;
    procedure setColor(color: UIColor); cdecl;
    function color: UIColor; cdecl;
    procedure setColors(colors: NSArray); cdecl;
    function colors: NSArray; cdecl;
    function hasStrings: Boolean; cdecl;
    function hasURLs: Boolean; cdecl;
    function hasImages: Boolean; cdecl;
    function hasColors: Boolean; cdecl;
    [MethodName('detectPatternsForPatterns:completionHandler:')]
    procedure detectPatternsForPatternsCompletionHandler(patterns: NSSet;
      completionHandler: TUIKitCompletionHandler3); cdecl;
    [MethodName('detectPatternsForPatterns:inItemSet:completionHandler:')]
    procedure detectPatternsForPatternsInItemSetCompletionHandler
      (patterns: NSSet; inItemSet: NSIndexSet;
      completionHandler: TUIKitCompletionHandler4); cdecl;
    [MethodName('detectValuesForPatterns:completionHandler:')]
    procedure detectValuesForPatternsCompletionHandler(patterns: NSSet;
      completionHandler: TUIKitCompletionHandler5); cdecl;
    [MethodName('detectValuesForPatterns:inItemSet:completionHandler:')]
    procedure detectValuesForPatternsInItemSetCompletionHandler(patterns: NSSet;
      inItemSet: NSIndexSet;
      completionHandler: TUIKitCompletionHandler4); cdecl;
  end;

  TUIPasteboard = class(TOCGenericImport<UIPasteboardClass, UIPasteboard>)
  end;

  PUIPasteboard = Pointer;

  UIPasteControlConfigurationClass = interface(NSObjectClass)
    ['{A8C9179C-92E9-4381-8EC8-2720962B64A9}']
  end;

  UIPasteControlConfiguration = interface(NSObject)
    ['{CB894C11-F349-454A-A4DD-624C11891D93}']
    procedure setDisplayMode(displayMode: UIPasteControlDisplayMode); cdecl;
    function displayMode: UIPasteControlDisplayMode; cdecl;
    procedure setCornerStyle(cornerStyle
      : UIButtonConfigurationCornerStyle); cdecl;
    function cornerStyle: UIButtonConfigurationCornerStyle; cdecl;
    procedure setCornerRadius(cornerRadius: CGFloat); cdecl;
    function cornerRadius: CGFloat; cdecl;
    procedure setBaseForegroundColor(baseForegroundColor: UIColor); cdecl;
    function baseForegroundColor: UIColor; cdecl;
    procedure setBaseBackgroundColor(baseBackgroundColor: UIColor); cdecl;
    function baseBackgroundColor: UIColor; cdecl;
  end;

  TUIPasteControlConfiguration = class
    (TOCGenericImport<UIPasteControlConfigurationClass,
    UIPasteControlConfiguration>)
  end;

  PUIPasteControlConfiguration = Pointer;

  UIPasteControlClass = interface(UIControlClass)
    ['{D7C0C8E5-1404-41DF-8BF3-3145D703EE12}']
  end;

  UIPasteControl = interface(UIControl)
    ['{2DF82C5F-DFD8-411B-AD59-18B877144402}']
    function configuration: UIPasteControlConfiguration; cdecl;
    procedure setTarget(target: Pointer); cdecl;
    function target: Pointer; cdecl;
    function initWithConfiguration(configuration: UIPasteControlConfiguration)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
  end;

  TUIPasteControl = class(TOCGenericImport<UIPasteControlClass, UIPasteControl>)
  end;

  PUIPasteControl = Pointer;

  UIPopoverBackgroundViewClass = interface(UIViewClass)
    ['{C211B31E-D1DD-4C6B-B14F-BA927196AEA9}']
  end;

  UIPopoverBackgroundView = interface(UIView)
    ['{42BD8FE0-F43F-4F23-9DE4-F769BF00EAA6}']
    procedure setArrowOffset(arrowOffset: CGFloat); cdecl;
    function arrowOffset: CGFloat; cdecl;
    procedure setArrowDirection(arrowDirection: UIPopoverArrowDirection); cdecl;
    function arrowDirection: UIPopoverArrowDirection; cdecl;
    procedure setWantsDefaultContentAppearance(wantsDefaultContentAppearance
      : Boolean); cdecl;
    function wantsDefaultContentAppearance: Boolean; cdecl;
  end;

  TUIPopoverBackgroundView = class
    (TOCGenericImport<UIPopoverBackgroundViewClass, UIPopoverBackgroundView>)
  end;

  PUIPopoverBackgroundView = Pointer;

  UIProgressViewClass = interface(UIViewClass)
    ['{02B9EBB7-EF0E-4D12-88BB-986AEBDC360C}']
  end;

  UIProgressView = interface(UIView)
    ['{4788DB1E-ED86-406F-AACE-D158F0BBFCC6}']
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithProgressViewStyle(style: UIProgressViewStyle)
      : Pointer { instancetype }; cdecl;
    procedure setProgressViewStyle(progressViewStyle
      : UIProgressViewStyle); cdecl;
    function progressViewStyle: UIProgressViewStyle; cdecl;
    [MethodName('setProgress:')]
    procedure setProgress(progress: Single); cdecl;
    function progress: Single; cdecl;
    procedure setProgressTintColor(progressTintColor: UIColor); cdecl;
    function progressTintColor: UIColor; cdecl;
    procedure setTrackTintColor(trackTintColor: UIColor); cdecl;
    function trackTintColor: UIColor; cdecl;
    procedure setProgressImage(progressImage: UIImage); cdecl;
    function progressImage: UIImage; cdecl;
    procedure setTrackImage(trackImage: UIImage); cdecl;
    function trackImage: UIImage; cdecl;
    [MethodName('setProgress:animated:')]
    procedure setProgressAnimated(progress: Single; animated: Boolean); cdecl;
    procedure setObservedProgress(observedProgress: NSProgress); cdecl;
    function observedProgress: NSProgress; cdecl;
  end;

  TUIProgressView = class(TOCGenericImport<UIProgressViewClass, UIProgressView>)
  end;

  PUIProgressView = Pointer;

  UIReferenceLibraryViewControllerClass = interface(UIViewControllerClass)
    ['{457C6F4D-9BD3-41DC-B861-BA838D7C56E4}']
    { class } function dictionaryHasDefinitionForTerm(term: NSString)
      : Boolean; cdecl;
  end;

  UIReferenceLibraryViewController = interface(UIViewController)
    ['{D20DC35D-E398-4FD7-8691-71E0CEC61AE8}']
    function initWithTerm(term: NSString): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
  end;

  TUIReferenceLibraryViewController = class
    (TOCGenericImport<UIReferenceLibraryViewControllerClass,
    UIReferenceLibraryViewController>)
  end;

  PUIReferenceLibraryViewController = Pointer;

  UIRotationGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{FDE577D6-0904-4AA8-9E00-CEA0844992BF}']
  end;

  UIRotationGestureRecognizer = interface(UIGestureRecognizer)
    ['{99A785B7-20D6-41D5-9B6F-6C8228D13222}']
    procedure setRotation(rotation: CGFloat); cdecl;
    function rotation: CGFloat; cdecl;
    function velocity: CGFloat; cdecl;
  end;

  TUIRotationGestureRecognizer = class
    (TOCGenericImport<UIRotationGestureRecognizerClass,
    UIRotationGestureRecognizer>)
  end;

  PUIRotationGestureRecognizer = Pointer;

  UIScreenModeClass = interface(NSObjectClass)
    ['{18D2B5BF-7D44-44D1-A35E-471056A412E2}']
  end;

  UIScreenMode = interface(NSObject)
    ['{639A4FA4-8638-4B28-B229-B2AF575973EE}']
    function size: CGSize; cdecl;
    function pixelAspectRatio: CGFloat; cdecl;
  end;

  TUIScreenMode = class(TOCGenericImport<UIScreenModeClass, UIScreenMode>)
  end;

  PUIScreenMode = Pointer;

  UIScreenEdgePanGestureRecognizerClass = interface(UIPanGestureRecognizerClass)
    ['{84A767A3-721A-484E-AD09-5A10E818A86A}']
  end;

  UIScreenEdgePanGestureRecognizer = interface(UIPanGestureRecognizer)
    ['{58697737-AF5B-4365-8F00-A6E988C5D110}']
    procedure setEdges(edges: UIRectEdge); cdecl;
    function edges: UIRectEdge; cdecl;
  end;

  TUIScreenEdgePanGestureRecognizer = class
    (TOCGenericImport<UIScreenEdgePanGestureRecognizerClass,
    UIScreenEdgePanGestureRecognizer>)
  end;

  PUIScreenEdgePanGestureRecognizer = Pointer;

  UISearchTextFieldClass = interface(UITextFieldClass)
    ['{1A0D74BA-D05C-4284-B89A-F913052EB90D}']
  end;

  UISearchTextField = interface(UITextField)
    ['{3FB3F01E-9A86-4E06-8C88-D738D94DD40C}']
    procedure setTokens(tokens: NSArray); cdecl;
    function tokens: NSArray; cdecl;
    procedure insertToken(token: UISearchToken; atIndex: NSInteger); cdecl;
    procedure removeTokenAtIndex(tokenIndex: NSInteger); cdecl;
    function positionOfTokenAtIndex(tokenIndex: NSInteger)
      : UITextPosition; cdecl;
    function tokensInRange(textRange: UITextRange): NSArray; cdecl;
    function textualRange: UITextRange; cdecl;
    procedure replaceTextualPortionOfRange(textRange: UITextRange;
      withToken: UISearchToken; atIndex: NSUInteger); cdecl;
    procedure setTokenBackgroundColor(tokenBackgroundColor: UIColor); cdecl;
    function tokenBackgroundColor: UIColor; cdecl;
    procedure setAllowsDeletingTokens(allowsDeletingTokens: Boolean); cdecl;
    function allowsDeletingTokens: Boolean; cdecl;
    procedure setAllowsCopyingTokens(allowsCopyingTokens: Boolean); cdecl;
    function allowsCopyingTokens: Boolean; cdecl;
    procedure setSearchSuggestions(searchSuggestions: NSArray); cdecl;
    function searchSuggestions: NSArray; cdecl;
  end;

  TUISearchTextField = class(TOCGenericImport<UISearchTextFieldClass,
    UISearchTextField>)
  end;

  PUISearchTextField = Pointer;

  UISearchBarClass = interface(UIViewClass)
    ['{8D6E3F53-4888-4575-B779-37C46CCC3C45}']
  end;

  UISearchBar = interface(UIView)
    ['{BE3A043F-7E6E-4A30-B2A6-73FC53DA126B}']
    function init: Pointer { instancetype }; cdecl;
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    function barStyle: UIBarStyle; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setText(text: NSString); cdecl;
    function text: NSString; cdecl;
    procedure setPrompt(prompt: NSString); cdecl;
    function prompt: NSString; cdecl;
    procedure setPlaceholder(placeholder: NSString); cdecl;
    function placeholder: NSString; cdecl;
    procedure setShowsBookmarkButton(showsBookmarkButton: Boolean); cdecl;
    function showsBookmarkButton: Boolean; cdecl;
    function searchTextField: UISearchTextField; cdecl;
    [MethodName('setShowsCancelButton:')]
    procedure setShowsCancelButton(showsCancelButton: Boolean); cdecl;
    function showsCancelButton: Boolean; cdecl;
    procedure setShowsSearchResultsButton(showsSearchResultsButton
      : Boolean); cdecl;
    function showsSearchResultsButton: Boolean; cdecl;
    procedure setSearchResultsButtonSelected(searchResultsButtonSelected
      : Boolean); cdecl;
    function isSearchResultsButtonSelected: Boolean; cdecl;
    [MethodName('setShowsCancelButton:animated:')]
    procedure setShowsCancelButtonAnimated(showsCancelButton: Boolean;
      animated: Boolean); cdecl;
    function inputAssistantItem: UITextInputAssistantItem; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    function barTintColor: UIColor; cdecl;
    procedure setSearchBarStyle(searchBarStyle: UISearchBarStyle); cdecl;
    function searchBarStyle: UISearchBarStyle; cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    function isTranslucent: Boolean; cdecl;
    procedure setScopeButtonTitles(scopeButtonTitles: NSArray); cdecl;
    function scopeButtonTitles: NSArray; cdecl;
    procedure setSelectedScopeButtonIndex(selectedScopeButtonIndex
      : NSInteger); cdecl;
    function selectedScopeButtonIndex: NSInteger; cdecl;
    [MethodName('setShowsScopeBar:')]
    procedure setShowsScopeBar(showsScopeBar: Boolean); cdecl;
    function showsScopeBar: Boolean; cdecl;
    [MethodName('setShowsScopeBar:animated:')]
    procedure setShowsScopeBarAnimated(show: Boolean; animated: Boolean); cdecl;
    procedure setInputAccessoryView(inputAccessoryView: UIView); cdecl;
    function inputAccessoryView: UIView; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    [MethodName('setBackgroundImage:')]
    procedure setBackgroundImage(backgroundImage: UIImage); cdecl;
    function backgroundImage: UIImage; cdecl;
    procedure setScopeBarBackgroundImage(scopeBarBackgroundImage
      : UIImage); cdecl;
    function scopeBarBackgroundImage: UIImage; cdecl;
    [MethodName('setBackgroundImage:forBarPosition:barMetrics:')]
    procedure setBackgroundImageForBarPositionBarMetrics(backgroundImage
      : UIImage; forBarPosition: UIBarPosition;
      barMetrics: UIBarMetrics); cdecl;
    function backgroundImageForBarPosition(barPosition: UIBarPosition;
      barMetrics: UIBarMetrics): UIImage; cdecl;
    procedure setSearchFieldBackgroundImage(backgroundImage: UIImage;
      forState: UIControlState); cdecl;
    function searchFieldBackgroundImageForState(state: UIControlState)
      : UIImage; cdecl;
    procedure setImage(iconImage: UIImage; forSearchBarIcon: UISearchBarIcon;
      state: UIControlState); cdecl;
    function imageForSearchBarIcon(icon: UISearchBarIcon; state: UIControlState)
      : UIImage; cdecl;
    procedure setScopeBarButtonBackgroundImage(backgroundImage: UIImage;
      forState: UIControlState); cdecl;
    function scopeBarButtonBackgroundImageForState(state: UIControlState)
      : UIImage; cdecl;
    procedure setScopeBarButtonDividerImage(dividerImage: UIImage;
      forLeftSegmentState: UIControlState;
      rightSegmentState: UIControlState); cdecl;
    function scopeBarButtonDividerImageForLeftSegmentState
      (leftState: UIControlState; rightSegmentState: UIControlState)
      : UIImage; cdecl;
    procedure setScopeBarButtonTitleTextAttributes(attributes: NSDictionary;
      forState: UIControlState); cdecl;
    function scopeBarButtonTitleTextAttributesForState(state: UIControlState)
      : NSDictionary; cdecl;
    procedure setSearchFieldBackgroundPositionAdjustment
      (searchFieldBackgroundPositionAdjustment: UIOffset); cdecl;
    function searchFieldBackgroundPositionAdjustment: UIOffset; cdecl;
    procedure setSearchTextPositionAdjustment(searchTextPositionAdjustment
      : UIOffset); cdecl;
    function searchTextPositionAdjustment: UIOffset; cdecl;
    procedure setPositionAdjustment(adjustment: UIOffset;
      forSearchBarIcon: UISearchBarIcon); cdecl;
    function positionAdjustmentForSearchBarIcon(icon: UISearchBarIcon)
      : UIOffset; cdecl;
  end;

  TUISearchBar = class(TOCGenericImport<UISearchBarClass, UISearchBar>)
  end;

  PUISearchBar = Pointer;

  UISearchContainerViewControllerClass = interface(UIViewControllerClass)
    ['{FB376D70-6A17-4088-9C0D-527208B66D5C}']
  end;

  UISearchContainerViewController = interface(UIViewController)
    ['{5C03E6A9-B8CA-4FA8-8E45-54C3A8985579}']
    function searchController: UISearchController; cdecl;
    function initWithSearchController(searchController: UISearchController)
      : Pointer { instancetype }; cdecl;
  end;

  TUISearchContainerViewController = class
    (TOCGenericImport<UISearchContainerViewControllerClass,
    UISearchContainerViewController>)
  end;

  PUISearchContainerViewController = Pointer;

  UISearchTokenClass = interface(NSObjectClass)
    ['{8CFDF59E-523F-40D4-AD4E-CD0E261AE2F4}']
    { class } function tokenWithIcon(icon: UIImage; text: NSString)
      : UISearchToken; cdecl;
  end;

  UISearchToken = interface(NSObject)
    ['{346736F6-0B39-4963-88B9-7FFFA339875F}']
    procedure setRepresentedObject(representedObject: Pointer); cdecl;
    function representedObject: Pointer; cdecl;
  end;

  TUISearchToken = class(TOCGenericImport<UISearchTokenClass, UISearchToken>)
  end;

  PUISearchToken = Pointer;

  UISegmentedControlClass = interface(UIControlClass)
    ['{5656976F-9674-4ABC-8942-A87147FAC914}']
  end;

  UISegmentedControl = interface(UIControl)
    ['{C96B31C1-739B-49BC-B7FB-EA141EDE4EBC}']
    [MethodName('initWithFrame:')]
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithItems(items: NSArray): Pointer { instancetype }; cdecl;
    [MethodName('initWithFrame:actions:')]
    function initWithFrameActions(frame: CGRect; actions: NSArray)
      : Pointer { instancetype }; cdecl;
    procedure insertSegmentWithAction(action: UIAction; atIndex: NSUInteger;
      animated: Boolean); cdecl;
    procedure setAction(action: UIAction; forSegmentAtIndex: NSUInteger); cdecl;
    function actionForSegmentAtIndex(segment: NSUInteger): UIAction; cdecl;
    function segmentIndexForActionIdentifier(actionIdentifier
      : UIActionIdentifier): NSInteger; cdecl;
    procedure setSegmentedControlStyle(segmentedControlStyle
      : UISegmentedControlStyle); cdecl;
    function segmentedControlStyle: UISegmentedControlStyle; cdecl;
    procedure setMomentary(momentary: Boolean); cdecl;
    function isMomentary: Boolean; cdecl;
    function numberOfSegments: NSUInteger; cdecl;
    procedure setApportionsSegmentWidthsByContent
      (apportionsSegmentWidthsByContent: Boolean); cdecl;
    function apportionsSegmentWidthsByContent: Boolean; cdecl;
    procedure insertSegmentWithTitle(title: NSString; atIndex: NSUInteger;
      animated: Boolean); cdecl;
    procedure insertSegmentWithImage(image: UIImage; atIndex: NSUInteger;
      animated: Boolean); cdecl;
    procedure removeSegmentAtIndex(segment: NSUInteger;
      animated: Boolean); cdecl;
    procedure removeAllSegments; cdecl;
    procedure setTitle(title: NSString; forSegmentAtIndex: NSUInteger); cdecl;
    function titleForSegmentAtIndex(segment: NSUInteger): NSString; cdecl;
    procedure setImage(image: UIImage; forSegmentAtIndex: NSUInteger); cdecl;
    function imageForSegmentAtIndex(segment: NSUInteger): UIImage; cdecl;
    procedure setWidth(width: CGFloat; forSegmentAtIndex: NSUInteger); cdecl;
    function widthForSegmentAtIndex(segment: NSUInteger): CGFloat; cdecl;
    procedure setContentOffset(offset: CGSize;
      forSegmentAtIndex: NSUInteger); cdecl;
    function contentOffsetForSegmentAtIndex(segment: NSUInteger): CGSize; cdecl;
    procedure setEnabled(enabled: Boolean;
      forSegmentAtIndex: NSUInteger); cdecl;
    function isEnabledForSegmentAtIndex(segment: NSUInteger): Boolean; cdecl;
    procedure setSelectedSegmentIndex(selectedSegmentIndex: NSInteger); cdecl;
    function selectedSegmentIndex: NSInteger; cdecl;
    procedure setSelectedSegmentTintColor(selectedSegmentTintColor
      : UIColor); cdecl;
    function selectedSegmentTintColor: UIColor; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage;
      forState: UIControlState; barMetrics: UIBarMetrics); cdecl;
    function backgroundImageForState(state: UIControlState;
      barMetrics: UIBarMetrics): UIImage; cdecl;
    procedure setDividerImage(dividerImage: UIImage;
      forLeftSegmentState: UIControlState; rightSegmentState: UIControlState;
      barMetrics: UIBarMetrics); cdecl;
    function dividerImageForLeftSegmentState(leftState: UIControlState;
      rightSegmentState: UIControlState; barMetrics: UIBarMetrics)
      : UIImage; cdecl;
    procedure setTitleTextAttributes(attributes: NSDictionary;
      forState: UIControlState); cdecl;
    function titleTextAttributesForState(state: UIControlState)
      : NSDictionary; cdecl;
    procedure setContentPositionAdjustment(adjustment: UIOffset;
      forSegmentType: UISegmentedControlSegment;
      barMetrics: UIBarMetrics); cdecl;
    function contentPositionAdjustmentForSegmentType(leftCenterRightOrAlone
      : UISegmentedControlSegment; barMetrics: UIBarMetrics): UIOffset; cdecl;
  end;

  TUISegmentedControl = class(TOCGenericImport<UISegmentedControlClass,
    UISegmentedControl>)
  end;

  PUISegmentedControl = Pointer;

  UISplitViewControllerClass = interface(UIViewControllerClass)
    ['{53B621E8-0669-4B30-8FCF-12550D0009D7}']
  end;

  UISplitViewController = interface(UIViewController)
    ['{296522DF-227A-48F8-8450-EDDC5C55E650}']
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle)
      : Pointer { instancetype }; cdecl;
    function initWithStyle(style: UISplitViewControllerStyle)
      : Pointer { instancetype }; cdecl;
    function style: UISplitViewControllerStyle; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setShowsSecondaryOnlyButton(showsSecondaryOnlyButton
      : Boolean); cdecl;
    function showsSecondaryOnlyButton: Boolean; cdecl;
    procedure setPreferredSplitBehavior(preferredSplitBehavior
      : UISplitViewControllerSplitBehavior); cdecl;
    function preferredSplitBehavior: UISplitViewControllerSplitBehavior; cdecl;
    function splitBehavior: UISplitViewControllerSplitBehavior; cdecl;
    procedure setViewController(vc: UIViewController;
      forColumn: UISplitViewControllerColumn); cdecl;
    function viewControllerForColumn(column: UISplitViewControllerColumn)
      : UIViewController; cdecl;
    procedure hideColumn(column: UISplitViewControllerColumn); cdecl;
    procedure showColumn(column: UISplitViewControllerColumn); cdecl;
    procedure setViewControllers(viewControllers: NSArray); cdecl;
    function viewControllers: NSArray; cdecl;
    procedure setPresentsWithGesture(presentsWithGesture: Boolean); cdecl;
    function presentsWithGesture: Boolean; cdecl;
    function isCollapsed: Boolean; cdecl;
    procedure setPreferredDisplayMode(preferredDisplayMode
      : UISplitViewControllerDisplayMode); cdecl;
    function preferredDisplayMode: UISplitViewControllerDisplayMode; cdecl;
    function displayMode: UISplitViewControllerDisplayMode; cdecl;
    function displayModeButtonItem: UIBarButtonItem; cdecl;
    procedure setDisplayModeButtonVisibility(displayModeButtonVisibility
      : UISplitViewControllerDisplayModeButtonVisibility); cdecl;
    function displayModeButtonVisibility
      : UISplitViewControllerDisplayModeButtonVisibility; cdecl;
    procedure setPreferredPrimaryColumnWidthFraction
      (preferredPrimaryColumnWidthFraction: CGFloat); cdecl;
    function preferredPrimaryColumnWidthFraction: CGFloat; cdecl;
    procedure setPreferredPrimaryColumnWidth(preferredPrimaryColumnWidth
      : CGFloat); cdecl;
    function preferredPrimaryColumnWidth: CGFloat; cdecl;
    procedure setMinimumPrimaryColumnWidth(minimumPrimaryColumnWidth
      : CGFloat); cdecl;
    function minimumPrimaryColumnWidth: CGFloat; cdecl;
    procedure setMaximumPrimaryColumnWidth(maximumPrimaryColumnWidth
      : CGFloat); cdecl;
    function maximumPrimaryColumnWidth: CGFloat; cdecl;
    function primaryColumnWidth: CGFloat; cdecl;
    procedure setPreferredSupplementaryColumnWidthFraction
      (preferredSupplementaryColumnWidthFraction: CGFloat); cdecl;
    function preferredSupplementaryColumnWidthFraction: CGFloat; cdecl;
    procedure setPreferredSupplementaryColumnWidth
      (preferredSupplementaryColumnWidth: CGFloat); cdecl;
    function preferredSupplementaryColumnWidth: CGFloat; cdecl;
    procedure setMinimumSupplementaryColumnWidth(minimumSupplementaryColumnWidth
      : CGFloat); cdecl;
    function minimumSupplementaryColumnWidth: CGFloat; cdecl;
    procedure setMaximumSupplementaryColumnWidth(maximumSupplementaryColumnWidth
      : CGFloat); cdecl;
    function maximumSupplementaryColumnWidth: CGFloat; cdecl;
    function supplementaryColumnWidth: CGFloat; cdecl;
    procedure setPrimaryEdge(primaryEdge
      : UISplitViewControllerPrimaryEdge); cdecl;
    function primaryEdge: UISplitViewControllerPrimaryEdge; cdecl;
    procedure showViewController(vc: UIViewController; sender: Pointer); cdecl;
    procedure showDetailViewController(vc: UIViewController;
      sender: Pointer); cdecl;
    procedure setPrimaryBackgroundStyle(primaryBackgroundStyle
      : UISplitViewControllerBackgroundStyle); cdecl;
    function primaryBackgroundStyle
      : UISplitViewControllerBackgroundStyle; cdecl;
  end;

  TUISplitViewController = class(TOCGenericImport<UISplitViewControllerClass,
    UISplitViewController>)
  end;

  PUISplitViewController = Pointer;

  UIStepperClass = interface(UIControlClass)
    ['{99BC6DBB-DDEF-4926-A96B-912D2521E875}']
  end;

  UIStepper = interface(UIControl)
    ['{64A6FBE1-A047-4981-B146-D3B127CF5E3A}']
    procedure setContinuous(continuous: Boolean); cdecl;
    function isContinuous: Boolean; cdecl;
    procedure setAutorepeat(autorepeat: Boolean); cdecl;
    function autorepeat: Boolean; cdecl;
    procedure setWraps(wraps: Boolean); cdecl;
    function wraps: Boolean; cdecl;
    procedure setValue(value: Double); cdecl;
    function value: Double; cdecl;
    procedure setMinimumValue(minimumValue: Double); cdecl;
    function minimumValue: Double; cdecl;
    procedure setMaximumValue(maximumValue: Double); cdecl;
    function maximumValue: Double; cdecl;
    procedure setStepValue(stepValue: Double); cdecl;
    function stepValue: Double; cdecl;
    procedure setBackgroundImage(image: UIImage;
      forState: UIControlState); cdecl;
    function backgroundImageForState(state: UIControlState): UIImage; cdecl;
    procedure setDividerImage(image: UIImage;
      forLeftSegmentState: UIControlState;
      rightSegmentState: UIControlState); cdecl;
    function dividerImageForLeftSegmentState(state: UIControlState;
      rightSegmentState: UIControlState): UIImage; cdecl;
    procedure setIncrementImage(image: UIImage;
      forState: UIControlState); cdecl;
    function incrementImageForState(state: UIControlState): UIImage; cdecl;
    procedure setDecrementImage(image: UIImage;
      forState: UIControlState); cdecl;
    function decrementImageForState(state: UIControlState): UIImage; cdecl;
  end;

  TUIStepper = class(TOCGenericImport<UIStepperClass, UIStepper>)
  end;

  PUIStepper = Pointer;

  UIStoryboardPopoverSegueClass = interface(UIStoryboardSegueClass)
    ['{D9C852ED-BDD9-490C-8BE3-91FF76E7C365}']
  end;

  UIStoryboardPopoverSegue = interface(UIStoryboardSegue)
    ['{5411619A-9A13-41A0-9857-32FED3FD92ED}']
    function popoverController: UIPopoverController; cdecl;
  end;

  TUIStoryboardPopoverSegue = class
    (TOCGenericImport<UIStoryboardPopoverSegueClass, UIStoryboardPopoverSegue>)
  end;

  PUIStoryboardPopoverSegue = Pointer;

  UISwitchClass = interface(UIControlClass)
    ['{830A14DA-C068-471A-B8B3-8FB3B058593B}']
  end;

  UISwitch = interface(UIControl)
    ['{F9623D19-041C-46E4-898C-B0BAF56FDE9A}']
    procedure setOnTintColor(onTintColor: UIColor); cdecl;
    function onTintColor: UIColor; cdecl;
    procedure setThumbTintColor(thumbTintColor: UIColor); cdecl;
    function thumbTintColor: UIColor; cdecl;
    procedure setOnImage(onImage: UIImage); cdecl;
    function onImage: UIImage; cdecl;
    procedure setOffImage(offImage: UIImage); cdecl;
    function offImage: UIImage; cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    function style: UISwitchStyle; cdecl;
    procedure setPreferredStyle(preferredStyle: UISwitchStyle); cdecl;
    function preferredStyle: UISwitchStyle; cdecl;
    [MethodName('setOn:')]
    procedure setOn(on: Boolean); cdecl;
    function isOn: Boolean; cdecl;
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    [MethodName('setOn:animated:')]
    procedure setOnAnimated(on: Boolean; animated: Boolean); cdecl;
  end;

  TUISwitch = class(TOCGenericImport<UISwitchClass, UISwitch>)
  end;

  PUISwitch = Pointer;

  UITabBarAppearanceClass = interface(UIBarAppearanceClass)
    ['{76DA79FF-32B5-497E-90DC-C6F23C273534}']
  end;

  UITabBarAppearance = interface(UIBarAppearance)
    ['{FCC241D9-81FC-4CDE-886B-69B76FC2B652}']
    procedure setStackedLayoutAppearance(stackedLayoutAppearance
      : UITabBarItemAppearance); cdecl;
    function stackedLayoutAppearance: UITabBarItemAppearance; cdecl;
    procedure setInlineLayoutAppearance(inlineLayoutAppearance
      : UITabBarItemAppearance); cdecl;
    function inlineLayoutAppearance: UITabBarItemAppearance; cdecl;
    procedure setCompactInlineLayoutAppearance(compactInlineLayoutAppearance
      : UITabBarItemAppearance); cdecl;
    function compactInlineLayoutAppearance: UITabBarItemAppearance; cdecl;
    procedure setSelectionIndicatorTintColor(selectionIndicatorTintColor
      : UIColor); cdecl;
    function selectionIndicatorTintColor: UIColor; cdecl;
    procedure setSelectionIndicatorImage(selectionIndicatorImage
      : UIImage); cdecl;
    function selectionIndicatorImage: UIImage; cdecl;
    procedure setStackedItemPositioning(stackedItemPositioning
      : UITabBarItemPositioning); cdecl;
    function stackedItemPositioning: UITabBarItemPositioning; cdecl;
    procedure setStackedItemWidth(stackedItemWidth: CGFloat); cdecl;
    function stackedItemWidth: CGFloat; cdecl;
    procedure setStackedItemSpacing(stackedItemSpacing: CGFloat); cdecl;
    function stackedItemSpacing: CGFloat; cdecl;
  end;

  TUITabBarAppearance = class(TOCGenericImport<UITabBarAppearanceClass,
    UITabBarAppearance>)
  end;

  PUITabBarAppearance = Pointer;

  UITabBarControllerClass = interface(UIViewControllerClass)
    ['{0E7069FB-80A7-47CD-BB24-68AD2AD070C1}']
  end;

  UITabBarController = interface(UIViewController)
    ['{7A6B8BD9-6197-419C-8C0E-A0765C88637F}']
    [MethodName('setViewControllers:')]
    procedure setViewControllers(viewControllers: NSArray); cdecl;
    function viewControllers: NSArray; cdecl;
    [MethodName('setViewControllers:animated:')]
    procedure setViewControllersAnimated(viewControllers: NSArray;
      animated: Boolean); cdecl;
    procedure setSelectedViewController(selectedViewController
      : UIViewController); cdecl;
    function selectedViewController: UIViewController; cdecl;
    procedure setSelectedIndex(selectedIndex: NSUInteger); cdecl;
    function selectedIndex: NSUInteger; cdecl;
    function moreNavigationController: UINavigationController; cdecl;
    procedure setCustomizableViewControllers(customizableViewControllers
      : NSArray); cdecl;
    function customizableViewControllers: NSArray; cdecl;
    function tabBar: UITabBar; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
  end;

  TUITabBarController = class(TOCGenericImport<UITabBarControllerClass,
    UITabBarController>)
  end;

  PUITabBarController = Pointer;

  UITableViewControllerClass = interface(UIViewControllerClass)
    ['{0388EB3F-CA80-46F8-8AE8-6E1A3CF3821D}']
  end;

  UITableViewController = interface(UIViewController)
    ['{1C8E8A94-42C0-4224-AE28-BB05920DB1F2}']
    function initWithStyle(style: UITableViewStyle)
      : Pointer { instancetype }; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    procedure setTableView(tableView: UITableView); cdecl;
    function tableView: UITableView; cdecl;
    procedure setClearsSelectionOnViewWillAppear(clearsSelectionOnViewWillAppear
      : Boolean); cdecl;
    function clearsSelectionOnViewWillAppear: Boolean; cdecl;
    procedure setRefreshControl(refreshControl: UIRefreshControl); cdecl;
    function refreshControl: UIRefreshControl; cdecl;
  end;

  TUITableViewController = class(TOCGenericImport<UITableViewControllerClass,
    UITableViewController>)
  end;

  PUITableViewController = Pointer;

  UITextCheckerClass = interface(NSObjectClass)
    ['{AA30F0AC-2838-43F1-A874-FAE7833AD890}']
    { class } procedure learnWord(Word: NSString); cdecl;
    { class } function hasLearnedWord(Word: NSString): Boolean; cdecl;
    { class } procedure unlearnWord(Word: NSString); cdecl;
  end;

  UITextChecker = interface(NSObject)
    ['{51C4F80B-F17E-4B59-96CB-E128FCF17F1C}']
    function rangeOfMisspelledWordInString(stringToCheck: NSString;
      range: NSRange; startingAt: NSInteger; wrap: Boolean; language: NSString)
      : NSRange; cdecl;
    function guessesForWordRange(range: NSRange; inString: NSString;
      language: NSString): NSArray; cdecl;
    function completionsForPartialWordRange(range: NSRange; inString: NSString;
      language: NSString): NSArray; cdecl;
    procedure ignoreWord(wordToIgnore: NSString); cdecl;
    procedure setIgnoredWords(ignoredWords: NSArray); cdecl;
    function ignoredWords: NSArray; cdecl;
    procedure setAvailableLanguages(availableLanguages: NSArray); cdecl;
    function availableLanguages: NSArray; cdecl;
  end;

  TUITextChecker = class(TOCGenericImport<UITextCheckerClass, UITextChecker>)
  end;

  PUITextChecker = Pointer;

  UITextInputContextClass = interface(NSObjectClass)
    ['{4616D0B0-FB16-42B7-A5E0-4B3ECDE22833}']
    { class } function current: UITextInputContext; cdecl;
  end;

  UITextInputContext = interface(NSObject)
    ['{61ECD389-F6E5-412E-AD8E-45723764BC96}']
    procedure setPencilInputExpected(pencilInputExpected: Boolean); cdecl;
    function isPencilInputExpected: Boolean; cdecl;
    procedure setDictationInputExpected(dictationInputExpected: Boolean); cdecl;
    function isDictationInputExpected: Boolean; cdecl;
    procedure setHardwareKeyboardInputExpected(hardwareKeyboardInputExpected
      : Boolean); cdecl;
    function isHardwareKeyboardInputExpected: Boolean; cdecl;
  end;

  TUITextInputContext = class(TOCGenericImport<UITextInputContextClass,
    UITextInputContext>)
  end;

  PUITextInputContext = Pointer;

  UITextViewClass = interface(UIScrollViewClass)
    ['{E6F75427-BA29-4025-8FBF-FB69AABAF4B5}']
    { class } function textViewUsingTextLayoutManager(usingTextLayoutManager
      : Boolean): Pointer { instancetype }; cdecl;
  end;

  UITextView = interface(UIScrollView)
    ['{47CF7937-8C44-4E37-A4D3-75F1DD8BDA46}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setText(text: NSString); cdecl;
    function text: NSString; cdecl;
    procedure setFont(font: UIFont); cdecl;
    function font: UIFont; cdecl;
    procedure setTextColor(textColor: UIColor); cdecl;
    function textColor: UIColor; cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    function textAlignment: NSTextAlignment; cdecl;
    procedure setSelectedRange(selectedRange: NSRange); cdecl;
    function selectedRange: NSRange; cdecl;
    procedure setEditable(editable: Boolean); cdecl;
    function isEditable: Boolean; cdecl;
    procedure setSelectable(selectable: Boolean); cdecl;
    function isSelectable: Boolean; cdecl;
    procedure setDataDetectorTypes(dataDetectorTypes
      : UIDataDetectorTypes); cdecl;
    function dataDetectorTypes: UIDataDetectorTypes; cdecl;
    procedure setAllowsEditingTextAttributes(allowsEditingTextAttributes
      : Boolean); cdecl;
    function allowsEditingTextAttributes: Boolean; cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    function attributedText: NSAttributedString; cdecl;
    procedure setTypingAttributes(typingAttributes: NSDictionary); cdecl;
    function typingAttributes: NSDictionary; cdecl;
    procedure scrollRangeToVisible(range: NSRange); cdecl;
    procedure setInputView(inputView: UIView); cdecl;
    function inputView: UIView; cdecl;
    procedure setInputAccessoryView(inputAccessoryView: UIView); cdecl;
    function inputAccessoryView: UIView; cdecl;
    procedure setClearsOnInsertion(clearsOnInsertion: Boolean); cdecl;
    function clearsOnInsertion: Boolean; cdecl;
    function initWithFrame(frame: CGRect; textContainer: NSTextContainer)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function textContainer: NSTextContainer; cdecl;
    procedure setTextContainerInset(textContainerInset: UIEdgeInsets); cdecl;
    function textContainerInset: UIEdgeInsets; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function layoutManager: NSLayoutManager; cdecl;
    function textStorage: NSTextStorage; cdecl;
    procedure setLinkTextAttributes(linkTextAttributes: NSDictionary); cdecl;
    function linkTextAttributes: NSDictionary; cdecl;
    procedure setUsesStandardTextScaling(usesStandardTextScaling
      : Boolean); cdecl;
    function usesStandardTextScaling: Boolean; cdecl;
    function findInteraction: UIFindInteraction; cdecl;
    procedure setFindInteractionEnabled(findInteractionEnabled: Boolean); cdecl;
    function isFindInteractionEnabled: Boolean; cdecl;
    procedure setInteractionState(interactionState: Pointer); cdecl;
    function interactionState: Pointer; cdecl;
  end;

  TUITextView = class(TOCGenericImport<UITextViewClass, UITextView>)
  end;

  PUITextView = Pointer;

  UIToolbarAppearanceClass = interface(UIBarAppearanceClass)
    ['{1FF5A98C-943F-4387-A9CB-A8C227F751BD}']
  end;

  UIToolbarAppearance = interface(UIBarAppearance)
    ['{141E9659-CFA3-4E33-91A4-CD5E368FC04C}']
    procedure setButtonAppearance(buttonAppearance
      : UIBarButtonItemAppearance); cdecl;
    function buttonAppearance: UIBarButtonItemAppearance; cdecl;
    procedure setDoneButtonAppearance(doneButtonAppearance
      : UIBarButtonItemAppearance); cdecl;
    function doneButtonAppearance: UIBarButtonItemAppearance; cdecl;
  end;

  TUIToolbarAppearance = class(TOCGenericImport<UIToolbarAppearanceClass,
    UIToolbarAppearance>)
  end;

  PUIToolbarAppearance = Pointer;

  UIVideoEditorControllerClass = interface(UINavigationControllerClass)
    ['{B7ED1D5A-186C-4586-86B1-AD51795E0091}']
    { class } function canEditVideoAtPath(videoPath: NSString): Boolean; cdecl;
  end;

  UIVideoEditorController = interface(UINavigationController)
    ['{50CD6324-C897-47B9-992D-7A2E836CFFD2}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setVideoPath(videoPath: NSString); cdecl;
    function videoPath: NSString; cdecl;
    procedure setVideoMaximumDuration(videoMaximumDuration
      : NSTimeInterval); cdecl;
    function videoMaximumDuration: NSTimeInterval; cdecl;
    procedure setVideoQuality(videoQuality
      : UIImagePickerControllerQualityType); cdecl;
    function videoQuality: UIImagePickerControllerQualityType; cdecl;
  end;

  TUIVideoEditorController = class
    (TOCGenericImport<UIVideoEditorControllerClass, UIVideoEditorController>)
  end;

  PUIVideoEditorController = Pointer;

  UIWebViewClass = interface(UIViewClass)
    ['{1293E262-D53E-445E-AFCA-A3A18DB37DD2}']
  end;

  UIWebView = interface(UIView)
    ['{D467C244-F916-4B56-8F1C-F544A831BDDA}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function scrollView: UIScrollView; cdecl;
    procedure loadRequest(request: NSURLRequest); cdecl;
    procedure loadHTMLString(&string: NSString; baseURL: NSURL); cdecl;
    procedure loadData(data: NSData; MIMEType: NSString;
      textEncodingName: NSString; baseURL: NSURL); cdecl;
    function request: NSURLRequest; cdecl;
    procedure reload; cdecl;
    procedure stopLoading; cdecl;
    procedure goBack; cdecl;
    procedure goForward; cdecl;
    function canGoBack: Boolean; cdecl;
    function canGoForward: Boolean; cdecl;
    function isLoading: Boolean; cdecl;
    function stringByEvaluatingJavaScriptFromString(script: NSString)
      : NSString; cdecl;
    procedure setScalesPageToFit(scalesPageToFit: Boolean); cdecl;
    function scalesPageToFit: Boolean; cdecl;
    procedure setDetectsPhoneNumbers(detectsPhoneNumbers: Boolean); cdecl;
    function detectsPhoneNumbers: Boolean; cdecl;
    procedure setDataDetectorTypes(dataDetectorTypes
      : UIDataDetectorTypes); cdecl;
    function dataDetectorTypes: UIDataDetectorTypes; cdecl;
    procedure setAllowsInlineMediaPlayback(allowsInlineMediaPlayback
      : Boolean); cdecl;
    function allowsInlineMediaPlayback: Boolean; cdecl;
    procedure setMediaPlaybackRequiresUserAction(mediaPlaybackRequiresUserAction
      : Boolean); cdecl;
    function mediaPlaybackRequiresUserAction: Boolean; cdecl;
    procedure setMediaPlaybackAllowsAirPlay(mediaPlaybackAllowsAirPlay
      : Boolean); cdecl;
    function mediaPlaybackAllowsAirPlay: Boolean; cdecl;
    procedure setSuppressesIncrementalRendering(suppressesIncrementalRendering
      : Boolean); cdecl;
    function suppressesIncrementalRendering: Boolean; cdecl;
    procedure setKeyboardDisplayRequiresUserAction
      (keyboardDisplayRequiresUserAction: Boolean); cdecl;
    function keyboardDisplayRequiresUserAction: Boolean; cdecl;
    procedure setPaginationMode(paginationMode: UIWebPaginationMode); cdecl;
    function paginationMode: UIWebPaginationMode; cdecl;
    procedure setPaginationBreakingMode(paginationBreakingMode
      : UIWebPaginationBreakingMode); cdecl;
    function paginationBreakingMode: UIWebPaginationBreakingMode; cdecl;
    procedure setPageLength(pageLength: CGFloat); cdecl;
    function pageLength: CGFloat; cdecl;
    procedure setGapBetweenPages(gapBetweenPages: CGFloat); cdecl;
    function gapBetweenPages: CGFloat; cdecl;
    function pageCount: NSUInteger; cdecl;
    procedure setAllowsPictureInPictureMediaPlayback
      (allowsPictureInPictureMediaPlayback: Boolean); cdecl;
    function allowsPictureInPictureMediaPlayback: Boolean; cdecl;
    procedure setAllowsLinkPreview(allowsLinkPreview: Boolean); cdecl;
    function allowsLinkPreview: Boolean; cdecl;
  end;

  TUIWebView = class(TOCGenericImport<UIWebViewClass, UIWebView>)
  end;

  PUIWebView = Pointer;

  UISpringLoadedInteractionClass = interface(NSObjectClass)
    ['{65247A3A-530C-4035-A080-20C445CC3F6B}']
  end;

  UISpringLoadedInteraction = interface(NSObject)
    ['{8A548E9C-3BDE-413E-BB9D-04A86C4736E8}']
    function initWithInteractionBehavior(interactionBehavior: Pointer;
      interactionEffect: Pointer; activationHandler: TUIKitActivationHandler)
      : Pointer { instancetype }; cdecl;
    function initWithActivationHandler(handler: TUIKitActivationHandler)
      : Pointer { instancetype }; cdecl;
    function interactionBehavior: Pointer; cdecl;
    function interactionEffect: Pointer; cdecl;
  end;

  TUISpringLoadedInteraction = class
    (TOCGenericImport<UISpringLoadedInteractionClass,
    UISpringLoadedInteraction>)
  end;

  PUISpringLoadedInteraction = Pointer;

  UITabBarItemStateAppearanceClass = interface(NSObjectClass)
    ['{B3E91F73-499E-43E5-8E6A-043290CED099}']
  end;

  UITabBarItemStateAppearance = interface(NSObject)
    ['{66B0F50B-5092-4791-BD8C-A95EA8E16A0C}']
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment
      : UIOffset); cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
    procedure setIconColor(iconColor: UIColor); cdecl;
    function iconColor: UIColor; cdecl;
    procedure setBadgePositionAdjustment(badgePositionAdjustment
      : UIOffset); cdecl;
    function badgePositionAdjustment: UIOffset; cdecl;
    procedure setBadgeBackgroundColor(badgeBackgroundColor: UIColor); cdecl;
    function badgeBackgroundColor: UIColor; cdecl;
    procedure setBadgeTextAttributes(badgeTextAttributes: NSDictionary); cdecl;
    function badgeTextAttributes: NSDictionary; cdecl;
    procedure setBadgeTitlePositionAdjustment(badgeTitlePositionAdjustment
      : UIOffset); cdecl;
    function badgeTitlePositionAdjustment: UIOffset; cdecl;
  end;

  TUITabBarItemStateAppearance = class
    (TOCGenericImport<UITabBarItemStateAppearanceClass,
    UITabBarItemStateAppearance>)
  end;

  PUITabBarItemStateAppearance = Pointer;

  UITabBarItemAppearanceClass = interface(NSObjectClass)
    ['{C3CBDDA8-6C87-4351-B693-66E312B5B57B}']
  end;

  UITabBarItemAppearance = interface(NSObject)
    ['{E6C174DF-46FE-45C7-9747-4D18DBCAF7D6}']
    function init: Pointer { instancetype }; cdecl;
    function initWithStyle(style: UITabBarItemAppearanceStyle)
      : Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function copy: Pointer { instancetype }; cdecl;
    procedure configureWithDefaultForStyle
      (style: UITabBarItemAppearanceStyle); cdecl;
    function normal: UITabBarItemStateAppearance; cdecl;
    function selected: UITabBarItemStateAppearance; cdecl;
    function disabled: UITabBarItemStateAppearance; cdecl;
    function focused: UITabBarItemStateAppearance; cdecl;
  end;

  TUITabBarItemAppearance = class(TOCGenericImport<UITabBarItemAppearanceClass,
    UITabBarItemAppearance>)
  end;

  PUITabBarItemAppearance = Pointer;

  UISearchSuggestionItemClass = interface(NSObjectClass)
    ['{B2D5F824-C6C5-4927-817F-91B628E2536E}']
    [MethodName('suggestionWithLocalizedSuggestion:')]
    { class } function suggestionWithLocalizedSuggestion(suggestion: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName('suggestionWithLocalizedSuggestion:descriptionString:')]
    { class } function suggestionWithLocalizedSuggestionDescriptionString
      (suggestion: NSString; descriptionString: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('suggestionWithLocalizedSuggestion:descriptionString:iconImage:')]
    { class } function
      suggestionWithLocalizedSuggestionDescriptionStringIconImage
      (suggestion: NSString; descriptionString: NSString; iconImage: UIImage)
      : Pointer { instancetype }; cdecl;
    [MethodName('suggestionWithLocalizedAttributedSuggestion:')]
    { class } function suggestionWithLocalizedAttributedSuggestion
      (suggestion: NSAttributedString): Pointer { instancetype }; cdecl;
    [MethodName
      ('suggestionWithLocalizedAttributedSuggestion:descriptionString:')]
    { class } function
      suggestionWithLocalizedAttributedSuggestionDescriptionString
      (suggestion: NSAttributedString; descriptionString: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('suggestionWithLocalizedAttributedSuggestion:descriptionString:iconImage:')
      ]
    { class } function
      suggestionWithLocalizedAttributedSuggestionDescriptionStringIconImage
      (suggestion: NSAttributedString; descriptionString: NSString;
      iconImage: UIImage): Pointer { instancetype }; cdecl;
  end;

  UISearchSuggestionItem = interface(NSObject)
    ['{FC5B1115-113E-46C4-9BB4-7BD66833EE68}']
    [MethodName('initWithLocalizedSuggestion:')]
    function initWithLocalizedSuggestion(suggestion: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithLocalizedSuggestion:localizedDescription:')]
    function initWithLocalizedSuggestionLocalizedDescription
      (suggestion: NSString; localizedDescription: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithLocalizedSuggestion:localizedDescription:iconImage:')]
    function initWithLocalizedSuggestionLocalizedDescriptionIconImage
      (suggestion: NSString; localizedDescription: NSString; iconImage: UIImage)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithLocalizedAttributedSuggestion:')]
    function initWithLocalizedAttributedSuggestion
      (suggestion: NSAttributedString): Pointer { instancetype }; cdecl;
    [MethodName('initWithLocalizedAttributedSuggestion:localizedDescription:')]
    function initWithLocalizedAttributedSuggestionLocalizedDescription
      (suggestion: NSAttributedString; localizedDescription: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('initWithLocalizedAttributedSuggestion:localizedDescription:iconImage:')]
    function initWithLocalizedAttributedSuggestionLocalizedDescriptionIconImage
      (suggestion: NSAttributedString; localizedDescription: NSString;
      iconImage: UIImage): Pointer { instancetype }; cdecl;
    function localizedAttributedSuggestion: NSAttributedString; cdecl;
    function localizedSuggestion: NSString; cdecl;
    function localizedDescription: NSString; cdecl;
    function iconImage: UIImage; cdecl;
    procedure setRepresentedObject(representedObject: Pointer); cdecl;
    function representedObject: Pointer; cdecl;
  end;

  TUISearchSuggestionItem = class(TOCGenericImport<UISearchSuggestionItemClass,
    UISearchSuggestionItem>)
  end;

  PUISearchSuggestionItem = Pointer;

  UIScribbleInteractionClass = interface(NSObjectClass)
    ['{EFDBD8EA-8A28-4699-B93F-EE2E63CB9976}']
  end;

  UIScribbleInteraction = interface(NSObject)
    ['{108A27DD-C83E-4AE9-95DC-C61E6E951755}']
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    function delegate: Pointer; cdecl;
    function isHandlingWriting: Boolean; cdecl;
    function pencilInputExpected: Boolean; cdecl;
  end;

  TUIScribbleInteraction = class(TOCGenericImport<UIScribbleInteractionClass,
    UIScribbleInteraction>)
  end;

  PUIScribbleInteraction = Pointer;

  UIStackViewClass = interface(UIViewClass)
    ['{26492BCF-E425-40D0-A3C9-D8F9AB7BBD9E}']
  end;

  UIStackView = interface(UIView)
    ['{D4BBEED7-87FA-4E05-943A-DF07C1FB8EC5}']
    function initWithFrame(frame: CGRect): Pointer { instancetype }; cdecl;
    function initWithCoder(coder: NSCoder): Pointer { instancetype }; cdecl;
    function initWithArrangedSubviews(views: NSArray)
      : Pointer { instancetype }; cdecl;
    function arrangedSubviews: NSArray; cdecl;
    procedure addArrangedSubview(view: UIView); cdecl;
    procedure removeArrangedSubview(view: UIView); cdecl;
    procedure insertArrangedSubview(view: UIView; atIndex: NSUInteger); cdecl;
    procedure setAxis(axis: UILayoutConstraintAxis); cdecl;
    function axis: UILayoutConstraintAxis; cdecl;
    procedure setDistribution(distribution: UIStackViewDistribution); cdecl;
    function distribution: UIStackViewDistribution; cdecl;
    procedure setAlignment(alignment: UIStackViewAlignment); cdecl;
    function alignment: UIStackViewAlignment; cdecl;
    procedure setSpacing(spacing: CGFloat); cdecl;
    function spacing: CGFloat; cdecl;
    procedure setCustomSpacing(spacing: CGFloat; afterView: UIView); cdecl;
    function customSpacingAfterView(arrangedSubview: UIView): CGFloat; cdecl;
    procedure setBaselineRelativeArrangement(baselineRelativeArrangement
      : Boolean); cdecl;
    function isBaselineRelativeArrangement: Boolean; cdecl;
    procedure setLayoutMarginsRelativeArrangement
      (layoutMarginsRelativeArrangement: Boolean); cdecl;
    function isLayoutMarginsRelativeArrangement: Boolean; cdecl;
  end;

  TUIStackView = class(TOCGenericImport<UIStackViewClass, UIStackView>)
  end;

  PUIStackView = Pointer;

  UIPreviewInteractionClass = interface(NSObjectClass)
    ['{11F84E70-18D6-4626-A092-00BEE83B5296}']
  end;

  UIPreviewInteraction = interface(NSObject)
    ['{AD14CC3C-59F7-40D1-9D53-8F29BBFAFEAA}']
    function initWithView(view: UIView): Pointer { instancetype }; cdecl;
    function view: UIView; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function locationInCoordinateSpace(coordinateSpace: Pointer)
      : CGPoint; cdecl;
    procedure cancelInteraction; cdecl;
  end;

  TUIPreviewInteraction = class(TOCGenericImport<UIPreviewInteractionClass,
    UIPreviewInteraction>)
  end;

  PUIPreviewInteraction = Pointer;

  UISheetPresentationControllerDetentClass = interface(NSObjectClass)
    ['{335E1884-B4B9-4C6A-A027-EE91F4077918}']
    { class } function mediumDetent: Pointer { instancetype }; cdecl;
    { class } function largeDetent: Pointer { instancetype }; cdecl;
    { class } function customDetentWithIdentifier
      (identifier: UISheetPresentationControllerDetentIdentifier;
      resolver: TUIKitResolver): Pointer { instancetype }; cdecl;
  end;

  UISheetPresentationControllerDetent = interface(NSObject)
    ['{1D415937-ACD1-4B4C-ABDC-3FCC2F3098F4}']
    function identifier: UISheetPresentationControllerDetentIdentifier; cdecl;
    function resolvedValueInContext(context: Pointer): CGFloat; cdecl;
  end;

  TUISheetPresentationControllerDetent = class
    (TOCGenericImport<UISheetPresentationControllerDetentClass,
    UISheetPresentationControllerDetent>)
  end;

  PUISheetPresentationControllerDetent = Pointer;

  UIPushBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{76EDAFE1-E103-44BF-B0BC-B95ABC0C8706}']
  end;

  UIPushBehavior = interface(UIDynamicBehavior)
    ['{421AC708-DD6D-4373-8477-6C905B59286F}']
    function initWithItems(items: NSArray; mode: UIPushBehaviorMode)
      : Pointer { instancetype }; cdecl;
    procedure addItem(item: Pointer); cdecl;
    procedure removeItem(item: Pointer); cdecl;
    function items: NSArray; cdecl;
    function targetOffsetFromCenterForItem(item: Pointer): UIOffset; cdecl;
    procedure setTargetOffsetFromCenter(o: UIOffset; forItem: Pointer); cdecl;
    function mode: UIPushBehaviorMode; cdecl;
    procedure setActive(active: Boolean); cdecl;
    function active: Boolean; cdecl;
    [MethodName('setAngle:')]
    procedure setAngle(angle: CGFloat); cdecl;
    function angle: CGFloat; cdecl;
    procedure setMagnitude(magnitude: CGFloat); cdecl;
    function magnitude: CGFloat; cdecl;
    procedure setPushDirection(pushDirection: CGVector); cdecl;
    function pushDirection: CGVector; cdecl;
    [MethodName('setAngle:magnitude:')]
    procedure setAngleMagnitude(angle: CGFloat; magnitude: CGFloat); cdecl;
  end;

  TUIPushBehavior = class(TOCGenericImport<UIPushBehaviorClass, UIPushBehavior>)
  end;

  PUIPushBehavior = Pointer;

  UISnapBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{1E7323C8-F95C-4E53-8315-534044CFB9AD}']
  end;

  UISnapBehavior = interface(UIDynamicBehavior)
    ['{E48E4029-02B4-4C0D-9D77-DA4E8C92A287}']
    function initWithItem(item: Pointer; snapToPoint: CGPoint)
      : Pointer { instancetype }; cdecl;
    procedure setSnapPoint(snapPoint: CGPoint); cdecl;
    function snapPoint: CGPoint; cdecl;
    procedure setDamping(damping: CGFloat); cdecl;
    function damping: CGFloat; cdecl;
  end;

  TUISnapBehavior = class(TOCGenericImport<UISnapBehaviorClass, UISnapBehavior>)
  end;

  PUISnapBehavior = Pointer;

  UITextDragPreviewRendererClass = interface(NSObjectClass)
    ['{101A505E-3E3C-4012-8899-16F60C4C4F01}']
  end;

  UITextDragPreviewRenderer = interface(NSObject)
    ['{358C37E0-006F-4673-AD56-9386959B241D}']
    [MethodName('initWithLayoutManager:range:')]
    function initWithLayoutManagerRange(layoutManager: NSLayoutManager;
      range: NSRange): Pointer { instancetype }; cdecl;
    [MethodName('initWithLayoutManager:range:unifyRects:')]
    function initWithLayoutManagerRangeUnifyRects(layoutManager
      : NSLayoutManager; range: NSRange; unifyRects: Boolean)
      : Pointer { instancetype }; cdecl;
    function layoutManager: NSLayoutManager; cdecl;
    function image: UIImage; cdecl;
    function firstLineRect: CGRect; cdecl;
    function bodyRect: CGRect; cdecl;
    function lastLineRect: CGRect; cdecl;
    procedure adjustFirstLineRect(firstLineRect: PCGRect; bodyRect: PCGRect;
      lastLineRect: PCGRect; textOrigin: CGPoint); cdecl;
  end;

  TUITextDragPreviewRenderer = class
    (TOCGenericImport<UITextDragPreviewRendererClass,
    UITextDragPreviewRenderer>)
  end;

  PUITextDragPreviewRenderer = Pointer;

  UIViewPropertyAnimatorClass = interface(NSObjectClass)
    ['{F8E32DF5-0347-4D51-844E-DE55C2DB9327}']
    { class } function runningPropertyAnimatorWithDuration
      (duration: NSTimeInterval; delay: NSTimeInterval;
      options: UIViewAnimationOptions; animations: TUIKitAction;
      completion: TUIKitCompletion1): Pointer { instancetype }; cdecl;
  end;

  UIViewPropertyAnimator = interface(NSObject)
    ['{BFEDF35A-97A1-436C-8FEA-84E1C6C083C2}']
    function timingParameters: Pointer; cdecl;
    function duration: NSTimeInterval; cdecl;
    function delay: NSTimeInterval; cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    procedure setManualHitTestingEnabled(manualHitTestingEnabled
      : Boolean); cdecl;
    function isManualHitTestingEnabled: Boolean; cdecl;
    procedure setInterruptible(interruptible: Boolean); cdecl;
    function isInterruptible: Boolean; cdecl;
    procedure setScrubsLinearly(scrubsLinearly: Boolean); cdecl;
    function scrubsLinearly: Boolean; cdecl;
    procedure setPausesOnCompletion(pausesOnCompletion: Boolean); cdecl;
    function pausesOnCompletion: Boolean; cdecl;
    [MethodName('initWithDuration:timingParameters:')]
    function initWithDurationTimingParameters(duration: NSTimeInterval;
      timingParameters: Pointer): Pointer { instancetype }; cdecl;
    [MethodName('initWithDuration:curve:animations:')]
    function initWithDurationCurveAnimations(duration: NSTimeInterval;
      curve: UIViewAnimationCurve; animations: TUIKitAction)
      : Pointer { instancetype }; cdecl;
    [MethodName('initWithDuration:controlPoint1:controlPoint2:animations:')]
    function initWithDurationControlPoint1ControlPoint2Animations
      (duration: NSTimeInterval; controlPoint1: CGPoint; controlPoint2: CGPoint;
      animations: TUIKitAction): Pointer { instancetype }; cdecl;
    [MethodName('initWithDuration:dampingRatio:animations:')]
    function initWithDurationDampingRatioAnimations(duration: NSTimeInterval;
      dampingRatio: CGFloat; animations: TUIKitAction)
      : Pointer { instancetype }; cdecl;
    [MethodName('addAnimations:delayFactor:')]
    procedure addAnimationsDelayFactor(animation: TUIKitAction;
      delayFactor: CGFloat); cdecl;
    [MethodName('addAnimations:')]
    procedure addAnimations(animation: TUIKitAction); cdecl;
    procedure addCompletion(completion: TUIKitCompletion1); cdecl;
    procedure continueAnimationWithTimingParameters(parameters: Pointer;
      durationFactor: CGFloat); cdecl;
  end;

  TUIViewPropertyAnimator = class(TOCGenericImport<UIViewPropertyAnimatorClass,
    UIViewPropertyAnimator>)
  end;

  PUIViewPropertyAnimator = Pointer;

  UISelectionFeedbackGeneratorClass = interface(UIFeedbackGeneratorClass)
    ['{2171DCE4-515F-4F12-91AE-274D278AC356}']
  end;

  UISelectionFeedbackGenerator = interface(UIFeedbackGenerator)
    ['{7893B92C-849D-4025-8399-2788F31990E1}']
    procedure selectionChanged; cdecl;
  end;

  TUISelectionFeedbackGenerator = class
    (TOCGenericImport<UISelectionFeedbackGeneratorClass,
    UISelectionFeedbackGenerator>)
  end;

  PUISelectionFeedbackGenerator = Pointer;

  UINotificationFeedbackGeneratorClass = interface(UIFeedbackGeneratorClass)
    ['{98651E5B-6C5E-44D6-A787-B2270014076F}']
  end;

  UINotificationFeedbackGenerator = interface(UIFeedbackGenerator)
    ['{C2B392D5-55B2-44E8-9637-4D2D59A11FDD}']
    procedure notificationOccurred(notificationType
      : UINotificationFeedbackType); cdecl;
  end;

  TUINotificationFeedbackGenerator = class
    (TOCGenericImport<UINotificationFeedbackGeneratorClass,
    UINotificationFeedbackGenerator>)
  end;

  PUINotificationFeedbackGenerator = Pointer;

  UITextInteractionClass = interface(NSObjectClass)
    ['{63A4E7F7-D5BE-46D3-93A9-299257D8CEB0}']
    { class } function textInteractionForMode(mode: UITextInteractionMode)
      : Pointer { instancetype }; cdecl;
  end;

  UITextInteraction = interface(NSObject)
    ['{B562A37D-57CB-45AF-9A90-4DDF22A10FBF}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setTextInput(textInput: UIResponder); cdecl;
    function textInput: UIResponder; cdecl;
    function textInteractionMode: UITextInteractionMode; cdecl;
    function gesturesForFailureRequirements: NSArray; cdecl;
  end;

  TUITextInteraction = class(TOCGenericImport<UITextInteractionClass,
    UITextInteraction>)
  end;

  PUITextInteraction = Pointer;

  UIPencilInteractionClass = interface(NSObjectClass)
    ['{88165E94-7428-44B1-BE91-4DB4118A54C3}']
  end;

  UIPencilInteraction = interface(NSObject)
    ['{8F82DE5C-04E2-4904-999D-5E8B80946819}']
    procedure setPreferredTapAction(preferredTapAction
      : UIPencilPreferredAction); cdecl;
    function preferredTapAction: UIPencilPreferredAction; cdecl;
    procedure setPrefersPencilOnlyDrawing(prefersPencilOnlyDrawing
      : Boolean); cdecl;
    function prefersPencilOnlyDrawing: Boolean; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
  end;

  TUIPencilInteraction = class(TOCGenericImport<UIPencilInteractionClass,
    UIPencilInteraction>)
  end;

  PUIPencilInteraction = Pointer;

  UIWindowSceneGeometryPreferencesMacClass = interface
    (UIWindowSceneGeometryPreferencesClass)
    ['{164F6B9A-9ADB-48B5-BC20-B7BD328A3E18}']
  end;

  UIWindowSceneGeometryPreferencesMac = interface
    (UIWindowSceneGeometryPreferences)
    ['{263CE2BA-3321-4606-B6DB-9D07C579D863}']
    function initWithSystemFrame(systemFrame: CGRect)
      : Pointer { instancetype }; cdecl;
    procedure setSystemFrame(systemFrame: CGRect); cdecl;
    function systemFrame: CGRect; cdecl;
  end;

  TUIWindowSceneGeometryPreferencesMac = class
    (TOCGenericImport<UIWindowSceneGeometryPreferencesMacClass,
    UIWindowSceneGeometryPreferencesMac>)
  end;

  PUIWindowSceneGeometryPreferencesMac = Pointer;

  UIWindowSceneGeometryPreferencesIOSClass = interface
    (UIWindowSceneGeometryPreferencesClass)
    ['{A1176CCD-7A42-4BB3-ABB8-29CAA9338F22}']
  end;

  UIWindowSceneGeometryPreferencesIOS = interface
    (UIWindowSceneGeometryPreferences)
    ['{9645522F-1BCA-476E-B02C-F49E67AAFBBE}']
    function initWithInterfaceOrientations(interfaceOrientations
      : UIInterfaceOrientationMask): Pointer { instancetype }; cdecl;
    procedure setInterfaceOrientations(interfaceOrientations
      : UIInterfaceOrientationMask); cdecl;
    function interfaceOrientations: UIInterfaceOrientationMask; cdecl;
  end;

  TUIWindowSceneGeometryPreferencesIOS = class
    (TOCGenericImport<UIWindowSceneGeometryPreferencesIOSClass,
    UIWindowSceneGeometryPreferencesIOS>)
  end;

  PUIWindowSceneGeometryPreferencesIOS = Pointer;

  UIStatusBarManagerClass = interface(NSObjectClass)
    ['{56CBC8F3-56EB-4976-A3D7-F777C7C6DE32}']
  end;

  UIStatusBarManager = interface(NSObject)
    ['{4728CFA3-AEF7-49C5-AA20-2BCA9ED23336}']
    function statusBarStyle: UIStatusBarStyle; cdecl;
    function isStatusBarHidden: Boolean; cdecl;
    function statusBarFrame: CGRect; cdecl;
  end;

  TUIStatusBarManager = class(TOCGenericImport<UIStatusBarManagerClass,
    UIStatusBarManager>)
  end;

  PUIStatusBarManager = Pointer;

  UIScreenshotServiceClass = interface(NSObjectClass)
    ['{EFF77A5C-D386-4A0A-94E3-0D10A4328EB9}']
  end;

  UIScreenshotService = interface(NSObject)
    ['{38329D73-A3B5-4AE8-B8AE-0AA1E644DDDE}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    function windowScene: UIWindowScene; cdecl;
  end;

  TUIScreenshotService = class(TOCGenericImport<UIScreenshotServiceClass,
    UIScreenshotService>)
  end;

  PUIScreenshotService = Pointer;

  UIMenuSystemClass = interface(NSObjectClass)
    ['{D44C1AD0-7A4D-46DA-943E-29206C7E4840}']
  end;

  UIMenuSystem = interface(NSObject)
    ['{71536AE1-D58F-4D85-A45C-E45A4EC441DC}']
    procedure setMainSystem(mainSystem: UIMenuSystem); cdecl;
    function mainSystem: UIMenuSystem; cdecl;
    procedure setContextSystem(contextSystem: UIMenuSystem); cdecl;
    function contextSystem: UIMenuSystem; cdecl;
    procedure setNeedsRebuild; cdecl;
    procedure setNeedsRevalidate; cdecl;
  end;

  TUIMenuSystem = class(TOCGenericImport<UIMenuSystemClass, UIMenuSystem>)
  end;

  PUIMenuSystem = Pointer;

  UITextFormattingCoordinatorClass = interface(NSObjectClass)
    ['{03118A03-52BE-4A68-AACB-CE507BDCBBF8}']
    { class } function textFormattingCoordinatorForWindowScene
      (windowScene: UIWindowScene): Pointer { instancetype }; cdecl;
    { class } procedure toggleFontPanel(sender: Pointer); cdecl;
  end;

  UITextFormattingCoordinator = interface(NSObject)
    ['{E7D6B41F-176E-45F0-93A6-10B4D398B526}']
    procedure setDelegate(delegate: Pointer); cdecl;
    function delegate: Pointer; cdecl;
    procedure setFontPanelVisible(fontPanelVisible: Boolean); cdecl;
    function fontPanelVisible: Boolean; cdecl;
    function initWithWindowScene(windowScene: UIWindowScene)
      : Pointer { instancetype }; cdecl;
    procedure setSelectedAttributes(attributes: NSDictionary;
      isMultiple: Boolean); cdecl;
  end;

  TUITextFormattingCoordinator = class
    (TOCGenericImport<UITextFormattingCoordinatorClass,
    UITextFormattingCoordinator>)
  end;

  PUITextFormattingCoordinator = Pointer;

  UIPointerRegionClass = interface(NSObjectClass)
    ['{56551F70-AF78-4D6B-ACA2-92C5CA582395}']
    { class } function regionWithRect(rect: CGRect; identifier: Pointer)
      : Pointer { instancetype }; cdecl;
  end;

  UIPointerRegion = interface(NSObject)
    ['{3FCBC923-44F9-419A-8944-8CC99155163B}']
    function rect: CGRect; cdecl;
    function identifier: Pointer; cdecl;
    procedure setLatchingAxes(latchingAxes: UIAxis); cdecl;
    function latchingAxes: UIAxis; cdecl;
  end;

  TUIPointerRegion = class(TOCGenericImport<UIPointerRegionClass,
    UIPointerRegion>)
  end;

  PUIPointerRegion = Pointer;

  UIPointerAccessoryClass = interface(NSObjectClass)
    ['{97BADA1D-C6C0-4105-AA59-BBE2F63D6F68}']
    { class } function accessoryWithShape(shape: UIPointerShape;
      position: UIPointerAccessoryPosition): Pointer { instancetype }; cdecl;
    { class } function arrowAccessoryWithPosition
      (position: UIPointerAccessoryPosition): Pointer { instancetype }; cdecl;
  end;

  UIPointerAccessory = interface(NSObject)
    ['{228FEF45-664E-4166-9C72-DE79C0B5A65D}']
    function shape: UIPointerShape; cdecl;
    function position: UIPointerAccessoryPosition; cdecl;
    procedure setOrientationMatchesAngle(orientationMatchesAngle
      : Boolean); cdecl;
    function orientationMatchesAngle: Boolean; cdecl;
  end;

  TUIPointerAccessory = class(TOCGenericImport<UIPointerAccessoryClass,
    UIPointerAccessory>)
  end;

  PUIPointerAccessory = Pointer;

  UIPointerHighlightEffectClass = interface(UIPointerEffectClass)
    ['{6F3F387F-8ED0-45CE-8D29-DDF1317F8E94}']
  end;

  UIPointerHighlightEffect = interface(UIPointerEffect)
    ['{9045F87D-150A-4A1A-857E-5474CF40F2EF}']
  end;

  TUIPointerHighlightEffect = class
    (TOCGenericImport<UIPointerHighlightEffectClass, UIPointerHighlightEffect>)
  end;

  PUIPointerHighlightEffect = Pointer;

  UIPointerLiftEffectClass = interface(UIPointerEffectClass)
    ['{6E391CF6-C166-45A8-A43C-0DF783FE9850}']
  end;

  UIPointerLiftEffect = interface(UIPointerEffect)
    ['{6705044C-70D9-47E2-A3BC-04B9F90CA7CF}']
  end;

  TUIPointerLiftEffect = class(TOCGenericImport<UIPointerLiftEffectClass,
    UIPointerLiftEffect>)
  end;

  PUIPointerLiftEffect = Pointer;

  UIPointerHoverEffectClass = interface(UIPointerEffectClass)
    ['{7E46330B-8CE4-41BB-8741-BBDAD22001B1}']
  end;

  UIPointerHoverEffect = interface(UIPointerEffect)
    ['{0E162449-CFD7-4204-B3E4-EC56063AAC1A}']
    procedure setPreferredTintMode(preferredTintMode
      : UIPointerEffectTintMode); cdecl;
    function preferredTintMode: UIPointerEffectTintMode; cdecl;
    procedure setPrefersShadow(prefersShadow: Boolean); cdecl;
    function prefersShadow: Boolean; cdecl;
    procedure setPrefersScaledContent(prefersScaledContent: Boolean); cdecl;
    function prefersScaledContent: Boolean; cdecl;
  end;

  TUIPointerHoverEffect = class(TOCGenericImport<UIPointerHoverEffectClass,
    UIPointerHoverEffect>)
  end;

  PUIPointerHoverEffect = Pointer;

  UIPointerRegionRequestClass = interface(NSObjectClass)
    ['{14BF7931-4E97-46EA-B8F9-F649FDFF01A4}']
  end;

  UIPointerRegionRequest = interface(NSObject)
    ['{FF74F8E3-0901-4EFB-89BA-55C9EA32A3DA}']
    function location: CGPoint; cdecl;
    function modifiers: UIKeyModifierFlags; cdecl;
  end;

  TUIPointerRegionRequest = class(TOCGenericImport<UIPointerRegionRequestClass,
    UIPointerRegionRequest>)
  end;

  PUIPointerRegionRequest = Pointer;

  UIPointerInteractionClass = interface(NSObjectClass)
    ['{2B5FD6DC-0A92-4C11-A962-2C6FBDC9D782}']
  end;

  UIPointerInteraction = interface(NSObject)
    ['{4C9624E4-363A-46DB-9E51-25A8D8476D20}']
    function delegate: Pointer; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function isEnabled: Boolean; cdecl;
    function initWithDelegate(delegate: Pointer)
      : Pointer { instancetype }; cdecl;
    procedure invalidate; cdecl;
  end;

  TUIPointerInteraction = class(TOCGenericImport<UIPointerInteractionClass,
    UIPointerInteraction>)
  end;

  PUIPointerInteraction = Pointer;

  UIWindowSceneActivationRequestOptionsClass = interface
    (UISceneActivationRequestOptionsClass)
    ['{1472CD0A-19A7-47A9-8928-62EB109E49D2}']
  end;

  UIWindowSceneActivationRequestOptions = interface
    (UISceneActivationRequestOptions)
    ['{8852A735-9B7C-4463-BE21-D023887A07F9}']
    procedure setPreferredPresentationStyle(preferredPresentationStyle
      : UIWindowScenePresentationStyle); cdecl;
    function preferredPresentationStyle: UIWindowScenePresentationStyle; cdecl;
  end;

  TUIWindowSceneActivationRequestOptions = class
    (TOCGenericImport<UIWindowSceneActivationRequestOptionsClass,
    UIWindowSceneActivationRequestOptions>)
  end;

  PUIWindowSceneActivationRequestOptions = Pointer;

  UIWindowSceneActivationActionClass = interface(UIActionClass)
    ['{876B773A-5EA5-4864-B6AA-B0DCBDD1504D}']
    { class } function actionWithIdentifier(identifier: UIActionIdentifier;
      alternateAction: UIAction;
      configurationProvider: UIWindowSceneActivationActionConfigurationProvider)
      : Pointer { instancetype }; cdecl;
  end;

  UIWindowSceneActivationAction = interface(UIAction)
    ['{2622D412-7836-4476-B1DC-270D8C0550E6}']
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
  end;

  TUIWindowSceneActivationAction = class
    (TOCGenericImport<UIWindowSceneActivationActionClass,
    UIWindowSceneActivationAction>)
  end;

  PUIWindowSceneActivationAction = Pointer;

  UIWindowSceneActivationInteractionClass = interface(NSObjectClass)
    ['{43C77C70-CC46-498B-9A0C-B224424439D6}']
  end;

  UIWindowSceneActivationInteraction = interface(NSObject)
    ['{DCC49E15-BD97-4593-BE52-1A6AF19437DF}']
    function initWithConfigurationProvider(configurationProvider
      : UIWindowSceneActivationInteractionConfigurationProvider;
      errorHandler: TUIKitErrorHandler): Pointer { instancetype }; cdecl;
  end;

  TUIWindowSceneActivationInteraction = class
    (TOCGenericImport<UIWindowSceneActivationInteractionClass,
    UIWindowSceneActivationInteraction>)
  end;

  PUIWindowSceneActivationInteraction = Pointer;

  UIToolTipConfigurationClass = interface(NSObjectClass)
    ['{5F686FA0-3A06-4C98-8311-4E874D866F7E}']
    [MethodName('configurationWithToolTip:')]
    { class } function configurationWithToolTip(toolTip: NSString)
      : Pointer { instancetype }; cdecl;
    [MethodName('configurationWithToolTip:inRect:')]
    { class } function configurationWithToolTipInRect(toolTip: NSString;
      inRect: CGRect): Pointer { instancetype }; cdecl;
  end;

  UIToolTipConfiguration = interface(NSObject)
    ['{539B2962-1185-4E0E-A26A-F31DCAE3AEF4}']
    function toolTip: NSString; cdecl;
    function sourceRect: CGRect; cdecl;
  end;

  TUIToolTipConfiguration = class(TOCGenericImport<UIToolTipConfigurationClass,
    UIToolTipConfiguration>)
  end;

  PUIToolTipConfiguration = Pointer;

  // ===== Protocol declarations =====

  UIPopoverPresentationControllerSourceItem = interface(IObjectiveC)
    ['{B4C6374E-8D79-4984-98FE-0C1FF2F67193}']
  end;

  UIMenuLeaf = interface(IObjectiveC)
    ['{E2C49B35-A7F3-4E69-839F-B991D5B50E6D}']
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    function image: UIImage; cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    function discoverabilityTitle: NSString; cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    function attributes: UIMenuElementAttributes; cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    function state: UIMenuElementState; cdecl;
    function sender: Pointer; cdecl;
    function presentationSourceItem: Pointer; cdecl;
    procedure performWithSender(sender: Pointer; target: Pointer); cdecl;
  end;

  UIPasteConfigurationSupporting = interface(IObjectiveC)
    ['{85DC32BE-891C-411C-9EC9-670904B5E7B1}']
    procedure setPasteConfiguration(pasteConfiguration
      : UIPasteConfiguration); cdecl;
    function pasteConfiguration: UIPasteConfiguration; cdecl;
    procedure pasteItemProviders(itemProviders: NSArray); cdecl;
    function canPasteItemProviders(itemProviders: NSArray): Boolean; cdecl;
  end;

  UIUserActivityRestoring = interface(IObjectiveC)
    ['{A478D8BC-3831-4F2C-825D-49E1EC5F368E}']
    procedure restoreUserActivityState(userActivity: NSUserActivity); cdecl;
  end;

  UIMenuBuilder = interface(IObjectiveC)
    ['{6981D40B-D70D-45C6-A835-A700EA6571E7}']
    function system: UIMenuSystem; cdecl;
    function menuForIdentifier(identifier: UIMenuIdentifier): UIMenu; cdecl;
    function actionForIdentifier(identifier: UIActionIdentifier)
      : UIAction; cdecl;
    function commandForAction(action: SEL; propertyList: Pointer)
      : UICommand; cdecl;
    procedure replaceMenuForIdentifier(replacedIdentifier: UIMenuIdentifier;
      withMenu: UIMenu); cdecl;
    procedure replaceChildrenOfMenuForIdentifier(parentIdentifier
      : UIMenuIdentifier; fromChildrenBlock: TUIKitFromChildrenBlock); cdecl;
    [MethodName('insertSiblingMenu:beforeMenuForIdentifier:')]
    procedure insertSiblingMenuBeforeMenuForIdentifier(siblingMenu: UIMenu;
      beforeMenuForIdentifier: UIMenuIdentifier); cdecl;
    [MethodName('insertSiblingMenu:afterMenuForIdentifier:')]
    procedure insertSiblingMenuAfterMenuForIdentifier(siblingMenu: UIMenu;
      afterMenuForIdentifier: UIMenuIdentifier); cdecl;
    [MethodName('insertChildMenu:atStartOfMenuForIdentifier:')]
    procedure insertChildMenuAtStartOfMenuForIdentifier(childMenu: UIMenu;
      atStartOfMenuForIdentifier: UIMenuIdentifier); cdecl;
    [MethodName('insertChildMenu:atEndOfMenuForIdentifier:')]
    procedure insertChildMenuAtEndOfMenuForIdentifier(childMenu: UIMenu;
      atEndOfMenuForIdentifier: UIMenuIdentifier); cdecl;
    procedure removeMenuForIdentifier(removedIdentifier
      : UIMenuIdentifier); cdecl;
  end;

  UIResponderStandardEditActions = interface(IObjectiveC)
    ['{6CBBF325-0174-4876-807A-D42F6F17E1F5}']
    procedure cut(sender: Pointer); cdecl;
    procedure copy(sender: Pointer); cdecl;
    procedure paste(sender: Pointer); cdecl;
    procedure pasteAndMatchStyle(sender: Pointer); cdecl;
    procedure pasteAndGo(sender: Pointer); cdecl;
    procedure pasteAndSearch(sender: Pointer); cdecl;
    procedure select(sender: Pointer); cdecl;
    procedure selectAll(sender: Pointer); cdecl;
    procedure delete(sender: Pointer); cdecl;
    procedure makeTextWritingDirectionLeftToRight(sender: Pointer); cdecl;
    procedure makeTextWritingDirectionRightToLeft(sender: Pointer); cdecl;
    procedure toggleBoldface(sender: Pointer); cdecl;
    procedure toggleItalics(sender: Pointer); cdecl;
    procedure toggleUnderline(sender: Pointer); cdecl;
    procedure increaseSize(sender: Pointer); cdecl;
    procedure decreaseSize(sender: Pointer); cdecl;
    procedure find(sender: Pointer); cdecl;
    procedure findAndReplace(sender: Pointer); cdecl;
    procedure findNext(sender: Pointer); cdecl;
    procedure findPrevious(sender: Pointer); cdecl;
    procedure useSelectionForFind(sender: Pointer); cdecl;
    procedure updateTextAttributesWithConversionHandler(conversionHandler
      : UITextAttributesConversionHandler); cdecl;
    procedure print(sender: Pointer); cdecl;
    procedure rename(sender: Pointer); cdecl;
    procedure duplicate(sender: Pointer); cdecl;
    procedure move(sender: Pointer); cdecl;
    procedure export(sender: Pointer); cdecl;
  end;

  UIInputViewAudioFeedback = interface(IObjectiveC)
    ['{D84D5AA3-9E65-4A1D-8105-A24395026133}']
    function enableInputClicksWhenVisible: Boolean; cdecl;
  end;

  UIAppearanceContainer = interface(IObjectiveC)
    ['{182AEADE-0968-46C1-994D-9C6236D47636}']
  end;

  UIAppearance = interface(IObjectiveC)
    ['{41F91DC8-0A5F-409D-B8A6-319F05A52B6D}']
    function appearance: Pointer { instancetype }; cdecl;
    function appearanceWhenContainedIn(ContainerClass: Pointer)
      : Pointer { instancetype }; cdecl;
    function appearanceWhenContainedInInstancesOfClasses(containerTypes
      : NSArray): Pointer { instancetype }; cdecl;
    [MethodName('appearanceForTraitCollection:')]
    function appearanceForTraitCollection(trait: UITraitCollection)
      : Pointer { instancetype }; cdecl;
    [MethodName('appearanceForTraitCollection:whenContainedIn:')]
    function appearanceForTraitCollectionWhenContainedIn
      (trait: UITraitCollection; whenContainedIn: Pointer)
      : Pointer { instancetype }; cdecl;
    [MethodName
      ('appearanceForTraitCollection:whenContainedInInstancesOfClasses:')]
    function appearanceForTraitCollectionWhenContainedInInstancesOfClasses
      (trait: UITraitCollection; whenContainedInInstancesOfClasses: NSArray)
      : Pointer { instancetype }; cdecl;
  end;

  UIDynamicItem = interface(IObjectiveC)
    ['{870AB59D-7613-4F4F-9C84-598D1055A901}']
    procedure setCenter(center: CGPoint); cdecl;
    function center: CGPoint; cdecl;
    function bounds: CGRect; cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    function transform: CGAffineTransform; cdecl;
    function collisionBoundsType: UIDynamicItemCollisionBoundsType; cdecl;
    function collisionBoundingPath: UIBezierPath; cdecl;
  end;

  UILayoutSupport = interface(IObjectiveC)
    ['{52667377-CCFD-4B88-995E-3F8931A74F47}']
    function length: CGFloat; cdecl;
    function topAnchor: NSLayoutYAxisAnchor; cdecl;
    function bottomAnchor: NSLayoutYAxisAnchor; cdecl;
    function heightAnchor: NSLayoutDimension; cdecl;
  end;

  UITraitEnvironment = interface(IObjectiveC)
    ['{83F0FC55-591C-4FF6-A7A3-DE22A97F7348}']
    function traitCollection: UITraitCollection; cdecl;
    procedure traitCollectionDidChange(previousTraitCollection
      : UITraitCollection); cdecl;
  end;

  UIFocusEnvironment = interface(IObjectiveC)
    ['{FBF64989-F2D5-4A38-92B0-3A7FDCB9865D}']
    function preferredFocusEnvironments: NSArray; cdecl;
    function parentFocusEnvironment: Pointer; cdecl;
    function focusItemContainer: Pointer; cdecl;
    procedure setNeedsFocusUpdate; cdecl;
    procedure updateFocusIfNeeded; cdecl;
    function shouldUpdateFocusInContext(context: UIFocusUpdateContext)
      : Boolean; cdecl;
    procedure didUpdateFocusInContext(context: UIFocusUpdateContext;
      withAnimationCoordinator: UIFocusAnimationCoordinator); cdecl;
    function soundIdentifierForFocusUpdateInContext
      (context: UIFocusUpdateContext): UIFocusSoundIdentifier; cdecl;
    function preferredFocusedView: UIView; cdecl;
    function focusGroupIdentifier: NSString; cdecl;
  end;

  UIFocusAnimationContext = interface(IObjectiveC)
    ['{4A536BCB-F676-4D4D-87C6-59DE09A6E0D0}']
    function duration: NSTimeInterval; cdecl;
  end;

  UICoordinateSpace = interface(IObjectiveC)
    ['{9061F0C4-E98F-4907-A7D4-3D831E2AC782}']
    [MethodName('convertPoint:toCoordinateSpace:')]
    function convertPointToCoordinateSpace(point: CGPoint;
      toCoordinateSpace: Pointer): CGPoint; cdecl;
    [MethodName('convertPoint:fromCoordinateSpace:')]
    function convertPointFromCoordinateSpace(point: CGPoint;
      fromCoordinateSpace: Pointer): CGPoint; cdecl;
    [MethodName('convertRect:toCoordinateSpace:')]
    function convertRectToCoordinateSpace(rect: CGRect;
      toCoordinateSpace: Pointer): CGRect; cdecl;
    [MethodName('convertRect:fromCoordinateSpace:')]
    function convertRectFromCoordinateSpace(rect: CGRect;
      fromCoordinateSpace: Pointer): CGRect; cdecl;
    function bounds: CGRect; cdecl;
  end;

  UIFocusItemContainer = interface(IObjectiveC)
    ['{9B63C172-20FB-4BA2-ABB5-5BC5E1CF0D42}']
    function coordinateSpace: Pointer; cdecl;
    function focusItemsInRect(rect: CGRect): NSArray; cdecl;
  end;

  UIFocusItem = interface(IObjectiveC)
    ['{58494E40-3336-4778-ADEB-360F2CCA9D5D}']
    function canBecomeFocused: Boolean; cdecl;
    function frame: CGRect; cdecl;
    function focusEffect: UIFocusEffect; cdecl;
    function focusGroupPriority: UIFocusGroupPriority; cdecl;
    function isTransparentFocusItem: Boolean; cdecl;
    procedure didHintFocusMovement(hint: UIFocusMovementHint); cdecl;
  end;

  UIFocusItemScrollableContainer = interface(IObjectiveC)
    ['{DBFBD888-44F9-410C-9839-A3A3871D6B27}']
    procedure setContentOffset(contentOffset: CGPoint); cdecl;
    function contentOffset: CGPoint; cdecl;
    function contentSize: CGSize; cdecl;
    function visibleSize: CGSize; cdecl;
  end;

  UIInteraction = interface(IObjectiveC)
    ['{697A0CAA-B740-4489-BE62-10A47A971650}']
    function view: UIView; cdecl;
    procedure willMoveToView(view: UIView); cdecl;
    procedure didMoveToView(view: UIView); cdecl;
  end;

  UIKeyInput = interface(IObjectiveC)
    ['{5BF3D8F3-7DFD-43DB-B873-564CBDEBBF72}']
    function hasText: Boolean; cdecl;
    procedure insertText(text: NSString); cdecl;
    procedure deleteBackward; cdecl;
  end;

  UIContextMenuInteractionDelegate = interface(IObjectiveC)
    ['{299AEDAA-8A4E-4ABB-9097-07CFC5FD9740}']
    [MethodName('contextMenuInteraction:configurationForMenuAtLocation:')]
    function contextMenuInteractionConfigurationForMenuAtLocation
      (interaction: UIContextMenuInteraction;
      configurationForMenuAtLocation: CGPoint)
      : UIContextMenuConfiguration; cdecl;
    [MethodName
      ('contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:')
      ]
    function contextMenuInteractionConfigurationHighlightPreviewForItemWithIdentifier
      (interaction: UIContextMenuInteraction;
      configuration: UIContextMenuConfiguration;
      highlightPreviewForItemWithIdentifier: Pointer): UITargetedPreview; cdecl;
    [MethodName
      ('contextMenuInteraction:configuration:dismissalPreviewForItemWithIdentifier:')
      ]
    function contextMenuInteractionConfigurationDismissalPreviewForItemWithIdentifier
      (interaction: UIContextMenuInteraction;
      configuration: UIContextMenuConfiguration;
      dismissalPreviewForItemWithIdentifier: Pointer): UITargetedPreview; cdecl;
    [MethodName
      ('contextMenuInteraction:willPerformPreviewActionForMenuWithConfiguration:animator:')
      ]
    procedure contextMenuInteractionWillPerformPreviewActionForMenuWithConfigurationAnimator
      (interaction: UIContextMenuInteraction;
      willPerformPreviewActionForMenuWithConfiguration
      : UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName
      ('contextMenuInteraction:willDisplayMenuForConfiguration:animator:')]
    procedure contextMenuInteractionWillDisplayMenuForConfigurationAnimator
      (interaction: UIContextMenuInteraction;
      willDisplayMenuForConfiguration: UIContextMenuConfiguration;
      animator: Pointer); cdecl;
    [MethodName('contextMenuInteraction:willEndForConfiguration:animator:')]
    procedure contextMenuInteractionWillEndForConfigurationAnimator
      (interaction: UIContextMenuInteraction;
      willEndForConfiguration: UIContextMenuConfiguration;
      animator: Pointer); cdecl;
    [MethodName
      ('contextMenuInteraction:previewForHighlightingMenuWithConfiguration:')]
    function contextMenuInteractionPreviewForHighlightingMenuWithConfiguration
      (interaction: UIContextMenuInteraction;
      previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration)
      : UITargetedPreview; cdecl;
    [MethodName
      ('contextMenuInteraction:previewForDismissingMenuWithConfiguration:')]
    function contextMenuInteractionPreviewForDismissingMenuWithConfiguration
      (interaction: UIContextMenuInteraction;
      previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration)
      : UITargetedPreview; cdecl;
  end;

  UIContextMenuInteractionAnimating = interface(IObjectiveC)
    ['{370117CD-B76F-4FA2-ADF2-FF5C9E47C460}']
    function previewViewController: UIViewController; cdecl;
    procedure addAnimations(animations: TUIKitAction); cdecl;
    procedure addCompletion(completion: TUIKitAction); cdecl;
  end;

  UIContextMenuInteractionCommitAnimating = interface(IObjectiveC)
    ['{2C270B43-2696-430C-9CB7-4379BA8F4110}']
    procedure setPreferredCommitStyle(preferredCommitStyle
      : UIContextMenuInteractionCommitStyle); cdecl;
    function preferredCommitStyle: UIContextMenuInteractionCommitStyle; cdecl;
  end;

  UIDragAnimating = interface(IObjectiveC)
    ['{1260D18C-E16A-4FB6-B8AD-7453ABAEDBF1}']
    procedure addAnimations(animations: TUIKitAction); cdecl;
    procedure addCompletion(completion: TUIKitCompletion1); cdecl;
  end;

  UIDropInteractionDelegate = interface(IObjectiveC)
    ['{7623E6E8-9253-432B-A327-8FD1704C4B53}']
    [MethodName('dropInteraction:canHandleSession:')]
    function dropInteractionCanHandleSession(interaction: UIDropInteraction;
      canHandleSession: Pointer): Boolean; cdecl;
    [MethodName('dropInteraction:sessionDidEnter:')]
    procedure dropInteractionSessionDidEnter(interaction: UIDropInteraction;
      sessionDidEnter: Pointer); cdecl;
    [MethodName('dropInteraction:sessionDidUpdate:')]
    function dropInteractionSessionDidUpdate(interaction: UIDropInteraction;
      sessionDidUpdate: Pointer): UIDropProposal; cdecl;
    [MethodName('dropInteraction:sessionDidExit:')]
    procedure dropInteractionSessionDidExit(interaction: UIDropInteraction;
      sessionDidExit: Pointer); cdecl;
    [MethodName('dropInteraction:performDrop:')]
    procedure dropInteractionPerformDrop(interaction: UIDropInteraction;
      performDrop: Pointer); cdecl;
    [MethodName('dropInteraction:concludeDrop:')]
    procedure dropInteractionConcludeDrop(interaction: UIDropInteraction;
      concludeDrop: Pointer); cdecl;
    [MethodName('dropInteraction:sessionDidEnd:')]
    procedure dropInteractionSessionDidEnd(interaction: UIDropInteraction;
      sessionDidEnd: Pointer); cdecl;
    [MethodName('dropInteraction:previewForDroppingItem:withDefault:')]
    function dropInteractionPreviewForDroppingItemWithDefault
      (interaction: UIDropInteraction; previewForDroppingItem: UIDragItem;
      withDefault: UITargetedDragPreview): UITargetedDragPreview; cdecl;
    [MethodName('dropInteraction:item:willAnimateDropWithAnimator:')]
    procedure dropInteractionItemWillAnimateDropWithAnimator
      (interaction: UIDropInteraction; item: UIDragItem;
      willAnimateDropWithAnimator: Pointer); cdecl;
  end;

  UIDropSession = interface(IObjectiveC)
    ['{559A3B1E-A60B-4970-82C5-0C23204FCB1E}']
    function localDragSession: Pointer; cdecl;
    procedure setProgressIndicatorStyle(progressIndicatorStyle
      : UIDropSessionProgressIndicatorStyle); cdecl;
    function progressIndicatorStyle: UIDropSessionProgressIndicatorStyle; cdecl;
    function loadObjectsOfClass(aClass: Pointer;
      completion: TUIKitRestorationHandler): NSProgress; cdecl;
  end;

  UIViewAnimating = interface(IObjectiveC)
    ['{665B00A1-4910-484E-A2A4-6DDA90CBEE18}']
    function state: UIViewAnimatingState; cdecl;
    function isRunning: Boolean; cdecl;
    procedure setReversed(reversed: Boolean); cdecl;
    function isReversed: Boolean; cdecl;
    procedure setFractionComplete(fractionComplete: CGFloat); cdecl;
    function fractionComplete: CGFloat; cdecl;
    procedure startAnimation; cdecl;
    procedure startAnimationAfterDelay(delay: NSTimeInterval); cdecl;
    procedure pauseAnimation; cdecl;
    procedure stopAnimation(withoutFinishing: Boolean); cdecl;
    procedure finishAnimationAtPosition(finalPosition
      : UIViewAnimatingPosition); cdecl;
  end;

  UITimingCurveProvider = interface(IObjectiveC)
    ['{18372D45-56C7-435A-92E8-832BA90E9904}']
    function timingCurveType: UITimingCurveType; cdecl;
    function cubicTimingParameters: UICubicTimingParameters; cdecl;
    function springTimingParameters: UISpringTimingParameters; cdecl;
  end;

  UIViewImplicitlyAnimating = interface(IObjectiveC)
    ['{0C0E8BBB-EAE2-42A5-8B52-C576A69C8E1E}']
    [MethodName('addAnimations:delayFactor:')]
    procedure addAnimationsDelayFactor(animation: TUIKitAction;
      delayFactor: CGFloat); cdecl;
    [MethodName('addAnimations:')]
    procedure addAnimations(animation: TUIKitAction); cdecl;
    procedure addCompletion(completion: TUIKitCompletion1); cdecl;
    procedure continueAnimationWithTimingParameters(parameters: Pointer;
      durationFactor: CGFloat); cdecl;
  end;

  UIDragInteractionDelegate = interface(IObjectiveC)
    ['{9F2C68E2-AD40-44AB-A0C6-8D6C8C2678F7}']
    [MethodName('dragInteraction:itemsForBeginningSession:')]
    function dragInteractionItemsForBeginningSession
      (interaction: UIDragInteraction; itemsForBeginningSession: Pointer)
      : NSArray; cdecl;
    [MethodName('dragInteraction:previewForLiftingItem:session:')]
    function dragInteractionPreviewForLiftingItemSession
      (interaction: UIDragInteraction; previewForLiftingItem: UIDragItem;
      session: Pointer): UITargetedDragPreview; cdecl;
    [MethodName('dragInteraction:willAnimateLiftWithAnimator:session:')]
    procedure dragInteractionWillAnimateLiftWithAnimatorSession
      (interaction: UIDragInteraction; willAnimateLiftWithAnimator: Pointer;
      session: Pointer); cdecl;
    [MethodName('dragInteraction:sessionWillBegin:')]
    procedure dragInteractionSessionWillBegin(interaction: UIDragInteraction;
      sessionWillBegin: Pointer); cdecl;
    [MethodName('dragInteraction:sessionAllowsMoveOperation:')]
    function dragInteractionSessionAllowsMoveOperation
      (interaction: UIDragInteraction; sessionAllowsMoveOperation: Pointer)
      : Boolean; cdecl;
    [MethodName('dragInteraction:sessionIsRestrictedToDraggingApplication:')]
    function dragInteractionSessionIsRestrictedToDraggingApplication
      (interaction: UIDragInteraction; sessionIsRestrictedToDraggingApplication
      : Pointer): Boolean; cdecl;
    [MethodName('dragInteraction:prefersFullSizePreviewsForSession:')]
    function dragInteractionPrefersFullSizePreviewsForSession
      (interaction: UIDragInteraction;
      prefersFullSizePreviewsForSession: Pointer): Boolean; cdecl;
    [MethodName('dragInteraction:sessionDidMove:')]
    procedure dragInteractionSessionDidMove(interaction: UIDragInteraction;
      sessionDidMove: Pointer); cdecl;
    [MethodName('dragInteraction:session:willEndWithOperation:')]
    procedure dragInteractionSessionWillEndWithOperation
      (interaction: UIDragInteraction; session: Pointer;
      willEndWithOperation: UIDropOperation); cdecl;
    [MethodName('dragInteraction:session:didEndWithOperation:')]
    procedure dragInteractionSessionDidEndWithOperation
      (interaction: UIDragInteraction; session: Pointer;
      didEndWithOperation: UIDropOperation); cdecl;
    [MethodName('dragInteraction:sessionDidTransferItems:')]
    procedure dragInteractionSessionDidTransferItems
      (interaction: UIDragInteraction; sessionDidTransferItems: Pointer); cdecl;
    [MethodName('dragInteraction:itemsForAddingToSession:withTouchAtPoint:')]
    function dragInteractionItemsForAddingToSessionWithTouchAtPoint
      (interaction: UIDragInteraction; itemsForAddingToSession: Pointer;
      withTouchAtPoint: CGPoint): NSArray; cdecl;
    [MethodName('dragInteraction:sessionForAddingItems:withTouchAtPoint:')]
    function dragInteractionSessionForAddingItemsWithTouchAtPoint
      (interaction: UIDragInteraction; sessionForAddingItems: NSArray;
      withTouchAtPoint: CGPoint): Pointer; cdecl;
    [MethodName('dragInteraction:session:willAddItems:forInteraction:')]
    procedure dragInteractionSessionWillAddItemsForInteraction
      (interaction: UIDragInteraction; session: Pointer; willAddItems: NSArray;
      forInteraction: UIDragInteraction); cdecl;
    [MethodName('dragInteraction:previewForCancellingItem:withDefault:')]
    function dragInteractionPreviewForCancellingItemWithDefault
      (interaction: UIDragInteraction; previewForCancellingItem: UIDragItem;
      withDefault: UITargetedDragPreview): UITargetedDragPreview; cdecl;
    [MethodName('dragInteraction:item:willAnimateCancelWithAnimator:')]
    procedure dragInteractionItemWillAnimateCancelWithAnimator
      (interaction: UIDragInteraction; item: UIDragItem;
      willAnimateCancelWithAnimator: Pointer); cdecl;
  end;

  UIDragSession = interface(IObjectiveC)
    ['{14366437-0E1F-4C4F-99F4-8B0C826E291D}']
    procedure setLocalContext(localContext: Pointer); cdecl;
    function localContext: Pointer; cdecl;
  end;

  UITextInputTraits = interface(IObjectiveC)
    ['{99D4CDA1-1F23-46D9-ACAA-306921F68305}']
    procedure setAutocapitalizationType(autocapitalizationType
      : UITextAutocapitalizationType); cdecl;
    function autocapitalizationType: UITextAutocapitalizationType; cdecl;
    procedure setAutocorrectionType(autocorrectionType
      : UITextAutocorrectionType); cdecl;
    function autocorrectionType: UITextAutocorrectionType; cdecl;
    procedure setSpellCheckingType(spellCheckingType
      : UITextSpellCheckingType); cdecl;
    function spellCheckingType: UITextSpellCheckingType; cdecl;
    procedure setSmartQuotesType(smartQuotesType: UITextSmartQuotesType); cdecl;
    function smartQuotesType: UITextSmartQuotesType; cdecl;
    procedure setSmartDashesType(smartDashesType: UITextSmartDashesType); cdecl;
    function smartDashesType: UITextSmartDashesType; cdecl;
    procedure setSmartInsertDeleteType(smartInsertDeleteType
      : UITextSmartInsertDeleteType); cdecl;
    function smartInsertDeleteType: UITextSmartInsertDeleteType; cdecl;
    procedure setKeyboardType(keyboardType: UIKeyboardType); cdecl;
    function keyboardType: UIKeyboardType; cdecl;
    procedure setKeyboardAppearance(keyboardAppearance
      : UIKeyboardAppearance); cdecl;
    function keyboardAppearance: UIKeyboardAppearance; cdecl;
    procedure setReturnKeyType(returnKeyType: UIReturnKeyType); cdecl;
    function returnKeyType: UIReturnKeyType; cdecl;
    procedure setEnablesReturnKeyAutomatically(enablesReturnKeyAutomatically
      : Boolean); cdecl;
    function enablesReturnKeyAutomatically: Boolean; cdecl;
    procedure setSecureTextEntry(secureTextEntry: Boolean); cdecl;
    function isSecureTextEntry: Boolean; cdecl;
    procedure setTextContentType(textContentType: UITextContentType); cdecl;
    function textContentType: UITextContentType; cdecl;
    procedure setPasswordRules(passwordRules: UITextInputPasswordRules); cdecl;
    function passwordRules: UITextInputPasswordRules; cdecl;
  end;

  UITextInputTokenizer = interface(IObjectiveC)
    ['{258400A1-8220-4F2C-A609-7AC46EF77D62}']
    function rangeEnclosingPosition(position: UITextPosition;
      withGranularity: UITextGranularity; inDirection: UITextDirection)
      : UITextRange; cdecl;
    [MethodName('isPosition:atBoundary:inDirection:')]
    function isPositionAtBoundaryInDirection(position: UITextPosition;
      atBoundary: UITextGranularity; inDirection: UITextDirection)
      : Boolean; cdecl;
    function positionFromPosition(position: UITextPosition;
      toBoundary: UITextGranularity; inDirection: UITextDirection)
      : UITextPosition; cdecl;
    [MethodName('isPosition:withinTextUnit:inDirection:')]
    function isPositionWithinTextUnitInDirection(position: UITextPosition;
      withinTextUnit: UITextGranularity; inDirection: UITextDirection)
      : Boolean; cdecl;
  end;

  UITextInputDelegate = interface(IObjectiveC)
    ['{AC01CA41-62FC-4756-9AB7-8568F24F2F70}']
    procedure selectionWillChange(textInput: Pointer); cdecl;
    procedure selectionDidChange(textInput: Pointer); cdecl;
    procedure textWillChange(textInput: Pointer); cdecl;
    procedure textDidChange(textInput: Pointer); cdecl;
  end;

  UIEditMenuInteractionAnimating = interface(IObjectiveC)
    ['{209290A2-2ADC-43D1-8C69-104793C2C462}']
    procedure addAnimations(animations: TUIKitAction); cdecl;
    procedure addCompletion(completion: TUIKitAction); cdecl;
  end;

  UITextInput = interface(IObjectiveC)
    ['{B5CB695A-3549-437A-BF29-26E946013AC7}']
    function textInRange(range: UITextRange): NSString; cdecl;
    procedure replaceRange(range: UITextRange; withText: NSString); cdecl;
    procedure setSelectedTextRange(selectedTextRange: UITextRange); cdecl;
    function selectedTextRange: UITextRange; cdecl;
    function markedTextRange: UITextRange; cdecl;
    procedure setMarkedTextStyle(markedTextStyle: NSDictionary); cdecl;
    function markedTextStyle: NSDictionary; cdecl;
    procedure setMarkedText(markedText: NSString;
      selectedRange: NSRange); cdecl;
    procedure unmarkText; cdecl;
    function beginningOfDocument: UITextPosition; cdecl;
    function endOfDocument: UITextPosition; cdecl;
    function textRangeFromPosition(fromPosition: UITextPosition;
      toPosition: UITextPosition): UITextRange; cdecl;
    [MethodName('positionFromPosition:offset:')]
    function positionFromPositionOffset(position: UITextPosition;
      offset: NSInteger): UITextPosition; cdecl;
    [MethodName('positionFromPosition:inDirection:offset:')]
    function positionFromPositionInDirectionOffset(position: UITextPosition;
      inDirection: UITextLayoutDirection; offset: NSInteger)
      : UITextPosition; cdecl;
    function comparePosition(position: UITextPosition;
      toPosition: UITextPosition): NSComparisonResult; cdecl;
    function offsetFromPosition(from: UITextPosition;
      toPosition: UITextPosition): NSInteger; cdecl;
    procedure setInputDelegate(inputDelegate: Pointer); cdecl;
    function inputDelegate: Pointer; cdecl;
    function tokenizer: Pointer; cdecl;
    [MethodName('positionWithinRange:farthestInDirection:')]
    function positionWithinRangeFarthestInDirection(range: UITextRange;
      farthestInDirection: UITextLayoutDirection): UITextPosition; cdecl;
    function characterRangeByExtendingPosition(position: UITextPosition;
      inDirection: UITextLayoutDirection): UITextRange; cdecl;
    function baseWritingDirectionForPosition(position: UITextPosition;
      inDirection: UITextStorageDirection): NSWritingDirection; cdecl;
    procedure setBaseWritingDirection(writingDirection: NSWritingDirection;
      forRange: UITextRange); cdecl;
    function firstRectForRange(range: UITextRange): CGRect; cdecl;
    function caretRectForPosition(position: UITextPosition): CGRect; cdecl;
    function selectionRectsForRange(range: UITextRange): NSArray; cdecl;
    [MethodName('closestPositionToPoint:')]
    function closestPositionToPoint(point: CGPoint): UITextPosition; cdecl;
    [MethodName('closestPositionToPoint:withinRange:')]
    function closestPositionToPointWithinRange(point: CGPoint;
      withinRange: UITextRange): UITextPosition; cdecl;
    function characterRangeAtPoint(point: CGPoint): UITextRange; cdecl;
    function shouldChangeTextInRange(range: UITextRange;
      replacementText: NSString): Boolean; cdecl;
    function textStylingAtPosition(position: UITextPosition;
      inDirection: UITextStorageDirection): NSDictionary; cdecl;
    [MethodName('positionWithinRange:atCharacterOffset:')]
    function positionWithinRangeAtCharacterOffset(range: UITextRange;
      atCharacterOffset: NSInteger): UITextPosition; cdecl;
    function characterOffsetOfPosition(position: UITextPosition;
      withinRange: UITextRange): NSInteger; cdecl;
    function textInputView: UIView; cdecl;
    procedure setSelectionAffinity(selectionAffinity
      : UITextStorageDirection); cdecl;
    function selectionAffinity: UITextStorageDirection; cdecl;
    procedure insertDictationResult(dictationResult: NSArray); cdecl;
    procedure dictationRecordingDidEnd; cdecl;
    procedure dictationRecognitionFailed; cdecl;
    function insertDictationResultPlaceholder: Pointer; cdecl;
    function frameForDictationResultPlaceholder(placeholder: Pointer)
      : CGRect; cdecl;
    procedure removeDictationResultPlaceholder(placeholder: Pointer;
      willInsertResult: Boolean); cdecl;
    procedure insertText(text: NSString; alternatives: NSArray;
      style: UITextAlternativeStyle); cdecl;
    procedure setAttributedMarkedText(markedText: NSAttributedString;
      selectedRange: NSRange); cdecl;
    function insertTextPlaceholderWithSize(size: CGSize)
      : UITextPlaceholder; cdecl;
    procedure removeTextPlaceholder(textPlaceholder: UITextPlaceholder); cdecl;
    procedure beginFloatingCursorAtPoint(point: CGPoint); cdecl;
    procedure updateFloatingCursorAtPoint(point: CGPoint); cdecl;
    procedure endFloatingCursor; cdecl;
    function editMenuForTextRange(textRange: UITextRange;
      suggestedActions: NSArray): UIMenu; cdecl;
    procedure willPresentEditMenuWithAnimator(animator: Pointer); cdecl;
    procedure willDismissEditMenuWithAnimator(animator: Pointer); cdecl;
  end;

  UITextDragDelegate = interface(IObjectiveC)
    ['{A8AC27E4-438C-4AFE-A96F-027E40F94872}']
    [MethodName('textDraggableView:itemsForDrag:')]
    function textDraggableViewItemsForDrag(textDraggableView: UIView;
      itemsForDrag: Pointer): NSArray; cdecl;
    [MethodName('textDraggableView:dragPreviewForLiftingItem:session:')]
    function textDraggableViewDragPreviewForLiftingItemSession(textDraggableView
      : UIView; dragPreviewForLiftingItem: UIDragItem; session: Pointer)
      : UITargetedDragPreview; cdecl;
    [MethodName('textDraggableView:willAnimateLiftWithAnimator:session:')]
    procedure textDraggableViewWillAnimateLiftWithAnimatorSession
      (textDraggableView: UIView; willAnimateLiftWithAnimator: Pointer;
      session: Pointer); cdecl;
    [MethodName('textDraggableView:dragSessionWillBegin:')]
    procedure textDraggableViewDragSessionWillBegin(textDraggableView: UIView;
      dragSessionWillBegin: Pointer); cdecl;
    [MethodName('textDraggableView:dragSessionDidEnd:withOperation:')]
    procedure textDraggableViewDragSessionDidEndWithOperation(textDraggableView
      : UIView; dragSessionDidEnd: Pointer;
      withOperation: UIDropOperation); cdecl;
  end;

  UITextDraggable = interface(IObjectiveC)
    ['{3FEFEA45-E4EB-4415-BB97-0E5FA51ADD78}']
    procedure setTextDragDelegate(textDragDelegate: Pointer); cdecl;
    function textDragDelegate: Pointer; cdecl;
    function textDragInteraction: UIDragInteraction; cdecl;
    function isTextDragActive: Boolean; cdecl;
    procedure setTextDragOptions(textDragOptions: UITextDragOptions); cdecl;
    function textDragOptions: UITextDragOptions; cdecl;
  end;

  UITextDragRequest = interface(IObjectiveC)
    ['{B8163F3C-4E9B-49D0-A02E-F84F09D2582B}']
    function dragRange: UITextRange; cdecl;
    function suggestedItems: NSArray; cdecl;
    function existingItems: NSArray; cdecl;
    function isSelected: Boolean; cdecl;
    function dragSession: Pointer; cdecl;
  end;

  UITextPasteConfigurationSupporting = interface(IObjectiveC)
    ['{72DB4EE1-5CB3-4729-8BDB-3B2A0B8C0E40}']
    procedure setPasteDelegate(pasteDelegate: Pointer); cdecl;
    function pasteDelegate: Pointer; cdecl;
  end;

  UITextPasteItem = interface(IObjectiveC)
    ['{44507882-3F45-41E5-87F2-4459143AD749}']
    function itemProvider: NSItemProvider; cdecl;
    function localObject: Pointer; cdecl;
    function defaultAttributes: NSDictionary; cdecl;
    procedure setStringResult(&string: NSString); cdecl;
    procedure setAttributedStringResult(&string: NSAttributedString); cdecl;
    procedure setAttachmentResult(textAttachment: NSTextAttachment); cdecl;
    procedure setNoResult; cdecl;
    procedure setDefaultResult; cdecl;
  end;

  UITextPasteDelegate = interface(IObjectiveC)
    ['{EB83D9D8-AD51-45CC-AFCC-D328A5D4C0DF}']
    [MethodName('textPasteConfigurationSupporting:transformPasteItem:')]
    procedure textPasteConfigurationSupportingTransformPasteItem
      (textPasteConfigurationSupporting: Pointer;
      transformPasteItem: Pointer); cdecl;
    [MethodName
      ('textPasteConfigurationSupporting:combineItemAttributedStrings:forRange:')
      ]
    function textPasteConfigurationSupportingCombineItemAttributedStringsForRange
      (textPasteConfigurationSupporting: Pointer;
      combineItemAttributedStrings: NSArray; forRange: UITextRange)
      : NSAttributedString; cdecl;
    [MethodName
      ('textPasteConfigurationSupporting:performPasteOfAttributedString:toRange:')
      ]
    function textPasteConfigurationSupportingPerformPasteOfAttributedStringToRange
      (textPasteConfigurationSupporting: Pointer;
      performPasteOfAttributedString: NSAttributedString; toRange: UITextRange)
      : UITextRange; cdecl;
    [MethodName
      ('textPasteConfigurationSupporting:shouldAnimatePasteOfAttributedString:toRange:')
      ]
    function textPasteConfigurationSupportingShouldAnimatePasteOfAttributedStringToRange
      (textPasteConfigurationSupporting: Pointer;
      shouldAnimatePasteOfAttributedString: NSAttributedString;
      toRange: UITextRange): Boolean; cdecl;
  end;

  UITextDropDelegate = interface(IObjectiveC)
    ['{D9D7FB78-2287-4597-AF2F-4D1C1E0E0DA7}']
    [MethodName('textDroppableView:willBecomeEditableForDrop:')]
    function textDroppableViewWillBecomeEditableForDrop(textDroppableView
      : UIView; willBecomeEditableForDrop: Pointer)
      : UITextDropEditability; cdecl;
    [MethodName('textDroppableView:proposalForDrop:')]
    function textDroppableViewProposalForDrop(textDroppableView: UIView;
      proposalForDrop: Pointer): UITextDropProposal; cdecl;
    [MethodName('textDroppableView:willPerformDrop:')]
    procedure textDroppableViewWillPerformDrop(textDroppableView: UIView;
      willPerformDrop: Pointer); cdecl;
    [MethodName('textDroppableView:previewForDroppingAllItemsWithDefault:')]
    function textDroppableViewPreviewForDroppingAllItemsWithDefault
      (textDroppableView: UIView; previewForDroppingAllItemsWithDefault
      : UITargetedDragPreview): UITargetedDragPreview; cdecl;
    [MethodName('textDroppableView:dropSessionDidEnter:')]
    procedure textDroppableViewDropSessionDidEnter(textDroppableView: UIView;
      dropSessionDidEnter: Pointer); cdecl;
    [MethodName('textDroppableView:dropSessionDidUpdate:')]
    procedure textDroppableViewDropSessionDidUpdate(textDroppableView: UIView;
      dropSessionDidUpdate: Pointer); cdecl;
    [MethodName('textDroppableView:dropSessionDidExit:')]
    procedure textDroppableViewDropSessionDidExit(textDroppableView: UIView;
      dropSessionDidExit: Pointer); cdecl;
    [MethodName('textDroppableView:dropSessionDidEnd:')]
    procedure textDroppableViewDropSessionDidEnd(textDroppableView: UIView;
      dropSessionDidEnd: Pointer); cdecl;
  end;

  UITextDroppable = interface(IObjectiveC)
    ['{15F5A9DD-30F7-4EE9-AD8E-093E3605FCC9}']
    procedure setTextDropDelegate(textDropDelegate: Pointer); cdecl;
    function textDropDelegate: Pointer; cdecl;
    function textDropInteraction: UIDropInteraction; cdecl;
    function isTextDropActive: Boolean; cdecl;
  end;

  UITextDropRequest = interface(IObjectiveC)
    ['{E88590E1-ADA1-4B25-9B96-5832AAA97AFA}']
    function dropPosition: UITextPosition; cdecl;
    function suggestedProposal: UITextDropProposal; cdecl;
    function isSameView: Boolean; cdecl;
    function dropSession: Pointer; cdecl;
  end;

  UIContentSizeCategoryAdjusting = interface(IObjectiveC)
    ['{E42AF05C-9048-4ECE-B130-6A13C5447152}']
    procedure setAdjustsFontForContentSizeCategory
      (adjustsFontForContentSizeCategory: Boolean); cdecl;
    function adjustsFontForContentSizeCategory: Boolean; cdecl;
  end;

  UITextFieldDelegate = interface(IObjectiveC)
    ['{35E70DA9-3583-464E-B435-50A6B7B12D10}']
    function textFieldShouldBeginEditing(textField: UITextField)
      : Boolean; cdecl;
    procedure textFieldDidBeginEditing(textField: UITextField); cdecl;
    function textFieldShouldEndEditing(textField: UITextField): Boolean; cdecl;
    [MethodName('textFieldDidEndEditing:')]
    procedure textFieldDidEndEditing(textField: UITextField); cdecl;
    [MethodName('textFieldDidEndEditing:reason:')]
    procedure textFieldDidEndEditingReason(textField: UITextField;
      reason: UITextFieldDidEndEditingReason); cdecl;
    [MethodName('textField:shouldChangeCharactersInRange:replacementString:')]
    function textFieldShouldChangeCharactersInRangeReplacementString
      (textField: UITextField; shouldChangeCharactersInRange: NSRange;
      replacementString: NSString): Boolean; cdecl;
    procedure textFieldDidChangeSelection(textField: UITextField); cdecl;
    function textFieldShouldClear(textField: UITextField): Boolean; cdecl;
    function textFieldShouldReturn(textField: UITextField): Boolean; cdecl;
    [MethodName('textField:editMenuForCharactersInRange:suggestedActions:')]
    function textFieldEditMenuForCharactersInRangeSuggestedActions
      (textField: UITextField; editMenuForCharactersInRange: NSRange;
      suggestedActions: NSArray): UIMenu; cdecl;
    [MethodName('textField:willPresentEditMenuWithAnimator:')]
    procedure textFieldWillPresentEditMenuWithAnimator(textField: UITextField;
      willPresentEditMenuWithAnimator: Pointer); cdecl;
    [MethodName('textField:willDismissEditMenuWithAnimator:')]
    procedure textFieldWillDismissEditMenuWithAnimator(textField: UITextField;
      willDismissEditMenuWithAnimator: Pointer); cdecl;
  end;

  UITextSelecting = interface(IObjectiveC)
    ['{8E73ABEA-354A-4583-9C1E-4C31A3555057}']
  end;

  UIActionSheetDelegate = interface(IObjectiveC)
    ['{736094F8-59E9-4289-AB78-069D75909B08}']
    [MethodName('actionSheet:clickedButtonAtIndex:')]
    procedure actionSheetClickedButtonAtIndex(actionSheet: UIActionSheet;
      clickedButtonAtIndex: NSInteger); cdecl;
    procedure actionSheetCancel(actionSheet: UIActionSheet); cdecl;
    procedure willPresentActionSheet(actionSheet: UIActionSheet); cdecl;
    procedure didPresentActionSheet(actionSheet: UIActionSheet); cdecl;
    [MethodName('actionSheet:willDismissWithButtonIndex:')]
    procedure actionSheetWillDismissWithButtonIndex(actionSheet: UIActionSheet;
      willDismissWithButtonIndex: NSInteger); cdecl;
    [MethodName('actionSheet:didDismissWithButtonIndex:')]
    procedure actionSheetDidDismissWithButtonIndex(actionSheet: UIActionSheet;
      didDismissWithButtonIndex: NSInteger); cdecl;
  end;

  UIAlertViewDelegate = interface(IObjectiveC)
    ['{9A01CA97-5F72-4CE6-911C-27DC129ED03D}']
    [MethodName('alertView:clickedButtonAtIndex:')]
    procedure alertViewClickedButtonAtIndex(alertView: UIAlertView;
      clickedButtonAtIndex: NSInteger); cdecl;
    procedure alertViewCancel(alertView: UIAlertView); cdecl;
    procedure willPresentAlertView(alertView: UIAlertView); cdecl;
    procedure didPresentAlertView(alertView: UIAlertView); cdecl;
    [MethodName('alertView:willDismissWithButtonIndex:')]
    procedure alertViewWillDismissWithButtonIndex(alertView: UIAlertView;
      willDismissWithButtonIndex: NSInteger); cdecl;
    [MethodName('alertView:didDismissWithButtonIndex:')]
    procedure alertViewDidDismissWithButtonIndex(alertView: UIAlertView;
      didDismissWithButtonIndex: NSInteger); cdecl;
    function alertViewShouldEnableFirstOtherButton(alertView: UIAlertView)
      : Boolean; cdecl;
  end;

  UIApplicationDelegate = interface(IObjectiveC)
    ['{E211D9F0-59A7-490B-B163-B6CFAE5BE7D0}']
    procedure applicationDidFinishLaunching(application: UIApplication); cdecl;
    [MethodName('application:willFinishLaunchingWithOptions:')]
    function applicationWillFinishLaunchingWithOptions
      (application: UIApplication; willFinishLaunchingWithOptions: NSDictionary)
      : Boolean; cdecl;
    [MethodName('application:didFinishLaunchingWithOptions:')]
    function applicationDidFinishLaunchingWithOptions
      (application: UIApplication; didFinishLaunchingWithOptions: NSDictionary)
      : Boolean; cdecl;
    procedure applicationDidBecomeActive(application: UIApplication); cdecl;
    procedure applicationWillResignActive(application: UIApplication); cdecl;
    [MethodName('application:handleOpenURL:')]
    function applicationHandleOpenURL(application: UIApplication;
      handleOpenURL: NSURL): Boolean; cdecl;
    [MethodName('application:openURL:sourceApplication:annotation:')]
    function applicationOpenURLSourceApplicationAnnotation
      (application: UIApplication; openURL: NSURL; sourceApplication: NSString;
      annotation: Pointer): Boolean; cdecl;
    [MethodName('application:openURL:options:')]
    function applicationOpenURLOptions(app: UIApplication; openURL: NSURL;
      options: NSDictionary): Boolean; cdecl;
    procedure applicationDidReceiveMemoryWarning(application
      : UIApplication); cdecl;
    procedure applicationWillTerminate(application: UIApplication); cdecl;
    procedure applicationSignificantTimeChange(application
      : UIApplication); cdecl;
    [MethodName('application:willChangeStatusBarOrientation:duration:')]
    procedure applicationWillChangeStatusBarOrientationDuration
      (application: UIApplication;
      willChangeStatusBarOrientation: UIInterfaceOrientation;
      duration: NSTimeInterval); cdecl;
    [MethodName('application:didChangeStatusBarOrientation:')]
    procedure applicationDidChangeStatusBarOrientation
      (application: UIApplication;
      didChangeStatusBarOrientation: UIInterfaceOrientation); cdecl;
    [MethodName('application:willChangeStatusBarFrame:')]
    procedure applicationWillChangeStatusBarFrame(application: UIApplication;
      willChangeStatusBarFrame: CGRect); cdecl;
    [MethodName('application:didChangeStatusBarFrame:')]
    procedure applicationDidChangeStatusBarFrame(application: UIApplication;
      didChangeStatusBarFrame: CGRect); cdecl;
    [MethodName('application:didRegisterUserNotificationSettings:')]
    procedure applicationDidRegisterUserNotificationSettings
      (application: UIApplication; didRegisterUserNotificationSettings
      : UIUserNotificationSettings); cdecl;
    [MethodName
      ('application:didRegisterForRemoteNotificationsWithDeviceToken:')]
    procedure applicationDidRegisterForRemoteNotificationsWithDeviceToken
      (application: UIApplication;
      didRegisterForRemoteNotificationsWithDeviceToken: NSData); cdecl;
    [MethodName
      ('application:didFailToRegisterForRemoteNotificationsWithError:')]
    procedure applicationDidFailToRegisterForRemoteNotificationsWithError
      (application: UIApplication;
      didFailToRegisterForRemoteNotificationsWithError: NSError); cdecl;
    [MethodName('application:didReceiveRemoteNotification:')]
    procedure applicationDidReceiveRemoteNotification
      (application: UIApplication;
      didReceiveRemoteNotification: NSDictionary); cdecl;
    [MethodName('application:didReceiveLocalNotification:')]
    procedure applicationDidReceiveLocalNotification(application: UIApplication;
      didReceiveLocalNotification: UILocalNotification); cdecl;
    [MethodName
      ('application:handleActionWithIdentifier:forLocalNotification:completionHandler:')
      ]
    procedure applicationHandleActionWithIdentifierForLocalNotificationCompletionHandler
      (application: UIApplication; handleActionWithIdentifier: NSString;
      forLocalNotification: UILocalNotification;
      completionHandler: TUIKitAction); cdecl;
    [MethodName
      ('application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:')
      ]
    procedure applicationHandleActionWithIdentifierForRemoteNotificationWithResponseInfoCompletionHandler
      (application: UIApplication; handleActionWithIdentifier: NSString;
      forRemoteNotification: NSDictionary; withResponseInfo: NSDictionary;
      completionHandler: TUIKitAction); cdecl;
    [MethodName
      ('application:handleActionWithIdentifier:forRemoteNotification:completionHandler:')
      ]
    procedure applicationHandleActionWithIdentifierForRemoteNotificationCompletionHandler
      (application: UIApplication; handleActionWithIdentifier: NSString;
      forRemoteNotification: NSDictionary;
      completionHandler: TUIKitAction); cdecl;
    [MethodName
      ('application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:')
      ]
    procedure applicationHandleActionWithIdentifierForLocalNotificationWithResponseInfoCompletionHandler
      (application: UIApplication; handleActionWithIdentifier: NSString;
      forLocalNotification: UILocalNotification; withResponseInfo: NSDictionary;
      completionHandler: TUIKitAction); cdecl;
    [MethodName
      ('application:didReceiveRemoteNotification:fetchCompletionHandler:')]
    procedure applicationDidReceiveRemoteNotificationFetchCompletionHandler
      (application: UIApplication; didReceiveRemoteNotification: NSDictionary;
      fetchCompletionHandler: TUIKitFetchCompletionHandler); cdecl;
    [MethodName('application:performFetchWithCompletionHandler:')]
    procedure applicationPerformFetchWithCompletionHandler
      (application: UIApplication; performFetchWithCompletionHandler
      : TUIKitFetchCompletionHandler); cdecl;
    [MethodName('application:performActionForShortcutItem:completionHandler:')]
    procedure applicationPerformActionForShortcutItemCompletionHandler
      (application: UIApplication;
      performActionForShortcutItem: UIApplicationShortcutItem;
      completionHandler: TUIKitCompletion); cdecl;
    [MethodName
      ('application:handleEventsForBackgroundURLSession:completionHandler:')]
    procedure applicationHandleEventsForBackgroundURLSessionCompletionHandler
      (application: UIApplication; handleEventsForBackgroundURLSession
      : NSString; completionHandler: TUIKitAction); cdecl;
    [MethodName('application:handleWatchKitExtensionRequest:reply:')]
    procedure applicationHandleWatchKitExtensionRequestReply
      (application: UIApplication; handleWatchKitExtensionRequest: NSDictionary;
      reply: TUIKitReply); cdecl;
    procedure applicationShouldRequestHealthAuthorization
      (application: UIApplication); cdecl;
    [MethodName('application:handlerForIntent:')]
    function applicationHandlerForIntent(application: UIApplication;
      handlerForIntent: INIntent): Pointer; cdecl;
    [MethodName('application:handleIntent:completionHandler:')]
    procedure applicationHandleIntentCompletionHandler
      (application: UIApplication; handleIntent: INIntent;
      completionHandler: TUIKitCompletionHandler); cdecl;
    procedure applicationDidEnterBackground(application: UIApplication); cdecl;
    procedure applicationWillEnterForeground(application: UIApplication); cdecl;
    procedure applicationProtectedDataWillBecomeUnavailable
      (application: UIApplication); cdecl;
    procedure applicationProtectedDataDidBecomeAvailable
      (application: UIApplication); cdecl;
    procedure setWindow(window: UIWindow); cdecl;
    function window: UIWindow; cdecl;
    [MethodName('application:supportedInterfaceOrientationsForWindow:')]
    function applicationSupportedInterfaceOrientationsForWindow
      (application: UIApplication; supportedInterfaceOrientationsForWindow
      : UIWindow): UIInterfaceOrientationMask; cdecl;
    [MethodName('application:shouldAllowExtensionPointIdentifier:')]
    function applicationShouldAllowExtensionPointIdentifier
      (application: UIApplication; shouldAllowExtensionPointIdentifier
      : UIApplicationExtensionPointIdentifier): Boolean; cdecl;
    [MethodName
      ('application:viewControllerWithRestorationIdentifierPath:coder:')]
    function applicationViewControllerWithRestorationIdentifierPathCoder
      (application: UIApplication; viewControllerWithRestorationIdentifierPath
      : NSArray; coder: NSCoder): UIViewController; cdecl;
    [MethodName('application:shouldSaveSecureApplicationState:')]
    function applicationShouldSaveSecureApplicationState
      (application: UIApplication; shouldSaveSecureApplicationState: NSCoder)
      : Boolean; cdecl;
    [MethodName('application:shouldRestoreSecureApplicationState:')]
    function applicationShouldRestoreSecureApplicationState
      (application: UIApplication; shouldRestoreSecureApplicationState: NSCoder)
      : Boolean; cdecl;
    [MethodName('application:willEncodeRestorableStateWithCoder:')]
    procedure applicationWillEncodeRestorableStateWithCoder
      (application: UIApplication; willEncodeRestorableStateWithCoder
      : NSCoder); cdecl;
    [MethodName('application:didDecodeRestorableStateWithCoder:')]
    procedure applicationDidDecodeRestorableStateWithCoder
      (application: UIApplication; didDecodeRestorableStateWithCoder
      : NSCoder); cdecl;
    [MethodName('application:shouldSaveApplicationState:')]
    function applicationShouldSaveApplicationState(application: UIApplication;
      shouldSaveApplicationState: NSCoder): Boolean; cdecl;
    [MethodName('application:shouldRestoreApplicationState:')]
    function applicationShouldRestoreApplicationState
      (application: UIApplication; shouldRestoreApplicationState: NSCoder)
      : Boolean; cdecl;
    [MethodName('application:willContinueUserActivityWithType:')]
    function applicationWillContinueUserActivityWithType
      (application: UIApplication; willContinueUserActivityWithType: NSString)
      : Boolean; cdecl;
    [MethodName('application:continueUserActivity:restorationHandler:')]
    function applicationContinueUserActivityRestorationHandler
      (application: UIApplication; continueUserActivity: NSUserActivity;
      restorationHandler: TUIKitRestorationHandler): Boolean; cdecl;
    [MethodName('application:didFailToContinueUserActivityWithType:error:')]
    procedure applicationDidFailToContinueUserActivityWithTypeError
      (application: UIApplication; didFailToContinueUserActivityWithType
      : NSString; error: NSError); cdecl;
    [MethodName('application:didUpdateUserActivity:')]
    procedure applicationDidUpdateUserActivity(application: UIApplication;
      didUpdateUserActivity: NSUserActivity); cdecl;
    [MethodName('application:userDidAcceptCloudKitShareWithMetadata:')]
    procedure applicationUserDidAcceptCloudKitShareWithMetadata
      (application: UIApplication; userDidAcceptCloudKitShareWithMetadata
      : CKShareMetadata); cdecl;
    [MethodName('application:configurationForConnectingSceneSession:options:')]
    function applicationConfigurationForConnectingSceneSessionOptions
      (application: UIApplication; configurationForConnectingSceneSession
      : UISceneSession; options: UISceneConnectionOptions)
      : UISceneConfiguration; cdecl;
    [MethodName('application:didDiscardSceneSessions:')]
    procedure applicationDidDiscardSceneSessions(application: UIApplication;
      didDiscardSceneSessions: NSSet); cdecl;
    function applicationShouldAutomaticallyLocalizeKeyCommands
      (application: UIApplication): Boolean; cdecl;
  end;

  UIStateRestoring = interface(IObjectiveC)
    ['{185D26EF-D659-4B2A-9043-9A48890ED376}']
    function restorationParent: Pointer; cdecl;
    function objectRestorationClass: Pointer; cdecl;
    procedure encodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure decodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure applicationFinishedRestoringState; cdecl;
  end;

  UIViewControllerRestoration = interface(IObjectiveC)
    ['{6F61C8D7-CCBF-4324-B90C-D112F36BDCAB}']
    function viewControllerWithRestorationIdentifierPath(identifierComponents
      : NSArray; coder: NSCoder): UIViewController; cdecl;
  end;

  UIDataSourceModelAssociation = interface(IObjectiveC)
    ['{F20B04E4-827D-4259-8474-2A80D4FCA739}']
    function modelIdentifierForElementAtIndexPath(idx: NSIndexPath;
      inView: UIView): NSString; cdecl;
    function indexPathForElementWithModelIdentifier(identifier: NSString;
      inView: UIView): NSIndexPath; cdecl;
  end;

  UIObjectRestoration = interface(IObjectiveC)
    ['{78810E4F-ACFF-463A-9A5A-B23ED18AF1CA}']
    function objectWithRestorationIdentifierPath(identifierComponents: NSArray;
      coder: NSCoder): Pointer; cdecl;
  end;

  UISceneDelegate = interface(IObjectiveC)
    ['{7C405057-FC8B-4158-957F-1622EA7448F6}']
    [MethodName('scene:willConnectToSession:options:')]
    procedure sceneWillConnectToSessionOptions(scene: UIScene;
      willConnectToSession: UISceneSession;
      options: UISceneConnectionOptions); cdecl;
    procedure sceneDidDisconnect(scene: UIScene); cdecl;
    procedure sceneDidBecomeActive(scene: UIScene); cdecl;
    procedure sceneWillResignActive(scene: UIScene); cdecl;
    procedure sceneWillEnterForeground(scene: UIScene); cdecl;
    procedure sceneDidEnterBackground(scene: UIScene); cdecl;
    [MethodName('scene:openURLContexts:')]
    procedure sceneOpenURLContexts(scene: UIScene;
      openURLContexts: NSSet); cdecl;
    function stateRestorationActivityForScene(scene: UIScene)
      : NSUserActivity; cdecl;
    [MethodName('scene:restoreInteractionStateWithUserActivity:')]
    procedure sceneRestoreInteractionStateWithUserActivity(scene: UIScene;
      restoreInteractionStateWithUserActivity: NSUserActivity); cdecl;
    [MethodName('scene:willContinueUserActivityWithType:')]
    procedure sceneWillContinueUserActivityWithType(scene: UIScene;
      willContinueUserActivityWithType: NSString); cdecl;
    [MethodName('scene:continueUserActivity:')]
    procedure sceneContinueUserActivity(scene: UIScene;
      continueUserActivity: NSUserActivity); cdecl;
    [MethodName('scene:didFailToContinueUserActivityWithType:error:')]
    procedure sceneDidFailToContinueUserActivityWithTypeError(scene: UIScene;
      didFailToContinueUserActivityWithType: NSString; error: NSError); cdecl;
    [MethodName('scene:didUpdateUserActivity:')]
    procedure sceneDidUpdateUserActivity(scene: UIScene;
      didUpdateUserActivity: NSUserActivity); cdecl;
  end;

  UIViewControllerTransitionCoordinator = interface(IObjectiveC)
    ['{BDC0BF7A-7FAF-495C-8288-0EB81A711436}']
    function animateAlongsideTransition(animation: TUIKitAnimations;
      completion: TUIKitAnimations): Boolean; cdecl;
    function animateAlongsideTransitionInView(view: UIView;
      animation: TUIKitAnimations; completion: TUIKitAnimations)
      : Boolean; cdecl;
    procedure notifyWhenInteractionEndsUsingBlock
      (handler: TUIKitAnimations); cdecl;
    procedure notifyWhenInteractionChangesUsingBlock
      (handler: TUIKitAnimations); cdecl;
  end;

  UIContentContainer = interface(IObjectiveC)
    ['{495D18F7-B1F2-4215-B6D8-30696EB9C756}']
    function preferredContentSize: CGSize; cdecl;
    procedure preferredContentSizeDidChangeForChildContentContainer
      (container: Pointer); cdecl;
    procedure systemLayoutFittingSizeDidChangeForChildContentContainer
      (container: Pointer); cdecl;
    function sizeForChildContentContainer(container: Pointer;
      withParentContainerSize: CGSize): CGSize; cdecl;
    procedure viewWillTransitionToSize(size: CGSize;
      withTransitionCoordinator: Pointer); cdecl;
    procedure willTransitionToTraitCollection(newCollection: UITraitCollection;
      withTransitionCoordinator: Pointer); cdecl;
  end;

  UIViewControllerTransitioningDelegate = interface(IObjectiveC)
    ['{C18ECC1E-AA68-444F-84DD-BE202E193480}']
    function animationControllerForPresentedController
      (presented: UIViewController; presentingController: UIViewController;
      sourceController: UIViewController): Pointer; cdecl;
    function animationControllerForDismissedController
      (dismissed: UIViewController): Pointer; cdecl;
    function interactionControllerForPresentation(animator: Pointer)
      : Pointer; cdecl;
    function interactionControllerForDismissal(animator: Pointer)
      : Pointer; cdecl;
    function presentationControllerForPresentedViewController
      (presented: UIViewController; presentingViewController: UIViewController;
      sourceViewController: UIViewController): UIPresentationController; cdecl;
  end;

  UIViewControllerPreviewingDelegate = interface(IObjectiveC)
    ['{75869FDE-11DD-4F2F-8A63-A0DC07AEC5AB}']
    [MethodName('previewingContext:viewControllerForLocation:')]
    function previewingContextViewControllerForLocation(previewingContext
      : Pointer; viewControllerForLocation: CGPoint): UIViewController; cdecl;
    [MethodName('previewingContext:commitViewController:')]
    procedure previewingContextCommitViewController(previewingContext: Pointer;
      commitViewController: UIViewController); cdecl;
  end;

  UIViewControllerPreviewing = interface(IObjectiveC)
    ['{DC74D8D3-3FCB-4813-B083-BAE95409C1AA}']
    function previewingGestureRecognizerForFailureRelationship
      : UIGestureRecognizer; cdecl;
    function delegate: Pointer; cdecl;
    function sourceView: UIView; cdecl;
    procedure setSourceRect(sourceRect: CGRect); cdecl;
    function sourceRect: CGRect; cdecl;
  end;

  UIPreviewActionItem = interface(IObjectiveC)
    ['{CF332E9D-5632-48F5-82EA-A9B1247803A9}']
    function title: NSString; cdecl;
  end;

  UIViewControllerTransitionCoordinatorContext = interface(IObjectiveC)
    ['{32D389E6-2917-4B8A-AD18-CDF40BB380E3}']
    function isAnimated: Boolean; cdecl;
    function presentationStyle: UIModalPresentationStyle; cdecl;
    function initiallyInteractive: Boolean; cdecl;
    function isInterruptible: Boolean; cdecl;
    function isInteractive: Boolean; cdecl;
    function isCancelled: Boolean; cdecl;
    function transitionDuration: NSTimeInterval; cdecl;
    function percentComplete: CGFloat; cdecl;
    function completionVelocity: CGFloat; cdecl;
    function completionCurve: UIViewAnimationCurve; cdecl;
    function viewControllerForKey(key: UITransitionContextViewControllerKey)
      : UIViewController; cdecl;
    function viewForKey(key: UITransitionContextViewKey): UIView; cdecl;
    function containerView: UIView; cdecl;
    function targetTransform: CGAffineTransform; cdecl;
  end;

  UIViewControllerContextTransitioning = interface(IObjectiveC)
    ['{FE758D03-1E1E-4716-AA13-A8F45A71A312}']
    function containerView: UIView; cdecl;
    function isAnimated: Boolean; cdecl;
    function isInteractive: Boolean; cdecl;
    function transitionWasCancelled: Boolean; cdecl;
    function presentationStyle: UIModalPresentationStyle; cdecl;
    procedure updateInteractiveTransition(percentComplete: CGFloat); cdecl;
    procedure finishInteractiveTransition; cdecl;
    procedure cancelInteractiveTransition; cdecl;
    procedure pauseInteractiveTransition; cdecl;
    procedure completeTransition(didComplete: Boolean); cdecl;
    function viewControllerForKey(key: UITransitionContextViewControllerKey)
      : UIViewController; cdecl;
    function viewForKey(key: UITransitionContextViewKey): UIView; cdecl;
    function targetTransform: CGAffineTransform; cdecl;
    function initialFrameForViewController(vc: UIViewController): CGRect; cdecl;
    function finalFrameForViewController(vc: UIViewController): CGRect; cdecl;
  end;

  UIViewControllerAnimatedTransitioning = interface(IObjectiveC)
    ['{0BA88F19-3E03-440B-A918-F12256637251}']
    function transitionDuration(transitionContext: Pointer)
      : NSTimeInterval; cdecl;
    procedure animateTransition(transitionContext: Pointer); cdecl;
    function interruptibleAnimatorForTransition(transitionContext: Pointer)
      : Pointer; cdecl;
    procedure animationEnded(transitionCompleted: Boolean); cdecl;
  end;

  UIViewControllerInteractiveTransitioning = interface(IObjectiveC)
    ['{340F4CA9-BF2B-44F5-8E5B-F1E905A8CA2C}']
    procedure startInteractiveTransition(transitionContext: Pointer); cdecl;
    function completionSpeed: CGFloat; cdecl;
    function completionCurve: UIViewAnimationCurve; cdecl;
    function wantsInteractiveStart: Boolean; cdecl;
  end;

  UIDocumentBrowserViewControllerDelegate = interface(IObjectiveC)
    ['{85ECF5F4-0752-4834-8AB2-FF9DA29C73B8}']
    [MethodName('documentBrowser:didPickDocumentURLs:')]
    procedure documentBrowserDidPickDocumentURLs
      (controller: UIDocumentBrowserViewController;
      didPickDocumentURLs: NSArray); cdecl;
    [MethodName('documentBrowser:didPickDocumentsAtURLs:')]
    procedure documentBrowserDidPickDocumentsAtURLs
      (controller: UIDocumentBrowserViewController;
      didPickDocumentsAtURLs: NSArray); cdecl;
    [MethodName('documentBrowser:didRequestDocumentCreationWithHandler:')]
    procedure documentBrowserDidRequestDocumentCreationWithHandler
      (controller: UIDocumentBrowserViewController;
      didRequestDocumentCreationWithHandler
      : TUIKitDidRequestDocumentCreationWithHandler); cdecl;
    [MethodName('documentBrowser:didImportDocumentAtURL:toDestinationURL:')]
    procedure documentBrowserDidImportDocumentAtURLToDestinationURL
      (controller: UIDocumentBrowserViewController;
      didImportDocumentAtURL: NSURL; toDestinationURL: NSURL); cdecl;
    [MethodName('documentBrowser:failedToImportDocumentAtURL:error:')]
    procedure documentBrowserFailedToImportDocumentAtURLError
      (controller: UIDocumentBrowserViewController;
      failedToImportDocumentAtURL: NSURL; error: NSError); cdecl;
    [MethodName('documentBrowser:applicationActivitiesForDocumentURLs:')]
    function documentBrowserApplicationActivitiesForDocumentURLs
      (controller: UIDocumentBrowserViewController;
      applicationActivitiesForDocumentURLs: NSArray): NSArray; cdecl;
    [MethodName('documentBrowser:willPresentActivityViewController:')]
    procedure documentBrowserWillPresentActivityViewController
      (controller: UIDocumentBrowserViewController;
      willPresentActivityViewController: UIActivityViewController); cdecl;
  end;

  UIItemProviderPresentationSizeProviding = interface(IObjectiveC)
    ['{F56AB197-7CD0-497D-B37A-2B1C1ED34611}']
    function preferredPresentationSizeForItemProvider: CGSize; cdecl;
  end;

  NSTextStorageDelegate = interface(IObjectiveC)
    ['{50AA9D3A-B3E9-4FE2-9A47-F82F8F687F8E}']
    [MethodName('textStorage:willProcessEditing:range:changeInLength:')]
    procedure textStorageWillProcessEditingRangeChangeInLength
      (textStorage: NSTextStorage; willProcessEditing: NSTextStorageEditActions;
      range: NSRange; changeInLength: NSInteger); cdecl;
    [MethodName('textStorage:didProcessEditing:range:changeInLength:')]
    procedure textStorageDidProcessEditingRangeChangeInLength
      (textStorage: NSTextStorage; didProcessEditing: NSTextStorageEditActions;
      range: NSRange; changeInLength: NSInteger); cdecl;
  end;

  NSTextStorageObserving = interface(IObjectiveC)
    ['{3B43503F-BC82-4720-8556-3182A011FFE0}']
    procedure setTextStorage(textStorage: NSTextStorage); cdecl;
    function textStorage: NSTextStorage; cdecl;
    procedure processEditingForTextStorage(textStorage: NSTextStorage;
      edited: NSTextStorageEditActions; range: NSRange;
      changeInLength: NSInteger; invalidatedRange: NSRange); cdecl;
    procedure performEditingTransactionForTextStorage
      (textStorage: NSTextStorage; usingBlock: TUIKitAction); cdecl;
  end;

  NSLayoutManagerDelegate = interface(IObjectiveC)
    ['{C97F71ED-9575-41EB-B749-DECA2FE230B4}']
    [MethodName
      ('layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:')
      ]
    function layoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange
      (layoutManager: NSLayoutManager; shouldGenerateGlyphs: PCGGlyph;
      properties: PNSGlyphProperty; characterIndexes: PNSUInteger; font: UIFont;
      forGlyphRange: NSRange): NSUInteger; cdecl;
    [MethodName
      ('layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:')
      ]
    function layoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect
      (layoutManager: NSLayoutManager; lineSpacingAfterGlyphAtIndex: NSUInteger;
      withProposedLineFragmentRect: CGRect): CGFloat; cdecl;
    [MethodName
      ('layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:')
      ]
    function layoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect
      (layoutManager: NSLayoutManager;
      paragraphSpacingBeforeGlyphAtIndex: NSUInteger;
      withProposedLineFragmentRect: CGRect): CGFloat; cdecl;
    [MethodName
      ('layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:')
      ]
    function layoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect
      (layoutManager: NSLayoutManager;
      paragraphSpacingAfterGlyphAtIndex: NSUInteger;
      withProposedLineFragmentRect: CGRect): CGFloat; cdecl;
    [MethodName('layoutManager:shouldUseAction:forControlCharacterAtIndex:')]
    function layoutManagerShouldUseActionForControlCharacterAtIndex
      (layoutManager: NSLayoutManager;
      shouldUseAction: NSControlCharacterAction;
      forControlCharacterAtIndex: NSUInteger): NSControlCharacterAction; cdecl;
    [MethodName('layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:')]
    function layoutManagerShouldBreakLineByWordBeforeCharacterAtIndex
      (layoutManager: NSLayoutManager;
      shouldBreakLineByWordBeforeCharacterAtIndex: NSUInteger): Boolean; cdecl;
    [MethodName
      ('layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:')]
    function layoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex
      (layoutManager: NSLayoutManager;
      shouldBreakLineByHyphenatingBeforeCharacterAtIndex: NSUInteger)
      : Boolean; cdecl;
    [MethodName
      ('layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:')
      ]
    function layoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex
      (layoutManager: NSLayoutManager;
      boundingBoxForControlGlyphAtIndex: NSUInteger;
      forTextContainer: NSTextContainer; proposedLineFragment: CGRect;
      glyphPosition: CGPoint; characterIndex: NSUInteger): CGRect; cdecl;
    [MethodName
      ('layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:')
      ]
    function layoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange
      (layoutManager: NSLayoutManager; shouldSetLineFragmentRect: PCGRect;
      lineFragmentUsedRect: PCGRect; baselineOffset: PCGFloat;
      inTextContainer: NSTextContainer; forGlyphRange: NSRange): Boolean; cdecl;
    procedure layoutManagerDidInvalidateLayout(sender: NSLayoutManager); cdecl;
    [MethodName('layoutManager:didCompleteLayoutForTextContainer:atEnd:')]
    procedure layoutManagerDidCompleteLayoutForTextContainerAtEnd
      (layoutManager: NSLayoutManager;
      didCompleteLayoutForTextContainer: NSTextContainer;
      atEnd: Boolean); cdecl;
    [MethodName('layoutManager:textContainer:didChangeGeometryFromSize:')]
    procedure layoutManagerTextContainerDidChangeGeometryFromSize
      (layoutManager: NSLayoutManager; textContainer: NSTextContainer;
      didChangeGeometryFromSize: CGSize); cdecl;
  end;

  NSTextLayoutOrientationProvider = interface(IObjectiveC)
    ['{8FD58E07-02FD-4AB9-A313-7FF997AC88B3}']
    function layoutOrientation: NSTextLayoutOrientation; cdecl;
  end;

  NSTextLocation = interface(IObjectiveC)
    ['{E4913695-F502-40D5-8E51-0E252593B134}']
    function compare(location: Pointer): NSComparisonResult; cdecl;
  end;

  NSTextAttachmentContainer = interface(IObjectiveC)
    ['{9B00AA1C-DEAE-412D-9FE1-84ACC2A0F72A}']
    function imageForBounds(imageBounds: CGRect; textContainer: NSTextContainer;
      characterIndex: NSUInteger): UIImage; cdecl;
    function attachmentBoundsForTextContainer(textContainer: NSTextContainer;
      proposedLineFragment: CGRect; glyphPosition: CGPoint;
      characterIndex: NSUInteger): CGRect; cdecl;
  end;

  NSTextAttachmentLayout = interface(IObjectiveC)
    ['{E4719213-94FA-4F2E-9C2B-C7D1C4199501}']
    function imageForBounds(bounds: CGRect; attributes: NSDictionary;
      location: Pointer; textContainer: NSTextContainer): UIImage; cdecl;
    function attachmentBoundsForAttributes(attributes: NSDictionary;
      location: Pointer; textContainer: NSTextContainer;
      proposedLineFragment: CGRect; position: CGPoint): CGRect; cdecl;
    function viewProviderForParentView(parentView: UIView; location: Pointer;
      textContainer: NSTextContainer): NSTextAttachmentViewProvider; cdecl;
  end;

  NSTextContentManagerDelegate = interface(IObjectiveC)
    ['{53EF3BB0-8A44-4134-94AD-61072E19DE48}']
    [MethodName('textContentManager:textElementAtLocation:')]
    function textContentManagerTextElementAtLocation(textContentManager
      : NSTextContentManager; textElementAtLocation: Pointer)
      : NSTextElement; cdecl;
    [MethodName('textContentManager:shouldEnumerateTextElement:options:')]
    function textContentManagerShouldEnumerateTextElementOptions
      (textContentManager: NSTextContentManager;
      shouldEnumerateTextElement: NSTextElement;
      options: NSTextContentManagerEnumerationOptions): Boolean; cdecl;
  end;

  NSTextElementProvider = interface(IObjectiveC)
    ['{86775BCA-5853-4622-939F-7AF4F527959E}']
    function documentRange: NSTextRange; cdecl;
    function enumerateTextElementsFromLocation(textLocation: Pointer;
      options: NSTextContentManagerEnumerationOptions;
      usingBlock: TUIKitUsingBlock2): Pointer; cdecl;
    procedure replaceContentsInRange(range: NSTextRange;
      withTextElements: NSArray); cdecl;
    procedure synchronizeToBackingStore(completionHandler
      : TUIKitErrorHandler); cdecl;
    function locationFromLocation(location: Pointer; withOffset: NSInteger)
      : Pointer; cdecl;
    function offsetFromLocation(from: Pointer; toLocation: Pointer)
      : NSInteger; cdecl;
    function adjustedRangeFromRange(textRange: NSTextRange;
      forEditingTextSelection: Boolean): NSTextRange; cdecl;
  end;

  NSTextContentStorageDelegate = interface(IObjectiveC)
    ['{8D1779DD-208C-41C2-B5CC-A780B82D3EFA}']
    function textContentStorage(textContentStorage: NSTextContentStorage;
      textParagraphWithRange: NSRange): NSTextParagraph; cdecl;
  end;

  NSTextLayoutManagerDelegate = interface(IObjectiveC)
    ['{4F24DEA3-88DF-4AB8-B131-85AEE0B0B87D}']
    [MethodName
      ('textLayoutManager:textLayoutFragmentForLocation:inTextElement:')]
    function textLayoutManagerTextLayoutFragmentForLocationInTextElement
      (textLayoutManager: NSTextLayoutManager;
      textLayoutFragmentForLocation: Pointer; inTextElement: NSTextElement)
      : NSTextLayoutFragment; cdecl;
    [MethodName('textLayoutManager:shouldBreakLineBeforeLocation:hyphenating:')]
    function textLayoutManagerShouldBreakLineBeforeLocationHyphenating
      (textLayoutManager: NSTextLayoutManager;
      shouldBreakLineBeforeLocation: Pointer; hyphenating: Boolean)
      : Boolean; cdecl;
    [MethodName
      ('textLayoutManager:renderingAttributesForLink:atLocation:defaultAttributes:')
      ]
    function textLayoutManagerRenderingAttributesForLinkAtLocationDefaultAttributes
      (textLayoutManager: NSTextLayoutManager;
      renderingAttributesForLink: Pointer; atLocation: Pointer;
      defaultAttributes: NSDictionary): NSDictionary; cdecl;
  end;

  NSTextSelectionDataSource = interface(IObjectiveC)
    ['{CE47A4C3-97AE-4746-B7DB-69B61F29BF31}']
    function documentRange: NSTextRange; cdecl;
    procedure enumerateSubstringsFromLocation(location: Pointer;
      options: NSStringEnumerationOptions;
      usingBlock: TUIKitUsingBlock6); cdecl;
    function textRangeForSelectionGranularity(selectionGranularity
      : NSTextSelectionGranularity; enclosingLocation: Pointer)
      : NSTextRange; cdecl;
    function locationFromLocation(location: Pointer; withOffset: NSInteger)
      : Pointer; cdecl;
    function offsetFromLocation(from: Pointer; toLocation: Pointer)
      : NSInteger; cdecl;
    function baseWritingDirectionAtLocation(location: Pointer)
      : NSTextSelectionNavigationWritingDirection; cdecl;
    procedure enumerateCaretOffsetsInLineFragmentAtLocation(location: Pointer;
      usingBlock: TUIKitUsingBlock7); cdecl;
    function lineFragmentRangeForPoint(point: CGPoint;
      inContainerAtLocation: Pointer): NSTextRange; cdecl;
    procedure enumerateContainerBoundariesFromLocation(location: Pointer;
      reverse: Boolean; usingBlock: TUIKitUsingBlock8); cdecl;
    function textLayoutOrientationAtLocation(location: Pointer)
      : NSTextSelectionNavigationLayoutOrientation; cdecl;
  end;

  NSTextViewportLayoutControllerDelegate = interface(IObjectiveC)
    ['{2F4EDDB9-769C-46A0-8F6C-AC08EA702E67}']
    function viewportBoundsForTextViewportLayoutController
      (textViewportLayoutController: NSTextViewportLayoutController)
      : CGRect; cdecl;
    procedure textViewportLayoutController(textViewportLayoutController
      : NSTextViewportLayoutController;
      configureRenderingSurfaceForTextLayoutFragment
      : NSTextLayoutFragment); cdecl;
    procedure textViewportLayoutControllerWillLayout
      (textViewportLayoutController: NSTextViewportLayoutController); cdecl;
    procedure textViewportLayoutControllerDidLayout(textViewportLayoutController
      : NSTextViewportLayoutController); cdecl;
  end;

  UIPrinterPickerControllerDelegate = interface(IObjectiveC)
    ['{7A090464-0F8E-4085-B398-2FEF783B8020}']
    function printerPickerControllerParentViewController(printerPickerController
      : UIPrinterPickerController): UIViewController; cdecl;
    function printerPickerController(printerPickerController
      : UIPrinterPickerController; shouldShowPrinter: UIPrinter)
      : Boolean; cdecl;
    procedure printerPickerControllerWillPresent(printerPickerController
      : UIPrinterPickerController); cdecl;
    procedure printerPickerControllerDidPresent(printerPickerController
      : UIPrinterPickerController); cdecl;
    procedure printerPickerControllerWillDismiss(printerPickerController
      : UIPrinterPickerController); cdecl;
    procedure printerPickerControllerDidDismiss(printerPickerController
      : UIPrinterPickerController); cdecl;
    procedure printerPickerControllerDidSelectPrinter(printerPickerController
      : UIPrinterPickerController); cdecl;
  end;

  UIPrintInteractionControllerDelegate = interface(IObjectiveC)
    ['{267185C3-39E1-4B6B-886D-95689D7BE6A3}']
    function printInteractionControllerParentViewController
      (printInteractionController: UIPrintInteractionController)
      : UIViewController; cdecl;
    [MethodName('printInteractionController:choosePaper:')]
    function printInteractionControllerChoosePaper(printInteractionController
      : UIPrintInteractionController; choosePaper: NSArray)
      : UIPrintPaper; cdecl;
    procedure printInteractionControllerWillPresentPrinterOptions
      (printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerDidPresentPrinterOptions
      (printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerWillDismissPrinterOptions
      (printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerDidDismissPrinterOptions
      (printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerWillStartJob(printInteractionController
      : UIPrintInteractionController); cdecl;
    procedure printInteractionControllerDidFinishJob(printInteractionController
      : UIPrintInteractionController); cdecl;
    [MethodName('printInteractionController:cutLengthForPaper:')]
    function printInteractionControllerCutLengthForPaper
      (printInteractionController: UIPrintInteractionController;
      cutLengthForPaper: UIPrintPaper): CGFloat; cdecl;
    [MethodName('printInteractionController:chooseCutterBehavior:')]
    function printInteractionControllerChooseCutterBehavior
      (printInteractionController: UIPrintInteractionController;
      chooseCutterBehavior: NSArray): UIPrinterCutterBehavior; cdecl;
  end;

  UIActivityItemSource = interface(IObjectiveC)
    ['{C72D4869-0F87-4B4E-844B-64A37E251CBD}']
    function activityViewControllerPlaceholderItem(activityViewController
      : UIActivityViewController): Pointer; cdecl;
    [MethodName('activityViewController:itemForActivityType:')]
    function activityViewControllerItemForActivityType(activityViewController
      : UIActivityViewController; itemForActivityType: UIActivityType)
      : Pointer; cdecl;
    [MethodName('activityViewController:subjectForActivityType:')]
    function activityViewControllerSubjectForActivityType(activityViewController
      : UIActivityViewController; subjectForActivityType: UIActivityType)
      : NSString; cdecl;
    [MethodName('activityViewController:dataTypeIdentifierForActivityType:')]
    function activityViewControllerDataTypeIdentifierForActivityType
      (activityViewController: UIActivityViewController;
      dataTypeIdentifierForActivityType: UIActivityType): NSString; cdecl;
    [MethodName
      ('activityViewController:thumbnailImageForActivityType:suggestedSize:')]
    function activityViewControllerThumbnailImageForActivityTypeSuggestedSize
      (activityViewController: UIActivityViewController;
      thumbnailImageForActivityType: UIActivityType; suggestedSize: CGSize)
      : UIImage; cdecl;
    function activityViewControllerLinkMetadata(activityViewController
      : UIActivityViewController): LPLinkMetadata; cdecl;
  end;

  UIActivityItemsConfigurationReading = interface(IObjectiveC)
    ['{28F39378-D2D5-49F4-BBEE-0BC275DC38AA}']
    function itemProvidersForActivityItemsConfiguration: NSArray; cdecl;
    function activityItemsConfigurationSupportsInteraction
      (interaction: UIActivityItemsConfigurationInteraction): Boolean; cdecl;
    function activityItemsConfigurationMetadataForKey
      (key: UIActivityItemsConfigurationMetadataKey): Pointer; cdecl;
    function activityItemsConfigurationMetadataForItemAtIndex(index: NSInteger;
      key: UIActivityItemsConfigurationMetadataKey): Pointer; cdecl;
    function activityItemsConfigurationPreviewForItemAtIndex(index: NSInteger;
      intent: UIActivityItemsConfigurationPreviewIntent; suggestedSize: CGSize)
      : NSItemProvider; cdecl;
    function applicationActivitiesForActivityItemsConfiguration: NSArray; cdecl;
  end;

  UIDocumentInteractionControllerDelegate = interface(IObjectiveC)
    ['{19F3F1DB-4DF9-4C4F-8A7E-3B35135B677B}']
    function documentInteractionControllerViewControllerForPreview
      (controller: UIDocumentInteractionController): UIViewController; cdecl;
    function documentInteractionControllerRectForPreview
      (controller: UIDocumentInteractionController): CGRect; cdecl;
    function documentInteractionControllerViewForPreview
      (controller: UIDocumentInteractionController): UIView; cdecl;
    procedure documentInteractionControllerWillBeginPreview
      (controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerDidEndPreview
      (controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerWillPresentOptionsMenu
      (controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerDidDismissOptionsMenu
      (controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerWillPresentOpenInMenu
      (controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerDidDismissOpenInMenu
      (controller: UIDocumentInteractionController); cdecl;
    [MethodName('documentInteractionController:willBeginSendingToApplication:')]
    procedure documentInteractionControllerWillBeginSendingToApplication
      (controller: UIDocumentInteractionController;
      willBeginSendingToApplication: NSString); cdecl;
    [MethodName('documentInteractionController:didEndSendingToApplication:')]
    procedure documentInteractionControllerDidEndSendingToApplication
      (controller: UIDocumentInteractionController;
      didEndSendingToApplication: NSString); cdecl;
    [MethodName('documentInteractionController:canPerformAction:')]
    function documentInteractionControllerCanPerformAction
      (controller: UIDocumentInteractionController; canPerformAction: SEL)
      : Boolean; cdecl;
    [MethodName('documentInteractionController:performAction:')]
    function documentInteractionControllerPerformAction
      (controller: UIDocumentInteractionController; performAction: SEL)
      : Boolean; cdecl;
  end;

  UIAccelerometerDelegate = interface(IObjectiveC)
    ['{F24F5E2C-1DF3-4A2A-AE7E-BD63087860D0}']
    procedure accelerometer(accelerometer: UIAccelerometer;
      didAccelerate: UIAcceleration); cdecl;
  end;

  UIPickerViewDataSource = interface(IObjectiveC)
    ['{252F86C3-690B-48A5-8B12-246EB3779BA2}']
    function numberOfComponentsInPickerView(pickerView: UIPickerView)
      : NSInteger; cdecl;
    function pickerView(pickerView: UIPickerView;
      numberOfRowsInComponent: NSInteger): NSInteger; cdecl;
  end;

  UIPickerViewDelegate = interface(IObjectiveC)
    ['{725700E9-76EC-4C22-840E-3B3097C657A9}']
    [MethodName('pickerView:widthForComponent:')]
    function pickerViewWidthForComponent(pickerView: UIPickerView;
      widthForComponent: NSInteger): CGFloat; cdecl;
    [MethodName('pickerView:rowHeightForComponent:')]
    function pickerViewRowHeightForComponent(pickerView: UIPickerView;
      rowHeightForComponent: NSInteger): CGFloat; cdecl;
    [MethodName('pickerView:titleForRow:forComponent:')]
    function pickerViewTitleForRowForComponent(pickerView: UIPickerView;
      titleForRow: NSInteger; forComponent: NSInteger): NSString; cdecl;
    [MethodName('pickerView:attributedTitleForRow:forComponent:')]
    function pickerViewAttributedTitleForRowForComponent
      (pickerView: UIPickerView; attributedTitleForRow: NSInteger;
      forComponent: NSInteger): NSAttributedString; cdecl;
    [MethodName('pickerView:viewForRow:forComponent:reusingView:')]
    function pickerViewViewForRowForComponentReusingView
      (pickerView: UIPickerView; viewForRow: NSInteger; forComponent: NSInteger;
      reusingView: UIView): UIView; cdecl;
    [MethodName('pickerView:didSelectRow:inComponent:')]
    procedure pickerViewDidSelectRowInComponent(pickerView: UIPickerView;
      didSelectRow: NSInteger; inComponent: NSInteger); cdecl;
  end;

  UIScrollViewDelegate = interface(IObjectiveC)
    ['{54E4CA15-0C22-4124-AB5B-577370FF4553}']
    procedure scrollViewDidScroll(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidZoom(scrollView: UIScrollView); cdecl;
    procedure scrollViewWillBeginDragging(scrollView: UIScrollView); cdecl;
    procedure scrollViewWillEndDragging(scrollView: UIScrollView;
      withVelocity: CGPoint; targetContentOffset: PCGPoint); cdecl;
    procedure scrollViewDidEndDragging(scrollView: UIScrollView;
      willDecelerate: Boolean); cdecl;
    procedure scrollViewWillBeginDecelerating(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidEndDecelerating(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidEndScrollingAnimation
      (scrollView: UIScrollView); cdecl;
    function viewForZoomingInScrollView(scrollView: UIScrollView)
      : UIView; cdecl;
    procedure scrollViewWillBeginZooming(scrollView: UIScrollView;
      withView: UIView); cdecl;
    procedure scrollViewDidEndZooming(scrollView: UIScrollView;
      withView: UIView; atScale: CGFloat); cdecl;
    function scrollViewShouldScrollToTop(scrollView: UIScrollView)
      : Boolean; cdecl;
    procedure scrollViewDidScrollToTop(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidChangeAdjustedContentInset
      (scrollView: UIScrollView); cdecl;
  end;

  UIPickerViewAccessibilityDelegate = interface(IObjectiveC)
    ['{3F81AAE2-CABD-4E88-82C1-0381BA324DBB}']
    [MethodName('pickerView:accessibilityLabelForComponent:')]
    function pickerViewAccessibilityLabelForComponent(pickerView: UIPickerView;
      accessibilityLabelForComponent: NSInteger): NSString; cdecl;
    [MethodName('pickerView:accessibilityHintForComponent:')]
    function pickerViewAccessibilityHintForComponent(pickerView: UIPickerView;
      accessibilityHintForComponent: NSInteger): NSString; cdecl;
    [MethodName('pickerView:accessibilityUserInputLabelsForComponent:')]
    function pickerViewAccessibilityUserInputLabelsForComponent
      (pickerView: UIPickerView; accessibilityUserInputLabelsForComponent
      : NSInteger): NSArray; cdecl;
    [MethodName('pickerView:accessibilityAttributedLabelForComponent:')]
    function pickerViewAccessibilityAttributedLabelForComponent
      (pickerView: UIPickerView; accessibilityAttributedLabelForComponent
      : NSInteger): NSAttributedString; cdecl;
    [MethodName('pickerView:accessibilityAttributedHintForComponent:')]
    function pickerViewAccessibilityAttributedHintForComponent
      (pickerView: UIPickerView; accessibilityAttributedHintForComponent
      : NSInteger): NSAttributedString; cdecl;
    [MethodName
      ('pickerView:accessibilityAttributedUserInputLabelsForComponent:')]
    function pickerViewAccessibilityAttributedUserInputLabelsForComponent
      (pickerView: UIPickerView;
      accessibilityAttributedUserInputLabelsForComponent: NSInteger)
      : NSArray; cdecl;
  end;

  UIScrollViewAccessibilityDelegate = interface(IObjectiveC)
    ['{67316541-0967-493A-BF5D-A31ACC36BCB6}']
    function accessibilityScrollStatusForScrollView(scrollView: UIScrollView)
      : NSString; cdecl;
    function accessibilityAttributedScrollStatusForScrollView
      (scrollView: UIScrollView): NSAttributedString; cdecl;
  end;

  UIAccessibilityContainerDataTableCell = interface(IObjectiveC)
    ['{94D04D04-1E1D-4477-B83B-E7E85D6DE3D5}']
    function accessibilityRowRange: NSRange; cdecl;
    function accessibilityColumnRange: NSRange; cdecl;
  end;

  UIAccessibilityContainerDataTable = interface(IObjectiveC)
    ['{E9280446-3F11-4AD5-B4AB-B50B2E3CAFA6}']
    function accessibilityDataTableCellElementForRow(row: NSUInteger;
      column: NSUInteger): Pointer; cdecl;
    function accessibilityRowCount: NSUInteger; cdecl;
    function accessibilityColumnCount: NSUInteger; cdecl;
    function accessibilityHeaderElementsForRow(row: NSUInteger): NSArray; cdecl;
    function accessibilityHeaderElementsForColumn(column: NSUInteger)
      : NSArray; cdecl;
  end;

  UISpringLoadedInteractionSupporting = interface(IObjectiveC)
    ['{5D4B2A60-CAA0-435E-BCA5-9B4BC255B582}']
    procedure setSpringLoaded(springLoaded: Boolean); cdecl;
    function isSpringLoaded: Boolean; cdecl;
  end;

  UIAccessibilityIdentification = interface(IObjectiveC)
    ['{9B631637-F6AE-4D8E-AAE4-5CACD308D59E}']
    procedure setAccessibilityIdentifier(accessibilityIdentifier
      : NSString); cdecl;
    function accessibilityIdentifier: NSString; cdecl;
  end;

  UIGuidedAccessRestrictionDelegate = interface(IObjectiveC)
    ['{AA983638-E8DD-43B6-A1FA-860CE7EA6575}']
    function guidedAccessRestrictionIdentifiers: NSArray; cdecl;
    procedure guidedAccessRestrictionWithIdentifier(restrictionIdentifier
      : NSString; didChangeState: UIGuidedAccessRestrictionState); cdecl;
    function textForGuidedAccessRestrictionWithIdentifier(restrictionIdentifier
      : NSString): NSString; cdecl;
    function detailTextForGuidedAccessRestrictionWithIdentifier
      (restrictionIdentifier: NSString): NSString; cdecl;
  end;

  UIAccessibilityReadingContent = interface(IObjectiveC)
    ['{17032B4F-DDA9-45A2-9E42-914809541EC5}']
    function accessibilityLineNumberForPoint(point: CGPoint): NSInteger; cdecl;
    function accessibilityContentForLineNumber(lineNumber: NSInteger)
      : NSString; cdecl;
    function accessibilityFrameForLineNumber(lineNumber: NSInteger)
      : CGRect; cdecl;
    function accessibilityPageContent: NSString; cdecl;
    function accessibilityAttributedContentForLineNumber(lineNumber: NSInteger)
      : NSAttributedString; cdecl;
    function accessibilityAttributedPageContent: NSAttributedString; cdecl;
  end;

  UIConfigurationState = interface(IObjectiveC)
    ['{5BBA8AEC-B487-42D1-9E3D-89EF2316713A}']
    function initWithTraitCollection(traitCollection: UITraitCollection)
      : Pointer { instancetype }; cdecl;
    procedure setTraitCollection(traitCollection: UITraitCollection); cdecl;
    function traitCollection: UITraitCollection; cdecl;
    function customStateForKey(key: UIConfigurationStateCustomKey)
      : Pointer; cdecl;
    procedure setCustomState(customState: Pointer;
      forKey: UIConfigurationStateCustomKey); cdecl;
    function objectForKeyedSubscript(key: UIConfigurationStateCustomKey)
      : Pointer; cdecl;
    procedure setObject(obj: Pointer;
      forKeyedSubscript: UIConfigurationStateCustomKey); cdecl;
  end;

  UIAccessibilityContentSizeCategoryImageAdjusting = interface(IObjectiveC)
    ['{3E780AE2-0608-493B-9A8E-E70444535F4B}']
    procedure setAdjustsImageSizeForAccessibilityContentSizeCategory
      (adjustsImageSizeForAccessibilityContentSizeCategory: Boolean); cdecl;
    function adjustsImageSizeForAccessibilityContentSizeCategory
      : Boolean; cdecl;
  end;

  UIActivityItemsConfigurationProviding = interface(IObjectiveC)
    ['{9C311CD4-0496-4DE2-88ED-97272BF5E812}']
    function activityItemsConfiguration: Pointer; cdecl;
  end;

  UIBarPositioning = interface(IObjectiveC)
    ['{7EE30709-D10F-40D9-A818-E7F0B71363D8}']
    function barPosition: UIBarPosition; cdecl;
  end;

  UIBarPositioningDelegate = interface(IObjectiveC)
    ['{1E00E3F1-05C6-4A77-A678-63354BB2F4D3}']
    function positionForBar(bar: Pointer): UIBarPosition; cdecl;
  end;

  UICalendarSelectionMultiDateDelegate = interface(IObjectiveC)
    ['{A372C37B-D605-48BE-9B38-A3F7346C7765}']
    [MethodName('multiDateSelection:didSelectDate:')]
    procedure multiDateSelectionDidSelectDate
      (selection: UICalendarSelectionMultiDate;
      didSelectDate: NSDateComponents); cdecl;
    [MethodName('multiDateSelection:didDeselectDate:')]
    procedure multiDateSelectionDidDeselectDate
      (selection: UICalendarSelectionMultiDate;
      didDeselectDate: NSDateComponents); cdecl;
    [MethodName('multiDateSelection:canSelectDate:')]
    function multiDateSelectionCanSelectDate
      (selection: UICalendarSelectionMultiDate; canSelectDate: NSDateComponents)
      : Boolean; cdecl;
    [MethodName('multiDateSelection:canDeselectDate:')]
    function multiDateSelectionCanDeselectDate
      (selection: UICalendarSelectionMultiDate;
      canDeselectDate: NSDateComponents): Boolean; cdecl;
  end;

  UICalendarSelectionSingleDateDelegate = interface(IObjectiveC)
    ['{A8DC00DD-25A5-4DCB-9E0C-533310F6D746}']
    [MethodName('dateSelection:didSelectDate:')]
    procedure dateSelectionDidSelectDate(selection
      : UICalendarSelectionSingleDate; didSelectDate: NSDateComponents); cdecl;
    [MethodName('dateSelection:canSelectDate:')]
    function dateSelectionCanSelectDate(selection
      : UICalendarSelectionSingleDate; canSelectDate: NSDateComponents)
      : Boolean; cdecl;
  end;

  UICalendarViewDelegate = interface(IObjectiveC)
    ['{68429C4D-ABE6-46D2-8F45-4B2501D5838C}']
    [MethodName('calendarView:decorationForDateComponents:')]
    function calendarViewDecorationForDateComponents(calendarView
      : UICalendarView; decorationForDateComponents: NSDateComponents)
      : UICalendarViewDecoration; cdecl;
    [MethodName('calendarView:didChangeVisibleDateComponentsFrom:')]
    procedure calendarViewDidChangeVisibleDateComponentsFrom
      (calendarView: UICalendarView;
      didChangeVisibleDateComponentsFrom: NSDateComponents); cdecl;
  end;

  UICloudSharingControllerDelegate = interface(IObjectiveC)
    ['{FCDAFB92-36AD-4BC4-9A01-C276AF2F041B}']
    procedure cloudSharingController(csc: UICloudSharingController;
      failedToSaveShareWithError: NSError); cdecl;
    function itemTitleForCloudSharingController(csc: UICloudSharingController)
      : NSString; cdecl;
    function itemThumbnailDataForCloudSharingController
      (csc: UICloudSharingController): NSData; cdecl;
    function itemTypeForCloudSharingController(csc: UICloudSharingController)
      : NSString; cdecl;
    procedure cloudSharingControllerDidSaveShare
      (csc: UICloudSharingController); cdecl;
    procedure cloudSharingControllerDidStopSharing
      (csc: UICloudSharingController); cdecl;
  end;

  NSCollectionLayoutEnvironment = interface(IObjectiveC)
    ['{71E44134-0C65-4A88-956F-BEDD5C21AB5C}']
    function container: Pointer; cdecl;
    function traitCollection: UITraitCollection; cdecl;
  end;

  NSCollectionLayoutContainer = interface(IObjectiveC)
    ['{5F2D1ABC-B61A-4630-B266-DF0218B8F6C1}']
    function contentSize: CGSize; cdecl;
    function effectiveContentSize: CGSize; cdecl;
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    function effectiveContentInsets: NSDirectionalEdgeInsets; cdecl;
  end;

  NSCollectionLayoutVisibleItem = interface(IObjectiveC)
    ['{85286AE9-2ECD-4374-B8EE-E752A2582CF6}']
    procedure setAlpha(alpha: CGFloat); cdecl;
    function alpha: CGFloat; cdecl;
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function zIndex: NSInteger; cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    function isHidden: Boolean; cdecl;
    procedure setCenter(center: CGPoint); cdecl;
    function center: CGPoint; cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    function transform: CGAffineTransform; cdecl;
    procedure setTransform3D(transform3D: CATransform3D); cdecl;
    function transform3D: CATransform3D; cdecl;
    function name: NSString; cdecl;
    function indexPath: NSIndexPath; cdecl;
    function frame: CGRect; cdecl;
    function bounds: CGRect; cdecl;
    function representedElementCategory: UICollectionElementCategory; cdecl;
    function representedElementKind: NSString; cdecl;
  end;

  UIDataSourceTranslating = interface(IObjectiveC)
    ['{BBD6C6EF-2E6F-4617-AEE6-4ECA1425DE68}']
    function presentationSectionIndexForDataSourceSectionIndex
      (dataSourceSectionIndex: NSInteger): NSInteger; cdecl;
    function dataSourceSectionIndexForPresentationSectionIndex
      (presentationSectionIndex: NSInteger): NSInteger; cdecl;
    function presentationIndexPathForDataSourceIndexPath(dataSourceIndexPath
      : NSIndexPath): NSIndexPath; cdecl;
    function dataSourceIndexPathForPresentationIndexPath(presentationIndexPath
      : NSIndexPath): NSIndexPath; cdecl;
    procedure performUsingPresentationValues(actionsToTranslate
      : TUIKitAction); cdecl;
  end;

  UISpringLoadedInteractionContext = interface(IObjectiveC)
    ['{CB3CA886-E409-466F-BB4D-1BC4426251D6}']
    function state: UISpringLoadedInteractionEffectState; cdecl;
    procedure setTargetView(targetView: UIView); cdecl;
    function targetView: UIView; cdecl;
    procedure setTargetItem(targetItem: Pointer); cdecl;
    function targetItem: Pointer; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
  end;

  UICollectionViewDragDelegate = interface(IObjectiveC)
    ['{06759364-3C60-414C-8297-D4831A90CF4F}']
    [MethodName('collectionView:itemsForBeginningDragSession:atIndexPath:')]
    function collectionViewItemsForBeginningDragSessionAtIndexPath
      (collectionView: UICollectionView; itemsForBeginningDragSession: Pointer;
      atIndexPath: NSIndexPath): NSArray; cdecl;
    [MethodName
      ('collectionView:itemsForAddingToDragSession:atIndexPath:point:')]
    function collectionViewItemsForAddingToDragSessionAtIndexPathPoint
      (collectionView: UICollectionView; itemsForAddingToDragSession: Pointer;
      atIndexPath: NSIndexPath; point: CGPoint): NSArray; cdecl;
    [MethodName('collectionView:dragPreviewParametersForItemAtIndexPath:')]
    function collectionViewDragPreviewParametersForItemAtIndexPath
      (collectionView: UICollectionView; dragPreviewParametersForItemAtIndexPath
      : NSIndexPath): UIDragPreviewParameters; cdecl;
    [MethodName('collectionView:dragSessionWillBegin:')]
    procedure collectionViewDragSessionWillBegin(collectionView
      : UICollectionView; dragSessionWillBegin: Pointer); cdecl;
    [MethodName('collectionView:dragSessionDidEnd:')]
    procedure collectionViewDragSessionDidEnd(collectionView: UICollectionView;
      dragSessionDidEnd: Pointer); cdecl;
    [MethodName('collectionView:dragSessionAllowsMoveOperation:')]
    function collectionViewDragSessionAllowsMoveOperation(collectionView
      : UICollectionView; dragSessionAllowsMoveOperation: Pointer)
      : Boolean; cdecl;
    [MethodName('collectionView:dragSessionIsRestrictedToDraggingApplication:')]
    function collectionViewDragSessionIsRestrictedToDraggingApplication
      (collectionView: UICollectionView;
      dragSessionIsRestrictedToDraggingApplication: Pointer): Boolean; cdecl;
  end;

  UICollectionViewDropDelegate = interface(IObjectiveC)
    ['{7AFFC43E-5AE7-4B06-A860-5F0244539C8E}']
    [MethodName('collectionView:performDropWithCoordinator:')]
    procedure collectionViewPerformDropWithCoordinator(collectionView
      : UICollectionView; performDropWithCoordinator: Pointer); cdecl;
    [MethodName('collectionView:canHandleDropSession:')]
    function collectionViewCanHandleDropSession(collectionView
      : UICollectionView; canHandleDropSession: Pointer): Boolean; cdecl;
    [MethodName('collectionView:dropSessionDidEnter:')]
    procedure collectionViewDropSessionDidEnter(collectionView
      : UICollectionView; dropSessionDidEnter: Pointer); cdecl;
    [MethodName
      ('collectionView:dropSessionDidUpdate:withDestinationIndexPath:')]
    function collectionViewDropSessionDidUpdateWithDestinationIndexPath
      (collectionView: UICollectionView; dropSessionDidUpdate: Pointer;
      withDestinationIndexPath: NSIndexPath)
      : UICollectionViewDropProposal; cdecl;
    [MethodName('collectionView:dropSessionDidExit:')]
    procedure collectionViewDropSessionDidExit(collectionView: UICollectionView;
      dropSessionDidExit: Pointer); cdecl;
    [MethodName('collectionView:dropSessionDidEnd:')]
    procedure collectionViewDropSessionDidEnd(collectionView: UICollectionView;
      dropSessionDidEnd: Pointer); cdecl;
    [MethodName('collectionView:dropPreviewParametersForItemAtIndexPath:')]
    function collectionViewDropPreviewParametersForItemAtIndexPath
      (collectionView: UICollectionView; dropPreviewParametersForItemAtIndexPath
      : NSIndexPath): UIDragPreviewParameters; cdecl;
  end;

  UICollectionViewDropCoordinator = interface(IObjectiveC)
    ['{E1C877CB-5A7B-4AAC-8366-A64748E1CA5B}']
    function items: NSArray; cdecl;
    function destinationIndexPath: NSIndexPath; cdecl;
    function proposal: UICollectionViewDropProposal; cdecl;
    function session: Pointer; cdecl;
    [MethodName('dropItem:toPlaceholder:')]
    function dropItemToPlaceholder(dragItem: UIDragItem;
      toPlaceholder: UICollectionViewDropPlaceholder): Pointer; cdecl;
    [MethodName('dropItem:toItemAtIndexPath:')]
    function dropItemToItemAtIndexPath(dragItem: UIDragItem;
      toItemAtIndexPath: NSIndexPath): Pointer; cdecl;
    [MethodName('dropItem:intoItemAtIndexPath:rect:')]
    function dropItemIntoItemAtIndexPathRect(dragItem: UIDragItem;
      intoItemAtIndexPath: NSIndexPath; rect: CGRect): Pointer; cdecl;
    [MethodName('dropItem:toTarget:')]
    function dropItemToTarget(dragItem: UIDragItem;
      toTarget: UIDragPreviewTarget): Pointer; cdecl;
  end;

  UICollectionViewDropItem = interface(IObjectiveC)
    ['{4BA76B70-E83A-497B-B733-15463195A685}']
    function dragItem: UIDragItem; cdecl;
    function sourceIndexPath: NSIndexPath; cdecl;
    function previewSize: CGSize; cdecl;
  end;

  UICollectionViewDropPlaceholderContext = interface(IObjectiveC)
    ['{FC51B837-59FF-4E92-A9F5-D8577D7F5AC2}']
    function dragItem: UIDragItem; cdecl;
    function commitInsertionWithDataSourceUpdates(dataSourceUpdates
      : TUIKitDataSourceUpdates): Boolean; cdecl;
    function deletePlaceholder: Boolean; cdecl;
    procedure setNeedsCellUpdate; cdecl;
  end;

  UICollectionViewDataSource = interface(IObjectiveC)
    ['{8AFD1EEB-D36A-4970-A817-7A5E3D9225B1}']
    [MethodName('collectionView:numberOfItemsInSection:')]
    function collectionViewNumberOfItemsInSection(collectionView
      : UICollectionView; numberOfItemsInSection: NSInteger): NSInteger; cdecl;
    [MethodName('collectionView:cellForItemAtIndexPath:')]
    function collectionViewCellForItemAtIndexPath(collectionView
      : UICollectionView; cellForItemAtIndexPath: NSIndexPath)
      : UICollectionViewCell; cdecl;
    function numberOfSectionsInCollectionView(collectionView: UICollectionView)
      : NSInteger; cdecl;
    [MethodName
      ('collectionView:viewForSupplementaryElementOfKind:atIndexPath:')]
    function collectionViewViewForSupplementaryElementOfKindAtIndexPath
      (collectionView: UICollectionView;
      viewForSupplementaryElementOfKind: NSString; atIndexPath: NSIndexPath)
      : UICollectionReusableView; cdecl;
    [MethodName('collectionView:canMoveItemAtIndexPath:')]
    function collectionViewCanMoveItemAtIndexPath(collectionView
      : UICollectionView; canMoveItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:moveItemAtIndexPath:toIndexPath:')]
    procedure collectionViewMoveItemAtIndexPathToIndexPath(collectionView
      : UICollectionView; moveItemAtIndexPath: NSIndexPath;
      toIndexPath: NSIndexPath); cdecl;
    function indexTitlesForCollectionView(collectionView: UICollectionView)
      : NSArray; cdecl;
    [MethodName('collectionView:indexPathForIndexTitle:atIndex:')]
    function collectionViewIndexPathForIndexTitleAtIndex(collectionView
      : UICollectionView; indexPathForIndexTitle: NSString; atIndex: NSInteger)
      : NSIndexPath; cdecl;
  end;

  UICollectionViewDataSourcePrefetching = interface(IObjectiveC)
    ['{FA6943FA-C054-4DDE-A3BB-C58768D0AD2C}']
    [MethodName('collectionView:prefetchItemsAtIndexPaths:')]
    procedure collectionViewPrefetchItemsAtIndexPaths(collectionView
      : UICollectionView; prefetchItemsAtIndexPaths: NSArray); cdecl;
    [MethodName('collectionView:cancelPrefetchingForItemsAtIndexPaths:')]
    procedure collectionViewCancelPrefetchingForItemsAtIndexPaths
      (collectionView: UICollectionView;
      cancelPrefetchingForItemsAtIndexPaths: NSArray); cdecl;
  end;

  UICollectionViewDelegate = interface(IObjectiveC)
    ['{35B2CD7A-A465-4BD1-AC37-3988A5AC6C6E}']
    [MethodName('collectionView:shouldHighlightItemAtIndexPath:')]
    function collectionViewShouldHighlightItemAtIndexPath(collectionView
      : UICollectionView; shouldHighlightItemAtIndexPath: NSIndexPath)
      : Boolean; cdecl;
    [MethodName('collectionView:didHighlightItemAtIndexPath:')]
    procedure collectionViewDidHighlightItemAtIndexPath(collectionView
      : UICollectionView; didHighlightItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didUnhighlightItemAtIndexPath:')]
    procedure collectionViewDidUnhighlightItemAtIndexPath(collectionView
      : UICollectionView; didUnhighlightItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:shouldSelectItemAtIndexPath:')]
    function collectionViewShouldSelectItemAtIndexPath(collectionView
      : UICollectionView; shouldSelectItemAtIndexPath: NSIndexPath)
      : Boolean; cdecl;
    [MethodName('collectionView:shouldDeselectItemAtIndexPath:')]
    function collectionViewShouldDeselectItemAtIndexPath(collectionView
      : UICollectionView; shouldDeselectItemAtIndexPath: NSIndexPath)
      : Boolean; cdecl;
    [MethodName('collectionView:didSelectItemAtIndexPath:')]
    procedure collectionViewDidSelectItemAtIndexPath(collectionView
      : UICollectionView; didSelectItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didDeselectItemAtIndexPath:')]
    procedure collectionViewDidDeselectItemAtIndexPath(collectionView
      : UICollectionView; didDeselectItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:canPerformPrimaryActionForItemAtIndexPath:')]
    function collectionViewCanPerformPrimaryActionForItemAtIndexPath
      (collectionView: UICollectionView;
      canPerformPrimaryActionForItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:performPrimaryActionForItemAtIndexPath:')]
    procedure collectionViewPerformPrimaryActionForItemAtIndexPath
      (collectionView: UICollectionView;
      performPrimaryActionForItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:willDisplayCell:forItemAtIndexPath:')]
    procedure collectionViewWillDisplayCellForItemAtIndexPath
      (collectionView: UICollectionView; willDisplayCell: UICollectionViewCell;
      forItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName
      ('collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:')
      ]
    procedure collectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath
      (collectionView: UICollectionView;
      willDisplaySupplementaryView: UICollectionReusableView;
      forElementKind: NSString; atIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didEndDisplayingCell:forItemAtIndexPath:')]
    procedure collectionViewDidEndDisplayingCellForItemAtIndexPath
      (collectionView: UICollectionView;
      didEndDisplayingCell: UICollectionViewCell;
      forItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName
      ('collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:')
      ]
    procedure collectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath
      (collectionView: UICollectionView;
      didEndDisplayingSupplementaryView: UICollectionReusableView;
      forElementOfKind: NSString; atIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:shouldShowMenuForItemAtIndexPath:')]
    function collectionViewShouldShowMenuForItemAtIndexPath(collectionView
      : UICollectionView; shouldShowMenuForItemAtIndexPath: NSIndexPath)
      : Boolean; cdecl;
    [MethodName
      ('collectionView:canPerformAction:forItemAtIndexPath:withSender:')]
    function collectionViewCanPerformActionForItemAtIndexPathWithSender
      (collectionView: UICollectionView; canPerformAction: SEL;
      forItemAtIndexPath: NSIndexPath; withSender: Pointer): Boolean; cdecl;
    [MethodName('collectionView:performAction:forItemAtIndexPath:withSender:')]
    procedure collectionViewPerformActionForItemAtIndexPathWithSender
      (collectionView: UICollectionView; performAction: SEL;
      forItemAtIndexPath: NSIndexPath; withSender: Pointer); cdecl;
    [MethodName('collectionView:transitionLayoutForOldLayout:newLayout:')]
    function collectionViewTransitionLayoutForOldLayoutNewLayout
      (collectionView: UICollectionView;
      transitionLayoutForOldLayout: UICollectionViewLayout;
      newLayout: UICollectionViewLayout)
      : UICollectionViewTransitionLayout; cdecl;
    [MethodName('collectionView:canFocusItemAtIndexPath:')]
    function collectionViewCanFocusItemAtIndexPath(collectionView
      : UICollectionView; canFocusItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:shouldUpdateFocusInContext:')]
    function collectionViewShouldUpdateFocusInContext(collectionView
      : UICollectionView; shouldUpdateFocusInContext
      : UICollectionViewFocusUpdateContext): Boolean; cdecl;
    [MethodName
      ('collectionView:didUpdateFocusInContext:withAnimationCoordinator:')]
    procedure collectionViewDidUpdateFocusInContextWithAnimationCoordinator
      (collectionView: UICollectionView;
      didUpdateFocusInContext: UICollectionViewFocusUpdateContext;
      withAnimationCoordinator: UIFocusAnimationCoordinator); cdecl;
    function indexPathForPreferredFocusedViewInCollectionView
      (collectionView: UICollectionView): NSIndexPath; cdecl;
    [MethodName('collectionView:selectionFollowsFocusForItemAtIndexPath:')]
    function collectionViewSelectionFollowsFocusForItemAtIndexPath
      (collectionView: UICollectionView; selectionFollowsFocusForItemAtIndexPath
      : NSIndexPath): Boolean; cdecl;
    [MethodName
      ('collectionView:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:')
      ]
    function collectionViewTargetIndexPathForMoveOfItemFromOriginalIndexPathAtCurrentIndexPathToProposedIndexPath
      (collectionView: UICollectionView;
      targetIndexPathForMoveOfItemFromOriginalIndexPath: NSIndexPath;
      atCurrentIndexPath: NSIndexPath; toProposedIndexPath: NSIndexPath)
      : NSIndexPath; cdecl;
    [MethodName
      ('collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:')
      ]
    function collectionViewTargetIndexPathForMoveFromItemAtIndexPathToProposedIndexPath
      (collectionView: UICollectionView;
      targetIndexPathForMoveFromItemAtIndexPath: NSIndexPath;
      toProposedIndexPath: NSIndexPath): NSIndexPath; cdecl;
    [MethodName('collectionView:targetContentOffsetForProposedContentOffset:')]
    function collectionViewTargetContentOffsetForProposedContentOffset
      (collectionView: UICollectionView;
      targetContentOffsetForProposedContentOffset: CGPoint): CGPoint; cdecl;
    [MethodName('collectionView:canEditItemAtIndexPath:')]
    function collectionViewCanEditItemAtIndexPath(collectionView
      : UICollectionView; canEditItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:shouldSpringLoadItemAtIndexPath:withContext:')]
    function collectionViewShouldSpringLoadItemAtIndexPathWithContext
      (collectionView: UICollectionView;
      shouldSpringLoadItemAtIndexPath: NSIndexPath; withContext: Pointer)
      : Boolean; cdecl;
    [MethodName
      ('collectionView:shouldBeginMultipleSelectionInteractionAtIndexPath:')]
    function collectionViewShouldBeginMultipleSelectionInteractionAtIndexPath
      (collectionView: UICollectionView;
      shouldBeginMultipleSelectionInteractionAtIndexPath: NSIndexPath)
      : Boolean; cdecl;
    [MethodName
      ('collectionView:didBeginMultipleSelectionInteractionAtIndexPath:')]
    procedure collectionViewDidBeginMultipleSelectionInteractionAtIndexPath
      (collectionView: UICollectionView;
      didBeginMultipleSelectionInteractionAtIndexPath: NSIndexPath); cdecl;
    procedure collectionViewDidEndMultipleSelectionInteraction
      (collectionView: UICollectionView); cdecl;
    [MethodName
      ('collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:')]
    function collectionViewContextMenuConfigurationForItemsAtIndexPathsPoint
      (collectionView: UICollectionView;
      contextMenuConfigurationForItemsAtIndexPaths: NSArray; point: CGPoint)
      : UIContextMenuConfiguration; cdecl;
    [MethodName
      ('collectionView:contextMenuConfiguration:highlightPreviewForItemAtIndexPath:')
      ]
    function collectionViewContextMenuConfigurationHighlightPreviewForItemAtIndexPath
      (collectionView: UICollectionView;
      contextMenuConfiguration: UIContextMenuConfiguration;
      highlightPreviewForItemAtIndexPath: NSIndexPath)
      : UITargetedPreview; cdecl;
    [MethodName
      ('collectionView:contextMenuConfiguration:dismissalPreviewForItemAtIndexPath:')
      ]
    function collectionViewContextMenuConfigurationDismissalPreviewForItemAtIndexPath
      (collectionView: UICollectionView;
      contextMenuConfiguration: UIContextMenuConfiguration;
      dismissalPreviewForItemAtIndexPath: NSIndexPath)
      : UITargetedPreview; cdecl;
    [MethodName
      ('collectionView:willPerformPreviewActionForMenuWithConfiguration:animator:')
      ]
    procedure collectionViewWillPerformPreviewActionForMenuWithConfigurationAnimator
      (collectionView: UICollectionView;
      willPerformPreviewActionForMenuWithConfiguration
      : UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName
      ('collectionView:willDisplayContextMenuWithConfiguration:animator:')]
    procedure collectionViewWillDisplayContextMenuWithConfigurationAnimator
      (collectionView: UICollectionView; willDisplayContextMenuWithConfiguration
      : UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName
      ('collectionView:willEndContextMenuInteractionWithConfiguration:animator:')
      ]
    procedure collectionViewWillEndContextMenuInteractionWithConfigurationAnimator
      (collectionView: UICollectionView;
      willEndContextMenuInteractionWithConfiguration
      : UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName
      ('collectionView:sceneActivationConfigurationForItemAtIndexPath:point:')]
    function collectionViewSceneActivationConfigurationForItemAtIndexPathPoint
      (collectionView: UICollectionView;
      sceneActivationConfigurationForItemAtIndexPath: NSIndexPath;
      point: CGPoint): UIWindowSceneActivationConfiguration; cdecl;
    [MethodName
      ('collectionView:contextMenuConfigurationForItemAtIndexPath:point:')]
    function collectionViewContextMenuConfigurationForItemAtIndexPathPoint
      (collectionView: UICollectionView;
      contextMenuConfigurationForItemAtIndexPath: NSIndexPath; point: CGPoint)
      : UIContextMenuConfiguration; cdecl;
    [MethodName
      ('collectionView:previewForHighlightingContextMenuWithConfiguration:')]
    function collectionViewPreviewForHighlightingContextMenuWithConfiguration
      (collectionView: UICollectionView;
      previewForHighlightingContextMenuWithConfiguration
      : UIContextMenuConfiguration): UITargetedPreview; cdecl;
    [MethodName
      ('collectionView:previewForDismissingContextMenuWithConfiguration:')]
    function collectionViewPreviewForDismissingContextMenuWithConfiguration
      (collectionView: UICollectionView;
      previewForDismissingContextMenuWithConfiguration
      : UIContextMenuConfiguration): UITargetedPreview; cdecl;
  end;

  UIContentConfiguration = interface(IObjectiveC)
    ['{2C67AA92-F7E2-4C69-B1DD-62EC17E58124}']
    function makeContentView: UIView; cdecl;
    function updatedConfigurationForState(state: Pointer)
      : Pointer { instancetype }; cdecl;
  end;

  UICollectionViewDelegateFlowLayout = interface(IObjectiveC)
    ['{6C5725A2-5546-40DC-9982-81E2E9401914}']
    [MethodName('collectionView:layout:sizeForItemAtIndexPath:')]
    function collectionViewLayoutSizeForItemAtIndexPath(collectionView
      : UICollectionView; layout: UICollectionViewLayout;
      sizeForItemAtIndexPath: NSIndexPath): CGSize; cdecl;
    [MethodName('collectionView:layout:insetForSectionAtIndex:')]
    function collectionViewLayoutInsetForSectionAtIndex(collectionView
      : UICollectionView; layout: UICollectionViewLayout;
      insetForSectionAtIndex: NSInteger): UIEdgeInsets; cdecl;
    [MethodName('collectionView:layout:minimumLineSpacingForSectionAtIndex:')]
    function collectionViewLayoutMinimumLineSpacingForSectionAtIndex
      (collectionView: UICollectionView; layout: UICollectionViewLayout;
      minimumLineSpacingForSectionAtIndex: NSInteger): CGFloat; cdecl;
    [MethodName
      ('collectionView:layout:minimumInteritemSpacingForSectionAtIndex:')]
    function collectionViewLayoutMinimumInteritemSpacingForSectionAtIndex
      (collectionView: UICollectionView; layout: UICollectionViewLayout;
      minimumInteritemSpacingForSectionAtIndex: NSInteger): CGFloat; cdecl;
    [MethodName('collectionView:layout:referenceSizeForHeaderInSection:')]
    function collectionViewLayoutReferenceSizeForHeaderInSection
      (collectionView: UICollectionView; layout: UICollectionViewLayout;
      referenceSizeForHeaderInSection: NSInteger): CGSize; cdecl;
    [MethodName('collectionView:layout:referenceSizeForFooterInSection:')]
    function collectionViewLayoutReferenceSizeForFooterInSection
      (collectionView: UICollectionView; layout: UICollectionViewLayout;
      referenceSizeForFooterInSection: NSInteger): CGSize; cdecl;
  end;

  UICollisionBehaviorDelegate = interface(IObjectiveC)
    ['{39E715F1-86FB-4BC7-9BD4-525238B43799}']
    [MethodName('collisionBehavior:beganContactForItem:withItem:atPoint:')]
    procedure collisionBehaviorBeganContactForItemWithItemAtPoint
      (behavior: UICollisionBehavior; beganContactForItem: Pointer;
      withItem: Pointer; atPoint: CGPoint); cdecl;
    [MethodName('collisionBehavior:endedContactForItem:withItem:')]
    procedure collisionBehaviorEndedContactForItemWithItem
      (behavior: UICollisionBehavior; endedContactForItem: Pointer;
      withItem: Pointer); cdecl;
    [MethodName
      ('collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:')]
    procedure collisionBehaviorBeganContactForItemWithBoundaryIdentifierAtPoint
      (behavior: UICollisionBehavior; beganContactForItem: Pointer;
      withBoundaryIdentifier: Pointer; atPoint: CGPoint); cdecl;
    [MethodName
      ('collisionBehavior:endedContactForItem:withBoundaryIdentifier:')]
    procedure collisionBehaviorEndedContactForItemWithBoundaryIdentifier
      (behavior: UICollisionBehavior; endedContactForItem: Pointer;
      withBoundaryIdentifier: Pointer); cdecl;
  end;

  UIColorPickerViewControllerDelegate = interface(IObjectiveC)
    ['{5FD07CAA-93C6-4D53-8C47-AAB8FB84FA1C}']
    procedure colorPickerViewControllerDidSelectColor(viewController
      : UIColorPickerViewController); cdecl;
    procedure colorPickerViewController(viewController
      : UIColorPickerViewController; didSelectColor: UIColor;
      continuously: Boolean); cdecl;
    procedure colorPickerViewControllerDidFinish(viewController
      : UIColorPickerViewController); cdecl;
  end;

  UIContentView = interface(IObjectiveC)
    ['{86E03D01-DB3C-4992-8C8E-AD6B8B705030}']
    procedure setConfiguration(configuration: Pointer); cdecl;
    function configuration: Pointer; cdecl;
    function supportsConfiguration(configuration: Pointer): Boolean; cdecl;
  end;

  UIGestureRecognizerDelegate = interface(IObjectiveC)
    ['{B1DEF2B5-BA6D-48C5-AC8E-5B53BF61CF1A}']
    function gestureRecognizerShouldBegin(gestureRecognizer
      : UIGestureRecognizer): Boolean; cdecl;
    [MethodName
      ('gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:')]
    function gestureRecognizerShouldRecognizeSimultaneouslyWithGestureRecognizer
      (gestureRecognizer: UIGestureRecognizer;
      shouldRecognizeSimultaneouslyWithGestureRecognizer: UIGestureRecognizer)
      : Boolean; cdecl;
    [MethodName('gestureRecognizer:shouldRequireFailureOfGestureRecognizer:')]
    function gestureRecognizerShouldRequireFailureOfGestureRecognizer
      (gestureRecognizer: UIGestureRecognizer;
      shouldRequireFailureOfGestureRecognizer: UIGestureRecognizer)
      : Boolean; cdecl;
    [MethodName('gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:')]
    function gestureRecognizerShouldBeRequiredToFailByGestureRecognizer
      (gestureRecognizer: UIGestureRecognizer;
      shouldBeRequiredToFailByGestureRecognizer: UIGestureRecognizer)
      : Boolean; cdecl;
    [MethodName('gestureRecognizer:shouldReceiveTouch:')]
    function gestureRecognizerShouldReceiveTouch(gestureRecognizer
      : UIGestureRecognizer; shouldReceiveTouch: UITouch): Boolean; cdecl;
    [MethodName('gestureRecognizer:shouldReceivePress:')]
    function gestureRecognizerShouldReceivePress(gestureRecognizer
      : UIGestureRecognizer; shouldReceivePress: UIPress): Boolean; cdecl;
    [MethodName('gestureRecognizer:shouldReceiveEvent:')]
    function gestureRecognizerShouldReceiveEvent(gestureRecognizer
      : UIGestureRecognizer; shouldReceiveEvent: UIEvent): Boolean; cdecl;
  end;

  UITableViewDataSource = interface(IObjectiveC)
    ['{AD26D1A7-5BC4-4933-820F-7CC36F05F7BA}']
    [MethodName('tableView:numberOfRowsInSection:')]
    function tableViewNumberOfRowsInSection(tableView: UITableView;
      numberOfRowsInSection: NSInteger): NSInteger; cdecl;
    [MethodName('tableView:cellForRowAtIndexPath:')]
    function tableViewCellForRowAtIndexPath(tableView: UITableView;
      cellForRowAtIndexPath: NSIndexPath): UITableViewCell; cdecl;
    function numberOfSectionsInTableView(tableView: UITableView)
      : NSInteger; cdecl;
    [MethodName('tableView:titleForHeaderInSection:')]
    function tableViewTitleForHeaderInSection(tableView: UITableView;
      titleForHeaderInSection: NSInteger): NSString; cdecl;
    [MethodName('tableView:titleForFooterInSection:')]
    function tableViewTitleForFooterInSection(tableView: UITableView;
      titleForFooterInSection: NSInteger): NSString; cdecl;
    [MethodName('tableView:canEditRowAtIndexPath:')]
    function tableViewCanEditRowAtIndexPath(tableView: UITableView;
      canEditRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:canMoveRowAtIndexPath:')]
    function tableViewCanMoveRowAtIndexPath(tableView: UITableView;
      canMoveRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    function sectionIndexTitlesForTableView(tableView: UITableView)
      : NSArray; cdecl;
    [MethodName('tableView:sectionForSectionIndexTitle:atIndex:')]
    function tableViewSectionForSectionIndexTitleAtIndex(tableView: UITableView;
      sectionForSectionIndexTitle: NSString; atIndex: NSInteger)
      : NSInteger; cdecl;
    [MethodName('tableView:commitEditingStyle:forRowAtIndexPath:')]
    procedure tableViewCommitEditingStyleForRowAtIndexPath
      (tableView: UITableView; commitEditingStyle: UITableViewCellEditingStyle;
      forRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:moveRowAtIndexPath:toIndexPath:')]
    procedure tableViewMoveRowAtIndexPathToIndexPath(tableView: UITableView;
      moveRowAtIndexPath: NSIndexPath; toIndexPath: NSIndexPath); cdecl;
  end;

  UITableViewDataSourcePrefetching = interface(IObjectiveC)
    ['{016F3B73-6EEA-40DD-9654-FDCBE92286D9}']
    [MethodName('tableView:prefetchRowsAtIndexPaths:')]
    procedure tableViewPrefetchRowsAtIndexPaths(tableView: UITableView;
      prefetchRowsAtIndexPaths: NSArray); cdecl;
    [MethodName('tableView:cancelPrefetchingForRowsAtIndexPaths:')]
    procedure tableViewCancelPrefetchingForRowsAtIndexPaths
      (tableView: UITableView; cancelPrefetchingForRowsAtIndexPaths
      : NSArray); cdecl;
  end;

  UITableViewDragDelegate = interface(IObjectiveC)
    ['{C7848E4D-873A-47CC-9172-07933B7BF086}']
    [MethodName('tableView:itemsForBeginningDragSession:atIndexPath:')]
    function tableViewItemsForBeginningDragSessionAtIndexPath
      (tableView: UITableView; itemsForBeginningDragSession: Pointer;
      atIndexPath: NSIndexPath): NSArray; cdecl;
    [MethodName('tableView:itemsForAddingToDragSession:atIndexPath:point:')]
    function tableViewItemsForAddingToDragSessionAtIndexPathPoint
      (tableView: UITableView; itemsForAddingToDragSession: Pointer;
      atIndexPath: NSIndexPath; point: CGPoint): NSArray; cdecl;
    [MethodName('tableView:dragPreviewParametersForRowAtIndexPath:')]
    function tableViewDragPreviewParametersForRowAtIndexPath
      (tableView: UITableView; dragPreviewParametersForRowAtIndexPath
      : NSIndexPath): UIDragPreviewParameters; cdecl;
    [MethodName('tableView:dragSessionWillBegin:')]
    procedure tableViewDragSessionWillBegin(tableView: UITableView;
      dragSessionWillBegin: Pointer); cdecl;
    [MethodName('tableView:dragSessionDidEnd:')]
    procedure tableViewDragSessionDidEnd(tableView: UITableView;
      dragSessionDidEnd: Pointer); cdecl;
    [MethodName('tableView:dragSessionAllowsMoveOperation:')]
    function tableViewDragSessionAllowsMoveOperation(tableView: UITableView;
      dragSessionAllowsMoveOperation: Pointer): Boolean; cdecl;
    [MethodName('tableView:dragSessionIsRestrictedToDraggingApplication:')]
    function tableViewDragSessionIsRestrictedToDraggingApplication
      (tableView: UITableView; dragSessionIsRestrictedToDraggingApplication
      : Pointer): Boolean; cdecl;
  end;

  UITableViewDropDelegate = interface(IObjectiveC)
    ['{B2992D7B-1899-47B2-9E70-8E6EEF393A42}']
    [MethodName('tableView:performDropWithCoordinator:')]
    procedure tableViewPerformDropWithCoordinator(tableView: UITableView;
      performDropWithCoordinator: Pointer); cdecl;
    [MethodName('tableView:canHandleDropSession:')]
    function tableViewCanHandleDropSession(tableView: UITableView;
      canHandleDropSession: Pointer): Boolean; cdecl;
    [MethodName('tableView:dropSessionDidEnter:')]
    procedure tableViewDropSessionDidEnter(tableView: UITableView;
      dropSessionDidEnter: Pointer); cdecl;
    [MethodName('tableView:dropSessionDidUpdate:withDestinationIndexPath:')]
    function tableViewDropSessionDidUpdateWithDestinationIndexPath
      (tableView: UITableView; dropSessionDidUpdate: Pointer;
      withDestinationIndexPath: NSIndexPath): UITableViewDropProposal; cdecl;
    [MethodName('tableView:dropSessionDidExit:')]
    procedure tableViewDropSessionDidExit(tableView: UITableView;
      dropSessionDidExit: Pointer); cdecl;
    [MethodName('tableView:dropSessionDidEnd:')]
    procedure tableViewDropSessionDidEnd(tableView: UITableView;
      dropSessionDidEnd: Pointer); cdecl;
    [MethodName('tableView:dropPreviewParametersForRowAtIndexPath:')]
    function tableViewDropPreviewParametersForRowAtIndexPath
      (tableView: UITableView; dropPreviewParametersForRowAtIndexPath
      : NSIndexPath): UIDragPreviewParameters; cdecl;
  end;

  UITableViewDropCoordinator = interface(IObjectiveC)
    ['{683A21E4-C912-4134-946B-2C0ABF3E9761}']
    function items: NSArray; cdecl;
    function destinationIndexPath: NSIndexPath; cdecl;
    function proposal: UITableViewDropProposal; cdecl;
    function session: Pointer; cdecl;
    [MethodName('dropItem:toPlaceholder:')]
    function dropItemToPlaceholder(dragItem: UIDragItem;
      toPlaceholder: UITableViewDropPlaceholder): Pointer; cdecl;
    [MethodName('dropItem:toRowAtIndexPath:')]
    function dropItemToRowAtIndexPath(dragItem: UIDragItem;
      toRowAtIndexPath: NSIndexPath): Pointer; cdecl;
    [MethodName('dropItem:intoRowAtIndexPath:rect:')]
    function dropItemIntoRowAtIndexPathRect(dragItem: UIDragItem;
      intoRowAtIndexPath: NSIndexPath; rect: CGRect): Pointer; cdecl;
    [MethodName('dropItem:toTarget:')]
    function dropItemToTarget(dragItem: UIDragItem;
      toTarget: UIDragPreviewTarget): Pointer; cdecl;
  end;

  UITableViewDropItem = interface(IObjectiveC)
    ['{A98B1A9C-01BA-4C04-8A45-30363670F855}']
    function dragItem: UIDragItem; cdecl;
    function sourceIndexPath: NSIndexPath; cdecl;
    function previewSize: CGSize; cdecl;
  end;

  UITableViewDropPlaceholderContext = interface(IObjectiveC)
    ['{CFCA2878-90CD-4261-807F-B6A25F80AF7E}']
    function dragItem: UIDragItem; cdecl;
    function commitInsertionWithDataSourceUpdates(dataSourceUpdates
      : TUIKitDataSourceUpdates): Boolean; cdecl;
    function deletePlaceholder: Boolean; cdecl;
  end;

  UITableViewDelegate = interface(IObjectiveC)
    ['{4A596C8E-7251-4081-B3BF-CC0FD465A14D}']
    [MethodName('tableView:willDisplayCell:forRowAtIndexPath:')]
    procedure tableViewWillDisplayCellForRowAtIndexPath(tableView: UITableView;
      willDisplayCell: UITableViewCell; forRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:willDisplayHeaderView:forSection:')]
    procedure tableViewWillDisplayHeaderViewForSection(tableView: UITableView;
      willDisplayHeaderView: UIView; forSection: NSInteger); cdecl;
    [MethodName('tableView:willDisplayFooterView:forSection:')]
    procedure tableViewWillDisplayFooterViewForSection(tableView: UITableView;
      willDisplayFooterView: UIView; forSection: NSInteger); cdecl;
    [MethodName('tableView:didEndDisplayingCell:forRowAtIndexPath:')]
    procedure tableViewDidEndDisplayingCellForRowAtIndexPath
      (tableView: UITableView; didEndDisplayingCell: UITableViewCell;
      forRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didEndDisplayingHeaderView:forSection:')]
    procedure tableViewDidEndDisplayingHeaderViewForSection
      (tableView: UITableView; didEndDisplayingHeaderView: UIView;
      forSection: NSInteger); cdecl;
    [MethodName('tableView:didEndDisplayingFooterView:forSection:')]
    procedure tableViewDidEndDisplayingFooterViewForSection
      (tableView: UITableView; didEndDisplayingFooterView: UIView;
      forSection: NSInteger); cdecl;
    [MethodName('tableView:heightForRowAtIndexPath:')]
    function tableViewHeightForRowAtIndexPath(tableView: UITableView;
      heightForRowAtIndexPath: NSIndexPath): CGFloat; cdecl;
    [MethodName('tableView:heightForHeaderInSection:')]
    function tableViewHeightForHeaderInSection(tableView: UITableView;
      heightForHeaderInSection: NSInteger): CGFloat; cdecl;
    [MethodName('tableView:heightForFooterInSection:')]
    function tableViewHeightForFooterInSection(tableView: UITableView;
      heightForFooterInSection: NSInteger): CGFloat; cdecl;
    [MethodName('tableView:estimatedHeightForRowAtIndexPath:')]
    function tableViewEstimatedHeightForRowAtIndexPath(tableView: UITableView;
      estimatedHeightForRowAtIndexPath: NSIndexPath): CGFloat; cdecl;
    [MethodName('tableView:estimatedHeightForHeaderInSection:')]
    function tableViewEstimatedHeightForHeaderInSection(tableView: UITableView;
      estimatedHeightForHeaderInSection: NSInteger): CGFloat; cdecl;
    [MethodName('tableView:estimatedHeightForFooterInSection:')]
    function tableViewEstimatedHeightForFooterInSection(tableView: UITableView;
      estimatedHeightForFooterInSection: NSInteger): CGFloat; cdecl;
    [MethodName('tableView:viewForHeaderInSection:')]
    function tableViewViewForHeaderInSection(tableView: UITableView;
      viewForHeaderInSection: NSInteger): UIView; cdecl;
    [MethodName('tableView:viewForFooterInSection:')]
    function tableViewViewForFooterInSection(tableView: UITableView;
      viewForFooterInSection: NSInteger): UIView; cdecl;
    [MethodName('tableView:accessoryTypeForRowWithIndexPath:')]
    function tableViewAccessoryTypeForRowWithIndexPath(tableView: UITableView;
      accessoryTypeForRowWithIndexPath: NSIndexPath)
      : UITableViewCellAccessoryType; cdecl;
    [MethodName('tableView:accessoryButtonTappedForRowWithIndexPath:')]
    procedure tableViewAccessoryButtonTappedForRowWithIndexPath
      (tableView: UITableView; accessoryButtonTappedForRowWithIndexPath
      : NSIndexPath); cdecl;
    [MethodName('tableView:shouldHighlightRowAtIndexPath:')]
    function tableViewShouldHighlightRowAtIndexPath(tableView: UITableView;
      shouldHighlightRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:didHighlightRowAtIndexPath:')]
    procedure tableViewDidHighlightRowAtIndexPath(tableView: UITableView;
      didHighlightRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didUnhighlightRowAtIndexPath:')]
    procedure tableViewDidUnhighlightRowAtIndexPath(tableView: UITableView;
      didUnhighlightRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:willSelectRowAtIndexPath:')]
    function tableViewWillSelectRowAtIndexPath(tableView: UITableView;
      willSelectRowAtIndexPath: NSIndexPath): NSIndexPath; cdecl;
    [MethodName('tableView:willDeselectRowAtIndexPath:')]
    function tableViewWillDeselectRowAtIndexPath(tableView: UITableView;
      willDeselectRowAtIndexPath: NSIndexPath): NSIndexPath; cdecl;
    [MethodName('tableView:didSelectRowAtIndexPath:')]
    procedure tableViewDidSelectRowAtIndexPath(tableView: UITableView;
      didSelectRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didDeselectRowAtIndexPath:')]
    procedure tableViewDidDeselectRowAtIndexPath(tableView: UITableView;
      didDeselectRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:canPerformPrimaryActionForRowAtIndexPath:')]
    function tableViewCanPerformPrimaryActionForRowAtIndexPath
      (tableView: UITableView; canPerformPrimaryActionForRowAtIndexPath
      : NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:performPrimaryActionForRowAtIndexPath:')]
    procedure tableViewPerformPrimaryActionForRowAtIndexPath
      (tableView: UITableView; performPrimaryActionForRowAtIndexPath
      : NSIndexPath); cdecl;
    [MethodName('tableView:editingStyleForRowAtIndexPath:')]
    function tableViewEditingStyleForRowAtIndexPath(tableView: UITableView;
      editingStyleForRowAtIndexPath: NSIndexPath)
      : UITableViewCellEditingStyle; cdecl;
    [MethodName('tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:')]
    function tableViewTitleForDeleteConfirmationButtonForRowAtIndexPath
      (tableView: UITableView; titleForDeleteConfirmationButtonForRowAtIndexPath
      : NSIndexPath): NSString; cdecl;
    [MethodName('tableView:editActionsForRowAtIndexPath:')]
    function tableViewEditActionsForRowAtIndexPath(tableView: UITableView;
      editActionsForRowAtIndexPath: NSIndexPath): NSArray; cdecl;
    [MethodName('tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:')]
    function tableViewLeadingSwipeActionsConfigurationForRowAtIndexPath
      (tableView: UITableView; leadingSwipeActionsConfigurationForRowAtIndexPath
      : NSIndexPath): UISwipeActionsConfiguration; cdecl;
    [MethodName
      ('tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:')]
    function tableViewTrailingSwipeActionsConfigurationForRowAtIndexPath
      (tableView: UITableView;
      trailingSwipeActionsConfigurationForRowAtIndexPath: NSIndexPath)
      : UISwipeActionsConfiguration; cdecl;
    [MethodName('tableView:shouldIndentWhileEditingRowAtIndexPath:')]
    function tableViewShouldIndentWhileEditingRowAtIndexPath
      (tableView: UITableView; shouldIndentWhileEditingRowAtIndexPath
      : NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:willBeginEditingRowAtIndexPath:')]
    procedure tableViewWillBeginEditingRowAtIndexPath(tableView: UITableView;
      willBeginEditingRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didEndEditingRowAtIndexPath:')]
    procedure tableViewDidEndEditingRowAtIndexPath(tableView: UITableView;
      didEndEditingRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName
      ('tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:')
      ]
    function tableViewTargetIndexPathForMoveFromRowAtIndexPathToProposedIndexPath
      (tableView: UITableView; targetIndexPathForMoveFromRowAtIndexPath
      : NSIndexPath; toProposedIndexPath: NSIndexPath): NSIndexPath; cdecl;
    [MethodName('tableView:indentationLevelForRowAtIndexPath:')]
    function tableViewIndentationLevelForRowAtIndexPath(tableView: UITableView;
      indentationLevelForRowAtIndexPath: NSIndexPath): NSInteger; cdecl;
    [MethodName('tableView:shouldShowMenuForRowAtIndexPath:')]
    function tableViewShouldShowMenuForRowAtIndexPath(tableView: UITableView;
      shouldShowMenuForRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:canPerformAction:forRowAtIndexPath:withSender:')]
    function tableViewCanPerformActionForRowAtIndexPathWithSender
      (tableView: UITableView; canPerformAction: SEL;
      forRowAtIndexPath: NSIndexPath; withSender: Pointer): Boolean; cdecl;
    [MethodName('tableView:performAction:forRowAtIndexPath:withSender:')]
    procedure tableViewPerformActionForRowAtIndexPathWithSender
      (tableView: UITableView; performAction: SEL;
      forRowAtIndexPath: NSIndexPath; withSender: Pointer); cdecl;
    [MethodName('tableView:canFocusRowAtIndexPath:')]
    function tableViewCanFocusRowAtIndexPath(tableView: UITableView;
      canFocusRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:shouldUpdateFocusInContext:')]
    function tableViewShouldUpdateFocusInContext(tableView: UITableView;
      shouldUpdateFocusInContext: UITableViewFocusUpdateContext)
      : Boolean; cdecl;
    [MethodName('tableView:didUpdateFocusInContext:withAnimationCoordinator:')]
    procedure tableViewDidUpdateFocusInContextWithAnimationCoordinator
      (tableView: UITableView;
      didUpdateFocusInContext: UITableViewFocusUpdateContext;
      withAnimationCoordinator: UIFocusAnimationCoordinator); cdecl;
    function indexPathForPreferredFocusedViewInTableView(tableView: UITableView)
      : NSIndexPath; cdecl;
    [MethodName('tableView:selectionFollowsFocusForRowAtIndexPath:')]
    function tableViewSelectionFollowsFocusForRowAtIndexPath
      (tableView: UITableView; selectionFollowsFocusForRowAtIndexPath
      : NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:shouldSpringLoadRowAtIndexPath:withContext:')]
    function tableViewShouldSpringLoadRowAtIndexPathWithContext
      (tableView: UITableView; shouldSpringLoadRowAtIndexPath: NSIndexPath;
      withContext: Pointer): Boolean; cdecl;
    [MethodName
      ('tableView:shouldBeginMultipleSelectionInteractionAtIndexPath:')]
    function tableViewShouldBeginMultipleSelectionInteractionAtIndexPath
      (tableView: UITableView;
      shouldBeginMultipleSelectionInteractionAtIndexPath: NSIndexPath)
      : Boolean; cdecl;
    [MethodName('tableView:didBeginMultipleSelectionInteractionAtIndexPath:')]
    procedure tableViewDidBeginMultipleSelectionInteractionAtIndexPath
      (tableView: UITableView; didBeginMultipleSelectionInteractionAtIndexPath
      : NSIndexPath); cdecl;
    procedure tableViewDidEndMultipleSelectionInteraction
      (tableView: UITableView); cdecl;
    [MethodName('tableView:contextMenuConfigurationForRowAtIndexPath:point:')]
    function tableViewContextMenuConfigurationForRowAtIndexPathPoint
      (tableView: UITableView; contextMenuConfigurationForRowAtIndexPath
      : NSIndexPath; point: CGPoint): UIContextMenuConfiguration; cdecl;
    [MethodName
      ('tableView:previewForHighlightingContextMenuWithConfiguration:')]
    function tableViewPreviewForHighlightingContextMenuWithConfiguration
      (tableView: UITableView;
      previewForHighlightingContextMenuWithConfiguration
      : UIContextMenuConfiguration): UITargetedPreview; cdecl;
    [MethodName('tableView:previewForDismissingContextMenuWithConfiguration:')]
    function tableViewPreviewForDismissingContextMenuWithConfiguration
      (tableView: UITableView; previewForDismissingContextMenuWithConfiguration
      : UIContextMenuConfiguration): UITargetedPreview; cdecl;
    [MethodName
      ('tableView:willPerformPreviewActionForMenuWithConfiguration:animator:')]
    procedure tableViewWillPerformPreviewActionForMenuWithConfigurationAnimator
      (tableView: UITableView; willPerformPreviewActionForMenuWithConfiguration
      : UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName('tableView:willDisplayContextMenuWithConfiguration:animator:')]
    procedure tableViewWillDisplayContextMenuWithConfigurationAnimator
      (tableView: UITableView; willDisplayContextMenuWithConfiguration
      : UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName
      ('tableView:willEndContextMenuInteractionWithConfiguration:animator:')]
    procedure tableViewWillEndContextMenuInteractionWithConfigurationAnimator
      (tableView: UITableView; willEndContextMenuInteractionWithConfiguration
      : UIContextMenuConfiguration; animator: Pointer); cdecl;
  end;

  UIDocumentPickerDelegate = interface(IObjectiveC)
    ['{C229DAB0-C8E1-4C9F-9FAE-50C54D77C1E8}']
    [MethodName('documentPicker:didPickDocumentsAtURLs:')]
    procedure documentPickerDidPickDocumentsAtURLs
      (controller: UIDocumentPickerViewController;
      didPickDocumentsAtURLs: NSArray); cdecl;
    procedure documentPickerWasCancelled(controller
      : UIDocumentPickerViewController); cdecl;
    [MethodName('documentPicker:didPickDocumentAtURL:')]
    procedure documentPickerDidPickDocumentAtURL
      (controller: UIDocumentPickerViewController;
      didPickDocumentAtURL: NSURL); cdecl;
  end;

  UIDocumentMenuDelegate = interface(IObjectiveC)
    ['{60B71029-1CA8-4988-8CD6-29F56346521A}']
    procedure documentMenu(documentMenu: UIDocumentMenuViewController;
      didPickDocumentPicker: UIDocumentPickerViewController); cdecl;
    procedure documentMenuWasCancelled(documentMenu
      : UIDocumentMenuViewController); cdecl;
  end;

  UIDragDropSession = interface(IObjectiveC)
    ['{2AB34548-2864-4CEF-8815-0A1A30EAC22A}']
    function items: NSArray; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    function allowsMoveOperation: Boolean; cdecl;
    function isRestrictedToDraggingApplication: Boolean; cdecl;
    function hasItemsConformingToTypeIdentifiers(typeIdentifiers: NSArray)
      : Boolean; cdecl;
    function canLoadObjectsOfClass(aClass: Pointer): Boolean; cdecl;
  end;

  UIDynamicAnimatorDelegate = interface(IObjectiveC)
    ['{B9D5EDED-D08A-45E4-A680-8270B755E0C3}']
    procedure dynamicAnimatorWillResume(animator: UIDynamicAnimator); cdecl;
    procedure dynamicAnimatorDidPause(animator: UIDynamicAnimator); cdecl;
  end;

  UIEditMenuInteractionDelegate = interface(IObjectiveC)
    ['{A98AD709-B7E7-4084-B4EA-A98B411FF540}']
    [MethodName('editMenuInteraction:menuForConfiguration:suggestedActions:')]
    function editMenuInteractionMenuForConfigurationSuggestedActions
      (interaction: UIEditMenuInteraction;
      menuForConfiguration: UIEditMenuConfiguration; suggestedActions: NSArray)
      : UIMenu; cdecl;
    [MethodName('editMenuInteraction:targetRectForConfiguration:')]
    function editMenuInteractionTargetRectForConfiguration
      (interaction: UIEditMenuInteraction;
      targetRectForConfiguration: UIEditMenuConfiguration): CGRect; cdecl;
    [MethodName
      ('editMenuInteraction:willPresentMenuForConfiguration:animator:')]
    procedure editMenuInteractionWillPresentMenuForConfigurationAnimator
      (interaction: UIEditMenuInteraction;
      willPresentMenuForConfiguration: UIEditMenuConfiguration;
      animator: Pointer); cdecl;
    [MethodName
      ('editMenuInteraction:willDismissMenuForConfiguration:animator:')]
    procedure editMenuInteractionWillDismissMenuForConfigurationAnimator
      (interaction: UIEditMenuInteraction;
      willDismissMenuForConfiguration: UIEditMenuConfiguration;
      animator: Pointer); cdecl;
  end;

  UITextSearchAggregator = interface(IObjectiveC)
    ['{39C9EBC5-C66E-48FE-AA3B-8055C77E1389}']
    function allFoundRanges: NSOrderedSet; cdecl;
    procedure foundRange(range: UITextRange; forSearchString: NSString;
      inDocument: UITextSearchDocumentIdentifier); cdecl;
    procedure invalidateFoundRange(range: UITextRange;
      inDocument: UITextSearchDocumentIdentifier); cdecl;
    procedure invalidate; cdecl;
    procedure finishedSearching; cdecl;
  end;

  UITextSearching = interface(IObjectiveC)
    ['{22035A6A-F6A7-4567-9ACB-66AA20B186DE}']
    function selectedTextRange: UITextRange; cdecl;
    function compareFoundRange(foundRange: UITextRange; toRange: UITextRange;
      inDocument: UITextSearchDocumentIdentifier): NSComparisonResult; cdecl;
    procedure performTextSearchWithQueryString(&string: NSString;
      usingOptions: UITextSearchOptions; resultAggregator: Pointer); cdecl;
    procedure decorateFoundTextRange(range: UITextRange;
      inDocument: UITextSearchDocumentIdentifier;
      usingStyle: UITextSearchFoundTextStyle); cdecl;
    procedure clearAllDecoratedFoundText; cdecl;
    function supportsTextReplacement: Boolean; cdecl;
    function shouldReplaceFoundTextInRange(range: UITextRange;
      inDocument: UITextSearchDocumentIdentifier; withText: NSString)
      : Boolean; cdecl;
    procedure replaceFoundTextInRange(range: UITextRange;
      inDocument: UITextSearchDocumentIdentifier; withText: NSString); cdecl;
    procedure replaceAllOccurrencesOfQueryString(queryString: NSString;
      usingOptions: UITextSearchOptions; withText: NSString); cdecl;
    procedure willHighlightFoundTextRange(range: UITextRange;
      inDocument: UITextSearchDocumentIdentifier); cdecl;
    procedure scrollRangeToVisible(range: UITextRange;
      inDocument: UITextSearchDocumentIdentifier); cdecl;
    function selectedTextSearchDocument: UITextSearchDocumentIdentifier; cdecl;
    function compareOrderFromDocument(fromDocument
      : UITextSearchDocumentIdentifier;
      toDocument: UITextSearchDocumentIdentifier): NSComparisonResult; cdecl;
  end;

  UIFindInteractionDelegate = interface(IObjectiveC)
    ['{DEEBF542-7EE5-48F5-B993-7E97B341D1D3}']
    [MethodName('findInteraction:sessionForView:')]
    function findInteractionSessionForView(interaction: UIFindInteraction;
      sessionForView: UIView): UIFindSession; cdecl;
    [MethodName('findInteraction:didBeginFindSession:')]
    procedure findInteractionDidBeginFindSession(interaction: UIFindInteraction;
      didBeginFindSession: UIFindSession); cdecl;
    [MethodName('findInteraction:didEndFindSession:')]
    procedure findInteractionDidEndFindSession(interaction: UIFindInteraction;
      didEndFindSession: UIFindSession); cdecl;
  end;

  UIFocusDebuggerOutput = interface(IObjectiveC)
    ['{C626BE75-93AE-41B6-94D4-FBB4888A4B4C}']
  end;

  UIWindowSceneDelegate = interface(IObjectiveC)
    ['{D1EAD888-F3A7-4C53-89C3-F262462A1FF1}']
    procedure setWindow(window: UIWindow); cdecl;
    function window: UIWindow; cdecl;
    [MethodName
      ('windowScene:didUpdateCoordinateSpace:interfaceOrientation:traitCollection:')
      ]
    procedure windowSceneDidUpdateCoordinateSpaceInterfaceOrientationTraitCollection
      (windowScene: UIWindowScene; didUpdateCoordinateSpace: Pointer;
      interfaceOrientation: UIInterfaceOrientation;
      traitCollection: UITraitCollection); cdecl;
    [MethodName('windowScene:performActionForShortcutItem:completionHandler:')]
    procedure windowScenePerformActionForShortcutItemCompletionHandler
      (windowScene: UIWindowScene;
      performActionForShortcutItem: UIApplicationShortcutItem;
      completionHandler: TUIKitCompletion); cdecl;
    [MethodName('windowScene:userDidAcceptCloudKitShareWithMetadata:')]
    procedure windowSceneUserDidAcceptCloudKitShareWithMetadata
      (windowScene: UIWindowScene; userDidAcceptCloudKitShareWithMetadata
      : CKShareMetadata); cdecl;
  end;

  UIFontPickerViewControllerDelegate = interface(IObjectiveC)
    ['{02678677-6B3D-4938-AC8A-CE17A08316FF}']
    procedure fontPickerViewControllerDidCancel(viewController
      : UIFontPickerViewController); cdecl;
    procedure fontPickerViewControllerDidPickFont(viewController
      : UIFontPickerViewController); cdecl;
  end;

  UINavigationControllerDelegate = interface(IObjectiveC)
    ['{8109B368-331E-4503-A88A-813DDB6107E9}']
    [MethodName('navigationController:willShowViewController:animated:')]
    procedure navigationControllerWillShowViewControllerAnimated
      (navigationController: UINavigationController;
      willShowViewController: UIViewController; animated: Boolean); cdecl;
    [MethodName('navigationController:didShowViewController:animated:')]
    procedure navigationControllerDidShowViewControllerAnimated
      (navigationController: UINavigationController;
      didShowViewController: UIViewController; animated: Boolean); cdecl;
    function navigationControllerSupportedInterfaceOrientations
      (navigationController: UINavigationController)
      : UIInterfaceOrientationMask; cdecl;
    function navigationControllerPreferredInterfaceOrientationForPresentation
      (navigationController: UINavigationController)
      : UIInterfaceOrientation; cdecl;
    [MethodName
      ('navigationController:interactionControllerForAnimationController:')]
    function navigationControllerInteractionControllerForAnimationController
      (navigationController: UINavigationController;
      interactionControllerForAnimationController: Pointer): Pointer; cdecl;
    [MethodName
      ('navigationController:animationControllerForOperation:fromViewController:toViewController:')
      ]
    function navigationControllerAnimationControllerForOperationFromViewControllerToViewController
      (navigationController: UINavigationController;
      animationControllerForOperation: UINavigationControllerOperation;
      fromViewController: UIViewController; toViewController: UIViewController)
      : Pointer; cdecl;
  end;

  UIImagePickerControllerDelegate = interface(IObjectiveC)
    ['{050C68C4-EF0D-40D9-840C-7542E26384A4}']
    [MethodName('imagePickerController:didFinishPickingImage:editingInfo:')]
    procedure imagePickerControllerDidFinishPickingImageEditingInfo
      (picker: UIImagePickerController; didFinishPickingImage: UIImage;
      editingInfo: NSDictionary); cdecl;
    [MethodName('imagePickerController:didFinishPickingMediaWithInfo:')]
    procedure imagePickerControllerDidFinishPickingMediaWithInfo
      (picker: UIImagePickerController;
      didFinishPickingMediaWithInfo: NSDictionary); cdecl;
    procedure imagePickerControllerDidCancel
      (picker: UIImagePickerController); cdecl;
  end;

  UIIndirectScribbleInteractionDelegate = interface(IObjectiveC)
    ['{5E7D0D69-8346-45F3-B683-F1390214B3D8}']
    [MethodName
      ('indirectScribbleInteraction:requestElementsInRect:completion:')]
    procedure indirectScribbleInteractionRequestElementsInRectCompletion
      (interaction: UIIndirectScribbleInteraction;
      requestElementsInRect: CGRect;
      completion: TUIKitRestorationHandler); cdecl;
    [MethodName('indirectScribbleInteraction:isElementFocused:')]
    function indirectScribbleInteractionIsElementFocused
      (interaction: UIIndirectScribbleInteraction;
      isElementFocused: UIScribbleElementIdentifier): Boolean; cdecl;
    [MethodName('indirectScribbleInteraction:frameForElement:')]
    function indirectScribbleInteractionFrameForElement
      (interaction: UIIndirectScribbleInteraction;
      frameForElement: UIScribbleElementIdentifier): CGRect; cdecl;
    [MethodName
      ('indirectScribbleInteraction:focusElementIfNeeded:referencePoint:completion:')
      ]
    procedure indirectScribbleInteractionFocusElementIfNeededReferencePointCompletion
      (interaction: UIIndirectScribbleInteraction;
      focusElementIfNeeded: UIScribbleElementIdentifier;
      referencePoint: CGPoint; completion: TUIKitCompletion4); cdecl;
    [MethodName('indirectScribbleInteraction:shouldDelayFocusForElement:')]
    function indirectScribbleInteractionShouldDelayFocusForElement
      (interaction: UIIndirectScribbleInteraction;
      shouldDelayFocusForElement: UIScribbleElementIdentifier): Boolean; cdecl;
    [MethodName('indirectScribbleInteraction:willBeginWritingInElement:')]
    procedure indirectScribbleInteractionWillBeginWritingInElement
      (interaction: UIIndirectScribbleInteraction;
      willBeginWritingInElement: UIScribbleElementIdentifier); cdecl;
    [MethodName('indirectScribbleInteraction:didFinishWritingInElement:')]
    procedure indirectScribbleInteractionDidFinishWritingInElement
      (interaction: UIIndirectScribbleInteraction;
      didFinishWritingInElement: UIScribbleElementIdentifier); cdecl;
  end;

  UITextDocumentProxy = interface(IObjectiveC)
    ['{86807E66-5DC1-4698-8B66-FD8F6888BC16}']
    function documentContextBeforeInput: NSString; cdecl;
    function documentContextAfterInput: NSString; cdecl;
    function selectedText: NSString; cdecl;
    function documentInputMode: UITextInputMode; cdecl;
    function documentIdentifier: NSUUID; cdecl;
    procedure adjustTextPositionByCharacterOffset(offset: NSInteger); cdecl;
    procedure setMarkedText(markedText: NSString;
      selectedRange: NSRange); cdecl;
    procedure unmarkText; cdecl;
  end;

  UILargeContentViewerInteractionDelegate = interface(IObjectiveC)
    ['{68EADA74-1C75-42B2-B26A-664BC5F24327}']
    [MethodName('largeContentViewerInteraction:didEndOnItem:atPoint:')]
    procedure largeContentViewerInteractionDidEndOnItemAtPoint
      (interaction: UILargeContentViewerInteraction; didEndOnItem: Pointer;
      atPoint: CGPoint); cdecl;
    [MethodName('largeContentViewerInteraction:itemAtPoint:')]
    function largeContentViewerInteractionItemAtPoint
      (interaction: UILargeContentViewerInteraction; itemAtPoint: CGPoint)
      : Pointer; cdecl;
    function viewControllerForLargeContentViewerInteraction
      (interaction: UILargeContentViewerInteraction): UIViewController; cdecl;
  end;

  UILargeContentViewerItem = interface(IObjectiveC)
    ['{AA26848C-B6E4-47C3-A608-052BC5CFCEF8}']
    function showsLargeContentViewer: Boolean; cdecl;
    function largeContentTitle: NSString; cdecl;
    function largeContentImage: UIImage; cdecl;
    function scalesLargeContentImage: Boolean; cdecl;
    function largeContentImageInsets: UIEdgeInsets; cdecl;
  end;

  UINavigationItemRenameDelegate = interface(IObjectiveC)
    ['{0C85521F-9189-4F10-8308-80DB184FC13D}']
    [MethodName('navigationItem:didEndRenamingWithTitle:')]
    procedure navigationItemDidEndRenamingWithTitle(navigationItem
      : UINavigationItem; didEndRenamingWithTitle: NSString); cdecl;
    function navigationItemShouldBeginRenaming(navigationItem: UINavigationItem)
      : Boolean; cdecl;
    [MethodName
      ('navigationItem:willBeginRenamingWithSuggestedTitle:selectedRange:')]
    function navigationItemWillBeginRenamingWithSuggestedTitleSelectedRange
      (navigationItem: UINavigationItem;
      willBeginRenamingWithSuggestedTitle: NSString; selectedRange: Pointer)
      : NSString; cdecl;
    [MethodName('navigationItem:shouldEndRenamingWithTitle:')]
    function navigationItemShouldEndRenamingWithTitle(navigationItem
      : UINavigationItem; shouldEndRenamingWithTitle: NSString): Boolean; cdecl;
  end;

  UINavigationBarDelegate = interface(IObjectiveC)
    ['{5B5FF632-B8AF-4B30-8F8E-465485453017}']
    [MethodName('navigationBar:shouldPushItem:')]
    function navigationBarShouldPushItem(navigationBar: UINavigationBar;
      shouldPushItem: UINavigationItem): Boolean; cdecl;
    [MethodName('navigationBar:didPushItem:')]
    procedure navigationBarDidPushItem(navigationBar: UINavigationBar;
      didPushItem: UINavigationItem); cdecl;
    [MethodName('navigationBar:shouldPopItem:')]
    function navigationBarShouldPopItem(navigationBar: UINavigationBar;
      shouldPopItem: UINavigationItem): Boolean; cdecl;
    [MethodName('navigationBar:didPopItem:')]
    procedure navigationBarDidPopItem(navigationBar: UINavigationBar;
      didPopItem: UINavigationItem); cdecl;
    function navigationBarNSToolbarSection(navigationBar: UINavigationBar)
      : UINavigationBarNSToolbarSection; cdecl;
  end;

  UIPageViewControllerDelegate = interface(IObjectiveC)
    ['{12C8C18D-CFB0-422D-9E70-1EB63D43C5E7}']
    [MethodName('pageViewController:willTransitionToViewControllers:')]
    procedure pageViewControllerWillTransitionToViewControllers
      (pageViewController: UIPageViewController;
      willTransitionToViewControllers: NSArray); cdecl;
    [MethodName
      ('pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:')
      ]
    procedure pageViewControllerDidFinishAnimatingPreviousViewControllersTransitionCompleted
      (pageViewController: UIPageViewController; didFinishAnimating: Boolean;
      previousViewControllers: NSArray; transitionCompleted: Boolean); cdecl;
    [MethodName('pageViewController:spineLocationForInterfaceOrientation:')]
    function pageViewControllerSpineLocationForInterfaceOrientation
      (pageViewController: UIPageViewController;
      spineLocationForInterfaceOrientation: UIInterfaceOrientation)
      : UIPageViewControllerSpineLocation; cdecl;
    function pageViewControllerSupportedInterfaceOrientations(pageViewController
      : UIPageViewController): UIInterfaceOrientationMask; cdecl;
    function pageViewControllerPreferredInterfaceOrientationForPresentation
      (pageViewController: UIPageViewController): UIInterfaceOrientation; cdecl;
  end;

  UIPageViewControllerDataSource = interface(IObjectiveC)
    ['{1397BF90-0950-4937-B5D4-D67716872FFC}']
    [MethodName('pageViewController:viewControllerBeforeViewController:')]
    function pageViewControllerViewControllerBeforeViewController
      (pageViewController: UIPageViewController;
      viewControllerBeforeViewController: UIViewController)
      : UIViewController; cdecl;
    [MethodName('pageViewController:viewControllerAfterViewController:')]
    function pageViewControllerViewControllerAfterViewController
      (pageViewController: UIPageViewController;
      viewControllerAfterViewController: UIViewController)
      : UIViewController; cdecl;
    function presentationCountForPageViewController(pageViewController
      : UIPageViewController): NSInteger; cdecl;
    function presentationIndexForPageViewController(pageViewController
      : UIPageViewController): NSInteger; cdecl;
  end;

  UIPopoverControllerDelegate = interface(IObjectiveC)
    ['{DBD696BB-1979-4EF0-A48C-1835AD1F3229}']
    function popoverControllerShouldDismissPopover(popoverController
      : UIPopoverController): Boolean; cdecl;
    procedure popoverControllerDidDismissPopover(popoverController
      : UIPopoverController); cdecl;
    procedure popoverController(popoverController: UIPopoverController;
      willRepositionPopoverToRect: PCGRect; inView: UIView); cdecl;
  end;

  UIPopoverBackgroundViewMethods = interface(IObjectiveC)
    ['{2E609135-C93D-4CF8-9C64-D3A3A04CC95D}']
    function arrowBase: CGFloat; cdecl;
    function contentViewInsets: UIEdgeInsets; cdecl;
    function arrowHeight: CGFloat; cdecl;
  end;

  UISearchBarDelegate = interface(IObjectiveC)
    ['{5CAF6E21-5352-4891-8BEB-FB9EA4569B62}']
    function searchBarShouldBeginEditing(searchBar: UISearchBar)
      : Boolean; cdecl;
    procedure searchBarTextDidBeginEditing(searchBar: UISearchBar); cdecl;
    function searchBarShouldEndEditing(searchBar: UISearchBar): Boolean; cdecl;
    procedure searchBarTextDidEndEditing(searchBar: UISearchBar); cdecl;
    [MethodName('searchBar:textDidChange:')]
    procedure searchBarTextDidChange(searchBar: UISearchBar;
      textDidChange: NSString); cdecl;
    [MethodName('searchBar:shouldChangeTextInRange:replacementText:')]
    function searchBarShouldChangeTextInRangeReplacementText
      (searchBar: UISearchBar; shouldChangeTextInRange: NSRange;
      replacementText: NSString): Boolean; cdecl;
    procedure searchBarSearchButtonClicked(searchBar: UISearchBar); cdecl;
    procedure searchBarBookmarkButtonClicked(searchBar: UISearchBar); cdecl;
    procedure searchBarCancelButtonClicked(searchBar: UISearchBar); cdecl;
    procedure searchBarResultsListButtonClicked(searchBar: UISearchBar); cdecl;
    [MethodName('searchBar:selectedScopeButtonIndexDidChange:')]
    procedure searchBarSelectedScopeButtonIndexDidChange(searchBar: UISearchBar;
      selectedScopeButtonIndexDidChange: NSInteger); cdecl;
  end;

  UIAdaptivePresentationControllerDelegate = interface(IObjectiveC)
    ['{73C4DC43-6963-4FB6-B893-28787CDB25C6}']
    [MethodName('adaptivePresentationStyleForPresentationController:')]
    function adaptivePresentationStyleForPresentationController
      (controller: UIPresentationController): UIModalPresentationStyle; cdecl;
    [MethodName
      ('adaptivePresentationStyleForPresentationController:traitCollection:')]
    function adaptivePresentationStyleForPresentationControllerTraitCollection
      (controller: UIPresentationController; traitCollection: UITraitCollection)
      : UIModalPresentationStyle; cdecl;
    [MethodName
      ('presentationController:prepareAdaptivePresentationController:')]
    procedure presentationControllerPrepareAdaptivePresentationController
      (presentationController: UIPresentationController;
      prepareAdaptivePresentationController: UIPresentationController); cdecl;
    [MethodName
      ('presentationController:viewControllerForAdaptivePresentationStyle:')]
    function presentationControllerViewControllerForAdaptivePresentationStyle
      (controller: UIPresentationController;
      viewControllerForAdaptivePresentationStyle: UIModalPresentationStyle)
      : UIViewController; cdecl;
    [MethodName
      ('presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:')
      ]
    procedure presentationControllerWillPresentWithAdaptiveStyleTransitionCoordinator
      (presentationController: UIPresentationController;
      willPresentWithAdaptiveStyle: UIModalPresentationStyle;
      transitionCoordinator: Pointer); cdecl;
    function presentationControllerShouldDismiss(presentationController
      : UIPresentationController): Boolean; cdecl;
    procedure presentationControllerWillDismiss(presentationController
      : UIPresentationController); cdecl;
    procedure presentationControllerDidDismiss(presentationController
      : UIPresentationController); cdecl;
    procedure presentationControllerDidAttemptToDismiss(presentationController
      : UIPresentationController); cdecl;
  end;

  UISearchControllerDelegate = interface(IObjectiveC)
    ['{4598B6C3-AD44-4D51-8462-AD765DFEDB82}']
    procedure willPresentSearchController(searchController
      : UISearchController); cdecl;
    procedure didPresentSearchController(searchController
      : UISearchController); cdecl;
    procedure willDismissSearchController(searchController
      : UISearchController); cdecl;
    procedure didDismissSearchController(searchController
      : UISearchController); cdecl;
    procedure presentSearchController(searchController
      : UISearchController); cdecl;
    [MethodName('searchController:willChangeToSearchBarPlacement:')]
    procedure searchControllerWillChangeToSearchBarPlacement(searchController
      : UISearchController; willChangeToSearchBarPlacement
      : UINavigationItemSearchBarPlacement); cdecl;
    [MethodName('searchController:didChangeFromSearchBarPlacement:')]
    procedure searchControllerDidChangeFromSearchBarPlacement(searchController
      : UISearchController; didChangeFromSearchBarPlacement
      : UINavigationItemSearchBarPlacement); cdecl;
  end;

  UISearchSuggestion = interface(IObjectiveC)
    ['{3A8D91F4-98A8-4D14-A9A2-805556DC0014}']
    function localizedSuggestion: NSString; cdecl;
    function localizedDescription: NSString; cdecl;
    function iconImage: UIImage; cdecl;
    function localizedAttributedSuggestion: NSAttributedString; cdecl;
    procedure setRepresentedObject(representedObject: Pointer); cdecl;
    function representedObject: Pointer; cdecl;
  end;

  UISearchResultsUpdating = interface(IObjectiveC)
    ['{ED05C658-71C3-4CAC-996A-F425659EAF15}']
    [MethodName('updateSearchResultsForSearchController:')]
    procedure updateSearchResultsForSearchController(searchController
      : UISearchController); cdecl;
    [MethodName
      ('updateSearchResultsForSearchController:selectingSearchSuggestion:')]
    procedure updateSearchResultsForSearchControllerSelectingSearchSuggestion
      (searchController: UISearchController;
      selectingSearchSuggestion: Pointer); cdecl;
  end;

  UISearchDisplayDelegate = interface(IObjectiveC)
    ['{0A491372-4C4E-4FD3-AEA5-392AFED14E88}']
    procedure searchDisplayControllerWillBeginSearch
      (controller: UISearchDisplayController); cdecl;
    procedure searchDisplayControllerDidBeginSearch
      (controller: UISearchDisplayController); cdecl;
    procedure searchDisplayControllerWillEndSearch
      (controller: UISearchDisplayController); cdecl;
    procedure searchDisplayControllerDidEndSearch
      (controller: UISearchDisplayController); cdecl;
    [MethodName('searchDisplayController:didLoadSearchResultsTableView:')]
    procedure searchDisplayControllerDidLoadSearchResultsTableView
      (controller: UISearchDisplayController;
      didLoadSearchResultsTableView: UITableView); cdecl;
    [MethodName('searchDisplayController:willUnloadSearchResultsTableView:')]
    procedure searchDisplayControllerWillUnloadSearchResultsTableView
      (controller: UISearchDisplayController;
      willUnloadSearchResultsTableView: UITableView); cdecl;
    [MethodName('searchDisplayController:willShowSearchResultsTableView:')]
    procedure searchDisplayControllerWillShowSearchResultsTableView
      (controller: UISearchDisplayController;
      willShowSearchResultsTableView: UITableView); cdecl;
    [MethodName('searchDisplayController:didShowSearchResultsTableView:')]
    procedure searchDisplayControllerDidShowSearchResultsTableView
      (controller: UISearchDisplayController;
      didShowSearchResultsTableView: UITableView); cdecl;
    [MethodName('searchDisplayController:willHideSearchResultsTableView:')]
    procedure searchDisplayControllerWillHideSearchResultsTableView
      (controller: UISearchDisplayController;
      willHideSearchResultsTableView: UITableView); cdecl;
    [MethodName('searchDisplayController:didHideSearchResultsTableView:')]
    procedure searchDisplayControllerDidHideSearchResultsTableView
      (controller: UISearchDisplayController;
      didHideSearchResultsTableView: UITableView); cdecl;
    [MethodName('searchDisplayController:shouldReloadTableForSearchString:')]
    function searchDisplayControllerShouldReloadTableForSearchString
      (controller: UISearchDisplayController;
      shouldReloadTableForSearchString: NSString): Boolean; cdecl;
    [MethodName('searchDisplayController:shouldReloadTableForSearchScope:')]
    function searchDisplayControllerShouldReloadTableForSearchScope
      (controller: UISearchDisplayController;
      shouldReloadTableForSearchScope: NSInteger): Boolean; cdecl;
  end;

  UISearchTextFieldDelegate = interface(IObjectiveC)
    ['{CDB76483-12B3-40CA-A3DB-0CFD3FB65B8F}']
    [MethodName('searchTextField:itemProviderForCopyingToken:')]
    function searchTextFieldItemProviderForCopyingToken(searchTextField
      : UISearchTextField; itemProviderForCopyingToken: UISearchToken)
      : NSItemProvider; cdecl;
    [MethodName('searchTextField:didSelectSuggestion:')]
    procedure searchTextFieldDidSelectSuggestion(searchTextField
      : UISearchTextField; didSelectSuggestion: Pointer); cdecl;
  end;

  UISearchTextFieldPasteItem = interface(IObjectiveC)
    ['{C2A4343E-D620-4442-BB35-7C91B149E82A}']
    procedure setSearchTokenResult(token: UISearchToken); cdecl;
  end;

  UISplitViewControllerDelegate = interface(IObjectiveC)
    ['{BEAAE22D-C124-4140-9CAF-8A790D318BE7}']
    [MethodName('splitViewController:willChangeToDisplayMode:')]
    procedure splitViewControllerWillChangeToDisplayMode
      (svc: UISplitViewController;
      willChangeToDisplayMode: UISplitViewControllerDisplayMode); cdecl;
    function targetDisplayModeForActionInSplitViewController
      (svc: UISplitViewController): UISplitViewControllerDisplayMode; cdecl;
    [MethodName('splitViewController:showViewController:sender:')]
    function splitViewControllerShowViewControllerSender(splitViewController
      : UISplitViewController; showViewController: UIViewController;
      sender: Pointer): Boolean; cdecl;
    [MethodName('splitViewController:showDetailViewController:sender:')]
    function splitViewControllerShowDetailViewControllerSender
      (splitViewController: UISplitViewController;
      showDetailViewController: UIViewController; sender: Pointer)
      : Boolean; cdecl;
    function primaryViewControllerForCollapsingSplitViewController
      (splitViewController: UISplitViewController): UIViewController; cdecl;
    function primaryViewControllerForExpandingSplitViewController
      (splitViewController: UISplitViewController): UIViewController; cdecl;
    [MethodName
      ('splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:')
      ]
    function splitViewControllerCollapseSecondaryViewControllerOntoPrimaryViewController
      (splitViewController: UISplitViewController;
      collapseSecondaryViewController: UIViewController;
      ontoPrimaryViewController: UIViewController): Boolean; cdecl;
    [MethodName
      ('splitViewController:separateSecondaryViewControllerFromPrimaryViewController:')
      ]
    function splitViewControllerSeparateSecondaryViewControllerFromPrimaryViewController
      (splitViewController: UISplitViewController;
      separateSecondaryViewControllerFromPrimaryViewController
      : UIViewController): UIViewController; cdecl;
    function splitViewControllerSupportedInterfaceOrientations
      (splitViewController: UISplitViewController)
      : UIInterfaceOrientationMask; cdecl;
    function splitViewControllerPreferredInterfaceOrientationForPresentation
      (splitViewController: UISplitViewController)
      : UIInterfaceOrientation; cdecl;
    [MethodName
      ('splitViewController:willHideViewController:withBarButtonItem:forPopoverController:')
      ]
    procedure splitViewControllerWillHideViewControllerWithBarButtonItemForPopoverController
      (svc: UISplitViewController; willHideViewController: UIViewController;
      withBarButtonItem: UIBarButtonItem;
      forPopoverController: UIPopoverController); cdecl;
    [MethodName
      ('splitViewController:willShowViewController:invalidatingBarButtonItem:')]
    procedure splitViewControllerWillShowViewControllerInvalidatingBarButtonItem
      (svc: UISplitViewController; willShowViewController: UIViewController;
      invalidatingBarButtonItem: UIBarButtonItem); cdecl;
    [MethodName
      ('splitViewController:popoverController:willPresentViewController:')]
    procedure splitViewControllerPopoverControllerWillPresentViewController
      (svc: UISplitViewController; popoverController: UIPopoverController;
      willPresentViewController: UIViewController); cdecl;
    [MethodName('splitViewController:shouldHideViewController:inOrientation:')]
    function splitViewControllerShouldHideViewControllerInOrientation
      (svc: UISplitViewController; shouldHideViewController: UIViewController;
      inOrientation: UIInterfaceOrientation): Boolean; cdecl;
    [MethodName
      ('splitViewController:topColumnForCollapsingToProposedTopColumn:')]
    function splitViewControllerTopColumnForCollapsingToProposedTopColumn
      (svc: UISplitViewController; topColumnForCollapsingToProposedTopColumn
      : UISplitViewControllerColumn): UISplitViewControllerColumn; cdecl;
    [MethodName
      ('splitViewController:displayModeForExpandingToProposedDisplayMode:')]
    function splitViewControllerDisplayModeForExpandingToProposedDisplayMode
      (svc: UISplitViewController; displayModeForExpandingToProposedDisplayMode
      : UISplitViewControllerDisplayMode)
      : UISplitViewControllerDisplayMode; cdecl;
    procedure splitViewControllerDidCollapse(svc: UISplitViewController); cdecl;
    procedure splitViewControllerDidExpand(svc: UISplitViewController); cdecl;
    [MethodName('splitViewController:willShowColumn:')]
    procedure splitViewControllerWillShowColumn(svc: UISplitViewController;
      willShowColumn: UISplitViewControllerColumn); cdecl;
    [MethodName('splitViewController:willHideColumn:')]
    procedure splitViewControllerWillHideColumn(svc: UISplitViewController;
      willHideColumn: UISplitViewControllerColumn); cdecl;
    procedure splitViewControllerInteractivePresentationGestureWillBegin
      (svc: UISplitViewController); cdecl;
    procedure splitViewControllerInteractivePresentationGestureDidEnd
      (svc: UISplitViewController); cdecl;
  end;

  UITabBarDelegate = interface(IObjectiveC)
    ['{6FE60255-812F-42E3-BDB0-921B9ECE31F6}']
    [MethodName('tabBar:didSelectItem:')]
    procedure tabBarDidSelectItem(tabBar: UITabBar;
      didSelectItem: UITabBarItem); cdecl;
    [MethodName('tabBar:willBeginCustomizingItems:')]
    procedure tabBarWillBeginCustomizingItems(tabBar: UITabBar;
      willBeginCustomizingItems: NSArray); cdecl;
    [MethodName('tabBar:didBeginCustomizingItems:')]
    procedure tabBarDidBeginCustomizingItems(tabBar: UITabBar;
      didBeginCustomizingItems: NSArray); cdecl;
    [MethodName('tabBar:willEndCustomizingItems:changed:')]
    procedure tabBarWillEndCustomizingItemsChanged(tabBar: UITabBar;
      willEndCustomizingItems: NSArray; changed: Boolean); cdecl;
    [MethodName('tabBar:didEndCustomizingItems:changed:')]
    procedure tabBarDidEndCustomizingItemsChanged(tabBar: UITabBar;
      didEndCustomizingItems: NSArray; changed: Boolean); cdecl;
  end;

  UITabBarControllerDelegate = interface(IObjectiveC)
    ['{77C0361B-B1FC-4236-ABBA-89E7C849053A}']
    [MethodName('tabBarController:shouldSelectViewController:')]
    function tabBarControllerShouldSelectViewController(tabBarController
      : UITabBarController; shouldSelectViewController: UIViewController)
      : Boolean; cdecl;
    [MethodName('tabBarController:didSelectViewController:')]
    procedure tabBarControllerDidSelectViewController(tabBarController
      : UITabBarController; didSelectViewController: UIViewController); cdecl;
    [MethodName('tabBarController:willBeginCustomizingViewControllers:')]
    procedure tabBarControllerWillBeginCustomizingViewControllers
      (tabBarController: UITabBarController;
      willBeginCustomizingViewControllers: NSArray); cdecl;
    [MethodName('tabBarController:willEndCustomizingViewControllers:changed:')]
    procedure tabBarControllerWillEndCustomizingViewControllersChanged
      (tabBarController: UITabBarController;
      willEndCustomizingViewControllers: NSArray; changed: Boolean); cdecl;
    [MethodName('tabBarController:didEndCustomizingViewControllers:changed:')]
    procedure tabBarControllerDidEndCustomizingViewControllersChanged
      (tabBarController: UITabBarController;
      didEndCustomizingViewControllers: NSArray; changed: Boolean); cdecl;
    function tabBarControllerSupportedInterfaceOrientations(tabBarController
      : UITabBarController): UIInterfaceOrientationMask; cdecl;
    function tabBarControllerPreferredInterfaceOrientationForPresentation
      (tabBarController: UITabBarController): UIInterfaceOrientation; cdecl;
    [MethodName
      ('tabBarController:interactionControllerForAnimationController:')]
    function tabBarControllerInteractionControllerForAnimationController
      (tabBarController: UITabBarController;
      interactionControllerForAnimationController: Pointer): Pointer; cdecl;
    [MethodName
      ('tabBarController:animationControllerForTransitionFromViewController:toViewController:')
      ]
    function tabBarControllerAnimationControllerForTransitionFromViewControllerToViewController
      (tabBarController: UITabBarController;
      animationControllerForTransitionFromViewController: UIViewController;
      toViewController: UIViewController): Pointer; cdecl;
  end;

  UITextViewDelegate = interface(IObjectiveC)
    ['{415E008F-A2D5-4C34-906C-89589C8C4412}']
    function textViewShouldBeginEditing(textView: UITextView): Boolean; cdecl;
    function textViewShouldEndEditing(textView: UITextView): Boolean; cdecl;
    procedure textViewDidBeginEditing(textView: UITextView); cdecl;
    procedure textViewDidEndEditing(textView: UITextView); cdecl;
    [MethodName('textView:shouldChangeTextInRange:replacementText:')]
    function textViewShouldChangeTextInRangeReplacementText
      (textView: UITextView; shouldChangeTextInRange: NSRange;
      replacementText: NSString): Boolean; cdecl;
    procedure textViewDidChange(textView: UITextView); cdecl;
    procedure textViewDidChangeSelection(textView: UITextView); cdecl;
    [MethodName('textView:shouldInteractWithURL:inRange:interaction:')]
    function textViewShouldInteractWithURLInRangeInteraction
      (textView: UITextView; shouldInteractWithURL: NSURL; inRange: NSRange;
      interaction: UITextItemInteraction): Boolean; cdecl;
    [MethodName
      ('textView:shouldInteractWithTextAttachment:inRange:interaction:')]
    function textViewShouldInteractWithTextAttachmentInRangeInteraction
      (textView: UITextView; shouldInteractWithTextAttachment: NSTextAttachment;
      inRange: NSRange; interaction: UITextItemInteraction): Boolean; cdecl;
    [MethodName('textView:shouldInteractWithURL:inRange:')]
    function textViewShouldInteractWithURLInRange(textView: UITextView;
      shouldInteractWithURL: NSURL; inRange: NSRange): Boolean; cdecl;
    [MethodName('textView:shouldInteractWithTextAttachment:inRange:')]
    function textViewShouldInteractWithTextAttachmentInRange
      (textView: UITextView; shouldInteractWithTextAttachment: NSTextAttachment;
      inRange: NSRange): Boolean; cdecl;
    [MethodName('textView:editMenuForTextInRange:suggestedActions:')]
    function textViewEditMenuForTextInRangeSuggestedActions
      (textView: UITextView; editMenuForTextInRange: NSRange;
      suggestedActions: NSArray): UIMenu; cdecl;
    [MethodName('textView:willPresentEditMenuWithAnimator:')]
    procedure textViewWillPresentEditMenuWithAnimator(textView: UITextView;
      willPresentEditMenuWithAnimator: Pointer); cdecl;
    [MethodName('textView:willDismissEditMenuWithAnimator:')]
    procedure textViewWillDismissEditMenuWithAnimator(textView: UITextView;
      willDismissEditMenuWithAnimator: Pointer); cdecl;
  end;

  UIToolbarDelegate = interface(IObjectiveC)
    ['{3334AE29-82D6-43D6-B47B-85FA7A0E9BA8}']
  end;

  UIVideoEditorControllerDelegate = interface(IObjectiveC)
    ['{57F8699F-7834-4F40-A164-DEF1AC08FD34}']
    [MethodName('videoEditorController:didSaveEditedVideoToPath:')]
    procedure videoEditorControllerDidSaveEditedVideoToPath
      (editor: UIVideoEditorController;
      didSaveEditedVideoToPath: NSString); cdecl;
    [MethodName('videoEditorController:didFailWithError:')]
    procedure videoEditorControllerDidFailWithError
      (editor: UIVideoEditorController; didFailWithError: NSError); cdecl;
    procedure videoEditorControllerDidCancel
      (editor: UIVideoEditorController); cdecl;
  end;

  UIWebViewDelegate = interface(IObjectiveC)
    ['{8A643FED-A688-43F1-ACB5-36FA1A494C9E}']
    [MethodName('webView:shouldStartLoadWithRequest:navigationType:')]
    function webViewShouldStartLoadWithRequestNavigationType(webView: UIWebView;
      shouldStartLoadWithRequest: NSURLRequest;
      navigationType: UIWebViewNavigationType): Boolean; cdecl;
    procedure webViewDidStartLoad(webView: UIWebView); cdecl;
    procedure webViewDidFinishLoad(webView: UIWebView); cdecl;
    [MethodName('webView:didFailLoadWithError:')]
    procedure webViewDidFailLoadWithError(webView: UIWebView;
      didFailLoadWithError: NSError); cdecl;
  end;

  UILayoutGuideAspectFitting = interface(IObjectiveC)
    ['{2755F1B8-DB4B-4C7A-A091-E85BBFC23266}']
    procedure setAspectRatio(aspectRatio: CGFloat); cdecl;
    function aspectRatio: CGFloat; cdecl;
  end;

  UISpringLoadedInteractionBehavior = interface(IObjectiveC)
    ['{5C8842D7-3847-44D0-9993-FB042A7E6018}']
    function shouldAllowInteraction(interaction: UISpringLoadedInteraction;
      withContext: Pointer): Boolean; cdecl;
    procedure interactionDidFinish(interaction
      : UISpringLoadedInteraction); cdecl;
  end;

  UISpringLoadedInteractionEffect = interface(IObjectiveC)
    ['{9FFBF3F6-BE63-4757-8952-DECEF2EE843C}']
    procedure interaction(interaction: UISpringLoadedInteraction;
      didChangeWithContext: Pointer); cdecl;
  end;

  UIScribbleInteractionDelegate = interface(IObjectiveC)
    ['{2BFAA3F1-8D9B-4280-B020-B7220A1F05E8}']
    function scribbleInteraction(interaction: UIScribbleInteraction;
      shouldBeginAtLocation: CGPoint): Boolean; cdecl;
    function scribbleInteractionShouldDelayFocus(interaction
      : UIScribbleInteraction): Boolean; cdecl;
    procedure scribbleInteractionWillBeginWriting
      (interaction: UIScribbleInteraction); cdecl;
    procedure scribbleInteractionDidFinishWriting
      (interaction: UIScribbleInteraction); cdecl;
  end;

  UIPreviewInteractionDelegate = interface(IObjectiveC)
    ['{3513A9B1-1D16-4A61-AE97-11939A6051BB}']
    [MethodName('previewInteraction:didUpdatePreviewTransition:ended:')]
    procedure previewInteractionDidUpdatePreviewTransitionEnded
      (previewInteraction: UIPreviewInteraction;
      didUpdatePreviewTransition: CGFloat; ended: Boolean); cdecl;
    procedure previewInteractionDidCancel(previewInteraction
      : UIPreviewInteraction); cdecl;
    function previewInteractionShouldBegin(previewInteraction
      : UIPreviewInteraction): Boolean; cdecl;
    [MethodName('previewInteraction:didUpdateCommitTransition:ended:')]
    procedure previewInteractionDidUpdateCommitTransitionEnded
      (previewInteraction: UIPreviewInteraction;
      didUpdateCommitTransition: CGFloat; ended: Boolean); cdecl;
  end;

  UISheetPresentationControllerDetentResolutionContext = interface(IObjectiveC)
    ['{3BF3F4C8-04EB-4944-8EAE-FA866C7E2A1B}']
    function containerTraitCollection: UITraitCollection; cdecl;
    function maximumDetentValue: CGFloat; cdecl;
  end;

  UISheetPresentationControllerDelegate = interface(IObjectiveC)
    ['{783E30AA-7ECC-4281-B6F9-B7AE11378C03}']
    procedure sheetPresentationControllerDidChangeSelectedDetentIdentifier
      (sheetPresentationController: UISheetPresentationController); cdecl;
  end;

  UIPopoverPresentationControllerDelegate = interface(IObjectiveC)
    ['{65C226F3-1884-46CB-AF00-01B641334FF1}']
    procedure prepareForPopoverPresentation(popoverPresentationController
      : UIPopoverPresentationController); cdecl;
    function popoverPresentationControllerShouldDismissPopover
      (popoverPresentationController: UIPopoverPresentationController)
      : Boolean; cdecl;
    procedure popoverPresentationControllerDidDismissPopover
      (popoverPresentationController: UIPopoverPresentationController); cdecl;
    procedure popoverPresentationController(popoverPresentationController
      : UIPopoverPresentationController; willRepositionPopoverToRect: PCGRect;
      inView: UIView); cdecl;
  end;

  UITextInteractionDelegate = interface(IObjectiveC)
    ['{34AE505A-6551-4460-A375-60B4AC644095}']
    function interactionShouldBegin(interaction: UITextInteraction;
      atPoint: CGPoint): Boolean; cdecl;
    procedure interactionWillBegin(interaction: UITextInteraction); cdecl;
    procedure interactionDidEnd(interaction: UITextInteraction); cdecl;
  end;

  UIPencilInteractionDelegate = interface(IObjectiveC)
    ['{23972E2B-5A9F-4517-8006-CF1D5833D870}']
    procedure pencilInteractionDidTap(interaction: UIPencilInteraction); cdecl;
  end;

  UIScreenshotServiceDelegate = interface(IObjectiveC)
    ['{AB7B0424-FA33-480A-AF57-0CF5921F4C7F}']
    procedure screenshotService(screenshotService: UIScreenshotService;
      generatePDFRepresentationWithCompletion
      : TUIKitGeneratePDFRepresentationWithCompletion); cdecl;
  end;

  UITextFormattingCoordinatorDelegate = interface(IObjectiveC)
    ['{5A72DF71-C17B-4DF0-A55E-C55ADFE92524}']
    procedure updateTextAttributesWithConversionHandler(conversionHandler
      : UITextAttributesConversionHandler); cdecl;
  end;

  UIPointerInteractionDelegate = interface(IObjectiveC)
    ['{28401BF2-DB2B-4778-8D94-F34E705E7145}']
    [MethodName('pointerInteraction:regionForRequest:defaultRegion:')]
    function pointerInteractionRegionForRequestDefaultRegion
      (interaction: UIPointerInteraction;
      regionForRequest: UIPointerRegionRequest; defaultRegion: UIPointerRegion)
      : UIPointerRegion; cdecl;
    [MethodName('pointerInteraction:styleForRegion:')]
    function pointerInteractionStyleForRegion(interaction: UIPointerInteraction;
      styleForRegion: UIPointerRegion): UIPointerStyle; cdecl;
    [MethodName('pointerInteraction:willEnterRegion:animator:')]
    procedure pointerInteractionWillEnterRegionAnimator
      (interaction: UIPointerInteraction; willEnterRegion: UIPointerRegion;
      animator: Pointer); cdecl;
    [MethodName('pointerInteraction:willExitRegion:animator:')]
    procedure pointerInteractionWillExitRegionAnimator
      (interaction: UIPointerInteraction; willExitRegion: UIPointerRegion;
      animator: Pointer); cdecl;
  end;

  UIPointerInteractionAnimating = interface(IObjectiveC)
    ['{DE6E4911-F4E9-4435-A4B5-5FABB0E18912}']
    procedure addAnimations(animations: TUIKitAction); cdecl;
    procedure addCompletion(completion: TUIKitCompletion); cdecl;
  end;

  UIToolTipInteractionDelegate = interface(IObjectiveC)
    ['{022E8FA3-8499-48D7-8C02-9720AA58B744}']
    function toolTipInteraction(interaction: UIToolTipInteraction;
      configurationAtPoint: CGPoint): UIToolTipConfiguration; cdecl;
  end;

  // ===== Exported string consts =====

function UIMenuApplication: Pointer;
function UIMenuFile: Pointer;
function UIMenuEdit: Pointer;
function UIMenuView: Pointer;
function UIMenuWindow: Pointer;
function UIMenuHelp: Pointer;
function UIMenuAbout: Pointer;
function UIMenuPreferences: Pointer;
function UIMenuServices: Pointer;
function UIMenuHide: Pointer;
function UIMenuQuit: Pointer;
function UIMenuNewScene: Pointer;
function UIMenuOpenRecent: Pointer;
function UIMenuClose: Pointer;
function UIMenuPrint: Pointer;
function UIMenuDocument: Pointer;
function UIMenuUndoRedo: Pointer;
function UIMenuStandardEdit: Pointer;
function UIMenuFind: Pointer;
function UIMenuReplace: Pointer;
function UIMenuShare: Pointer;
function UIMenuTextStyle: Pointer;
function UIMenuSpelling: Pointer;
function UIMenuSpellingPanel: Pointer;
function UIMenuSpellingOptions: Pointer;
function UIMenuSubstitutions: Pointer;
function UIMenuSubstitutionsPanel: Pointer;
function UIMenuSubstitutionOptions: Pointer;
function UIMenuTransformations: Pointer;
function UIMenuSpeech: Pointer;
function UIMenuLookup: Pointer;
function UIMenuLearn: Pointer;
function UIMenuFormat: Pointer;
function UIMenuFont: Pointer;
function UIMenuTextSize: Pointer;
function UIMenuTextColor: Pointer;
function UIMenuTextStylePasteboard: Pointer;
function UIMenuText: Pointer;
function UIMenuWritingDirection: Pointer;
function UIMenuAlignment: Pointer;
function UIMenuToolbar: Pointer;
function UIMenuSidebar: Pointer;
function UIMenuFullscreen: Pointer;
function UIMenuMinimizeAndZoom: Pointer;
function UIMenuBringAllToFront: Pointer;
function UIMenuRoot: Pointer;
function UICommandTagShare: NSString;
function UIKeyInputUpArrow: NSString;
function UIKeyInputDownArrow: NSString;
function UIKeyInputLeftArrow: NSString;
function UIKeyInputRightArrow: NSString;
function UIKeyInputEscape: NSString;
function UIKeyInputPageUp: NSString;
function UIKeyInputPageDown: NSString;
function UIKeyInputHome: NSString;
function UIKeyInputEnd: NSString;
function UIKeyInputF1: NSString;
function UIKeyInputF2: NSString;
function UIKeyInputF3: NSString;
function UIKeyInputF4: NSString;
function UIKeyInputF5: NSString;
function UIKeyInputF6: NSString;
function UIKeyInputF7: NSString;
function UIKeyInputF8: NSString;
function UIKeyInputF9: NSString;
function UIKeyInputF10: NSString;
function UIKeyInputF11: NSString;
function UIKeyInputF12: NSString;
function UIKeyInputDelete: NSString;
function UIFontDescriptorSystemDesignDefault: Pointer;
function UIFontDescriptorSystemDesignRounded: Pointer;
function UIFontDescriptorSystemDesignSerif: Pointer;
function UIFontDescriptorSystemDesignMonospaced: Pointer;
function UIFontDescriptorFamilyAttribute: Pointer;
function UIFontDescriptorNameAttribute: Pointer;
function UIFontDescriptorFaceAttribute: Pointer;
function UIFontDescriptorSizeAttribute: Pointer;
function UIFontDescriptorVisibleNameAttribute: Pointer;
function UIFontDescriptorMatrixAttribute: Pointer;
function UIFontDescriptorCharacterSetAttribute: Pointer;
function UIFontDescriptorCascadeListAttribute: Pointer;
function UIFontDescriptorTraitsAttribute: Pointer;
function UIFontDescriptorFixedAdvanceAttribute: Pointer;
function UIFontDescriptorFeatureSettingsAttribute: Pointer;
function UIFontDescriptorTextStyleAttribute: Pointer;
function UIFontSymbolicTrait: Pointer;
function UIFontWeightTrait: Pointer;
function UIFontWidthTrait: Pointer;
function UIFontSlantTrait: Pointer;
function UIFontWeightUltraLight: Pointer;
function UIFontWeightThin: Pointer;
function UIFontWeightLight: Pointer;
function UIFontWeightRegular: Pointer;
function UIFontWeightMedium: Pointer;
function UIFontWeightSemibold: Pointer;
function UIFontWeightBold: Pointer;
function UIFontWeightHeavy: Pointer;
function UIFontWeightBlack: Pointer;
function UIFontWidthCondensed: Pointer;
function UIFontWidthStandard: Pointer;
function UIFontWidthExpanded: Pointer;
function UIFontWidthCompressed: Pointer;
function UIFontFeatureTypeIdentifierKey: Pointer;
function UIFontFeatureSelectorIdentifierKey: Pointer;
function UIFontTextStyleLargeTitle: Pointer;
function UIFontTextStyleTitle1: Pointer;
function UIFontTextStyleTitle2: Pointer;
function UIFontTextStyleTitle3: Pointer;
function UIFontTextStyleHeadline: Pointer;
function UIFontTextStyleSubheadline: Pointer;
function UIFontTextStyleBody: Pointer;
function UIFontTextStyleCallout: Pointer;
function UIFontTextStyleFootnote: Pointer;
function UIFontTextStyleCaption1: Pointer;
function UIFontTextStyleCaption2: Pointer;
function UIDeviceOrientationDidChangeNotification: Pointer;
function UIDeviceBatteryStateDidChangeNotification: Pointer;
function UIDeviceBatteryLevelDidChangeNotification: Pointer;
function UIDeviceProximityStateDidChangeNotification: Pointer;
function UIEdgeInsetsZero: Pointer;
function NSDirectionalEdgeInsetsZero: Pointer;
function UIOffsetZero: Pointer;
function UIContentSizeCategoryUnspecified: Pointer;
function UIContentSizeCategoryExtraSmall: Pointer;
function UIContentSizeCategorySmall: Pointer;
function UIContentSizeCategoryMedium: Pointer;
function UIContentSizeCategoryLarge: Pointer;
function UIContentSizeCategoryExtraLarge: Pointer;
function UIContentSizeCategoryExtraExtraLarge: Pointer;
function UIContentSizeCategoryExtraExtraExtraLarge: Pointer;
function UIContentSizeCategoryAccessibilityMedium: Pointer;
function UIContentSizeCategoryAccessibilityLarge: Pointer;
function UIContentSizeCategoryAccessibilityExtraLarge: Pointer;
function UIContentSizeCategoryAccessibilityExtraExtraLarge: Pointer;
function UIContentSizeCategoryAccessibilityExtraExtraExtraLarge: Pointer;
function UIContentSizeCategoryDidChangeNotification: Pointer;
function UIContentSizeCategoryNewValueKey: NSString;
function UIFocusDidUpdateNotification: Pointer;
function UIFocusMovementDidFailNotification: Pointer;
function UIFocusUpdateContextKey: NSString;
function UIFocusUpdateAnimationCoordinatorKey: NSString;
function UIFocusSoundIdentifierNone: Pointer;
function UIFocusSoundIdentifierDefault: Pointer;
function UIViewNoIntrinsicMetric: Pointer;
function UILayoutFittingCompressedSize: Pointer;
function UILayoutFittingExpandedSize: Pointer;
function UIActionPaste: Pointer;
function UIActionPasteAndMatchStyle: Pointer;
function UIActionPasteAndGo: Pointer;
function UIActionPasteAndSearch: Pointer;
function NSTabColumnTerminatorsAttributeName: Pointer;
function UITextAttributeFont: NSString;
function UITextAttributeTextColor: NSString;
function UITextAttributeTextShadowColor: NSString;
function UITextAttributeTextShadowOffset: NSString;
function UITextContentTypeName: Pointer;
function UITextContentTypeNamePrefix: Pointer;
function UITextContentTypeGivenName: Pointer;
function UITextContentTypeMiddleName: Pointer;
function UITextContentTypeFamilyName: Pointer;
function UITextContentTypeNameSuffix: Pointer;
function UITextContentTypeNickname: Pointer;
function UITextContentTypeJobTitle: Pointer;
function UITextContentTypeOrganizationName: Pointer;
function UITextContentTypeLocation: Pointer;
function UITextContentTypeFullStreetAddress: Pointer;
function UITextContentTypeStreetAddressLine1: Pointer;
function UITextContentTypeStreetAddressLine2: Pointer;
function UITextContentTypeAddressCity: Pointer;
function UITextContentTypeAddressState: Pointer;
function UITextContentTypeAddressCityAndState: Pointer;
function UITextContentTypeSublocality: Pointer;
function UITextContentTypeCountryName: Pointer;
function UITextContentTypePostalCode: Pointer;
function UITextContentTypeTelephoneNumber: Pointer;
function UITextContentTypeEmailAddress: Pointer;
function UITextContentTypeURL: Pointer;
function UITextContentTypeCreditCardNumber: Pointer;
function UITextContentTypeUsername: Pointer;
function UITextContentTypePassword: Pointer;
function UITextContentTypeNewPassword: Pointer;
function UITextContentTypeOneTimeCode: Pointer;
function UITextContentTypeShipmentTrackingNumber: Pointer;
function UITextContentTypeFlightNumber: Pointer;
function UITextContentTypeDateTime: Pointer;
function UITextInputTextBackgroundColorKey: NSString;
function UITextInputTextColorKey: NSString;
function UITextInputTextFontKey: NSString;
function UITextInputCurrentInputModeDidChangeNotification: Pointer;
function UITextFieldTextDidBeginEditingNotification: Pointer;
function UITextFieldTextDidEndEditingNotification: Pointer;
function UITextFieldTextDidChangeNotification: Pointer;
function UITextFieldDidEndEditingReasonKey: NSString;
function UISceneErrorDomain: Pointer;
function UIApplicationInvalidInterfaceOrientationException: Pointer;
function UIBackgroundTaskInvalid: Pointer;
function UIMinimumKeepAliveTimeout: Pointer;
function UIApplicationBackgroundFetchIntervalMinimum: Pointer;
function UIApplicationBackgroundFetchIntervalNever: Pointer;
function UITrackingRunLoopMode: Pointer;
function UIApplicationDidEnterBackgroundNotification: Pointer;
function UIApplicationWillEnterForegroundNotification: Pointer;
function UIApplicationDidFinishLaunchingNotification: Pointer;
function UIApplicationDidBecomeActiveNotification: Pointer;
function UIApplicationWillResignActiveNotification: Pointer;
function UIApplicationDidReceiveMemoryWarningNotification: Pointer;
function UIApplicationWillTerminateNotification: Pointer;
function UIApplicationSignificantTimeChangeNotification: Pointer;
function UIApplicationWillChangeStatusBarOrientationNotification: Pointer;
function UIApplicationDidChangeStatusBarOrientationNotification: Pointer;
function UIApplicationStatusBarOrientationUserInfoKey: NSString;
function UIApplicationWillChangeStatusBarFrameNotification: Pointer;
function UIApplicationDidChangeStatusBarFrameNotification: Pointer;
function UIApplicationStatusBarFrameUserInfoKey: NSString;
function UIApplicationBackgroundRefreshStatusDidChangeNotification: Pointer;
function UIApplicationProtectedDataWillBecomeUnavailable: Pointer;
function UIApplicationProtectedDataDidBecomeAvailable: Pointer;
function UIApplicationLaunchOptionsURLKey: Pointer;
function UIApplicationLaunchOptionsSourceApplicationKey: Pointer;
function UIApplicationLaunchOptionsRemoteNotificationKey: Pointer;
function UIApplicationLaunchOptionsLocalNotificationKey: Pointer;
function UIApplicationLaunchOptionsAnnotationKey: Pointer;
function UIApplicationLaunchOptionsLocationKey: Pointer;
function UIApplicationLaunchOptionsNewsstandDownloadsKey: Pointer;
function UIApplicationLaunchOptionsBluetoothCentralsKey: Pointer;
function UIApplicationLaunchOptionsBluetoothPeripheralsKey: Pointer;
function UIApplicationLaunchOptionsShortcutItemKey: Pointer;
function UIApplicationLaunchOptionsEventAttributionKey: Pointer;
function UIApplicationLaunchOptionsUserActivityDictionaryKey: Pointer;
function UIApplicationLaunchOptionsUserActivityTypeKey: Pointer;
function UIApplicationLaunchOptionsCloudKitShareMetadataKey: Pointer;
function UIApplicationOpenSettingsURLString: NSString;
function UIApplicationOpenNotificationSettingsURLString: NSString;
function UIApplicationOpenURLOptionsSourceApplicationKey: Pointer;
function UIApplicationOpenURLOptionsAnnotationKey: Pointer;
function UIApplicationOpenURLOptionsOpenInPlaceKey: Pointer;
function UIApplicationOpenURLOptionsEventAttributionKey: Pointer;
function UIApplicationUserDidTakeScreenshotNotification: Pointer;
function UIApplicationKeyboardExtensionPointIdentifier: Pointer;
function UIApplicationOpenURLOptionUniversalLinksOnly: Pointer;
function UIApplicationOpenExternalURLOptionsEventAttributionKey: Pointer;
function UIStateRestorationViewControllerStoryboardKey: NSString;
function UIApplicationStateRestorationBundleVersionKey: NSString;
function UIApplicationStateRestorationUserInterfaceIdiomKey: NSString;
function UIApplicationStateRestorationTimestampKey: NSString;
function UIApplicationStateRestorationSystemVersionKey: NSString;
function UISceneWillConnectNotification: Pointer;
function UISceneDidDisconnectNotification: Pointer;
function UISceneDidActivateNotification: Pointer;
function UISceneWillDeactivateNotification: Pointer;
function UISceneWillEnterForegroundNotification: Pointer;
function UISceneDidEnterBackgroundNotification: Pointer;
function UIPointerLockStateDidChangeNotification: Pointer;
function UIPointerLockStateSceneUserInfoKey: NSString;
function UIViewControllerShowDetailTargetDidChangeNotification: Pointer;
function UIViewControllerHierarchyInconsistencyException: Pointer;
function UITransitionContextFromViewControllerKey: Pointer;
function UITransitionContextToViewControllerKey: Pointer;
function UITransitionContextFromViewKey: Pointer;
function UITransitionContextToViewKey: Pointer;
function UIDocumentBrowserErrorDomain: Pointer;
function NSFontAttributeName: Pointer;
function NSParagraphStyleAttributeName: Pointer;
function NSForegroundColorAttributeName: Pointer;
function NSBackgroundColorAttributeName: Pointer;
function NSLigatureAttributeName: Pointer;
function NSKernAttributeName: Pointer;
function NSTrackingAttributeName: Pointer;
function NSStrikethroughStyleAttributeName: Pointer;
function NSUnderlineStyleAttributeName: Pointer;
function NSStrokeColorAttributeName: Pointer;
function NSStrokeWidthAttributeName: Pointer;
function NSShadowAttributeName: Pointer;
function NSTextEffectAttributeName: Pointer;
function NSAttachmentAttributeName: Pointer;
function NSLinkAttributeName: Pointer;
function NSBaselineOffsetAttributeName: Pointer;
function NSUnderlineColorAttributeName: Pointer;
function NSStrikethroughColorAttributeName: Pointer;
function NSObliquenessAttributeName: Pointer;
function NSExpansionAttributeName: Pointer;
function NSWritingDirectionAttributeName: Pointer;
function NSVerticalGlyphFormAttributeName: Pointer;
function NSTextEffectLetterpressStyle: Pointer;
function NSPlainTextDocumentType: Pointer;
function NSRTFTextDocumentType: Pointer;
function NSRTFDTextDocumentType: Pointer;
function NSHTMLTextDocumentType: Pointer;
function NSTextLayoutSectionOrientation: Pointer;
function NSTextLayoutSectionRange: Pointer;
function NSDocumentTypeDocumentAttribute: Pointer;
function NSCharacterEncodingDocumentAttribute: Pointer;
function NSDefaultAttributesDocumentAttribute: Pointer;
function NSPaperSizeDocumentAttribute: Pointer;
function NSPaperMarginDocumentAttribute: Pointer;
function NSViewSizeDocumentAttribute: Pointer;
function NSViewZoomDocumentAttribute: Pointer;
function NSViewModeDocumentAttribute: Pointer;
function NSReadOnlyDocumentAttribute: Pointer;
function NSBackgroundColorDocumentAttribute: Pointer;
function NSHyphenationFactorDocumentAttribute: Pointer;
function NSDefaultTabIntervalDocumentAttribute: Pointer;
function NSTextLayoutSectionsAttribute: Pointer;
function NSTextScalingDocumentAttribute: Pointer;
function NSSourceTextScalingDocumentAttribute: Pointer;
function NSCocoaVersionDocumentAttribute: Pointer;
function NSDocumentTypeDocumentOption: Pointer;
function NSDefaultAttributesDocumentOption: Pointer;
function NSCharacterEncodingDocumentOption: Pointer;
function NSTargetTextScalingDocumentOption: Pointer;
function NSSourceTextScalingDocumentOption: Pointer;
function NSTextStorageWillProcessEditingNotification: Pointer;
function NSTextStorageDidProcessEditingNotification: Pointer;
function NSTextContentStorageUnsupportedAttributeAddedNotification: Pointer;
function NSTextListMarkerBox: Pointer;
function NSTextListMarkerCheck: Pointer;
function NSTextListMarkerCircle: Pointer;
function NSTextListMarkerDiamond: Pointer;
function NSTextListMarkerDisc: Pointer;
function NSTextListMarkerHyphen: Pointer;
function NSTextListMarkerSquare: Pointer;
function NSTextListMarkerLowercaseHexadecimal: Pointer;
function NSTextListMarkerUppercaseHexadecimal: Pointer;
function NSTextListMarkerOctal: Pointer;
function NSTextListMarkerLowercaseAlpha: Pointer;
function NSTextListMarkerUppercaseAlpha: Pointer;
function NSTextListMarkerLowercaseLatin: Pointer;
function NSTextListMarkerUppercaseLatin: Pointer;
function NSTextListMarkerLowercaseRoman: Pointer;
function NSTextListMarkerUppercaseRoman: Pointer;
function NSTextListMarkerDecimal: Pointer;
function UIPrintErrorDomain: Pointer;
function UIActivityTypePostToFacebook: Pointer;
function UIActivityTypePostToTwitter: Pointer;
function UIActivityTypePostToWeibo: Pointer;
function UIActivityTypeMessage: Pointer;
function UIActivityTypeMail: Pointer;
function UIActivityTypePrint: Pointer;
function UIActivityTypeCopyToPasteboard: Pointer;
function UIActivityTypeAssignToContact: Pointer;
function UIActivityTypeSaveToCameraRoll: Pointer;
function UIActivityTypeAddToReadingList: Pointer;
function UIActivityTypePostToFlickr: Pointer;
function UIActivityTypePostToVimeo: Pointer;
function UIActivityTypePostToTencentWeibo: Pointer;
function UIActivityTypeAirDrop: Pointer;
function UIActivityTypeOpenInIBooks: Pointer;
function UIActivityTypeMarkupAsPDF: Pointer;
function UIActivityTypeSharePlay: Pointer;
function UIActivityTypeCollaborationInviteWithLink: Pointer;
function UIActivityTypeCollaborationCopyLink: Pointer;
function UIActivityTypeAddToHomeScreen: Pointer;
function UIScrollViewDecelerationRateNormal: Pointer;
function UIScrollViewDecelerationRateFast: Pointer;
function UIAccessibilityTraitNone: Pointer;
function UIAccessibilityTraitButton: Pointer;
function UIAccessibilityTraitLink: Pointer;
function UIAccessibilityTraitHeader: Pointer;
function UIAccessibilityTraitSearchField: Pointer;
function UIAccessibilityTraitImage: Pointer;
function UIAccessibilityTraitSelected: Pointer;
function UIAccessibilityTraitPlaysSound: Pointer;
function UIAccessibilityTraitKeyboardKey: Pointer;
function UIAccessibilityTraitStaticText: Pointer;
function UIAccessibilityTraitSummaryElement: Pointer;
function UIAccessibilityTraitNotEnabled: Pointer;
function UIAccessibilityTraitUpdatesFrequently: Pointer;
function UIAccessibilityTraitStartsMediaSession: Pointer;
function UIAccessibilityTraitAdjustable: Pointer;
function UIAccessibilityTraitAllowsDirectInteraction: Pointer;
function UIAccessibilityTraitCausesPageTurn: Pointer;
function UIAccessibilityTraitTabBar: Pointer;
function UIAccessibilityScreenChangedNotification: Pointer;
function UIAccessibilityLayoutChangedNotification: Pointer;
function UIAccessibilityAnnouncementNotification: Pointer;
function UIAccessibilityPageScrolledNotification: Pointer;
function UIAccessibilityPauseAssistiveTechnologyNotification: Pointer;
function UIAccessibilityResumeAssistiveTechnologyNotification: Pointer;
function UIAccessibilityAnnouncementDidFinishNotification: Pointer;
function UIAccessibilityAnnouncementKeyStringValue: NSString;
function UIAccessibilityAnnouncementKeyWasSuccessful: NSString;
function UIAccessibilityElementFocusedNotification: Pointer;
function UIAccessibilityFocusedElementKey: NSString;
function UIAccessibilityUnfocusedElementKey: NSString;
function UIAccessibilityAssistiveTechnologyKey: NSString;
function UIAccessibilityNotificationSwitchControlIdentifier: Pointer;
function UIAccessibilityNotificationVoiceOverIdentifier: Pointer;
function UIAccessibilityTextualContextWordProcessing: Pointer;
function UIAccessibilityTextualContextNarrative: Pointer;
function UIAccessibilityTextualContextMessaging: Pointer;
function UIAccessibilityTextualContextSpreadsheet: Pointer;
function UIAccessibilityTextualContextFileSystem: Pointer;
function UIAccessibilityTextualContextSourceCode: Pointer;
function UIAccessibilityTextualContextConsole: Pointer;
function UIAccessibilitySpeechAttributePunctuation: Pointer;
function UIAccessibilitySpeechAttributeLanguage: Pointer;
function UIAccessibilitySpeechAttributePitch: Pointer;
function UIAccessibilitySpeechAttributeQueueAnnouncement: Pointer;
function UIAccessibilitySpeechAttributeIPANotation: Pointer;
function UIAccessibilitySpeechAttributeSpellOut: Pointer;
function UIAccessibilityTextAttributeHeadingLevel: Pointer;
function UIAccessibilityTextAttributeCustom: Pointer;
function UIAccessibilityTextAttributeContext: Pointer;
function UIGuidedAccessErrorDomain: Pointer;
function UIAccessibilityVoiceOverStatusChanged: NSString;
function UIAccessibilityVoiceOverStatusDidChangeNotification: Pointer;
function UIAccessibilityMonoAudioStatusDidChangeNotification: Pointer;
function UIAccessibilityClosedCaptioningStatusDidChangeNotification: Pointer;
function UIAccessibilityInvertColorsStatusDidChangeNotification: Pointer;
function UIAccessibilityGuidedAccessStatusDidChangeNotification: Pointer;
function UIAccessibilityBoldTextStatusDidChangeNotification: Pointer;
function UIAccessibilityButtonShapesEnabledStatusDidChangeNotification: Pointer;
function UIAccessibilityGrayscaleStatusDidChangeNotification: Pointer;
function UIAccessibilityReduceTransparencyStatusDidChangeNotification: Pointer;
function UIAccessibilityReduceMotionStatusDidChangeNotification: Pointer;
function UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification
  : Pointer;
function UIAccessibilityVideoAutoplayStatusDidChangeNotification: Pointer;
function UIAccessibilityDarkerSystemColorsStatusDidChangeNotification: Pointer;
function UIAccessibilitySwitchControlStatusDidChangeNotification: Pointer;
function UIAccessibilitySpeakSelectionStatusDidChangeNotification: Pointer;
function UIAccessibilitySpeakScreenStatusDidChangeNotification: Pointer;
function UIAccessibilityShakeToUndoDidChangeNotification: Pointer;
function UIAccessibilityAssistiveTouchStatusDidChangeNotification: Pointer;
function UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification
  : Pointer;
function UIAccessibilityOnOffSwitchLabelsDidChangeNotification: Pointer;
function UIAccessibilityHearingDevicePairedEarDidChangeNotification: Pointer;
function UIConfigurationColorTransformerGrayscale: Pointer;
function UIConfigurationColorTransformerPreferredTint: Pointer;
function UIConfigurationColorTransformerMonochromeTint: Pointer;
function UIActivityItemsConfigurationMetadataKeyTitle: Pointer;
function UIActivityItemsConfigurationMetadataKeyMessageBody: Pointer;
function UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata
  : Pointer;
function UIActivityItemsConfigurationPreviewIntentFullSize: Pointer;
function UIActivityItemsConfigurationPreviewIntentThumbnail: Pointer;
function UIActivityItemsConfigurationInteractionShare: Pointer;
function UIActivityItemsConfigurationInteractionCopy: Pointer;
function UIFloatRangeZero: Pointer;
function UIFloatRangeInfinite: Pointer;
function UICellAccessoryStandardDimension: Pointer;
function UICollectionViewLayoutAutomaticDimension: Pointer;
function UICollectionElementKindSectionHeader: NSString;
function UICollectionElementKindSectionFooter: NSString;
function UICollectionViewFlowLayoutAutomaticSize: Pointer;
function UITableViewIndexSearch: NSString;
function UITableViewAutomaticDimension: Pointer;
function UITableViewSelectionDidChangeNotification: Pointer;
function UIDocumentStateChangedNotification: Pointer;
function NSUserActivityDocumentURLKey: NSString;
function UIWindowSceneSessionRoleApplication: Pointer;
function UIWindowSceneSessionRoleExternalDisplayNonInteractive: Pointer;
function UIWindowSceneSessionRoleExternalDisplay: Pointer;
function UINavigationControllerHideShowBarDuration: Pointer;
function UIImagePickerControllerMediaType: Pointer;
function UIImagePickerControllerOriginalImage: Pointer;
function UIImagePickerControllerEditedImage: Pointer;
function UIImagePickerControllerCropRect: Pointer;
function UIImagePickerControllerMediaURL: Pointer;
function UIImagePickerControllerReferenceURL: Pointer;
function UIImagePickerControllerMediaMetadata: Pointer;
function UIImagePickerControllerLivePhoto: Pointer;
function UIImagePickerControllerPHAsset: Pointer;
function UIImagePickerControllerImageURL: Pointer;
function UILocalNotificationDefaultSoundName: NSString;
function UIListSeparatorAutomaticInsets: Pointer;
function UIListContentImageStandardDimension: Pointer;
function UILargeContentViewerInteractionEnabledStatusDidChangeNotification
  : Pointer;
function UIUserNotificationTextInputActionButtonTitleKey: NSString;
function UIUserNotificationActionResponseTypedTextKey: NSString;
function UIMenuControllerWillShowMenuNotification: Pointer;
function UIMenuControllerDidShowMenuNotification: Pointer;
function UIMenuControllerWillHideMenuNotification: Pointer;
function UIMenuControllerDidHideMenuNotification: Pointer;
function UIMenuControllerMenuFrameDidChangeNotification: Pointer;
function UINibExternalObjects: Pointer;
function UINibProxiedObjectsKey: NSString;
function UIPageViewControllerOptionSpineLocationKey: Pointer;
function UIPageViewControllerOptionInterPageSpacingKey: Pointer;
function UIPasteboardNameGeneral: Pointer;
function UIPasteboardNameFind: NSString;
function UIPasteboardDetectionPatternProbableWebURL: Pointer;
function UIPasteboardDetectionPatternProbableWebSearch: Pointer;
function UIPasteboardDetectionPatternNumber: Pointer;
function UIPasteboardDetectionPatternLink: Pointer;
function UIPasteboardDetectionPatternPhoneNumber: Pointer;
function UIPasteboardDetectionPatternEmailAddress: Pointer;
function UIPasteboardDetectionPatternPostalAddress: Pointer;
function UIPasteboardDetectionPatternCalendarEvent: Pointer;
function UIPasteboardDetectionPatternShipmentTrackingNumber: Pointer;
function UIPasteboardDetectionPatternFlightNumber: Pointer;
function UIPasteboardDetectionPatternMoneyAmount: Pointer;
function UIPasteboardOptionExpirationDate: Pointer;
function UIPasteboardOptionLocalOnly: Pointer;
function UIPasteboardChangedNotification: Pointer;
function UIPasteboardChangedTypesAddedKey: NSString;
function UIPasteboardChangedTypesRemovedKey: NSString;
function UIPasteboardRemovedNotification: Pointer;
function UIPasteboardTypeListString: Pointer;
function UIPasteboardTypeListURL: Pointer;
function UIPasteboardTypeListImage: Pointer;
function UIPasteboardTypeListColor: Pointer;
function UIPasteboardTypeAutomatic: NSString;
function UIScreenDidConnectNotification: Pointer;
function UIScreenDidDisconnectNotification: Pointer;
function UIScreenModeDidChangeNotification: Pointer;
function UIScreenBrightnessDidChangeNotification: Pointer;
function UIScreenCapturedDidChangeNotification: Pointer;
function UIScreenReferenceDisplayModeStatusDidChangeNotification: Pointer;
function UISplitViewControllerAutomaticDimension: Pointer;
function UITextViewTextDidBeginEditingNotification: Pointer;
function UITextViewTextDidChangeNotification: Pointer;
function UITextViewTextDidEndEditingNotification: Pointer;
function UIWindowLevelNormal: Pointer;
function UIWindowLevelAlert: Pointer;
function UIWindowLevelStatusBar: Pointer;
function UIWindowDidBecomeVisibleNotification: Pointer;
function UIWindowDidBecomeHiddenNotification: Pointer;
function UIWindowDidBecomeKeyNotification: Pointer;
function UIWindowDidResignKeyNotification: Pointer;
function UIKeyboardWillShowNotification: Pointer;
function UIKeyboardDidShowNotification: Pointer;
function UIKeyboardWillHideNotification: Pointer;
function UIKeyboardDidHideNotification: Pointer;
function UIKeyboardFrameBeginUserInfoKey: NSString;
function UIKeyboardFrameEndUserInfoKey: NSString;
function UIKeyboardAnimationDurationUserInfoKey: NSString;
function UIKeyboardAnimationCurveUserInfoKey: NSString;
function UIKeyboardIsLocalUserInfoKey: NSString;
function UIKeyboardWillChangeFrameNotification: Pointer;
function UIKeyboardDidChangeFrameNotification: Pointer;
function UIKeyboardCenterBeginUserInfoKey: NSString;
function UIKeyboardCenterEndUserInfoKey: NSString;
function UIKeyboardBoundsUserInfoKey: NSString;
function UISheetPresentationControllerDetentIdentifierMedium: Pointer;
function UISheetPresentationControllerDetentIdentifierLarge: Pointer;
function UISheetPresentationControllerDetentInactive: Pointer;
function UISheetPresentationControllerAutomaticDimension: Pointer;
function UIPointerAccessoryPositionTop: Pointer;
function UIPointerAccessoryPositionTopRight: Pointer;
function UIPointerAccessoryPositionRight: Pointer;
function UIPointerAccessoryPositionBottomRight: Pointer;
function UIPointerAccessoryPositionBottom: Pointer;
function UIPointerAccessoryPositionBottomLeft: Pointer;
function UIPointerAccessoryPositionLeft: Pointer;
function UIPointerAccessoryPositionTopLeft: Pointer;


// ===== External functions =====

const
  libUIKit = '/System/Library/Frameworks/UIKit.framework/UIKit';
function UIEventButtonMaskForButtonNumber(buttonNumber: NSInteger)
  : UIEventButtonMask; cdecl;
  external libUIKit name _PU + 'UIEventButtonMaskForButtonNumber';
function UIDeviceOrientationIsPortrait(orientation: UIDeviceOrientation)
  : Boolean; cdecl; external libUIKit name _PU +
  'UIDeviceOrientationIsPortrait';
function UIDeviceOrientationIsLandscape(orientation: UIDeviceOrientation)
  : Boolean; cdecl; external libUIKit name _PU +
  'UIDeviceOrientationIsLandscape';
function UIDeviceOrientationIsFlat(orientation: UIDeviceOrientation): Boolean;
  cdecl; external libUIKit name _PU + 'UIDeviceOrientationIsFlat';
function UIDeviceOrientationIsValidInterfaceOrientation
  (orientation: UIDeviceOrientation): Boolean; cdecl;
  external libUIKit name _PU + 'UIDeviceOrientationIsValidInterfaceOrientation';
function UI_USER_INTERFACE_IDIOM: UIUserInterfaceIdiom; cdecl;
  external libUIKit name _PU + 'UI_USER_INTERFACE_IDIOM';
function UIEdgeInsetsMake(top: CGFloat; left: CGFloat; bottom: CGFloat;
  right: CGFloat): UIEdgeInsets; cdecl;
  external libUIKit name _PU + 'UIEdgeInsetsMake';
function NSDirectionalEdgeInsetsMake(top: CGFloat; leading: CGFloat;
  bottom: CGFloat; trailing: CGFloat): NSDirectionalEdgeInsets; cdecl;
  external libUIKit name _PU + 'NSDirectionalEdgeInsetsMake';
function UIEdgeInsetsInsetRect(rect: CGRect; insets: UIEdgeInsets): CGRect;
  cdecl; external libUIKit name _PU + 'UIEdgeInsetsInsetRect';
function UIOffsetMake(horizontal: CGFloat; vertical: CGFloat): UIOffset; cdecl;
  external libUIKit name _PU + 'UIOffsetMake';
function UIEdgeInsetsEqualToEdgeInsets(insets1: UIEdgeInsets;
  insets2: UIEdgeInsets): Boolean; cdecl;
  external libUIKit name _PU + 'UIEdgeInsetsEqualToEdgeInsets';
function NSDirectionalEdgeInsetsEqualToDirectionalEdgeInsets
  (insets1: NSDirectionalEdgeInsets; insets2: NSDirectionalEdgeInsets): Boolean;
  cdecl; external libUIKit name _PU +
  'NSDirectionalEdgeInsetsEqualToDirectionalEdgeInsets';
function UIOffsetEqualToOffset(offset1: UIOffset; offset2: UIOffset): Boolean;
  cdecl; external libUIKit name _PU + 'UIOffsetEqualToOffset';
function NSStringFromCGPoint(point: CGPoint): Pointer { NSString }; cdecl;
  external libUIKit name _PU + 'NSStringFromCGPoint';
function NSStringFromCGVector(vector: CGVector): Pointer { NSString }; cdecl;
  external libUIKit name _PU + 'NSStringFromCGVector';
function NSStringFromCGSize(size: CGSize): Pointer { NSString }; cdecl;
  external libUIKit name _PU + 'NSStringFromCGSize';
function NSStringFromCGRect(rect: CGRect): Pointer { NSString }; cdecl;
  external libUIKit name _PU + 'NSStringFromCGRect';
function NSStringFromCGAffineTransform(transform: CGAffineTransform)
  : Pointer { NSString }; cdecl;
  external libUIKit name _PU + 'NSStringFromCGAffineTransform';
function NSStringFromUIEdgeInsets(insets: UIEdgeInsets): Pointer { NSString };
  cdecl; external libUIKit name _PU + 'NSStringFromUIEdgeInsets';
function NSStringFromDirectionalEdgeInsets(insets: NSDirectionalEdgeInsets)
  : Pointer { NSString }; cdecl;
  external libUIKit name _PU + 'NSStringFromDirectionalEdgeInsets';
function NSStringFromUIOffset(offset: UIOffset): Pointer { NSString }; cdecl;
  external libUIKit name _PU + 'NSStringFromUIOffset';
function CGPointFromString(&string: Pointer { NSString } ): CGPoint; cdecl;
  external libUIKit name _PU + 'CGPointFromString';
function CGVectorFromString(&string: Pointer { NSString } ): CGVector; cdecl;
  external libUIKit name _PU + 'CGVectorFromString';
function CGSizeFromString(&string: Pointer { NSString } ): CGSize; cdecl;
  external libUIKit name _PU + 'CGSizeFromString';
function CGRectFromString(&string: Pointer { NSString } ): CGRect; cdecl;
  external libUIKit name _PU + 'CGRectFromString';
function CGAffineTransformFromString(&string: Pointer { NSString } )
  : CGAffineTransform; cdecl;
  external libUIKit name _PU + 'CGAffineTransformFromString';
function UIEdgeInsetsFromString(&string: Pointer { NSString } ): UIEdgeInsets;
  cdecl; external libUIKit name _PU + 'UIEdgeInsetsFromString';
function NSDirectionalEdgeInsetsFromString(&string: Pointer { NSString } )
  : NSDirectionalEdgeInsets; cdecl;
  external libUIKit name _PU + 'NSDirectionalEdgeInsetsFromString';
function UIOffsetFromString(&string: Pointer { NSString } ): UIOffset; cdecl;
  external libUIKit name _PU + 'UIOffsetFromString';
function _NSDictionaryOfVariableBindings(commaSeparatedKeysString
  : Pointer { NSString }; firstValue: Pointer): Pointer { NSDictionary }; cdecl;
  external libUIKit name _PU + '_NSDictionaryOfVariableBindings';
function UIContentSizeCategoryIsAccessibilityCategory
  (category: Pointer { UIContentSizeCategory } ): Boolean; cdecl;
  external libUIKit name _PU + 'UIContentSizeCategoryIsAccessibilityCategory';
function UIContentSizeCategoryCompareToCategory
  (lhs: Pointer { UIContentSizeCategory };
  rhs: Pointer { UIContentSizeCategory } ): NSComparisonResult; cdecl;
  external libUIKit name _PU + 'UIContentSizeCategoryCompareToCategory';
function NSTextAlignmentToCTTextAlignment(NSTextAlignment: NSTextAlignment)
  : CTTextAlignment; cdecl;
  external libUIKit name _PU + 'NSTextAlignmentToCTTextAlignment';
function NSTextAlignmentFromCTTextAlignment(CTTextAlignment: CTTextAlignment)
  : NSTextAlignment; cdecl;
  external libUIKit name _PU + 'NSTextAlignmentFromCTTextAlignment';
function UIInterfaceOrientationIsPortrait(orientation: UIInterfaceOrientation)
  : Boolean; cdecl; external libUIKit name _PU +
  'UIInterfaceOrientationIsPortrait';
function UIInterfaceOrientationIsLandscape(orientation: UIInterfaceOrientation)
  : Boolean; cdecl; external libUIKit name _PU +
  'UIInterfaceOrientationIsLandscape';
function UIApplicationMain(argc: Integer; argv: MarshaledAString;
  principalClassName: Pointer { NSString };
  delegateClassName: Pointer { NSString } ): Integer; cdecl;
  external libUIKit name _PU + 'UIApplicationMain';
function UIImagePNGRepresentation(image: Pointer { UIImage } )
  : Pointer { NSData }; cdecl;
  external libUIKit name _PU + 'UIImagePNGRepresentation';
function UIImageJPEGRepresentation(image: Pointer { UIImage };
  compressionQuality: CGFloat): Pointer { NSData }; cdecl;
  external libUIKit name _PU + 'UIImageJPEGRepresentation';
procedure UIAccessibilityZoomFocusChanged(&type: UIAccessibilityZoomType;
  frame: CGRect; view: Pointer { UIView } ); cdecl;
  external libUIKit name _PU + 'UIAccessibilityZoomFocusChanged';
procedure UIAccessibilityRegisterGestureConflictWithZoom; cdecl;
  external libUIKit name _PU + 'UIAccessibilityRegisterGestureConflictWithZoom';
function UIGuidedAccessRestrictionStateForIdentifier(restrictionIdentifier
  : Pointer { NSString } ): UIGuidedAccessRestrictionState; cdecl;
  external libUIKit name _PU + 'UIGuidedAccessRestrictionStateForIdentifier';
procedure UIGuidedAccessConfigureAccessibilityFeatures
  (features: UIGuidedAccessAccessibilityFeature; enabled: Boolean;
  completion: TUIKitCompletion3); cdecl;
  external libUIKit name _PU + 'UIGuidedAccessConfigureAccessibilityFeatures';
function UIAccessibilityConvertFrameToScreenCoordinates(rect: CGRect;
  view: Pointer { UIView } ): CGRect; cdecl;
  external libUIKit name _PU + 'UIAccessibilityConvertFrameToScreenCoordinates';
function UIAccessibilityConvertPathToScreenCoordinates
  (path: Pointer { UIBezierPath }; view: Pointer { UIView } )
  : Pointer { UIBezierPath }; cdecl;
  external libUIKit name _PU + 'UIAccessibilityConvertPathToScreenCoordinates';
function UIAccessibilityFocusedElement(assistiveTechnologyIdentifier
  : Pointer { UIAccessibilityAssistiveTechnologyIdentifier } ): Pointer; cdecl;
  external libUIKit name _PU + 'UIAccessibilityFocusedElement';
procedure UIAccessibilityPostNotification(notification
  : UIAccessibilityNotifications; argument: Pointer); cdecl;
  external libUIKit name _PU + 'UIAccessibilityPostNotification';
function UIAccessibilityIsVoiceOverRunning: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsVoiceOverRunning';
function UIAccessibilityIsMonoAudioEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsMonoAudioEnabled';
function UIAccessibilityIsClosedCaptioningEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsClosedCaptioningEnabled';
function UIAccessibilityIsInvertColorsEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsInvertColorsEnabled';
function UIAccessibilityIsGuidedAccessEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsGuidedAccessEnabled';
function UIAccessibilityIsBoldTextEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsBoldTextEnabled';
function UIAccessibilityButtonShapesEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityButtonShapesEnabled';
function UIAccessibilityIsGrayscaleEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsGrayscaleEnabled';
function UIAccessibilityIsReduceTransparencyEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsReduceTransparencyEnabled';
function UIAccessibilityIsReduceMotionEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsReduceMotionEnabled';
function UIAccessibilityPrefersCrossFadeTransitions: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityPrefersCrossFadeTransitions';
function UIAccessibilityIsVideoAutoplayEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsVideoAutoplayEnabled';
function UIAccessibilityDarkerSystemColorsEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityDarkerSystemColorsEnabled';
function UIAccessibilityIsSwitchControlRunning: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsSwitchControlRunning';
function UIAccessibilityIsSpeakSelectionEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsSpeakSelectionEnabled';
function UIAccessibilityIsSpeakScreenEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsSpeakScreenEnabled';
function UIAccessibilityIsShakeToUndoEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsShakeToUndoEnabled';
function UIAccessibilityIsAssistiveTouchRunning: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsAssistiveTouchRunning';
function UIAccessibilityShouldDifferentiateWithoutColor: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityShouldDifferentiateWithoutColor';
function UIAccessibilityIsOnOffSwitchLabelsEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsOnOffSwitchLabelsEnabled';
procedure UIAccessibilityRequestGuidedAccessSession(enable: Boolean;
  completionHandler: TUIKitCompletion); cdecl;
  external libUIKit name _PU + 'UIAccessibilityRequestGuidedAccessSession';
function UIAccessibilityHearingDevicePairedEar: UIAccessibilityHearingDeviceEar;
  cdecl; external libUIKit name _PU + 'UIAccessibilityHearingDevicePairedEar';
function UIFloatRangeIsInfinite(range: UIFloatRange): Boolean; cdecl;
  external libUIKit name _PU + 'UIFloatRangeIsInfinite';
function UIFloatRangeMake(minimum: CGFloat; maximum: CGFloat): UIFloatRange;
  cdecl; external libUIKit name _PU + 'UIFloatRangeMake';
function UIFloatRangeIsEqualToRange(range: UIFloatRange;
  otherRange: UIFloatRange): Boolean; cdecl;
  external libUIKit name _PU + 'UIFloatRangeIsEqualToRange';
function UICellAccessoryPositionBeforeAccessoryOfClass(accessoryClass: Pointer)
  : UICellAccessoryPosition; cdecl;
  external libUIKit name _PU + 'UICellAccessoryPositionBeforeAccessoryOfClass';
function UICellAccessoryPositionAfterAccessoryOfClass(accessoryClass: Pointer)
  : UICellAccessoryPosition; cdecl;
  external libUIKit name _PU + 'UICellAccessoryPositionAfterAccessoryOfClass';
function UIGraphicsGetCurrentContext: CGContextRef; cdecl;
  external libUIKit name _PU + 'UIGraphicsGetCurrentContext';
procedure UIGraphicsPushContext(context: CGContextRef); cdecl;
  external libUIKit name _PU + 'UIGraphicsPushContext';
procedure UIGraphicsPopContext; cdecl;
  external libUIKit name _PU + 'UIGraphicsPopContext';
procedure UIRectFillUsingBlendMode(rect: CGRect; blendMode: CGBlendMode); cdecl;
  external libUIKit name _PU + 'UIRectFillUsingBlendMode';
procedure UIRectFill(rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIRectFill';
procedure UIRectFrameUsingBlendMode(rect: CGRect; blendMode: CGBlendMode);
  cdecl; external libUIKit name _PU + 'UIRectFrameUsingBlendMode';
procedure UIRectFrame(rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIRectFrame';
procedure UIRectClip(rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIRectClip';
procedure UIGraphicsBeginImageContext(size: CGSize); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginImageContext';
procedure UIGraphicsBeginImageContextWithOptions(size: CGSize; opaque: Boolean;
  scale: CGFloat); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginImageContextWithOptions';
function UIGraphicsGetImageFromCurrentImageContext: Pointer { UIImage }; cdecl;
  external libUIKit name _PU + 'UIGraphicsGetImageFromCurrentImageContext';
procedure UIGraphicsEndImageContext; cdecl;
  external libUIKit name _PU + 'UIGraphicsEndImageContext';
function UIGraphicsBeginPDFContextToFile(path: Pointer { NSString };
  bounds: CGRect; documentInfo: Pointer { NSDictionary } ): Boolean; cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFContextToFile';
procedure UIGraphicsBeginPDFContextToData(data: Pointer { NSMutableData };
  bounds: CGRect; documentInfo: Pointer { NSDictionary } ); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFContextToData';
procedure UIGraphicsEndPDFContext; cdecl;
  external libUIKit name _PU + 'UIGraphicsEndPDFContext';
procedure UIGraphicsBeginPDFPage; cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFPage';
procedure UIGraphicsBeginPDFPageWithInfo(bounds: CGRect;
  pageInfo: Pointer { NSDictionary } ); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFPageWithInfo';
function UIGraphicsGetPDFContextBounds: CGRect; cdecl;
  external libUIKit name _PU + 'UIGraphicsGetPDFContextBounds';
procedure UIGraphicsSetPDFContextURLForRect(url: Pointer { NSURL };
  rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIGraphicsSetPDFContextURLForRect';
procedure UIGraphicsAddPDFContextDestinationAtPoint(name: Pointer { NSString };
  point: CGPoint); cdecl;
  external libUIKit name _PU + 'UIGraphicsAddPDFContextDestinationAtPoint';
procedure UIGraphicsSetPDFContextDestinationForRect(name: Pointer { NSString };
  rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIGraphicsSetPDFContextDestinationForRect';
procedure UIImageWriteToSavedPhotosAlbum(image: Pointer { UIImage };
  completionTarget: Pointer; completionSelector: SEL; contextInfo: Pointer);
  cdecl; external libUIKit name _PU + 'UIImageWriteToSavedPhotosAlbum';
function UIVideoAtPathIsCompatibleWithSavedPhotosAlbum
  (videoPath: Pointer { NSString } ): Boolean; cdecl;
  external libUIKit name _PU + 'UIVideoAtPathIsCompatibleWithSavedPhotosAlbum';
procedure UISaveVideoAtPathToSavedPhotosAlbum(videoPath: Pointer { NSString };
  completionTarget: Pointer; completionSelector: SEL; contextInfo: Pointer);
  cdecl; external libUIKit name _PU + 'UISaveVideoAtPathToSavedPhotosAlbum';
function UIFontWeightForImageSymbolWeight(symbolWeight: UIImageSymbolWeight)
  : UIFontWeight; cdecl;
  external libUIKit name _PU + 'UIFontWeightForImageSymbolWeight';
function UIImageSymbolWeightForFontWeight(fontWeight: UIFontWeight)
  : UIImageSymbolWeight; cdecl;
  external libUIKit name _PU + 'UIImageSymbolWeightForFontWeight';
function UIPointerAccessoryPositionMake(offset: CGFloat; angle: CGFloat)
  : UIPointerAccessoryPosition; cdecl;
  external libUIKit name _PU + 'UIPointerAccessoryPositionMake';

implementation

{$IF defined(IOS) and NOT defined(CPUARM)}

uses
  Posix.Dlfcn;

var
  UIKitModule: THandle;

{$ENDIF IOS}

function UICommandTagShare: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UICommandTagShare');
end;

function UIKeyInputUpArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputUpArrow');
end;

function UIKeyInputDownArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputDownArrow');
end;

function UIKeyInputLeftArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputLeftArrow');
end;

function UIKeyInputRightArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputRightArrow');
end;

function UIKeyInputEscape: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputEscape');
end;

function UIKeyInputPageUp: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputPageUp');
end;

function UIKeyInputPageDown: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputPageDown');
end;

function UIKeyInputHome: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputHome');
end;

function UIKeyInputEnd: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputEnd');
end;

function UIKeyInputF1: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF1');
end;

function UIKeyInputF2: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF2');
end;

function UIKeyInputF3: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF3');
end;

function UIKeyInputF4: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF4');
end;

function UIKeyInputF5: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF5');
end;

function UIKeyInputF6: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF6');
end;

function UIKeyInputF7: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF7');
end;

function UIKeyInputF8: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF8');
end;

function UIKeyInputF9: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF9');
end;

function UIKeyInputF10: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF10');
end;

function UIKeyInputF11: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF11');
end;

function UIKeyInputF12: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF12');
end;

function UIKeyInputDelete: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputDelete');
end;

function UIContentSizeCategoryNewValueKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryNewValueKey');
end;

function UIFocusUpdateContextKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFocusUpdateContextKey');
end;

function UIFocusUpdateAnimationCoordinatorKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIFocusUpdateAnimationCoordinatorKey');
end;

function UITextAttributeFont: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeFont');
end;

function UITextAttributeTextColor: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeTextColor');
end;

function UITextAttributeTextShadowColor: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeTextShadowColor');
end;

function UITextAttributeTextShadowOffset: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeTextShadowOffset');
end;

function UITextInputTextBackgroundColorKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextInputTextBackgroundColorKey');
end;

function UITextInputTextColorKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextInputTextColorKey');
end;

function UITextInputTextFontKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextInputTextFontKey');
end;

function UITextFieldDidEndEditingReasonKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextFieldDidEndEditingReasonKey');
end;

function UIApplicationStatusBarOrientationUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIApplicationStatusBarOrientationUserInfoKey');
end;

function UIApplicationStatusBarFrameUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIApplicationStatusBarFrameUserInfoKey');
end;

function UIApplicationOpenSettingsURLString: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenSettingsURLString');
end;

function UIApplicationOpenNotificationSettingsURLString: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIApplicationOpenNotificationSettingsURLString');
end;

function UIStateRestorationViewControllerStoryboardKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIStateRestorationViewControllerStoryboardKey');
end;

function UIApplicationStateRestorationBundleVersionKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIApplicationStateRestorationBundleVersionKey');
end;

function UIApplicationStateRestorationUserInterfaceIdiomKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIApplicationStateRestorationUserInterfaceIdiomKey');
end;

function UIApplicationStateRestorationTimestampKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIApplicationStateRestorationTimestampKey');
end;

function UIApplicationStateRestorationSystemVersionKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIApplicationStateRestorationSystemVersionKey');
end;

function UIPointerLockStateSceneUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPointerLockStateSceneUserInfoKey');
end;

function UIAccessibilityAnnouncementKeyStringValue: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIAccessibilityAnnouncementKeyStringValue');
end;

function UIAccessibilityAnnouncementKeyWasSuccessful: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIAccessibilityAnnouncementKeyWasSuccessful');
end;

function UIAccessibilityFocusedElementKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityFocusedElementKey');
end;

function UIAccessibilityUnfocusedElementKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityUnfocusedElementKey');
end;

function UIAccessibilityAssistiveTechnologyKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIAccessibilityAssistiveTechnologyKey');
end;

function UIAccessibilityVoiceOverStatusChanged: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIAccessibilityVoiceOverStatusChanged');
end;

function UICollectionElementKindSectionHeader: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UICollectionElementKindSectionHeader');
end;

function UICollectionElementKindSectionFooter: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UICollectionElementKindSectionFooter');
end;

function UITableViewIndexSearch: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITableViewIndexSearch');
end;

function NSUserActivityDocumentURLKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSUserActivityDocumentURLKey');
end;

function UILocalNotificationDefaultSoundName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UILocalNotificationDefaultSoundName');
end;

function UIUserNotificationTextInputActionButtonTitleKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIUserNotificationTextInputActionButtonTitleKey');
end;

function UIUserNotificationActionResponseTypedTextKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIUserNotificationActionResponseTypedTextKey');
end;

function UINibProxiedObjectsKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UINibProxiedObjectsKey');
end;

function UIPasteboardNameFind: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardNameFind');
end;

function UIPasteboardChangedTypesAddedKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardChangedTypesAddedKey');
end;

function UIPasteboardChangedTypesRemovedKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardChangedTypesRemovedKey');
end;

function UIPasteboardTypeAutomatic: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardTypeAutomatic');
end;

function UIKeyboardFrameBeginUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardFrameBeginUserInfoKey');
end;

function UIKeyboardFrameEndUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardFrameEndUserInfoKey');
end;

function UIKeyboardAnimationDurationUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit,
    'UIKeyboardAnimationDurationUserInfoKey');
end;

function UIKeyboardAnimationCurveUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardAnimationCurveUserInfoKey');
end;

function UIKeyboardIsLocalUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardIsLocalUserInfoKey');
end;

function UIKeyboardCenterBeginUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardCenterBeginUserInfoKey');
end;

function UIKeyboardCenterEndUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardCenterEndUserInfoKey');
end;

function UIKeyboardBoundsUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardBoundsUserInfoKey');
end;

function UIMenuApplication: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuApplication');
end;

function UIMenuFile: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuFile');
end;

function UIMenuEdit: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuEdit');
end;

function UIMenuView: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuView');
end;

function UIMenuWindow: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuWindow');
end;

function UIMenuHelp: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuHelp');
end;

function UIMenuAbout: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuAbout');
end;

function UIMenuPreferences: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuPreferences');
end;

function UIMenuServices: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuServices');
end;

function UIMenuHide: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuHide');
end;

function UIMenuQuit: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuQuit');
end;

function UIMenuNewScene: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuNewScene');
end;

function UIMenuOpenRecent: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuOpenRecent');
end;

function UIMenuClose: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuClose');
end;

function UIMenuPrint: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuPrint');
end;

function UIMenuDocument: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuDocument');
end;

function UIMenuUndoRedo: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuUndoRedo');
end;

function UIMenuStandardEdit: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuStandardEdit');
end;

function UIMenuFind: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuFind');
end;

function UIMenuReplace: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuReplace');
end;

function UIMenuShare: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuShare');
end;

function UIMenuTextStyle: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuTextStyle');
end;

function UIMenuSpelling: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSpelling');
end;

function UIMenuSpellingPanel: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSpellingPanel');
end;

function UIMenuSpellingOptions: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSpellingOptions');
end;

function UIMenuSubstitutions: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSubstitutions');
end;

function UIMenuSubstitutionsPanel: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSubstitutionsPanel');
end;

function UIMenuSubstitutionOptions: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSubstitutionOptions');
end;

function UIMenuTransformations: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuTransformations');
end;

function UIMenuSpeech: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSpeech');
end;

function UIMenuLookup: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuLookup');
end;

function UIMenuLearn: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuLearn');
end;

function UIMenuFormat: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuFormat');
end;

function UIMenuFont: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuFont');
end;

function UIMenuTextSize: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuTextSize');
end;

function UIMenuTextColor: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuTextColor');
end;

function UIMenuTextStylePasteboard: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuTextStylePasteboard');
end;

function UIMenuText: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuText');
end;

function UIMenuWritingDirection: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuWritingDirection');
end;

function UIMenuAlignment: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuAlignment');
end;

function UIMenuToolbar: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuToolbar');
end;

function UIMenuSidebar: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuSidebar');
end;

function UIMenuFullscreen: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuFullscreen');
end;

function UIMenuMinimizeAndZoom: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuMinimizeAndZoom');
end;

function UIMenuBringAllToFront: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuBringAllToFront');
end;

function UIMenuRoot: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMenuRoot');
end;

function UIFontDescriptorSystemDesignDefault: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorSystemDesignDefault');
end;

function UIFontDescriptorSystemDesignRounded: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorSystemDesignRounded');
end;

function UIFontDescriptorSystemDesignSerif: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorSystemDesignSerif');
end;

function UIFontDescriptorSystemDesignMonospaced: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIFontDescriptorSystemDesignMonospaced');
end;

function UIFontDescriptorFamilyAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorFamilyAttribute');
end;

function UIFontDescriptorNameAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorNameAttribute');
end;

function UIFontDescriptorFaceAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorFaceAttribute');
end;

function UIFontDescriptorSizeAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorSizeAttribute');
end;

function UIFontDescriptorVisibleNameAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorVisibleNameAttribute');
end;

function UIFontDescriptorMatrixAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorMatrixAttribute');
end;

function UIFontDescriptorCharacterSetAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIFontDescriptorCharacterSetAttribute');
end;

function UIFontDescriptorCascadeListAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorCascadeListAttribute');
end;

function UIFontDescriptorTraitsAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorTraitsAttribute');
end;

function UIFontDescriptorFixedAdvanceAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIFontDescriptorFixedAdvanceAttribute');
end;

function UIFontDescriptorFeatureSettingsAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIFontDescriptorFeatureSettingsAttribute');
end;

function UIFontDescriptorTextStyleAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontDescriptorTextStyleAttribute');
end;

function UIFontSymbolicTrait: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontSymbolicTrait');
end;

function UIFontWeightTrait: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightTrait');
end;

function UIFontWidthTrait: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWidthTrait');
end;

function UIFontSlantTrait: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontSlantTrait');
end;

function UIFontWeightUltraLight: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightUltraLight');
end;

function UIFontWeightThin: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightThin');
end;

function UIFontWeightLight: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightLight');
end;

function UIFontWeightRegular: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightRegular');
end;

function UIFontWeightMedium: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightMedium');
end;

function UIFontWeightSemibold: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightSemibold');
end;

function UIFontWeightBold: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightBold');
end;

function UIFontWeightHeavy: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightHeavy');
end;

function UIFontWeightBlack: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWeightBlack');
end;

function UIFontWidthCondensed: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWidthCondensed');
end;

function UIFontWidthStandard: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWidthStandard');
end;

function UIFontWidthExpanded: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWidthExpanded');
end;

function UIFontWidthCompressed: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontWidthCompressed');
end;

function UIFontFeatureTypeIdentifierKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontFeatureTypeIdentifierKey');
end;

function UIFontFeatureSelectorIdentifierKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontFeatureSelectorIdentifierKey');
end;

function UIFontTextStyleLargeTitle: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleLargeTitle');
end;

function UIFontTextStyleTitle1: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleTitle1');
end;

function UIFontTextStyleTitle2: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleTitle2');
end;

function UIFontTextStyleTitle3: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleTitle3');
end;

function UIFontTextStyleHeadline: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleHeadline');
end;

function UIFontTextStyleSubheadline: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleSubheadline');
end;

function UIFontTextStyleBody: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleBody');
end;

function UIFontTextStyleCallout: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleCallout');
end;

function UIFontTextStyleFootnote: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleFootnote');
end;

function UIFontTextStyleCaption1: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleCaption1');
end;

function UIFontTextStyleCaption2: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFontTextStyleCaption2');
end;

function UIDeviceOrientationDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIDeviceOrientationDidChangeNotification');
end;

function UIDeviceBatteryStateDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIDeviceBatteryStateDidChangeNotification');
end;

function UIDeviceBatteryLevelDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIDeviceBatteryLevelDidChangeNotification');
end;

function UIDeviceProximityStateDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIDeviceProximityStateDidChangeNotification');
end;

function UIEdgeInsetsZero: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIEdgeInsetsZero');
end;

function NSDirectionalEdgeInsetsZero: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSDirectionalEdgeInsetsZero');
end;

function UIOffsetZero: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIOffsetZero');
end;

function UIContentSizeCategoryUnspecified: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIContentSizeCategoryUnspecified');
end;

function UIContentSizeCategoryExtraSmall: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIContentSizeCategoryExtraSmall');
end;

function UIContentSizeCategorySmall: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIContentSizeCategorySmall');
end;

function UIContentSizeCategoryMedium: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIContentSizeCategoryMedium');
end;

function UIContentSizeCategoryLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIContentSizeCategoryLarge');
end;

function UIContentSizeCategoryExtraLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIContentSizeCategoryExtraLarge');
end;

function UIContentSizeCategoryExtraExtraLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIContentSizeCategoryExtraExtraLarge');
end;

function UIContentSizeCategoryExtraExtraExtraLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIContentSizeCategoryExtraExtraExtraLarge');
end;

function UIContentSizeCategoryAccessibilityMedium: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIContentSizeCategoryAccessibilityMedium');
end;

function UIContentSizeCategoryAccessibilityLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIContentSizeCategoryAccessibilityLarge');
end;

function UIContentSizeCategoryAccessibilityExtraLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIContentSizeCategoryAccessibilityExtraLarge');
end;

function UIContentSizeCategoryAccessibilityExtraExtraLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIContentSizeCategoryAccessibilityExtraExtraLarge');
end;

function UIContentSizeCategoryAccessibilityExtraExtraExtraLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIContentSizeCategoryAccessibilityExtraExtraExtraLarge');
end;

function UIContentSizeCategoryDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIContentSizeCategoryDidChangeNotification');
end;

function UIFocusDidUpdateNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFocusDidUpdateNotification');
end;

function UIFocusMovementDidFailNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFocusMovementDidFailNotification');
end;

function UIFocusSoundIdentifierNone: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFocusSoundIdentifierNone');
end;

function UIFocusSoundIdentifierDefault: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFocusSoundIdentifierDefault');
end;

function UIViewNoIntrinsicMetric: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIViewNoIntrinsicMetric');
end;

function UILayoutFittingCompressedSize: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UILayoutFittingCompressedSize');
end;

function UILayoutFittingExpandedSize: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UILayoutFittingExpandedSize');
end;

function UIActionPaste: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActionPaste');
end;

function UIActionPasteAndMatchStyle: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActionPasteAndMatchStyle');
end;

function UIActionPasteAndGo: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActionPasteAndGo');
end;

function UIActionPasteAndSearch: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActionPasteAndSearch');
end;

function NSTabColumnTerminatorsAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTabColumnTerminatorsAttributeName');
end;

function UITextContentTypeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeName');
end;

function UITextContentTypeNamePrefix: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeNamePrefix');
end;

function UITextContentTypeGivenName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeGivenName');
end;

function UITextContentTypeMiddleName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeMiddleName');
end;

function UITextContentTypeFamilyName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeFamilyName');
end;

function UITextContentTypeNameSuffix: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeNameSuffix');
end;

function UITextContentTypeNickname: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeNickname');
end;

function UITextContentTypeJobTitle: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeJobTitle');
end;

function UITextContentTypeOrganizationName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeOrganizationName');
end;

function UITextContentTypeLocation: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeLocation');
end;

function UITextContentTypeFullStreetAddress: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeFullStreetAddress');
end;

function UITextContentTypeStreetAddressLine1: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeStreetAddressLine1');
end;

function UITextContentTypeStreetAddressLine2: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeStreetAddressLine2');
end;

function UITextContentTypeAddressCity: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeAddressCity');
end;

function UITextContentTypeAddressState: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeAddressState');
end;

function UITextContentTypeAddressCityAndState: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeAddressCityAndState');
end;

function UITextContentTypeSublocality: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeSublocality');
end;

function UITextContentTypeCountryName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeCountryName');
end;

function UITextContentTypePostalCode: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypePostalCode');
end;

function UITextContentTypeTelephoneNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeTelephoneNumber');
end;

function UITextContentTypeEmailAddress: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeEmailAddress');
end;

function UITextContentTypeURL: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeURL');
end;

function UITextContentTypeCreditCardNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeCreditCardNumber');
end;

function UITextContentTypeUsername: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeUsername');
end;

function UITextContentTypePassword: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypePassword');
end;

function UITextContentTypeNewPassword: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeNewPassword');
end;

function UITextContentTypeOneTimeCode: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeOneTimeCode');
end;

function UITextContentTypeShipmentTrackingNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITextContentTypeShipmentTrackingNumber');
end;

function UITextContentTypeFlightNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeFlightNumber');
end;

function UITextContentTypeDateTime: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextContentTypeDateTime');
end;

function UITextInputCurrentInputModeDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITextInputCurrentInputModeDidChangeNotification');
end;

function UITextFieldTextDidBeginEditingNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITextFieldTextDidBeginEditingNotification');
end;

function UITextFieldTextDidEndEditingNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITextFieldTextDidEndEditingNotification');
end;

function UITextFieldTextDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextFieldTextDidChangeNotification');
end;

function UISceneErrorDomain: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UISceneErrorDomain');
end;

function UIApplicationInvalidInterfaceOrientationException: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationInvalidInterfaceOrientationException');
end;

function UIBackgroundTaskInvalid: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIBackgroundTaskInvalid');
end;

function UIMinimumKeepAliveTimeout: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIMinimumKeepAliveTimeout');
end;

function UIApplicationBackgroundFetchIntervalMinimum: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationBackgroundFetchIntervalMinimum');
end;

function UIApplicationBackgroundFetchIntervalNever: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationBackgroundFetchIntervalNever');
end;

function UITrackingRunLoopMode: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITrackingRunLoopMode');
end;

function UIApplicationDidEnterBackgroundNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationDidEnterBackgroundNotification');
end;

function UIApplicationWillEnterForegroundNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationWillEnterForegroundNotification');
end;

function UIApplicationDidFinishLaunchingNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationDidFinishLaunchingNotification');
end;

function UIApplicationDidBecomeActiveNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationDidBecomeActiveNotification');
end;

function UIApplicationWillResignActiveNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationWillResignActiveNotification');
end;

function UIApplicationDidReceiveMemoryWarningNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationDidReceiveMemoryWarningNotification');
end;

function UIApplicationWillTerminateNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationWillTerminateNotification');
end;

function UIApplicationSignificantTimeChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationSignificantTimeChangeNotification');
end;

function UIApplicationWillChangeStatusBarOrientationNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationWillChangeStatusBarOrientationNotification');
end;

function UIApplicationDidChangeStatusBarOrientationNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationDidChangeStatusBarOrientationNotification');
end;

function UIApplicationWillChangeStatusBarFrameNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationWillChangeStatusBarFrameNotification');
end;

function UIApplicationDidChangeStatusBarFrameNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationDidChangeStatusBarFrameNotification');
end;

function UIApplicationBackgroundRefreshStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationBackgroundRefreshStatusDidChangeNotification');
end;

function UIApplicationProtectedDataWillBecomeUnavailable: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationProtectedDataWillBecomeUnavailable');
end;

function UIApplicationProtectedDataDidBecomeAvailable: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationProtectedDataDidBecomeAvailable');
end;

function UIApplicationLaunchOptionsURLKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIApplicationLaunchOptionsURLKey');
end;

function UIApplicationLaunchOptionsSourceApplicationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsSourceApplicationKey');
end;

function UIApplicationLaunchOptionsRemoteNotificationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsRemoteNotificationKey');
end;

function UIApplicationLaunchOptionsLocalNotificationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsLocalNotificationKey');
end;

function UIApplicationLaunchOptionsAnnotationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsAnnotationKey');
end;

function UIApplicationLaunchOptionsLocationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsLocationKey');
end;

function UIApplicationLaunchOptionsNewsstandDownloadsKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsNewsstandDownloadsKey');
end;

function UIApplicationLaunchOptionsBluetoothCentralsKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsBluetoothCentralsKey');
end;

function UIApplicationLaunchOptionsBluetoothPeripheralsKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsBluetoothPeripheralsKey');
end;

function UIApplicationLaunchOptionsShortcutItemKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsShortcutItemKey');
end;

function UIApplicationLaunchOptionsEventAttributionKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsEventAttributionKey');
end;

function UIApplicationLaunchOptionsUserActivityDictionaryKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsUserActivityDictionaryKey');
end;

function UIApplicationLaunchOptionsUserActivityTypeKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsUserActivityTypeKey');
end;

function UIApplicationLaunchOptionsCloudKitShareMetadataKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationLaunchOptionsCloudKitShareMetadataKey');
end;

function UIApplicationOpenURLOptionsSourceApplicationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationOpenURLOptionsSourceApplicationKey');
end;

function UIApplicationOpenURLOptionsAnnotationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationOpenURLOptionsAnnotationKey');
end;

function UIApplicationOpenURLOptionsOpenInPlaceKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationOpenURLOptionsOpenInPlaceKey');
end;

function UIApplicationOpenURLOptionsEventAttributionKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationOpenURLOptionsEventAttributionKey');
end;

function UIApplicationUserDidTakeScreenshotNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationUserDidTakeScreenshotNotification');
end;

function UIApplicationKeyboardExtensionPointIdentifier: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationKeyboardExtensionPointIdentifier');
end;

function UIApplicationOpenURLOptionUniversalLinksOnly: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationOpenURLOptionUniversalLinksOnly');
end;

function UIApplicationOpenExternalURLOptionsEventAttributionKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIApplicationOpenExternalURLOptionsEventAttributionKey');
end;

function UISceneWillConnectNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UISceneWillConnectNotification');
end;

function UISceneDidDisconnectNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UISceneDidDisconnectNotification');
end;

function UISceneDidActivateNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UISceneDidActivateNotification');
end;

function UISceneWillDeactivateNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UISceneWillDeactivateNotification');
end;

function UISceneWillEnterForegroundNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UISceneWillEnterForegroundNotification');
end;

function UISceneDidEnterBackgroundNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UISceneDidEnterBackgroundNotification');
end;

function UIPointerLockStateDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPointerLockStateDidChangeNotification');
end;

function UIViewControllerShowDetailTargetDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIViewControllerShowDetailTargetDidChangeNotification');
end;

function UIViewControllerHierarchyInconsistencyException: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIViewControllerHierarchyInconsistencyException');
end;

function UITransitionContextFromViewControllerKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITransitionContextFromViewControllerKey');
end;

function UITransitionContextToViewControllerKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITransitionContextToViewControllerKey');
end;

function UITransitionContextFromViewKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITransitionContextFromViewKey');
end;

function UITransitionContextToViewKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITransitionContextToViewKey');
end;

function UIDocumentBrowserErrorDomain: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIDocumentBrowserErrorDomain');
end;

function NSFontAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSFontAttributeName');
end;

function NSParagraphStyleAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSParagraphStyleAttributeName');
end;

function NSForegroundColorAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSForegroundColorAttributeName');
end;

function NSBackgroundColorAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSBackgroundColorAttributeName');
end;

function NSLigatureAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSLigatureAttributeName');
end;

function NSKernAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSKernAttributeName');
end;

function NSTrackingAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTrackingAttributeName');
end;

function NSStrikethroughStyleAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSStrikethroughStyleAttributeName');
end;

function NSUnderlineStyleAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSUnderlineStyleAttributeName');
end;

function NSStrokeColorAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSStrokeColorAttributeName');
end;

function NSStrokeWidthAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSStrokeWidthAttributeName');
end;

function NSShadowAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSShadowAttributeName');
end;

function NSTextEffectAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextEffectAttributeName');
end;

function NSAttachmentAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSAttachmentAttributeName');
end;

function NSLinkAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSLinkAttributeName');
end;

function NSBaselineOffsetAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSBaselineOffsetAttributeName');
end;

function NSUnderlineColorAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSUnderlineColorAttributeName');
end;

function NSStrikethroughColorAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSStrikethroughColorAttributeName');
end;

function NSObliquenessAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSObliquenessAttributeName');
end;

function NSExpansionAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSExpansionAttributeName');
end;

function NSWritingDirectionAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSWritingDirectionAttributeName');
end;

function NSVerticalGlyphFormAttributeName: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSVerticalGlyphFormAttributeName');
end;

function NSTextEffectLetterpressStyle: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextEffectLetterpressStyle');
end;

function NSPlainTextDocumentType: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSPlainTextDocumentType');
end;

function NSRTFTextDocumentType: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSRTFTextDocumentType');
end;

function NSRTFDTextDocumentType: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSRTFDTextDocumentType');
end;

function NSHTMLTextDocumentType: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSHTMLTextDocumentType');
end;

function NSTextLayoutSectionOrientation: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextLayoutSectionOrientation');
end;

function NSTextLayoutSectionRange: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextLayoutSectionRange');
end;

function NSDocumentTypeDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSDocumentTypeDocumentAttribute');
end;

function NSCharacterEncodingDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSCharacterEncodingDocumentAttribute');
end;

function NSDefaultAttributesDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSDefaultAttributesDocumentAttribute');
end;

function NSPaperSizeDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSPaperSizeDocumentAttribute');
end;

function NSPaperMarginDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSPaperMarginDocumentAttribute');
end;

function NSViewSizeDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSViewSizeDocumentAttribute');
end;

function NSViewZoomDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSViewZoomDocumentAttribute');
end;

function NSViewModeDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSViewModeDocumentAttribute');
end;

function NSReadOnlyDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSReadOnlyDocumentAttribute');
end;

function NSBackgroundColorDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSBackgroundColorDocumentAttribute');
end;

function NSHyphenationFactorDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSHyphenationFactorDocumentAttribute');
end;

function NSDefaultTabIntervalDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'NSDefaultTabIntervalDocumentAttribute');
end;

function NSTextLayoutSectionsAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextLayoutSectionsAttribute');
end;

function NSTextScalingDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextScalingDocumentAttribute');
end;

function NSSourceTextScalingDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSSourceTextScalingDocumentAttribute');
end;

function NSCocoaVersionDocumentAttribute: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSCocoaVersionDocumentAttribute');
end;

function NSDocumentTypeDocumentOption: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSDocumentTypeDocumentOption');
end;

function NSDefaultAttributesDocumentOption: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSDefaultAttributesDocumentOption');
end;

function NSCharacterEncodingDocumentOption: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSCharacterEncodingDocumentOption');
end;

function NSTargetTextScalingDocumentOption: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTargetTextScalingDocumentOption');
end;

function NSSourceTextScalingDocumentOption: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSSourceTextScalingDocumentOption');
end;

function NSTextStorageWillProcessEditingNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'NSTextStorageWillProcessEditingNotification');
end;

function NSTextStorageDidProcessEditingNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'NSTextStorageDidProcessEditingNotification');
end;

function NSTextContentStorageUnsupportedAttributeAddedNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'NSTextContentStorageUnsupportedAttributeAddedNotification');
end;

function NSTextListMarkerBox: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerBox');
end;

function NSTextListMarkerCheck: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerCheck');
end;

function NSTextListMarkerCircle: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerCircle');
end;

function NSTextListMarkerDiamond: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerDiamond');
end;

function NSTextListMarkerDisc: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerDisc');
end;

function NSTextListMarkerHyphen: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerHyphen');
end;

function NSTextListMarkerSquare: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerSquare');
end;

function NSTextListMarkerLowercaseHexadecimal: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerLowercaseHexadecimal');
end;

function NSTextListMarkerUppercaseHexadecimal: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerUppercaseHexadecimal');
end;

function NSTextListMarkerOctal: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerOctal');
end;

function NSTextListMarkerLowercaseAlpha: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerLowercaseAlpha');
end;

function NSTextListMarkerUppercaseAlpha: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerUppercaseAlpha');
end;

function NSTextListMarkerLowercaseLatin: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerLowercaseLatin');
end;

function NSTextListMarkerUppercaseLatin: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerUppercaseLatin');
end;

function NSTextListMarkerLowercaseRoman: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerLowercaseRoman');
end;

function NSTextListMarkerUppercaseRoman: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerUppercaseRoman');
end;

function NSTextListMarkerDecimal: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'NSTextListMarkerDecimal');
end;

function UIPrintErrorDomain: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPrintErrorDomain');
end;

function UIActivityTypePostToFacebook: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypePostToFacebook');
end;

function UIActivityTypePostToTwitter: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypePostToTwitter');
end;

function UIActivityTypePostToWeibo: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypePostToWeibo');
end;

function UIActivityTypeMessage: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeMessage');
end;

function UIActivityTypeMail: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeMail');
end;

function UIActivityTypePrint: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypePrint');
end;

function UIActivityTypeCopyToPasteboard: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeCopyToPasteboard');
end;

function UIActivityTypeAssignToContact: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeAssignToContact');
end;

function UIActivityTypeSaveToCameraRoll: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeSaveToCameraRoll');
end;

function UIActivityTypeAddToReadingList: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeAddToReadingList');
end;

function UIActivityTypePostToFlickr: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypePostToFlickr');
end;

function UIActivityTypePostToVimeo: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypePostToVimeo');
end;

function UIActivityTypePostToTencentWeibo: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypePostToTencentWeibo');
end;

function UIActivityTypeAirDrop: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeAirDrop');
end;

function UIActivityTypeOpenInIBooks: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeOpenInIBooks');
end;

function UIActivityTypeMarkupAsPDF: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeMarkupAsPDF');
end;

function UIActivityTypeSharePlay: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeSharePlay');
end;

function UIActivityTypeCollaborationInviteWithLink: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityTypeCollaborationInviteWithLink');
end;

function UIActivityTypeCollaborationCopyLink: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeCollaborationCopyLink');
end;

function UIActivityTypeAddToHomeScreen: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIActivityTypeAddToHomeScreen');
end;

function UIScrollViewDecelerationRateNormal: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIScrollViewDecelerationRateNormal');
end;

function UIScrollViewDecelerationRateFast: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIScrollViewDecelerationRateFast');
end;

function UIAccessibilityTraitNone: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitNone');
end;

function UIAccessibilityTraitButton: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitButton');
end;

function UIAccessibilityTraitLink: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitLink');
end;

function UIAccessibilityTraitHeader: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitHeader');
end;

function UIAccessibilityTraitSearchField: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitSearchField');
end;

function UIAccessibilityTraitImage: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitImage');
end;

function UIAccessibilityTraitSelected: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitSelected');
end;

function UIAccessibilityTraitPlaysSound: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitPlaysSound');
end;

function UIAccessibilityTraitKeyboardKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitKeyboardKey');
end;

function UIAccessibilityTraitStaticText: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitStaticText');
end;

function UIAccessibilityTraitSummaryElement: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitSummaryElement');
end;

function UIAccessibilityTraitNotEnabled: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitNotEnabled');
end;

function UIAccessibilityTraitUpdatesFrequently: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTraitUpdatesFrequently');
end;

function UIAccessibilityTraitStartsMediaSession: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTraitStartsMediaSession');
end;

function UIAccessibilityTraitAdjustable: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitAdjustable');
end;

function UIAccessibilityTraitAllowsDirectInteraction: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTraitAllowsDirectInteraction');
end;

function UIAccessibilityTraitCausesPageTurn: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitCausesPageTurn');
end;

function UIAccessibilityTraitTabBar: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTraitTabBar');
end;

function UIAccessibilityScreenChangedNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityScreenChangedNotification');
end;

function UIAccessibilityLayoutChangedNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityLayoutChangedNotification');
end;

function UIAccessibilityAnnouncementNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityAnnouncementNotification');
end;

function UIAccessibilityPageScrolledNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityPageScrolledNotification');
end;

function UIAccessibilityPauseAssistiveTechnologyNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityPauseAssistiveTechnologyNotification');
end;

function UIAccessibilityResumeAssistiveTechnologyNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityResumeAssistiveTechnologyNotification');
end;

function UIAccessibilityAnnouncementDidFinishNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityAnnouncementDidFinishNotification');
end;

function UIAccessibilityElementFocusedNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityElementFocusedNotification');
end;

function UIAccessibilityNotificationSwitchControlIdentifier: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityNotificationSwitchControlIdentifier');
end;

function UIAccessibilityNotificationVoiceOverIdentifier: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityNotificationVoiceOverIdentifier');
end;

function UIAccessibilityTextualContextWordProcessing: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTextualContextWordProcessing');
end;

function UIAccessibilityTextualContextNarrative: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTextualContextNarrative');
end;

function UIAccessibilityTextualContextMessaging: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTextualContextMessaging');
end;

function UIAccessibilityTextualContextSpreadsheet: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTextualContextSpreadsheet');
end;

function UIAccessibilityTextualContextFileSystem: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTextualContextFileSystem');
end;

function UIAccessibilityTextualContextSourceCode: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTextualContextSourceCode');
end;

function UIAccessibilityTextualContextConsole: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTextualContextConsole');
end;

function UIAccessibilitySpeechAttributePunctuation: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySpeechAttributePunctuation');
end;

function UIAccessibilitySpeechAttributeLanguage: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySpeechAttributeLanguage');
end;

function UIAccessibilitySpeechAttributePitch: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilitySpeechAttributePitch');
end;

function UIAccessibilitySpeechAttributeQueueAnnouncement: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySpeechAttributeQueueAnnouncement');
end;

function UIAccessibilitySpeechAttributeIPANotation: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySpeechAttributeIPANotation');
end;

function UIAccessibilitySpeechAttributeSpellOut: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySpeechAttributeSpellOut');
end;

function UIAccessibilityTextAttributeHeadingLevel: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityTextAttributeHeadingLevel');
end;

function UIAccessibilityTextAttributeCustom: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTextAttributeCustom');
end;

function UIAccessibilityTextAttributeContext: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIAccessibilityTextAttributeContext');
end;

function UIGuidedAccessErrorDomain: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIGuidedAccessErrorDomain');
end;

function UIAccessibilityVoiceOverStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityVoiceOverStatusDidChangeNotification');
end;

function UIAccessibilityMonoAudioStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityMonoAudioStatusDidChangeNotification');
end;

function UIAccessibilityClosedCaptioningStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityClosedCaptioningStatusDidChangeNotification');
end;

function UIAccessibilityInvertColorsStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityInvertColorsStatusDidChangeNotification');
end;

function UIAccessibilityGuidedAccessStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityGuidedAccessStatusDidChangeNotification');
end;

function UIAccessibilityBoldTextStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityBoldTextStatusDidChangeNotification');
end;

function UIAccessibilityButtonShapesEnabledStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityButtonShapesEnabledStatusDidChangeNotification');
end;

function UIAccessibilityGrayscaleStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityGrayscaleStatusDidChangeNotification');
end;

function UIAccessibilityReduceTransparencyStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityReduceTransparencyStatusDidChangeNotification');
end;

function UIAccessibilityReduceMotionStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityReduceMotionStatusDidChangeNotification');
end;

function UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification
  : Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification');
end;

function UIAccessibilityVideoAutoplayStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityVideoAutoplayStatusDidChangeNotification');
end;

function UIAccessibilityDarkerSystemColorsStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityDarkerSystemColorsStatusDidChangeNotification');
end;

function UIAccessibilitySwitchControlStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySwitchControlStatusDidChangeNotification');
end;

function UIAccessibilitySpeakSelectionStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySpeakSelectionStatusDidChangeNotification');
end;

function UIAccessibilitySpeakScreenStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilitySpeakScreenStatusDidChangeNotification');
end;

function UIAccessibilityShakeToUndoDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityShakeToUndoDidChangeNotification');
end;

function UIAccessibilityAssistiveTouchStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityAssistiveTouchStatusDidChangeNotification');
end;

function UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification
  : Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification');
end;

function UIAccessibilityOnOffSwitchLabelsDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityOnOffSwitchLabelsDidChangeNotification');
end;

function UIAccessibilityHearingDevicePairedEarDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIAccessibilityHearingDevicePairedEarDidChangeNotification');
end;

function UIConfigurationColorTransformerGrayscale: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIConfigurationColorTransformerGrayscale');
end;

function UIConfigurationColorTransformerPreferredTint: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIConfigurationColorTransformerPreferredTint');
end;

function UIConfigurationColorTransformerMonochromeTint: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIConfigurationColorTransformerMonochromeTint');
end;

function UIActivityItemsConfigurationMetadataKeyTitle: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityItemsConfigurationMetadataKeyTitle');
end;

function UIActivityItemsConfigurationMetadataKeyMessageBody: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityItemsConfigurationMetadataKeyMessageBody');
end;

function UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata
  : Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata');
end;

function UIActivityItemsConfigurationPreviewIntentFullSize: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityItemsConfigurationPreviewIntentFullSize');
end;

function UIActivityItemsConfigurationPreviewIntentThumbnail: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityItemsConfigurationPreviewIntentThumbnail');
end;

function UIActivityItemsConfigurationInteractionShare: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityItemsConfigurationInteractionShare');
end;

function UIActivityItemsConfigurationInteractionCopy: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIActivityItemsConfigurationInteractionCopy');
end;

function UIFloatRangeZero: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFloatRangeZero');
end;

function UIFloatRangeInfinite: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIFloatRangeInfinite');
end;

function UICellAccessoryStandardDimension: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UICellAccessoryStandardDimension');
end;

function UICollectionViewLayoutAutomaticDimension: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UICollectionViewLayoutAutomaticDimension');
end;

function UICollectionViewFlowLayoutAutomaticSize: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UICollectionViewFlowLayoutAutomaticSize');
end;

function UITableViewAutomaticDimension: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITableViewAutomaticDimension');
end;

function UITableViewSelectionDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITableViewSelectionDidChangeNotification');
end;

function UIDocumentStateChangedNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIDocumentStateChangedNotification');
end;

function UIWindowSceneSessionRoleApplication: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowSceneSessionRoleApplication');
end;

function UIWindowSceneSessionRoleExternalDisplayNonInteractive: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIWindowSceneSessionRoleExternalDisplayNonInteractive');
end;

function UIWindowSceneSessionRoleExternalDisplay: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIWindowSceneSessionRoleExternalDisplay');
end;

function UINavigationControllerHideShowBarDuration: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UINavigationControllerHideShowBarDuration');
end;

function UIImagePickerControllerMediaType: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerMediaType');
end;

function UIImagePickerControllerOriginalImage: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerOriginalImage');
end;

function UIImagePickerControllerEditedImage: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerEditedImage');
end;

function UIImagePickerControllerCropRect: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerCropRect');
end;

function UIImagePickerControllerMediaURL: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerMediaURL');
end;

function UIImagePickerControllerReferenceURL: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerReferenceURL');
end;

function UIImagePickerControllerMediaMetadata: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerMediaMetadata');
end;

function UIImagePickerControllerLivePhoto: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerLivePhoto');
end;

function UIImagePickerControllerPHAsset: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerPHAsset');
end;

function UIImagePickerControllerImageURL: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIImagePickerControllerImageURL');
end;

function UIListSeparatorAutomaticInsets: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIListSeparatorAutomaticInsets');
end;

function UIListContentImageStandardDimension: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIListContentImageStandardDimension');
end;

function UILargeContentViewerInteractionEnabledStatusDidChangeNotification
  : Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UILargeContentViewerInteractionEnabledStatusDidChangeNotification');
end;

function UIMenuControllerWillShowMenuNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIMenuControllerWillShowMenuNotification');
end;

function UIMenuControllerDidShowMenuNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIMenuControllerDidShowMenuNotification');
end;

function UIMenuControllerWillHideMenuNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIMenuControllerWillHideMenuNotification');
end;

function UIMenuControllerDidHideMenuNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIMenuControllerDidHideMenuNotification');
end;

function UIMenuControllerMenuFrameDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIMenuControllerMenuFrameDidChangeNotification');
end;

function UINibExternalObjects: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UINibExternalObjects');
end;

function UIPageViewControllerOptionSpineLocationKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPageViewControllerOptionSpineLocationKey');
end;

function UIPageViewControllerOptionInterPageSpacingKey: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPageViewControllerOptionInterPageSpacingKey');
end;

function UIPasteboardNameGeneral: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardNameGeneral');
end;

function UIPasteboardDetectionPatternProbableWebURL: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternProbableWebURL');
end;

function UIPasteboardDetectionPatternProbableWebSearch: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternProbableWebSearch');
end;

function UIPasteboardDetectionPatternNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardDetectionPatternNumber');
end;

function UIPasteboardDetectionPatternLink: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardDetectionPatternLink');
end;

function UIPasteboardDetectionPatternPhoneNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternPhoneNumber');
end;

function UIPasteboardDetectionPatternEmailAddress: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternEmailAddress');
end;

function UIPasteboardDetectionPatternPostalAddress: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternPostalAddress');
end;

function UIPasteboardDetectionPatternCalendarEvent: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternCalendarEvent');
end;

function UIPasteboardDetectionPatternShipmentTrackingNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternShipmentTrackingNumber');
end;

function UIPasteboardDetectionPatternFlightNumber: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternFlightNumber');
end;

function UIPasteboardDetectionPatternMoneyAmount: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPasteboardDetectionPatternMoneyAmount');
end;

function UIPasteboardOptionExpirationDate: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardOptionExpirationDate');
end;

function UIPasteboardOptionLocalOnly: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardOptionLocalOnly');
end;

function UIPasteboardChangedNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardChangedNotification');
end;

function UIPasteboardRemovedNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardRemovedNotification');
end;

function UIPasteboardTypeListString: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardTypeListString');
end;

function UIPasteboardTypeListURL: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardTypeListURL');
end;

function UIPasteboardTypeListImage: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardTypeListImage');
end;

function UIPasteboardTypeListColor: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPasteboardTypeListColor');
end;

function UIScreenDidConnectNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIScreenDidConnectNotification');
end;

function UIScreenDidDisconnectNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIScreenDidDisconnectNotification');
end;

function UIScreenModeDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIScreenModeDidChangeNotification');
end;

function UIScreenBrightnessDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIScreenBrightnessDidChangeNotification');
end;

function UIScreenCapturedDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIScreenCapturedDidChangeNotification');
end;

function UIScreenReferenceDisplayModeStatusDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIScreenReferenceDisplayModeStatusDidChangeNotification');
end;

function UISplitViewControllerAutomaticDimension: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UISplitViewControllerAutomaticDimension');
end;

function UITextViewTextDidBeginEditingNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITextViewTextDidBeginEditingNotification');
end;

function UITextViewTextDidChangeNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UITextViewTextDidChangeNotification');
end;

function UITextViewTextDidEndEditingNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UITextViewTextDidEndEditingNotification');
end;

function UIWindowLevelNormal: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowLevelNormal');
end;

function UIWindowLevelAlert: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowLevelAlert');
end;

function UIWindowLevelStatusBar: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowLevelStatusBar');
end;

function UIWindowDidBecomeVisibleNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowDidBecomeVisibleNotification');
end;

function UIWindowDidBecomeHiddenNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowDidBecomeHiddenNotification');
end;

function UIWindowDidBecomeKeyNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowDidBecomeKeyNotification');
end;

function UIWindowDidResignKeyNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIWindowDidResignKeyNotification');
end;

function UIKeyboardWillShowNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIKeyboardWillShowNotification');
end;

function UIKeyboardDidShowNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIKeyboardDidShowNotification');
end;

function UIKeyboardWillHideNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIKeyboardWillHideNotification');
end;

function UIKeyboardDidHideNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIKeyboardDidHideNotification');
end;

function UIKeyboardWillChangeFrameNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIKeyboardWillChangeFrameNotification');
end;

function UIKeyboardDidChangeFrameNotification: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIKeyboardDidChangeFrameNotification');
end;

function UISheetPresentationControllerDetentIdentifierMedium: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UISheetPresentationControllerDetentIdentifierMedium');
end;

function UISheetPresentationControllerDetentIdentifierLarge: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UISheetPresentationControllerDetentIdentifierLarge');
end;

function UISheetPresentationControllerDetentInactive: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UISheetPresentationControllerDetentInactive');
end;

function UISheetPresentationControllerAutomaticDimension: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UISheetPresentationControllerAutomaticDimension');
end;

function UIPointerAccessoryPositionTop: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPointerAccessoryPositionTop');
end;

function UIPointerAccessoryPositionTopRight: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPointerAccessoryPositionTopRight');
end;

function UIPointerAccessoryPositionRight: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPointerAccessoryPositionRight');
end;

function UIPointerAccessoryPositionBottomRight: Pointer;
begin
  Result := CocoaPointerConst(libUIKit,
    'UIPointerAccessoryPositionBottomRight');
end;

function UIPointerAccessoryPositionBottom: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPointerAccessoryPositionBottom');
end;

function UIPointerAccessoryPositionBottomLeft: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPointerAccessoryPositionBottomLeft');
end;

function UIPointerAccessoryPositionLeft: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPointerAccessoryPositionLeft');
end;

function UIPointerAccessoryPositionTopLeft: Pointer;
begin
  Result := CocoaPointerConst(libUIKit, 'UIPointerAccessoryPositionTopLeft');
end;

{$IF defined(IOS) and NOT defined(CPUARM)}

initialization

UIKitModule := dlopen(MarshaledAString(libUIKit), RTLD_LAZY);

finalization

dlclose(UIKitModule);
{$ENDIF IOS}

end.
